/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContentAnalysisAvailableFiltersResponseInfo;
import org.openapitools.client.model.ContentAnalysisCategoriesResponseInfo;
import org.openapitools.client.model.ContentAnalysisCategoryTrendsLiveRequestInfo;
import org.openapitools.client.model.ContentAnalysisCategoryTrendsLiveResponseInfo;
import org.openapitools.client.model.ContentAnalysisIdListRequestInfo;
import org.openapitools.client.model.ContentAnalysisIdListResponseInfo;
import org.openapitools.client.model.ContentAnalysisLanguagesResponseInfo;
import org.openapitools.client.model.ContentAnalysisLocationsResponseInfo;
import org.openapitools.client.model.ContentAnalysisPhraseTrendsLiveRequestInfo;
import org.openapitools.client.model.ContentAnalysisPhraseTrendsLiveResponseInfo;
import org.openapitools.client.model.ContentAnalysisRatingDistributionLiveRequestInfo;
import org.openapitools.client.model.ContentAnalysisRatingDistributionLiveResponseInfo;
import org.openapitools.client.model.ContentAnalysisSearchLiveRequestInfo;
import org.openapitools.client.model.ContentAnalysisSearchLiveResponseInfo;
import org.openapitools.client.model.ContentAnalysisSentimentAnalysisLiveRequestInfo;
import org.openapitools.client.model.ContentAnalysisSentimentAnalysisLiveResponseInfo;
import org.openapitools.client.model.ContentAnalysisSummaryLiveRequestInfo;
import org.openapitools.client.model.ContentAnalysisSummaryLiveResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentAnalysisApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentAnalysisApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentAnalysisApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for categoryTrendsLive
     * @param contentAnalysisCategoryTrendsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryTrendsLiveCall(List<ContentAnalysisCategoryTrendsLiveRequestInfo> contentAnalysisCategoryTrendsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentAnalysisCategoryTrendsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/category_trends/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categoryTrendsLiveValidateBeforeCall(List<ContentAnalysisCategoryTrendsLiveRequestInfo> contentAnalysisCategoryTrendsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return categoryTrendsLiveCall(contentAnalysisCategoryTrendsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with data on all citations in the target category for the indicated date range. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/category_trends/live/?bash&#39;
     * @param contentAnalysisCategoryTrendsLiveRequestInfo  (optional)
     * @return ContentAnalysisCategoryTrendsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisCategoryTrendsLiveResponseInfo categoryTrendsLive(List<ContentAnalysisCategoryTrendsLiveRequestInfo> contentAnalysisCategoryTrendsLiveRequestInfo) throws ApiException {
        ApiResponse<ContentAnalysisCategoryTrendsLiveResponseInfo> localVarResp = categoryTrendsLiveWithHttpInfo(contentAnalysisCategoryTrendsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with data on all citations in the target category for the indicated date range. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/category_trends/live/?bash&#39;
     * @param contentAnalysisCategoryTrendsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentAnalysisCategoryTrendsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisCategoryTrendsLiveResponseInfo> categoryTrendsLiveWithHttpInfo(List<ContentAnalysisCategoryTrendsLiveRequestInfo> contentAnalysisCategoryTrendsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = categoryTrendsLiveValidateBeforeCall(contentAnalysisCategoryTrendsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentAnalysisCategoryTrendsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with data on all citations in the target category for the indicated date range. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/category_trends/live/?bash&#39;
     * @param contentAnalysisCategoryTrendsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categoryTrendsLiveAsync(List<ContentAnalysisCategoryTrendsLiveRequestInfo> contentAnalysisCategoryTrendsLiveRequestInfo, final ApiCallback<ContentAnalysisCategoryTrendsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = categoryTrendsLiveValidateBeforeCall(contentAnalysisCategoryTrendsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisCategoryTrendsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentAnalysisAvailableFilters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisAvailableFiltersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/available_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentAnalysisAvailableFiltersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contentAnalysisAvailableFiltersCall(_callback);

    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Content Analysis API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/filters/?bash&#39;
     * @return ContentAnalysisAvailableFiltersResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisAvailableFiltersResponseInfo contentAnalysisAvailableFilters() throws ApiException {
        ApiResponse<ContentAnalysisAvailableFiltersResponseInfo> localVarResp = contentAnalysisAvailableFiltersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Content Analysis API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/filters/?bash&#39;
     * @return ApiResponse&lt;ContentAnalysisAvailableFiltersResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisAvailableFiltersResponseInfo> contentAnalysisAvailableFiltersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contentAnalysisAvailableFiltersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContentAnalysisAvailableFiltersResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Here you will find all the necessary information about filters that can be used with Content Analysis API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/filters/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisAvailableFiltersAsync(final ApiCallback<ContentAnalysisAvailableFiltersResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentAnalysisAvailableFiltersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisAvailableFiltersResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentAnalysisCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentAnalysisCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contentAnalysisCategoriesCall(_callback);

    }

    /**
     * 
     * We use Google product and service categories. This endpoint will provide you with the full list of available categories. You can also download the CSV file by this link. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/categories/?bash&#39;
     * @return ContentAnalysisCategoriesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisCategoriesResponseInfo contentAnalysisCategories() throws ApiException {
        ApiResponse<ContentAnalysisCategoriesResponseInfo> localVarResp = contentAnalysisCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * We use Google product and service categories. This endpoint will provide you with the full list of available categories. You can also download the CSV file by this link. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/categories/?bash&#39;
     * @return ApiResponse&lt;ContentAnalysisCategoriesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisCategoriesResponseInfo> contentAnalysisCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contentAnalysisCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContentAnalysisCategoriesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * We use Google product and service categories. This endpoint will provide you with the full list of available categories. You can also download the CSV file by this link. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/categories/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisCategoriesAsync(final ApiCallback<ContentAnalysisCategoriesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentAnalysisCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisCategoriesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentAnalysisIdList
     * @param contentAnalysisIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisIdListCall(List<ContentAnalysisIdListRequestInfo> contentAnalysisIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentAnalysisIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentAnalysisIdListValidateBeforeCall(List<ContentAnalysisIdListRequestInfo> contentAnalysisIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return contentAnalysisIdListCall(contentAnalysisIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Content Analysis tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/id_list/?bash&#39;
     * @param contentAnalysisIdListRequestInfo  (optional)
     * @return ContentAnalysisIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisIdListResponseInfo contentAnalysisIdList(List<ContentAnalysisIdListRequestInfo> contentAnalysisIdListRequestInfo) throws ApiException {
        ApiResponse<ContentAnalysisIdListResponseInfo> localVarResp = contentAnalysisIdListWithHttpInfo(contentAnalysisIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Content Analysis tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/id_list/?bash&#39;
     * @param contentAnalysisIdListRequestInfo  (optional)
     * @return ApiResponse&lt;ContentAnalysisIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisIdListResponseInfo> contentAnalysisIdListWithHttpInfo(List<ContentAnalysisIdListRequestInfo> contentAnalysisIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = contentAnalysisIdListValidateBeforeCall(contentAnalysisIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentAnalysisIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Content Analysis tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/id_list/?bash&#39;
     * @param contentAnalysisIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisIdListAsync(List<ContentAnalysisIdListRequestInfo> contentAnalysisIdListRequestInfo, final ApiCallback<ContentAnalysisIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentAnalysisIdListValidateBeforeCall(contentAnalysisIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentAnalysisLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentAnalysisLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contentAnalysisLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/languages/?bash&#39;
     * @return ContentAnalysisLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisLanguagesResponseInfo contentAnalysisLanguages() throws ApiException {
        ApiResponse<ContentAnalysisLanguagesResponseInfo> localVarResp = contentAnalysisLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/languages/?bash&#39;
     * @return ApiResponse&lt;ContentAnalysisLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisLanguagesResponseInfo> contentAnalysisLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contentAnalysisLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContentAnalysisLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisLanguagesAsync(final ApiCallback<ContentAnalysisLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentAnalysisLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentAnalysisLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentAnalysisLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contentAnalysisLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/locations/?bash&#39;
     * @return ContentAnalysisLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisLocationsResponseInfo contentAnalysisLocations() throws ApiException {
        ApiResponse<ContentAnalysisLocationsResponseInfo> localVarResp = contentAnalysisLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/locations/?bash&#39;
     * @return ApiResponse&lt;ContentAnalysisLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisLocationsResponseInfo> contentAnalysisLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contentAnalysisLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContentAnalysisLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisLocationsAsync(final ApiCallback<ContentAnalysisLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentAnalysisLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentAnalysisSummaryLive
     * @param contentAnalysisSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisSummaryLiveCall(List<ContentAnalysisSummaryLiveRequestInfo> contentAnalysisSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentAnalysisSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentAnalysisSummaryLiveValidateBeforeCall(List<ContentAnalysisSummaryLiveRequestInfo> contentAnalysisSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return contentAnalysisSummaryLiveCall(contentAnalysisSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with an overview of citation data available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/summary/live/?bash&#39;
     * @param contentAnalysisSummaryLiveRequestInfo  (optional)
     * @return ContentAnalysisSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisSummaryLiveResponseInfo contentAnalysisSummaryLive(List<ContentAnalysisSummaryLiveRequestInfo> contentAnalysisSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<ContentAnalysisSummaryLiveResponseInfo> localVarResp = contentAnalysisSummaryLiveWithHttpInfo(contentAnalysisSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with an overview of citation data available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/summary/live/?bash&#39;
     * @param contentAnalysisSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentAnalysisSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisSummaryLiveResponseInfo> contentAnalysisSummaryLiveWithHttpInfo(List<ContentAnalysisSummaryLiveRequestInfo> contentAnalysisSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = contentAnalysisSummaryLiveValidateBeforeCall(contentAnalysisSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentAnalysisSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with an overview of citation data available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/summary/live/?bash&#39;
     * @param contentAnalysisSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentAnalysisSummaryLiveAsync(List<ContentAnalysisSummaryLiveRequestInfo> contentAnalysisSummaryLiveRequestInfo, final ApiCallback<ContentAnalysisSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentAnalysisSummaryLiveValidateBeforeCall(contentAnalysisSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for phraseTrendsLive
     * @param contentAnalysisPhraseTrendsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phraseTrendsLiveCall(List<ContentAnalysisPhraseTrendsLiveRequestInfo> contentAnalysisPhraseTrendsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentAnalysisPhraseTrendsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/phrase_trends/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call phraseTrendsLiveValidateBeforeCall(List<ContentAnalysisPhraseTrendsLiveRequestInfo> contentAnalysisPhraseTrendsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return phraseTrendsLiveCall(contentAnalysisPhraseTrendsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with data on all citations of the target keyword for the indicated date range. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/phrase_trends/live/?bash&#39;
     * @param contentAnalysisPhraseTrendsLiveRequestInfo  (optional)
     * @return ContentAnalysisPhraseTrendsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisPhraseTrendsLiveResponseInfo phraseTrendsLive(List<ContentAnalysisPhraseTrendsLiveRequestInfo> contentAnalysisPhraseTrendsLiveRequestInfo) throws ApiException {
        ApiResponse<ContentAnalysisPhraseTrendsLiveResponseInfo> localVarResp = phraseTrendsLiveWithHttpInfo(contentAnalysisPhraseTrendsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with data on all citations of the target keyword for the indicated date range. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/phrase_trends/live/?bash&#39;
     * @param contentAnalysisPhraseTrendsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentAnalysisPhraseTrendsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisPhraseTrendsLiveResponseInfo> phraseTrendsLiveWithHttpInfo(List<ContentAnalysisPhraseTrendsLiveRequestInfo> contentAnalysisPhraseTrendsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = phraseTrendsLiveValidateBeforeCall(contentAnalysisPhraseTrendsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentAnalysisPhraseTrendsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with data on all citations of the target keyword for the indicated date range. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/phrase_trends/live/?bash&#39;
     * @param contentAnalysisPhraseTrendsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call phraseTrendsLiveAsync(List<ContentAnalysisPhraseTrendsLiveRequestInfo> contentAnalysisPhraseTrendsLiveRequestInfo, final ApiCallback<ContentAnalysisPhraseTrendsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = phraseTrendsLiveValidateBeforeCall(contentAnalysisPhraseTrendsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisPhraseTrendsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for ratingDistributionLive
     * @param contentAnalysisRatingDistributionLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingDistributionLiveCall(List<ContentAnalysisRatingDistributionLiveRequestInfo> contentAnalysisRatingDistributionLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentAnalysisRatingDistributionLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/rating_distribution/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ratingDistributionLiveValidateBeforeCall(List<ContentAnalysisRatingDistributionLiveRequestInfo> contentAnalysisRatingDistributionLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return ratingDistributionLiveCall(contentAnalysisRatingDistributionLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with rating distribution data for the keyword and other parameters specified in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/rating_distribution/live/?bash&#39;
     * @param contentAnalysisRatingDistributionLiveRequestInfo  (optional)
     * @return ContentAnalysisRatingDistributionLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisRatingDistributionLiveResponseInfo ratingDistributionLive(List<ContentAnalysisRatingDistributionLiveRequestInfo> contentAnalysisRatingDistributionLiveRequestInfo) throws ApiException {
        ApiResponse<ContentAnalysisRatingDistributionLiveResponseInfo> localVarResp = ratingDistributionLiveWithHttpInfo(contentAnalysisRatingDistributionLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with rating distribution data for the keyword and other parameters specified in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/rating_distribution/live/?bash&#39;
     * @param contentAnalysisRatingDistributionLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentAnalysisRatingDistributionLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisRatingDistributionLiveResponseInfo> ratingDistributionLiveWithHttpInfo(List<ContentAnalysisRatingDistributionLiveRequestInfo> contentAnalysisRatingDistributionLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = ratingDistributionLiveValidateBeforeCall(contentAnalysisRatingDistributionLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentAnalysisRatingDistributionLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with rating distribution data for the keyword and other parameters specified in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/rating_distribution/live/?bash&#39;
     * @param contentAnalysisRatingDistributionLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call ratingDistributionLiveAsync(List<ContentAnalysisRatingDistributionLiveRequestInfo> contentAnalysisRatingDistributionLiveRequestInfo, final ApiCallback<ContentAnalysisRatingDistributionLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = ratingDistributionLiveValidateBeforeCall(contentAnalysisRatingDistributionLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisRatingDistributionLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchLive
     * @param contentAnalysisSearchLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchLiveCall(List<ContentAnalysisSearchLiveRequestInfo> contentAnalysisSearchLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentAnalysisSearchLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/search/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchLiveValidateBeforeCall(List<ContentAnalysisSearchLiveRequestInfo> contentAnalysisSearchLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return searchLiveCall(contentAnalysisSearchLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with detailed citation data available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/search/live/?bash&#39;
     * @param contentAnalysisSearchLiveRequestInfo  (optional)
     * @return ContentAnalysisSearchLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisSearchLiveResponseInfo searchLive(List<ContentAnalysisSearchLiveRequestInfo> contentAnalysisSearchLiveRequestInfo) throws ApiException {
        ApiResponse<ContentAnalysisSearchLiveResponseInfo> localVarResp = searchLiveWithHttpInfo(contentAnalysisSearchLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with detailed citation data available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/search/live/?bash&#39;
     * @param contentAnalysisSearchLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentAnalysisSearchLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisSearchLiveResponseInfo> searchLiveWithHttpInfo(List<ContentAnalysisSearchLiveRequestInfo> contentAnalysisSearchLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = searchLiveValidateBeforeCall(contentAnalysisSearchLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentAnalysisSearchLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with detailed citation data available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/search/live/?bash&#39;
     * @param contentAnalysisSearchLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchLiveAsync(List<ContentAnalysisSearchLiveRequestInfo> contentAnalysisSearchLiveRequestInfo, final ApiCallback<ContentAnalysisSearchLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchLiveValidateBeforeCall(contentAnalysisSearchLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisSearchLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sentimentAnalysisLive
     * @param contentAnalysisSentimentAnalysisLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentAnalysisLiveCall(List<ContentAnalysisSentimentAnalysisLiveRequestInfo> contentAnalysisSentimentAnalysisLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentAnalysisSentimentAnalysisLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_analysis/sentiment_analysis/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sentimentAnalysisLiveValidateBeforeCall(List<ContentAnalysisSentimentAnalysisLiveRequestInfo> contentAnalysisSentimentAnalysisLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return sentimentAnalysisLiveCall(contentAnalysisSentimentAnalysisLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with sentiment analysis data for the citations available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/sentiment_analysis/live/?bash&#39;
     * @param contentAnalysisSentimentAnalysisLiveRequestInfo  (optional)
     * @return ContentAnalysisSentimentAnalysisLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentAnalysisSentimentAnalysisLiveResponseInfo sentimentAnalysisLive(List<ContentAnalysisSentimentAnalysisLiveRequestInfo> contentAnalysisSentimentAnalysisLiveRequestInfo) throws ApiException {
        ApiResponse<ContentAnalysisSentimentAnalysisLiveResponseInfo> localVarResp = sentimentAnalysisLiveWithHttpInfo(contentAnalysisSentimentAnalysisLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with sentiment analysis data for the citations available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/sentiment_analysis/live/?bash&#39;
     * @param contentAnalysisSentimentAnalysisLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentAnalysisSentimentAnalysisLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentAnalysisSentimentAnalysisLiveResponseInfo> sentimentAnalysisLiveWithHttpInfo(List<ContentAnalysisSentimentAnalysisLiveRequestInfo> contentAnalysisSentimentAnalysisLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = sentimentAnalysisLiveValidateBeforeCall(contentAnalysisSentimentAnalysisLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentAnalysisSentimentAnalysisLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with sentiment analysis data for the citations available for the target keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/content_analysis/sentiment_analysis/live/?bash&#39;
     * @param contentAnalysisSentimentAnalysisLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentAnalysisLiveAsync(List<ContentAnalysisSentimentAnalysisLiveRequestInfo> contentAnalysisSentimentAnalysisLiveRequestInfo, final ApiCallback<ContentAnalysisSentimentAnalysisLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = sentimentAnalysisLiveValidateBeforeCall(contentAnalysisSentimentAnalysisLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentAnalysisSentimentAnalysisLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
