/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.MerchantAmazonAsinTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantAmazonAsinTaskGetHtmlResponseInfo;
import org.openapitools.client.model.MerchantAmazonAsinTaskPostRequestInfo;
import org.openapitools.client.model.MerchantAmazonAsinTaskPostResponseInfo;
import org.openapitools.client.model.MerchantAmazonAsinTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantAmazonLanguagesResponseInfo;
import org.openapitools.client.model.MerchantAmazonLocationsCountryResponseInfo;
import org.openapitools.client.model.MerchantAmazonLocationsResponseInfo;
import org.openapitools.client.model.MerchantAmazonProductsTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantAmazonProductsTaskGetHtmlResponseInfo;
import org.openapitools.client.model.MerchantAmazonProductsTaskPostRequestInfo;
import org.openapitools.client.model.MerchantAmazonProductsTaskPostResponseInfo;
import org.openapitools.client.model.MerchantAmazonProductsTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantAmazonReviewsTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantAmazonReviewsTaskGetHtmlResponseInfo;
import org.openapitools.client.model.MerchantAmazonReviewsTaskPostRequestInfo;
import org.openapitools.client.model.MerchantAmazonReviewsTaskPostResponseInfo;
import org.openapitools.client.model.MerchantAmazonReviewsTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantAmazonSellersTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantAmazonSellersTaskGetHtmlResponseInfo;
import org.openapitools.client.model.MerchantAmazonSellersTaskPostRequestInfo;
import org.openapitools.client.model.MerchantAmazonSellersTaskPostResponseInfo;
import org.openapitools.client.model.MerchantAmazonSellersTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantErrorsRequestInfo;
import org.openapitools.client.model.MerchantErrorsResponseInfo;
import org.openapitools.client.model.MerchantGoogleLanguagesResponseInfo;
import org.openapitools.client.model.MerchantGoogleLocationsCountryResponseInfo;
import org.openapitools.client.model.MerchantGoogleLocationsResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductInfoTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductInfoTaskPostRequestInfo;
import org.openapitools.client.model.MerchantGoogleProductInfoTaskPostResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductInfoTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductSpecTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductSpecTaskGetHtmlResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductSpecTaskPostRequestInfo;
import org.openapitools.client.model.MerchantGoogleProductSpecTaskPostResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductSpecTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductsTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductsTaskGetHtmlResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductsTaskPostResponseInfo;
import org.openapitools.client.model.MerchantGoogleProductsTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantGoogleSellersAdUrlResponseInfo;
import org.openapitools.client.model.MerchantGoogleSellersTaskGetAdvancedResponseInfo;
import org.openapitools.client.model.MerchantGoogleSellersTaskGetHtmlResponseInfo;
import org.openapitools.client.model.MerchantGoogleSellersTaskPostRequestInfo;
import org.openapitools.client.model.MerchantGoogleSellersTaskPostResponseInfo;
import org.openapitools.client.model.MerchantGoogleSellersTasksReadyResponseInfo;
import org.openapitools.client.model.MerchantIdListRequestInfo;
import org.openapitools.client.model.MerchantIdListResponseInfo;
import org.openapitools.client.model.MerchantTaskRequestInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MerchantApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MerchantApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MerchantApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for amazonAsinTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/asin/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonAsinTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonAsinTaskGetAdvanced(Async)");
        }

        return amazonAsinTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * This endpoint will provide you with information about the product and ASINs of all its modifications listed on Amazon. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantAmazonAsinTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonAsinTaskGetAdvancedResponseInfo amazonAsinTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantAmazonAsinTaskGetAdvancedResponseInfo> localVarResp = amazonAsinTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with information about the product and ASINs of all its modifications listed on Amazon. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonAsinTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonAsinTaskGetAdvancedResponseInfo> amazonAsinTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonAsinTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with information about the product and ASINs of all its modifications listed on Amazon. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTaskGetAdvancedAsync(String id, final ApiCallback<MerchantAmazonAsinTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonAsinTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonAsinTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/asin/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonAsinTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonAsinTaskGetHtml(Async)");
        }

        return amazonAsinTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return MerchantAmazonAsinTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonAsinTaskGetHtmlResponseInfo amazonAsinTaskGetHtml(String id) throws ApiException {
        ApiResponse<MerchantAmazonAsinTaskGetHtmlResponseInfo> localVarResp = amazonAsinTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonAsinTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonAsinTaskGetHtmlResponseInfo> amazonAsinTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonAsinTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTaskGetHtmlAsync(String id, final ApiCallback<MerchantAmazonAsinTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonAsinTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonAsinTaskPost
     * @param merchantAmazonAsinTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTaskPostCall(List<MerchantAmazonAsinTaskPostRequestInfo> merchantAmazonAsinTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantAmazonAsinTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/asin/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonAsinTaskPostValidateBeforeCall(List<MerchantAmazonAsinTaskPostRequestInfo> merchantAmazonAsinTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return amazonAsinTaskPostCall(merchantAmazonAsinTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a full list of ASINs assigned to different modifications of a product. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_post/?bash&#39;
     * @param merchantAmazonAsinTaskPostRequestInfo  (optional)
     * @return MerchantAmazonAsinTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonAsinTaskPostResponseInfo amazonAsinTaskPost(List<MerchantAmazonAsinTaskPostRequestInfo> merchantAmazonAsinTaskPostRequestInfo) throws ApiException {
        ApiResponse<MerchantAmazonAsinTaskPostResponseInfo> localVarResp = amazonAsinTaskPostWithHttpInfo(merchantAmazonAsinTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a full list of ASINs assigned to different modifications of a product. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_post/?bash&#39;
     * @param merchantAmazonAsinTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantAmazonAsinTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonAsinTaskPostResponseInfo> amazonAsinTaskPostWithHttpInfo(List<MerchantAmazonAsinTaskPostRequestInfo> merchantAmazonAsinTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = amazonAsinTaskPostValidateBeforeCall(merchantAmazonAsinTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a full list of ASINs assigned to different modifications of a product. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/task_post/?bash&#39;
     * @param merchantAmazonAsinTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTaskPostAsync(List<MerchantAmazonAsinTaskPostRequestInfo> merchantAmazonAsinTaskPostRequestInfo, final ApiCallback<MerchantAmazonAsinTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonAsinTaskPostValidateBeforeCall(merchantAmazonAsinTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonAsinTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/asin/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonAsinTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return amazonAsinTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/tasks_ready/?bash&#39;
     * @return MerchantAmazonAsinTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonAsinTasksReadyResponseInfo amazonAsinTasksReady() throws ApiException {
        ApiResponse<MerchantAmazonAsinTasksReadyResponseInfo> localVarResp = amazonAsinTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantAmazonAsinTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonAsinTasksReadyResponseInfo> amazonAsinTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = amazonAsinTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/asin/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonAsinTasksReadyAsync(final ApiCallback<MerchantAmazonAsinTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonAsinTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonAsinTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonProductsTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/products/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonProductsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonProductsTaskGetAdvanced(Async)");
        }

        return amazonProductsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantAmazonProductsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonProductsTaskGetAdvancedResponseInfo amazonProductsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantAmazonProductsTaskGetAdvancedResponseInfo> localVarResp = amazonProductsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonProductsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonProductsTaskGetAdvancedResponseInfo> amazonProductsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonProductsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTaskGetAdvancedAsync(String id, final ApiCallback<MerchantAmazonProductsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonProductsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonProductsTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/products/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonProductsTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonProductsTaskGetHtml(Async)");
        }

        return amazonProductsTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return MerchantAmazonProductsTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonProductsTaskGetHtmlResponseInfo amazonProductsTaskGetHtml(String id) throws ApiException {
        ApiResponse<MerchantAmazonProductsTaskGetHtmlResponseInfo> localVarResp = amazonProductsTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonProductsTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonProductsTaskGetHtmlResponseInfo> amazonProductsTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonProductsTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTaskGetHtmlAsync(String id, final ApiCallback<MerchantAmazonProductsTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonProductsTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonProductsTaskPost
     * @param merchantAmazonProductsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTaskPostCall(List<MerchantAmazonProductsTaskPostRequestInfo> merchantAmazonProductsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantAmazonProductsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/products/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonProductsTaskPostValidateBeforeCall(List<MerchantAmazonProductsTaskPostRequestInfo> merchantAmazonProductsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return amazonProductsTaskPostCall(merchantAmazonProductsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides results from Amazon product listings according to the specified keyword (product name), location, and language parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_post/?bash&#39;
     * @param merchantAmazonProductsTaskPostRequestInfo  (optional)
     * @return MerchantAmazonProductsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonProductsTaskPostResponseInfo amazonProductsTaskPost(List<MerchantAmazonProductsTaskPostRequestInfo> merchantAmazonProductsTaskPostRequestInfo) throws ApiException {
        ApiResponse<MerchantAmazonProductsTaskPostResponseInfo> localVarResp = amazonProductsTaskPostWithHttpInfo(merchantAmazonProductsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides results from Amazon product listings according to the specified keyword (product name), location, and language parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_post/?bash&#39;
     * @param merchantAmazonProductsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantAmazonProductsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonProductsTaskPostResponseInfo> amazonProductsTaskPostWithHttpInfo(List<MerchantAmazonProductsTaskPostRequestInfo> merchantAmazonProductsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = amazonProductsTaskPostValidateBeforeCall(merchantAmazonProductsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides results from Amazon product listings according to the specified keyword (product name), location, and language parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/task_post/?bash&#39;
     * @param merchantAmazonProductsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTaskPostAsync(List<MerchantAmazonProductsTaskPostRequestInfo> merchantAmazonProductsTaskPostRequestInfo, final ApiCallback<MerchantAmazonProductsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonProductsTaskPostValidateBeforeCall(merchantAmazonProductsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonProductsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/products/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonProductsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return amazonProductsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/tasks_ready/?bash&#39;
     * @return MerchantAmazonProductsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonProductsTasksReadyResponseInfo amazonProductsTasksReady() throws ApiException {
        ApiResponse<MerchantAmazonProductsTasksReadyResponseInfo> localVarResp = amazonProductsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantAmazonProductsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonProductsTasksReadyResponseInfo> amazonProductsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = amazonProductsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/products/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonProductsTasksReadyAsync(final ApiCallback<MerchantAmazonProductsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonProductsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonProductsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonReviewsTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/reviews/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonReviewsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonReviewsTaskGetAdvanced(Async)");
        }

        return amazonReviewsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * This endpoint provides feedback data on products listed on the Amazon marketplace, including their titles, images, ratings, review content, user profile info, review publication dates, and more. The results are specific to the asin specified in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantAmazonReviewsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonReviewsTaskGetAdvancedResponseInfo amazonReviewsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantAmazonReviewsTaskGetAdvancedResponseInfo> localVarResp = amazonReviewsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint provides feedback data on products listed on the Amazon marketplace, including their titles, images, ratings, review content, user profile info, review publication dates, and more. The results are specific to the asin specified in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonReviewsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonReviewsTaskGetAdvancedResponseInfo> amazonReviewsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonReviewsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint provides feedback data on products listed on the Amazon marketplace, including their titles, images, ratings, review content, user profile info, review publication dates, and more. The results are specific to the asin specified in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTaskGetAdvancedAsync(String id, final ApiCallback<MerchantAmazonReviewsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonReviewsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonReviewsTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/reviews/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonReviewsTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonReviewsTaskGetHtml(Async)");
        }

        return amazonReviewsTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return MerchantAmazonReviewsTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonReviewsTaskGetHtmlResponseInfo amazonReviewsTaskGetHtml(String id) throws ApiException {
        ApiResponse<MerchantAmazonReviewsTaskGetHtmlResponseInfo> localVarResp = amazonReviewsTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonReviewsTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonReviewsTaskGetHtmlResponseInfo> amazonReviewsTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonReviewsTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTaskGetHtmlAsync(String id, final ApiCallback<MerchantAmazonReviewsTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonReviewsTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonReviewsTaskPost
     * @param merchantAmazonReviewsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTaskPostCall(List<MerchantAmazonReviewsTaskPostRequestInfo> merchantAmazonReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantAmazonReviewsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/reviews/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonReviewsTaskPostValidateBeforeCall(List<MerchantAmazonReviewsTaskPostRequestInfo> merchantAmazonReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return amazonReviewsTaskPostCall(merchantAmazonReviewsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of reviews for the target Amazon product. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_post/?bash&#39;
     * @param merchantAmazonReviewsTaskPostRequestInfo  (optional)
     * @return MerchantAmazonReviewsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonReviewsTaskPostResponseInfo amazonReviewsTaskPost(List<MerchantAmazonReviewsTaskPostRequestInfo> merchantAmazonReviewsTaskPostRequestInfo) throws ApiException {
        ApiResponse<MerchantAmazonReviewsTaskPostResponseInfo> localVarResp = amazonReviewsTaskPostWithHttpInfo(merchantAmazonReviewsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of reviews for the target Amazon product. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_post/?bash&#39;
     * @param merchantAmazonReviewsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantAmazonReviewsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonReviewsTaskPostResponseInfo> amazonReviewsTaskPostWithHttpInfo(List<MerchantAmazonReviewsTaskPostRequestInfo> merchantAmazonReviewsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = amazonReviewsTaskPostValidateBeforeCall(merchantAmazonReviewsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a list of reviews for the target Amazon product. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/task_post/?bash&#39;
     * @param merchantAmazonReviewsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTaskPostAsync(List<MerchantAmazonReviewsTaskPostRequestInfo> merchantAmazonReviewsTaskPostRequestInfo, final ApiCallback<MerchantAmazonReviewsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonReviewsTaskPostValidateBeforeCall(merchantAmazonReviewsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonReviewsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/reviews/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonReviewsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return amazonReviewsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with a list of completed tasks that haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/tasks_ready/?bash&#39;
     * @return MerchantAmazonReviewsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonReviewsTasksReadyResponseInfo amazonReviewsTasksReady() throws ApiException {
        ApiResponse<MerchantAmazonReviewsTasksReadyResponseInfo> localVarResp = amazonReviewsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with a list of completed tasks that haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantAmazonReviewsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonReviewsTasksReadyResponseInfo> amazonReviewsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = amazonReviewsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with a list of completed tasks that haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/reviews/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonReviewsTasksReadyAsync(final ApiCallback<MerchantAmazonReviewsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonReviewsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonReviewsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonSellersTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/sellers/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonSellersTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonSellersTaskGetAdvanced(Async)");
        }

        return amazonSellersTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * This endpoint provides a list of sellers of the specified product on Amazon. The data provided for each seller includes related product condition, pricing, shipment, and rating details. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantAmazonSellersTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonSellersTaskGetAdvancedResponseInfo amazonSellersTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantAmazonSellersTaskGetAdvancedResponseInfo> localVarResp = amazonSellersTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint provides a list of sellers of the specified product on Amazon. The data provided for each seller includes related product condition, pricing, shipment, and rating details. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonSellersTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonSellersTaskGetAdvancedResponseInfo> amazonSellersTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonSellersTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint provides a list of sellers of the specified product on Amazon. The data provided for each seller includes related product condition, pricing, shipment, and rating details. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTaskGetAdvancedAsync(String id, final ApiCallback<MerchantAmazonSellersTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonSellersTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonSellersTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/sellers/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonSellersTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling amazonSellersTaskGetHtml(Async)");
        }

        return amazonSellersTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return MerchantAmazonSellersTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonSellersTaskGetHtmlResponseInfo amazonSellersTaskGetHtml(String id) throws ApiException {
        ApiResponse<MerchantAmazonSellersTaskGetHtmlResponseInfo> localVarResp = amazonSellersTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantAmazonSellersTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonSellersTaskGetHtmlResponseInfo> amazonSellersTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = amazonSellersTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTaskGetHtmlAsync(String id, final ApiCallback<MerchantAmazonSellersTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonSellersTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonSellersTaskPost
     * @param merchantAmazonSellersTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTaskPostCall(List<MerchantAmazonSellersTaskPostRequestInfo> merchantAmazonSellersTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantAmazonSellersTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/sellers/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonSellersTaskPostValidateBeforeCall(List<MerchantAmazonSellersTaskPostRequestInfo> merchantAmazonSellersTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return amazonSellersTaskPostCall(merchantAmazonSellersTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides a list of sellers of the specified product on Amazon. The data provided for each seller includes related product condition, pricing, shipment, and rating details. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_post/?bash&#39;
     * @param merchantAmazonSellersTaskPostRequestInfo  (optional)
     * @return MerchantAmazonSellersTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonSellersTaskPostResponseInfo amazonSellersTaskPost(List<MerchantAmazonSellersTaskPostRequestInfo> merchantAmazonSellersTaskPostRequestInfo) throws ApiException {
        ApiResponse<MerchantAmazonSellersTaskPostResponseInfo> localVarResp = amazonSellersTaskPostWithHttpInfo(merchantAmazonSellersTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides a list of sellers of the specified product on Amazon. The data provided for each seller includes related product condition, pricing, shipment, and rating details. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_post/?bash&#39;
     * @param merchantAmazonSellersTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantAmazonSellersTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonSellersTaskPostResponseInfo> amazonSellersTaskPostWithHttpInfo(List<MerchantAmazonSellersTaskPostRequestInfo> merchantAmazonSellersTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = amazonSellersTaskPostValidateBeforeCall(merchantAmazonSellersTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides a list of sellers of the specified product on Amazon. The data provided for each seller includes related product condition, pricing, shipment, and rating details. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/task_post/?bash&#39;
     * @param merchantAmazonSellersTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTaskPostAsync(List<MerchantAmazonSellersTaskPostRequestInfo> merchantAmazonSellersTaskPostRequestInfo, final ApiCallback<MerchantAmazonSellersTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonSellersTaskPostValidateBeforeCall(merchantAmazonSellersTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for amazonSellersTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/sellers/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call amazonSellersTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return amazonSellersTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/tasks_ready/?bash&#39;
     * @return MerchantAmazonSellersTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonSellersTasksReadyResponseInfo amazonSellersTasksReady() throws ApiException {
        ApiResponse<MerchantAmazonSellersTasksReadyResponseInfo> localVarResp = amazonSellersTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantAmazonSellersTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonSellersTasksReadyResponseInfo> amazonSellersTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = amazonSellersTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/sellers/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call amazonSellersTasksReadyAsync(final ApiCallback<MerchantAmazonSellersTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = amazonSellersTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonSellersTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductInfoTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductInfoTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/product_info/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductInfoTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleProductInfoTaskGetAdvanced(Async)");
        }

        return googleProductInfoTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantGoogleProductInfoTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductInfoTaskGetAdvancedResponseInfo googleProductInfoTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantGoogleProductInfoTaskGetAdvancedResponseInfo> localVarResp = googleProductInfoTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantGoogleProductInfoTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductInfoTaskGetAdvancedResponseInfo> googleProductInfoTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleProductInfoTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductInfoTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductInfoTaskGetAdvancedAsync(String id, final ApiCallback<MerchantGoogleProductInfoTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductInfoTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductInfoTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductInfoTaskPost
     * @param merchantGoogleProductInfoTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductInfoTaskPostCall(List<MerchantGoogleProductInfoTaskPostRequestInfo> merchantGoogleProductInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantGoogleProductInfoTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/product_info/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductInfoTaskPostValidateBeforeCall(List<MerchantGoogleProductInfoTaskPostRequestInfo> merchantGoogleProductInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleProductInfoTaskPostCall(merchantGoogleProductInfoTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides data on a product listed on Google Shopping, including product description, images, rating, variations, and sellers. In order to set a task, you have to specify the  product_id. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/task_post/?bash&#39;
     * @param merchantGoogleProductInfoTaskPostRequestInfo  (optional)
     * @return MerchantGoogleProductInfoTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductInfoTaskPostResponseInfo googleProductInfoTaskPost(List<MerchantGoogleProductInfoTaskPostRequestInfo> merchantGoogleProductInfoTaskPostRequestInfo) throws ApiException {
        ApiResponse<MerchantGoogleProductInfoTaskPostResponseInfo> localVarResp = googleProductInfoTaskPostWithHttpInfo(merchantGoogleProductInfoTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides data on a product listed on Google Shopping, including product description, images, rating, variations, and sellers. In order to set a task, you have to specify the  product_id. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/task_post/?bash&#39;
     * @param merchantGoogleProductInfoTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantGoogleProductInfoTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductInfoTaskPostResponseInfo> googleProductInfoTaskPostWithHttpInfo(List<MerchantGoogleProductInfoTaskPostRequestInfo> merchantGoogleProductInfoTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleProductInfoTaskPostValidateBeforeCall(merchantGoogleProductInfoTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductInfoTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides data on a product listed on Google Shopping, including product description, images, rating, variations, and sellers. In order to set a task, you have to specify the  product_id. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/task_post/?bash&#39;
     * @param merchantGoogleProductInfoTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductInfoTaskPostAsync(List<MerchantGoogleProductInfoTaskPostRequestInfo> merchantGoogleProductInfoTaskPostRequestInfo, final ApiCallback<MerchantGoogleProductInfoTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductInfoTaskPostValidateBeforeCall(merchantGoogleProductInfoTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductInfoTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductInfoTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductInfoTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/product_info/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductInfoTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleProductInfoTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/tasks_ready/?bash&#39;
     * @return MerchantGoogleProductInfoTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductInfoTasksReadyResponseInfo googleProductInfoTasksReady() throws ApiException {
        ApiResponse<MerchantGoogleProductInfoTasksReadyResponseInfo> localVarResp = googleProductInfoTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantGoogleProductInfoTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductInfoTasksReadyResponseInfo> googleProductInfoTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleProductInfoTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductInfoTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_info/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductInfoTasksReadyAsync(final ApiCallback<MerchantGoogleProductInfoTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductInfoTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductInfoTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductSpecTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/product_spec/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductSpecTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleProductSpecTaskGetAdvanced(Async)");
        }

        return googleProductSpecTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantGoogleProductSpecTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductSpecTaskGetAdvancedResponseInfo googleProductSpecTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantGoogleProductSpecTaskGetAdvancedResponseInfo> localVarResp = googleProductSpecTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantGoogleProductSpecTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductSpecTaskGetAdvancedResponseInfo> googleProductSpecTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleProductSpecTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTaskGetAdvancedAsync(String id, final ApiCallback<MerchantGoogleProductSpecTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductSpecTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductSpecTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/product_spec/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductSpecTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleProductSpecTaskGetHtml(Async)");
        }

        return googleProductSpecTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return MerchantGoogleProductSpecTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductSpecTaskGetHtmlResponseInfo googleProductSpecTaskGetHtml(String id) throws ApiException {
        ApiResponse<MerchantGoogleProductSpecTaskGetHtmlResponseInfo> localVarResp = googleProductSpecTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantGoogleProductSpecTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductSpecTaskGetHtmlResponseInfo> googleProductSpecTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleProductSpecTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTaskGetHtmlAsync(String id, final ApiCallback<MerchantGoogleProductSpecTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductSpecTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductSpecTaskPost
     * @param merchantGoogleProductSpecTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTaskPostCall(List<MerchantGoogleProductSpecTaskPostRequestInfo> merchantGoogleProductSpecTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantGoogleProductSpecTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/product_spec/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductSpecTaskPostValidateBeforeCall(List<MerchantGoogleProductSpecTaskPostRequestInfo> merchantGoogleProductSpecTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleProductSpecTaskPostCall(merchantGoogleProductSpecTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides product data from Google Shopping based on the specified product_id. You will get a full detailed product description as it is given on the Google Shopping product specification page. Product data can include parameters of the product, brand name, part numbers, GTIN, etc. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_post/?bash&#39;
     * @param merchantGoogleProductSpecTaskPostRequestInfo  (optional)
     * @return MerchantGoogleProductSpecTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductSpecTaskPostResponseInfo googleProductSpecTaskPost(List<MerchantGoogleProductSpecTaskPostRequestInfo> merchantGoogleProductSpecTaskPostRequestInfo) throws ApiException {
        ApiResponse<MerchantGoogleProductSpecTaskPostResponseInfo> localVarResp = googleProductSpecTaskPostWithHttpInfo(merchantGoogleProductSpecTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides product data from Google Shopping based on the specified product_id. You will get a full detailed product description as it is given on the Google Shopping product specification page. Product data can include parameters of the product, brand name, part numbers, GTIN, etc. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_post/?bash&#39;
     * @param merchantGoogleProductSpecTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantGoogleProductSpecTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductSpecTaskPostResponseInfo> googleProductSpecTaskPostWithHttpInfo(List<MerchantGoogleProductSpecTaskPostRequestInfo> merchantGoogleProductSpecTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleProductSpecTaskPostValidateBeforeCall(merchantGoogleProductSpecTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides product data from Google Shopping based on the specified product_id. You will get a full detailed product description as it is given on the Google Shopping product specification page. Product data can include parameters of the product, brand name, part numbers, GTIN, etc. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/task_post/?bash&#39;
     * @param merchantGoogleProductSpecTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTaskPostAsync(List<MerchantGoogleProductSpecTaskPostRequestInfo> merchantGoogleProductSpecTaskPostRequestInfo, final ApiCallback<MerchantGoogleProductSpecTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductSpecTaskPostValidateBeforeCall(merchantGoogleProductSpecTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductSpecTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/product_spec/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductSpecTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleProductSpecTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/tasks_ready/?bash&#39;
     * @return MerchantGoogleProductSpecTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductSpecTasksReadyResponseInfo googleProductSpecTasksReady() throws ApiException {
        ApiResponse<MerchantGoogleProductSpecTasksReadyResponseInfo> localVarResp = googleProductSpecTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantGoogleProductSpecTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductSpecTasksReadyResponseInfo> googleProductSpecTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleProductSpecTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/product_spec/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductSpecTasksReadyAsync(final ApiCallback<MerchantGoogleProductSpecTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductSpecTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductSpecTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductsTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/products/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleProductsTaskGetAdvanced(Async)");
        }

        return googleProductsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantGoogleProductsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductsTaskGetAdvancedResponseInfo googleProductsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantGoogleProductsTaskGetAdvancedResponseInfo> localVarResp = googleProductsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantGoogleProductsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductsTaskGetAdvancedResponseInfo> googleProductsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleProductsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTaskGetAdvancedAsync(String id, final ApiCallback<MerchantGoogleProductsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductsTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/products/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductsTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleProductsTaskGetHtml(Async)");
        }

        return googleProductsTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return MerchantGoogleProductsTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductsTaskGetHtmlResponseInfo googleProductsTaskGetHtml(String id) throws ApiException {
        ApiResponse<MerchantGoogleProductsTaskGetHtmlResponseInfo> localVarResp = googleProductsTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantGoogleProductsTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductsTaskGetHtmlResponseInfo> googleProductsTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleProductsTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTaskGetHtmlAsync(String id, final ApiCallback<MerchantGoogleProductsTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductsTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductsTaskPost
     * @param merchantTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTaskPostCall(List<MerchantTaskRequestInfo> merchantTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/products/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductsTaskPostValidateBeforeCall(List<MerchantTaskRequestInfo> merchantTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleProductsTaskPostCall(merchantTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Shopping Products endpoint will provide you with the list of products found on Google Shopping for the specified query. The results include product title, description in Google Shopping SERP, product rank, price, reviews and rating as well as the related domain. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_post/?bash&#39;
     * @param merchantTaskRequestInfo  (optional)
     * @return MerchantGoogleProductsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductsTaskPostResponseInfo googleProductsTaskPost(List<MerchantTaskRequestInfo> merchantTaskRequestInfo) throws ApiException {
        ApiResponse<MerchantGoogleProductsTaskPostResponseInfo> localVarResp = googleProductsTaskPostWithHttpInfo(merchantTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Shopping Products endpoint will provide you with the list of products found on Google Shopping for the specified query. The results include product title, description in Google Shopping SERP, product rank, price, reviews and rating as well as the related domain. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_post/?bash&#39;
     * @param merchantTaskRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantGoogleProductsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductsTaskPostResponseInfo> googleProductsTaskPostWithHttpInfo(List<MerchantTaskRequestInfo> merchantTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleProductsTaskPostValidateBeforeCall(merchantTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Shopping Products endpoint will provide you with the list of products found on Google Shopping for the specified query. The results include product title, description in Google Shopping SERP, product rank, price, reviews and rating as well as the related domain. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/task_post/?bash&#39;
     * @param merchantTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTaskPostAsync(List<MerchantTaskRequestInfo> merchantTaskRequestInfo, final ApiCallback<MerchantGoogleProductsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductsTaskPostValidateBeforeCall(merchantTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleProductsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/products/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleProductsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleProductsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/tasks_ready/?bash&#39;
     * @return MerchantGoogleProductsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleProductsTasksReadyResponseInfo googleProductsTasksReady() throws ApiException {
        ApiResponse<MerchantGoogleProductsTasksReadyResponseInfo> localVarResp = googleProductsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantGoogleProductsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleProductsTasksReadyResponseInfo> googleProductsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleProductsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/products/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleProductsTasksReadyAsync(final ApiCallback<MerchantGoogleProductsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleProductsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleProductsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSellersAdUrl
     * @param shopAdAclk unique ad click referral parameter you can obtain this parameter with Google Shopping Products or Google Shopping Sellers (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersAdUrlCall(String shopAdAclk, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/sellers/ad_url/{shop_ad_aclk}"
            .replace("{" + "shop_ad_aclk" + "}", localVarApiClient.escapeString(shopAdAclk.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSellersAdUrlValidateBeforeCall(String shopAdAclk, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'shopAdAclk' is set
        if (shopAdAclk == null) {
            throw new ApiException("Missing the required parameter 'shopAdAclk' when calling googleSellersAdUrl(Async)");
        }

        return googleSellersAdUrlCall(shopAdAclk, _callback);

    }

    /**
     * 
     * Google Shopping Sellers Ad URL is designed to provide you with a full URL of the advertisement containing all additional parameters set by the seller. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/ad_url/?bash&#39;
     * @param shopAdAclk unique ad click referral parameter you can obtain this parameter with Google Shopping Products or Google Shopping Sellers (required)
     * @return MerchantGoogleSellersAdUrlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleSellersAdUrlResponseInfo googleSellersAdUrl(String shopAdAclk) throws ApiException {
        ApiResponse<MerchantGoogleSellersAdUrlResponseInfo> localVarResp = googleSellersAdUrlWithHttpInfo(shopAdAclk);
        return localVarResp.getData();
    }

    /**
     * 
     * Google Shopping Sellers Ad URL is designed to provide you with a full URL of the advertisement containing all additional parameters set by the seller. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/ad_url/?bash&#39;
     * @param shopAdAclk unique ad click referral parameter you can obtain this parameter with Google Shopping Products or Google Shopping Sellers (required)
     * @return ApiResponse&lt;MerchantGoogleSellersAdUrlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleSellersAdUrlResponseInfo> googleSellersAdUrlWithHttpInfo(String shopAdAclk) throws ApiException {
        okhttp3.Call localVarCall = googleSellersAdUrlValidateBeforeCall(shopAdAclk, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersAdUrlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Google Shopping Sellers Ad URL is designed to provide you with a full URL of the advertisement containing all additional parameters set by the seller. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/ad_url/?bash&#39;
     * @param shopAdAclk unique ad click referral parameter you can obtain this parameter with Google Shopping Products or Google Shopping Sellers (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersAdUrlAsync(String shopAdAclk, final ApiCallback<MerchantGoogleSellersAdUrlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSellersAdUrlValidateBeforeCall(shopAdAclk, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersAdUrlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSellersTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/sellers/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSellersTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleSellersTaskGetAdvanced(Async)");
        }

        return googleSellersTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return MerchantGoogleSellersTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleSellersTaskGetAdvancedResponseInfo googleSellersTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<MerchantGoogleSellersTaskGetAdvancedResponseInfo> localVarResp = googleSellersTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantGoogleSellersTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleSellersTaskGetAdvancedResponseInfo> googleSellersTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleSellersTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTaskGetAdvancedAsync(String id, final ApiCallback<MerchantGoogleSellersTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSellersTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSellersTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/sellers/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSellersTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleSellersTaskGetHtml(Async)");
        }

        return googleSellersTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return MerchantGoogleSellersTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleSellersTaskGetHtmlResponseInfo googleSellersTaskGetHtml(String id) throws ApiException {
        ApiResponse<MerchantGoogleSellersTaskGetHtmlResponseInfo> localVarResp = googleSellersTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;MerchantGoogleSellersTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleSellersTaskGetHtmlResponseInfo> googleSellersTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleSellersTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTaskGetHtmlAsync(String id, final ApiCallback<MerchantGoogleSellersTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSellersTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSellersTaskPost
     * @param merchantGoogleSellersTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTaskPostCall(List<MerchantGoogleSellersTaskPostRequestInfo> merchantGoogleSellersTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantGoogleSellersTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/sellers/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSellersTaskPostValidateBeforeCall(List<MerchantGoogleSellersTaskPostRequestInfo> merchantGoogleSellersTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleSellersTaskPostCall(merchantGoogleSellersTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Shopping Sellers endpoint will provide you with the list of sellers that listed the specified product on Google Shopping. The provided data for each seller includes related product base and total price, shipment and purchase details and special offers. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_post/?bash&#39;
     * @param merchantGoogleSellersTaskPostRequestInfo  (optional)
     * @return MerchantGoogleSellersTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleSellersTaskPostResponseInfo googleSellersTaskPost(List<MerchantGoogleSellersTaskPostRequestInfo> merchantGoogleSellersTaskPostRequestInfo) throws ApiException {
        ApiResponse<MerchantGoogleSellersTaskPostResponseInfo> localVarResp = googleSellersTaskPostWithHttpInfo(merchantGoogleSellersTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Shopping Sellers endpoint will provide you with the list of sellers that listed the specified product on Google Shopping. The provided data for each seller includes related product base and total price, shipment and purchase details and special offers. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_post/?bash&#39;
     * @param merchantGoogleSellersTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantGoogleSellersTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleSellersTaskPostResponseInfo> googleSellersTaskPostWithHttpInfo(List<MerchantGoogleSellersTaskPostRequestInfo> merchantGoogleSellersTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleSellersTaskPostValidateBeforeCall(merchantGoogleSellersTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Shopping Sellers endpoint will provide you with the list of sellers that listed the specified product on Google Shopping. The provided data for each seller includes related product base and total price, shipment and purchase details and special offers. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/task_post/?bash&#39;
     * @param merchantGoogleSellersTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTaskPostAsync(List<MerchantGoogleSellersTaskPostRequestInfo> merchantGoogleSellersTaskPostRequestInfo, final ApiCallback<MerchantGoogleSellersTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSellersTaskPostValidateBeforeCall(merchantGoogleSellersTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSellersTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/sellers/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSellersTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleSellersTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/tasks_ready/?bash&#39;
     * @return MerchantGoogleSellersTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleSellersTasksReadyResponseInfo googleSellersTasksReady() throws ApiException {
        ApiResponse<MerchantGoogleSellersTasksReadyResponseInfo> localVarResp = googleSellersTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;MerchantGoogleSellersTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleSellersTasksReadyResponseInfo> googleSellersTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleSellersTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/sellers/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSellersTasksReadyAsync(final ApiCallback<MerchantGoogleSellersTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSellersTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleSellersTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantAmazonLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAmazonLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantAmazonLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return merchantAmazonLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of supported Amazon languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/languages/?bash&#39;
     * @return MerchantAmazonLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonLanguagesResponseInfo merchantAmazonLanguages() throws ApiException {
        ApiResponse<MerchantAmazonLanguagesResponseInfo> localVarResp = merchantAmazonLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of supported Amazon languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/languages/?bash&#39;
     * @return ApiResponse&lt;MerchantAmazonLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonLanguagesResponseInfo> merchantAmazonLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = merchantAmazonLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantAmazonLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of supported Amazon languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAmazonLanguagesAsync(final ApiCallback<MerchantAmazonLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantAmazonLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantAmazonLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAmazonLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantAmazonLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return merchantAmazonLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of supported Amazon locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/locations/?bash&#39;
     * @return MerchantAmazonLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonLocationsResponseInfo merchantAmazonLocations() throws ApiException {
        ApiResponse<MerchantAmazonLocationsResponseInfo> localVarResp = merchantAmazonLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of supported Amazon locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/locations/?bash&#39;
     * @return ApiResponse&lt;MerchantAmazonLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonLocationsResponseInfo> merchantAmazonLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = merchantAmazonLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantAmazonLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of supported Amazon locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAmazonLocationsAsync(final ApiCallback<MerchantAmazonLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantAmazonLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantAmazonLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAmazonLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/amazon/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantAmazonLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling merchantAmazonLocationsCountry(Async)");
        }

        return merchantAmazonLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of supported Amazon locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return MerchantAmazonLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantAmazonLocationsCountryResponseInfo merchantAmazonLocationsCountry(String country) throws ApiException {
        ApiResponse<MerchantAmazonLocationsCountryResponseInfo> localVarResp = merchantAmazonLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of supported Amazon locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;MerchantAmazonLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantAmazonLocationsCountryResponseInfo> merchantAmazonLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = merchantAmazonLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<MerchantAmazonLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of supported Amazon locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/amazon/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantAmazonLocationsCountryAsync(String country, final ApiCallback<MerchantAmazonLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantAmazonLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<MerchantAmazonLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantErrors
     * @param merchantErrorsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantErrorsCall(List<MerchantErrorsRequestInfo> merchantErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantErrorsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantErrorsValidateBeforeCall(List<MerchantErrorsRequestInfo> merchantErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        return merchantErrorsCall(merchantErrorsRequestInfo, _callback);

    }

    /**
     * 
     * By calling this endpoint you will receive information about the Merchant API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/errors/?bash&#39;
     * @param merchantErrorsRequestInfo  (optional)
     * @return MerchantErrorsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantErrorsResponseInfo merchantErrors(List<MerchantErrorsRequestInfo> merchantErrorsRequestInfo) throws ApiException {
        ApiResponse<MerchantErrorsResponseInfo> localVarResp = merchantErrorsWithHttpInfo(merchantErrorsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this endpoint you will receive information about the Merchant API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/errors/?bash&#39;
     * @param merchantErrorsRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantErrorsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantErrorsResponseInfo> merchantErrorsWithHttpInfo(List<MerchantErrorsRequestInfo> merchantErrorsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = merchantErrorsValidateBeforeCall(merchantErrorsRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantErrorsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this endpoint you will receive information about the Merchant API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/errors/?bash&#39;
     * @param merchantErrorsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantErrorsAsync(List<MerchantErrorsRequestInfo> merchantErrorsRequestInfo, final ApiCallback<MerchantErrorsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantErrorsValidateBeforeCall(merchantErrorsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantErrorsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantGoogleLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantGoogleLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantGoogleLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return merchantGoogleLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of supported Google Shopping languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/languages/?bash&#39;
     * @return MerchantGoogleLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleLanguagesResponseInfo merchantGoogleLanguages() throws ApiException {
        ApiResponse<MerchantGoogleLanguagesResponseInfo> localVarResp = merchantGoogleLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of supported Google Shopping languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/languages/?bash&#39;
     * @return ApiResponse&lt;MerchantGoogleLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleLanguagesResponseInfo> merchantGoogleLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = merchantGoogleLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantGoogleLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of supported Google Shopping languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantGoogleLanguagesAsync(final ApiCallback<MerchantGoogleLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantGoogleLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantGoogleLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantGoogleLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantGoogleLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return merchantGoogleLocationsCall(_callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/locations/?bash&#39;
     * @return MerchantGoogleLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleLocationsResponseInfo merchantGoogleLocations() throws ApiException {
        ApiResponse<MerchantGoogleLocationsResponseInfo> localVarResp = merchantGoogleLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/locations/?bash&#39;
     * @return ApiResponse&lt;MerchantGoogleLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleLocationsResponseInfo> merchantGoogleLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = merchantGoogleLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<MerchantGoogleLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantGoogleLocationsAsync(final ApiCallback<MerchantGoogleLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantGoogleLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantGoogleLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantGoogleLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/merchant/google/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantGoogleLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling merchantGoogleLocationsCountry(Async)");
        }

        return merchantGoogleLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return MerchantGoogleLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantGoogleLocationsCountryResponseInfo merchantGoogleLocationsCountry(String country) throws ApiException {
        ApiResponse<MerchantGoogleLocationsCountryResponseInfo> localVarResp = merchantGoogleLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;MerchantGoogleLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantGoogleLocationsCountryResponseInfo> merchantGoogleLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = merchantGoogleLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<MerchantGoogleLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantGoogleLocationsCountryAsync(String country, final ApiCallback<MerchantGoogleLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantGoogleLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<MerchantGoogleLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for merchantIdList
     * @param merchantIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantIdListCall(List<MerchantIdListRequestInfo> merchantIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = merchantIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/merchant/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call merchantIdListValidateBeforeCall(List<MerchantIdListRequestInfo> merchantIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return merchantIdListCall(merchantIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Merchant tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/id_list/?bash&#39;
     * @param merchantIdListRequestInfo  (optional)
     * @return MerchantIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public MerchantIdListResponseInfo merchantIdList(List<MerchantIdListRequestInfo> merchantIdListRequestInfo) throws ApiException {
        ApiResponse<MerchantIdListResponseInfo> localVarResp = merchantIdListWithHttpInfo(merchantIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Merchant tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/id_list/?bash&#39;
     * @param merchantIdListRequestInfo  (optional)
     * @return ApiResponse&lt;MerchantIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MerchantIdListResponseInfo> merchantIdListWithHttpInfo(List<MerchantIdListRequestInfo> merchantIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = merchantIdListValidateBeforeCall(merchantIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<MerchantIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Merchant tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/merchant/id_list/?bash&#39;
     * @param merchantIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call merchantIdListAsync(List<MerchantIdListRequestInfo> merchantIdListRequestInfo, final ApiCallback<MerchantIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = merchantIdListValidateBeforeCall(merchantIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<MerchantIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
