/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * BusinessDataAttributesInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T15:03:59.388297468Z[Etc/UTC]")
public class BusinessDataAttributesInfo {
  public static final String SERIALIZED_NAME_AVAILABLE_ATTRIBUTES = "available_attributes";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_ATTRIBUTES)
  private Map<String, List<String>> availableAttributes;

  public static final String SERIALIZED_NAME_UNAVAILABLE_ATTRIBUTES = "unavailable_attributes";
  @SerializedName(SERIALIZED_NAME_UNAVAILABLE_ATTRIBUTES)
  private Map<String, List<String>> unavailableAttributes;

  public BusinessDataAttributesInfo() {
  }

  public BusinessDataAttributesInfo availableAttributes(Map<String, List<String>> availableAttributes) {
    this.availableAttributes = availableAttributes;
    return this;
  }

  public BusinessDataAttributesInfo putAvailableAttributesItem(String key, List<String> availableAttributesItem) {
    if (this.availableAttributes == null) {
      this.availableAttributes = new HashMap<>();
    }
    this.availableAttributes.put(key, availableAttributesItem);
    return this;
  }

   /**
   * Get availableAttributes
   * @return availableAttributes
  **/
  @javax.annotation.Nullable
  public Map<String, List<String>> getAvailableAttributes() {
    return availableAttributes;
  }

  public void setAvailableAttributes(Map<String, List<String>> availableAttributes) {
    this.availableAttributes = availableAttributes;
  }


  public BusinessDataAttributesInfo unavailableAttributes(Map<String, List<String>> unavailableAttributes) {
    this.unavailableAttributes = unavailableAttributes;
    return this;
  }

  public BusinessDataAttributesInfo putUnavailableAttributesItem(String key, List<String> unavailableAttributesItem) {
    if (this.unavailableAttributes == null) {
      this.unavailableAttributes = new HashMap<>();
    }
    this.unavailableAttributes.put(key, unavailableAttributesItem);
    return this;
  }

   /**
   * Get unavailableAttributes
   * @return unavailableAttributes
  **/
  @javax.annotation.Nullable
  public Map<String, List<String>> getUnavailableAttributes() {
    return unavailableAttributes;
  }

  public void setUnavailableAttributes(Map<String, List<String>> unavailableAttributes) {
    this.unavailableAttributes = unavailableAttributes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDataAttributesInfo businessDataAttributesInfo = (BusinessDataAttributesInfo) o;
    return Objects.equals(this.availableAttributes, businessDataAttributesInfo.availableAttributes) &&
        Objects.equals(this.unavailableAttributes, businessDataAttributesInfo.unavailableAttributes);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableAttributes, unavailableAttributes);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDataAttributesInfo {\n");
    sb.append("    availableAttributes: ").append(toIndentedString(availableAttributes)).append("\n");
    sb.append("    unavailableAttributes: ").append(toIndentedString(unavailableAttributes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_attributes");
    openapiFields.add("unavailable_attributes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BusinessDataAttributesInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessDataAttributesInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessDataAttributesInfo is not found in the empty JSON string", BusinessDataAttributesInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessDataAttributesInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessDataAttributesInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessDataAttributesInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessDataAttributesInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessDataAttributesInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessDataAttributesInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessDataAttributesInfo>() {
           @Override
           public void write(JsonWriter out, BusinessDataAttributesInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessDataAttributesInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessDataAttributesInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessDataAttributesInfo
  * @throws IOException if the JSON string is invalid with respect to BusinessDataAttributesInfo
  */
  public static BusinessDataAttributesInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessDataAttributesInfo.class);
  }

 /**
  * Convert an instance of BusinessDataAttributesInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

