/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * items array
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T15:03:59.388297468Z[Etc/UTC]")
public class DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_TECHNOLOGY = "technology";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGY)
  private String technology;

  public static final String SERIALIZED_NAME_GROUPS_COUNT = "groups_count";
  @SerializedName(SERIALIZED_NAME_GROUPS_COUNT)
  private Long groupsCount;

  public static final String SERIALIZED_NAME_CATEGORIES_COUNT = "categories_count";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_COUNT)
  private Long categoriesCount;

  public static final String SERIALIZED_NAME_TECHNOLOGIES_COUNT = "technologies_count";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGIES_COUNT)
  private Long technologiesCount;

  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem() {
  }

  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem group(String group) {
    this.group = group;
    return this;
  }

   /**
   * technology group id
   * @return group
  **/
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem category(String category) {
    this.category = category;
    return this;
  }

   /**
   * technology category id
   * @return category
  **/
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem technology(String technology) {
    this.technology = technology;
    return this;
  }

   /**
   * technology name
   * @return technology
  **/
  @javax.annotation.Nullable
  public String getTechnology() {
    return technology;
  }

  public void setTechnology(String technology) {
    this.technology = technology;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem groupsCount(Long groupsCount) {
    this.groupsCount = groupsCount;
    return this;
  }

   /**
   * technology groups count number of domains that match the parameters you specified and are using technologies from the indicated group
   * @return groupsCount
  **/
  @javax.annotation.Nullable
  public Long getGroupsCount() {
    return groupsCount;
  }

  public void setGroupsCount(Long groupsCount) {
    this.groupsCount = groupsCount;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem categoriesCount(Long categoriesCount) {
    this.categoriesCount = categoriesCount;
    return this;
  }

   /**
   * technology categories count number of domains that match the parameters you specified and are using technologies from the indicated category
   * @return categoriesCount
  **/
  @javax.annotation.Nullable
  public Long getCategoriesCount() {
    return categoriesCount;
  }

  public void setCategoriesCount(Long categoriesCount) {
    this.categoriesCount = categoriesCount;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem technologiesCount(Long technologiesCount) {
    this.technologiesCount = technologiesCount;
    return this;
  }

   /**
   * technologies count number of domains that match the parameters you specified and are using the indicated technology
   * @return technologiesCount
  **/
  @javax.annotation.Nullable
  public Long getTechnologiesCount() {
    return technologiesCount;
  }

  public void setTechnologiesCount(Long technologiesCount) {
    this.technologiesCount = technologiesCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem domainAnalyticsTechnologiesAggregationTechnologiesLiveItem = (DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem) o;
    return Objects.equals(this.type, domainAnalyticsTechnologiesAggregationTechnologiesLiveItem.type) &&
        Objects.equals(this.group, domainAnalyticsTechnologiesAggregationTechnologiesLiveItem.group) &&
        Objects.equals(this.category, domainAnalyticsTechnologiesAggregationTechnologiesLiveItem.category) &&
        Objects.equals(this.technology, domainAnalyticsTechnologiesAggregationTechnologiesLiveItem.technology) &&
        Objects.equals(this.groupsCount, domainAnalyticsTechnologiesAggregationTechnologiesLiveItem.groupsCount) &&
        Objects.equals(this.categoriesCount, domainAnalyticsTechnologiesAggregationTechnologiesLiveItem.categoriesCount) &&
        Objects.equals(this.technologiesCount, domainAnalyticsTechnologiesAggregationTechnologiesLiveItem.technologiesCount);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, group, category, technology, groupsCount, categoriesCount, technologiesCount);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    technology: ").append(toIndentedString(technology)).append("\n");
    sb.append("    groupsCount: ").append(toIndentedString(groupsCount)).append("\n");
    sb.append("    categoriesCount: ").append(toIndentedString(categoriesCount)).append("\n");
    sb.append("    technologiesCount: ").append(toIndentedString(technologiesCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("group");
    openapiFields.add("category");
    openapiFields.add("technology");
    openapiFields.add("groups_count");
    openapiFields.add("categories_count");
    openapiFields.add("technologies_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem is not found in the empty JSON string", DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("technology") != null && !jsonObj.get("technology").isJsonNull()) && !jsonObj.get("technology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `technology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("technology").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem>() {
           @Override
           public void write(JsonWriter out, DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem
  * @throws IOException if the JSON string is invalid with respect to DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem
  */
  public static DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem.class);
  }

 /**
  * Convert an instance of DomainAnalyticsTechnologiesAggregationTechnologiesLiveItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

