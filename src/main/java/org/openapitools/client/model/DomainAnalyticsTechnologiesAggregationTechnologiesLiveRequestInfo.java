/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T15:03:59.388297468Z[Etc/UTC]")
public class DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo {
  public static final String SERIALIZED_NAME_GROUP = "group";
  @SerializedName(SERIALIZED_NAME_GROUP)
  private String group;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_TECHNOLOGY = "technology";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGY)
  private String technology;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  private String mode;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  private List<Object> filters;

  public static final String SERIALIZED_NAME_ORDER_BY = "order_by";
  @SerializedName(SERIALIZED_NAME_ORDER_BY)
  private List<String> orderBy;

  public static final String SERIALIZED_NAME_INTERNAL_GROUPS_LIST_LIMIT = "internal_groups_list_limit";
  @SerializedName(SERIALIZED_NAME_INTERNAL_GROUPS_LIST_LIMIT)
  private Integer internalGroupsListLimit;

  public static final String SERIALIZED_NAME_INTERNAL_CATEGORIES_LIST_LIMIT = "internal_categories_list_limit";
  @SerializedName(SERIALIZED_NAME_INTERNAL_CATEGORIES_LIST_LIMIT)
  private Integer internalCategoriesListLimit;

  public static final String SERIALIZED_NAME_INTERNAL_TECHNOLOGIES_LIST_LIMIT = "internal_technologies_list_limit";
  @SerializedName(SERIALIZED_NAME_INTERNAL_TECHNOLOGIES_LIST_LIMIT)
  private Integer internalTechnologiesListLimit;

  public static final String SERIALIZED_NAME_INTERNAL_LIST_LIMIT = "internal_list_limit";
  @SerializedName(SERIALIZED_NAME_INTERNAL_LIST_LIMIT)
  private Integer internalListLimit;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo() {
  }

  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo group(String group) {
    this.group = group;
    return this;
  }

   /**
   * id of the target technology group required field if you don’t specify technology or category you can find the full list of technology group ids on this page example: \&quot;marketing\&quot;
   * @return group
  **/
  @javax.annotation.Nullable
  public String getGroup() {
    return group;
  }

  public void setGroup(String group) {
    this.group = group;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo category(String category) {
    this.category = category;
    return this;
  }

   /**
   * id of the target technology category required field if you don’t specify group or technology you can find the full list of technology category ids on this page example: \&quot;crm\&quot;
   * @return category
  **/
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo technology(String technology) {
    this.technology = technology;
    return this;
  }

   /**
   * target technology required field if you don’t specify group or category you can find the full list of technologies on this page example: \&quot;Salesforce\&quot;
   * @return technology
  **/
  @javax.annotation.Nullable
  public String getTechnology() {
    return technology;
  }

  public void setTechnology(String technology) {
    this.technology = technology;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

   /**
   * target keyword in the domain’s meta keywords optional field UTF-8 encoding each keyword should be at least 3 characters long example: \&quot;seo\&quot;
   * @return keyword
  **/
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo mode(String mode) {
    this.mode = mode;
    return this;
  }

   /**
   * search mode optional field possible search mode types: as_is – search for results exactly matching the specified group ids, category ids, or technology names entry – search for results matching a part of the specified group ids, category ids, or technology names default value: as_is
   * @return mode
  **/
  @javax.annotation.Nullable
  public String getMode() {
    return mode;
  }

  public void setMode(String mode) {
    this.mode = mode;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo filters(List<Object> filters) {
    this.filters = filters;
    return this;
  }

  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo addFiltersItem(Object filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

   /**
   * array of results filtering parameters optional field you can add several filters at once (8 filters maximum) you should set a logical operator and, or between the conditions the following operators are supported: &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;, &lt;&gt;, in, not_in, like,not_like you can use the % operator with like and not_like to match any string of zero or more characters you can use the following parameters to filter the results: domain_rank, last_visited, country_iso_code, language_code, content_language_code example: [[\&quot;country_iso_code\&quot;,\&quot;&#x3D;\&quot;,\&quot;US\&quot;], \&quot;and\&quot;, [\&quot;domain_rank\&quot;,\&quot;&gt;\&quot;,800]]for more information about filters, please refer to Domain Analytics Technologies API – Filters
   * @return filters
  **/
  @javax.annotation.Nullable
  public List<Object> getFilters() {
    return filters;
  }

  public void setFilters(List<Object> filters) {
    this.filters = filters;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo orderBy(List<String> orderBy) {
    this.orderBy = orderBy;
    return this;
  }

  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo addOrderByItem(String orderByItem) {
    if (this.orderBy == null) {
      this.orderBy = new ArrayList<>();
    }
    this.orderBy.add(orderByItem);
    return this;
  }

   /**
   * results sorting rules optional field you can use the following values to sort the results: groups_count, categories_count, technologies_count possible sorting types: asc – results will be sorted in the ascending order desc – results will be sorted in the descending order you should use a comma to set up a sorting type example: [\&quot;groups_count,desc\&quot;] note that you can set no more than three sorting rules in a single request you should use a comma to separate several sorting rules example: [\&quot;groups_count,desc\&quot;,\&quot;technologies_count,desc\&quot;] default value: [\&quot;groups_count,desc\&quot;,\&quot;categories_count,desc\&quot;,\&quot;technologies_count,desc\&quot;]
   * @return orderBy
  **/
  @javax.annotation.Nullable
  public List<String> getOrderBy() {
    return orderBy;
  }

  public void setOrderBy(List<String> orderBy) {
    this.orderBy = orderBy;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo internalGroupsListLimit(Integer internalGroupsListLimit) {
    this.internalGroupsListLimit = internalGroupsListLimit;
    return this;
  }

   /**
   * maximum number of returned technology groups optional field you can use this field to limit the number of items with identical \&quot;group\&quot; in the results default value: 5 maximum value: 10000
   * @return internalGroupsListLimit
  **/
  @javax.annotation.Nullable
  public Integer getInternalGroupsListLimit() {
    return internalGroupsListLimit;
  }

  public void setInternalGroupsListLimit(Integer internalGroupsListLimit) {
    this.internalGroupsListLimit = internalGroupsListLimit;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo internalCategoriesListLimit(Integer internalCategoriesListLimit) {
    this.internalCategoriesListLimit = internalCategoriesListLimit;
    return this;
  }

   /**
   * maximum number of returned technology categories within the same group optional field you can use this field to limit the number of items with identical \&quot;category\&quot; in the results default value: 5 maximum value: 10000
   * @return internalCategoriesListLimit
  **/
  @javax.annotation.Nullable
  public Integer getInternalCategoriesListLimit() {
    return internalCategoriesListLimit;
  }

  public void setInternalCategoriesListLimit(Integer internalCategoriesListLimit) {
    this.internalCategoriesListLimit = internalCategoriesListLimit;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo internalTechnologiesListLimit(Integer internalTechnologiesListLimit) {
    this.internalTechnologiesListLimit = internalTechnologiesListLimit;
    return this;
  }

   /**
   * maximum number of returned technologies within the same category optional field you can use this field to limit the number of items with identical \&quot;technology\&quot; in the results default value: 10 maximum value: 10000
   * @return internalTechnologiesListLimit
  **/
  @javax.annotation.Nullable
  public Integer getInternalTechnologiesListLimit() {
    return internalTechnologiesListLimit;
  }

  public void setInternalTechnologiesListLimit(Integer internalTechnologiesListLimit) {
    this.internalTechnologiesListLimit = internalTechnologiesListLimit;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo internalListLimit(Integer internalListLimit) {
    this.internalListLimit = internalListLimit;
    return this;
  }

   /**
   * maximum number of items with identical \&quot;category\&quot;, \&quot;group\&quot;, and \&quot;technology\&quot; optional field if you use this field, the values specified in internal_groups_list_limit, internal_categories_list_limit and internal_technologies_list_limit will be ignored; you can use this field to limit the number of items with identical \&quot;category\&quot;, \&quot;group\&quot;, or \&quot;technology\&quot; default value: 10 maximum value: 10000
   * @return internalListLimit
  **/
  @javax.annotation.Nullable
  public Integer getInternalListLimit() {
    return internalListLimit;
  }

  public void setInternalListLimit(Integer internalListLimit) {
    this.internalListLimit = internalListLimit;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo limit(Integer limit) {
    this.limit = limit;
    return this;
  }

   /**
   * the maximum number of returned technologies optional field default value: 100 maximum value: 10000
   * @return limit
  **/
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo offset(Integer offset) {
    this.offset = offset;
    return this;
  }

   /**
   * offset in the results array of returned domains optional field default value: 0 maximum value: 9999 if you specify the 10 value, the first ten technologies in the results array will be omitted and the data will be provided for the successive technologies
   * @return offset
  **/
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * user-defined task identifier optional field the character limit is 255 you can use this parameter to identify the task and match it with the result you will find the specified tag value in the data object of the response
   * @return tag
  **/
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo = (DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo) o;
    return Objects.equals(this.group, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.group) &&
        Objects.equals(this.category, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.category) &&
        Objects.equals(this.technology, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.technology) &&
        Objects.equals(this.keyword, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.keyword) &&
        Objects.equals(this.mode, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.mode) &&
        Objects.equals(this.filters, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.filters) &&
        Objects.equals(this.orderBy, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.orderBy) &&
        Objects.equals(this.internalGroupsListLimit, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.internalGroupsListLimit) &&
        Objects.equals(this.internalCategoriesListLimit, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.internalCategoriesListLimit) &&
        Objects.equals(this.internalTechnologiesListLimit, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.internalTechnologiesListLimit) &&
        Objects.equals(this.internalListLimit, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.internalListLimit) &&
        Objects.equals(this.limit, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.limit) &&
        Objects.equals(this.offset, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.offset) &&
        Objects.equals(this.tag, domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.tag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(group, category, technology, keyword, mode, filters, orderBy, internalGroupsListLimit, internalCategoriesListLimit, internalTechnologiesListLimit, internalListLimit, limit, offset, tag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo {\n");
    sb.append("    group: ").append(toIndentedString(group)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    technology: ").append(toIndentedString(technology)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    orderBy: ").append(toIndentedString(orderBy)).append("\n");
    sb.append("    internalGroupsListLimit: ").append(toIndentedString(internalGroupsListLimit)).append("\n");
    sb.append("    internalCategoriesListLimit: ").append(toIndentedString(internalCategoriesListLimit)).append("\n");
    sb.append("    internalTechnologiesListLimit: ").append(toIndentedString(internalTechnologiesListLimit)).append("\n");
    sb.append("    internalListLimit: ").append(toIndentedString(internalListLimit)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("group");
    openapiFields.add("category");
    openapiFields.add("technology");
    openapiFields.add("keyword");
    openapiFields.add("mode");
    openapiFields.add("filters");
    openapiFields.add("order_by");
    openapiFields.add("internal_groups_list_limit");
    openapiFields.add("internal_categories_list_limit");
    openapiFields.add("internal_technologies_list_limit");
    openapiFields.add("internal_list_limit");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo is not found in the empty JSON string", DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("group") != null && !jsonObj.get("group").isJsonNull()) && !jsonObj.get("group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("technology") != null && !jsonObj.get("technology").isJsonNull()) && !jsonObj.get("technology").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `technology` to be a primitive type in the JSON string but got `%s`", jsonObj.get("technology").toString()));
      }
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("mode") != null && !jsonObj.get("mode").isJsonNull()) && !jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull() && !jsonObj.get("filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("order_by") != null && !jsonObj.get("order_by").isJsonNull() && !jsonObj.get("order_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_by` to be an array in the JSON string but got `%s`", jsonObj.get("order_by").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo>() {
           @Override
           public void write(JsonWriter out, DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo
  * @throws IOException if the JSON string is invalid with respect to DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo
  */
  public static DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo.class);
  }

 /**
  * Convert an instance of DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

