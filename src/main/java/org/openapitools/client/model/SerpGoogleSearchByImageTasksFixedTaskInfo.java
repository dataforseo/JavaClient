/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SerpGoogleSearchByImageTasksFixedResultInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SerpGoogleSearchByImageTasksFixedTaskInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T15:03:59.388297468Z[Etc/UTC]")
public class SerpGoogleSearchByImageTasksFixedTaskInfo {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "status_message";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private String time;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private Double cost;

  public static final String SERIALIZED_NAME_RESULT_COUNT = "result_count";
  @SerializedName(SERIALIZED_NAME_RESULT_COUNT)
  private Long resultCount;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private List<String> path;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private List<SerpGoogleSearchByImageTasksFixedResultInfo> result;

  public SerpGoogleSearchByImageTasksFixedTaskInfo() {
  }

  public SerpGoogleSearchByImageTasksFixedTaskInfo id(String id) {
    this.id = id;
    return this;
  }

   /**
   * task identifier unique task identifier in our system in the UUID format
   * @return id
  **/
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * status code of the task generated by DataForSEO, can be within the following range: 10000-60000 you can find the full list of the response codes here
   * @return statusCode
  **/
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

   /**
   * informational message of the task you can find the full list of general informational messages here
   * @return statusMessage
  **/
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo time(String time) {
    this.time = time;
    return this;
  }

   /**
   * execution time, seconds
   * @return time
  **/
  @javax.annotation.Nullable
  public String getTime() {
    return time;
  }

  public void setTime(String time) {
    this.time = time;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo cost(Double cost) {
    this.cost = cost;
    return this;
  }

   /**
   * total tasks cost, USD
   * @return cost
  **/
  @javax.annotation.Nullable
  public Double getCost() {
    return cost;
  }

  public void setCost(Double cost) {
    this.cost = cost;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo resultCount(Long resultCount) {
    this.resultCount = resultCount;
    return this;
  }

   /**
   * number of elements in the result array
   * @return resultCount
  **/
  @javax.annotation.Nullable
  public Long getResultCount() {
    return resultCount;
  }

  public void setResultCount(Long resultCount) {
    this.resultCount = resultCount;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo path(List<String> path) {
    this.path = path;
    return this;
  }

  public SerpGoogleSearchByImageTasksFixedTaskInfo addPathItem(String pathItem) {
    if (this.path == null) {
      this.path = new ArrayList<>();
    }
    this.path.add(pathItem);
    return this;
  }

   /**
   * URL path
   * @return path
  **/
  @javax.annotation.Nullable
  public List<String> getPath() {
    return path;
  }

  public void setPath(List<String> path) {
    this.path = path;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo data(Object data) {
    this.data = data;
    return this;
  }

   /**
   * contains the same parameters that you specified in the POST request
   * @return data
  **/
  @javax.annotation.Nullable
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public SerpGoogleSearchByImageTasksFixedTaskInfo result(List<SerpGoogleSearchByImageTasksFixedResultInfo> result) {
    this.result = result;
    return this;
  }

  public SerpGoogleSearchByImageTasksFixedTaskInfo addResultItem(SerpGoogleSearchByImageTasksFixedResultInfo resultItem) {
    if (this.result == null) {
      this.result = new ArrayList<>();
    }
    this.result.add(resultItem);
    return this;
  }

   /**
   * array of results
   * @return result
  **/
  @javax.annotation.Nullable
  public List<SerpGoogleSearchByImageTasksFixedResultInfo> getResult() {
    return result;
  }

  public void setResult(List<SerpGoogleSearchByImageTasksFixedResultInfo> result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SerpGoogleSearchByImageTasksFixedTaskInfo serpGoogleSearchByImageTasksFixedTaskInfo = (SerpGoogleSearchByImageTasksFixedTaskInfo) o;
    return Objects.equals(this.id, serpGoogleSearchByImageTasksFixedTaskInfo.id) &&
        Objects.equals(this.statusCode, serpGoogleSearchByImageTasksFixedTaskInfo.statusCode) &&
        Objects.equals(this.statusMessage, serpGoogleSearchByImageTasksFixedTaskInfo.statusMessage) &&
        Objects.equals(this.time, serpGoogleSearchByImageTasksFixedTaskInfo.time) &&
        Objects.equals(this.cost, serpGoogleSearchByImageTasksFixedTaskInfo.cost) &&
        Objects.equals(this.resultCount, serpGoogleSearchByImageTasksFixedTaskInfo.resultCount) &&
        Objects.equals(this.path, serpGoogleSearchByImageTasksFixedTaskInfo.path) &&
        Objects.equals(this.data, serpGoogleSearchByImageTasksFixedTaskInfo.data) &&
        Objects.equals(this.result, serpGoogleSearchByImageTasksFixedTaskInfo.result);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, statusCode, statusMessage, time, cost, resultCount, path, data, result);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SerpGoogleSearchByImageTasksFixedTaskInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    resultCount: ").append(toIndentedString(resultCount)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("status_code");
    openapiFields.add("status_message");
    openapiFields.add("time");
    openapiFields.add("cost");
    openapiFields.add("result_count");
    openapiFields.add("path");
    openapiFields.add("data");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SerpGoogleSearchByImageTasksFixedTaskInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SerpGoogleSearchByImageTasksFixedTaskInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SerpGoogleSearchByImageTasksFixedTaskInfo is not found in the empty JSON string", SerpGoogleSearchByImageTasksFixedTaskInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SerpGoogleSearchByImageTasksFixedTaskInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SerpGoogleSearchByImageTasksFixedTaskInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("status_message") != null && !jsonObj.get("status_message").isJsonNull()) && !jsonObj.get("status_message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status_message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status_message").toString()));
      }
      if ((jsonObj.get("time") != null && !jsonObj.get("time").isJsonNull()) && !jsonObj.get("time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull() && !jsonObj.get("path").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be an array in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        JsonArray jsonArrayresult = jsonObj.getAsJsonArray("result");
        if (jsonArrayresult != null) {
          // ensure the json data is an array
          if (!jsonObj.get("result").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `result` to be an array in the JSON string but got `%s`", jsonObj.get("result").toString()));
          }

          // validate the optional field `result` (array)
          for (int i = 0; i < jsonArrayresult.size(); i++) {
            SerpGoogleSearchByImageTasksFixedResultInfo.validateJsonElement(jsonArrayresult.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SerpGoogleSearchByImageTasksFixedTaskInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SerpGoogleSearchByImageTasksFixedTaskInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SerpGoogleSearchByImageTasksFixedTaskInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SerpGoogleSearchByImageTasksFixedTaskInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SerpGoogleSearchByImageTasksFixedTaskInfo>() {
           @Override
           public void write(JsonWriter out, SerpGoogleSearchByImageTasksFixedTaskInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SerpGoogleSearchByImageTasksFixedTaskInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SerpGoogleSearchByImageTasksFixedTaskInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SerpGoogleSearchByImageTasksFixedTaskInfo
  * @throws IOException if the JSON string is invalid with respect to SerpGoogleSearchByImageTasksFixedTaskInfo
  */
  public static SerpGoogleSearchByImageTasksFixedTaskInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SerpGoogleSearchByImageTasksFixedTaskInfo.class);
  }

 /**
  * Convert an instance of SerpGoogleSearchByImageTasksFixedTaskInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

