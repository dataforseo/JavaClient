/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SentimentConnotationInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T15:03:59.388297468Z[Etc/UTC]")
public class SentimentConnotationInfo {
  public static final String SERIALIZED_NAME_ANGER = "anger";
  @SerializedName(SERIALIZED_NAME_ANGER)
  private Double anger;

  public static final String SERIALIZED_NAME_HAPPINESS = "happiness";
  @SerializedName(SERIALIZED_NAME_HAPPINESS)
  private Double happiness;

  public static final String SERIALIZED_NAME_LOVE = "love";
  @SerializedName(SERIALIZED_NAME_LOVE)
  private Double love;

  public static final String SERIALIZED_NAME_SADNESS = "sadness";
  @SerializedName(SERIALIZED_NAME_SADNESS)
  private Double sadness;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private Double share;

  public static final String SERIALIZED_NAME_FUN = "fun";
  @SerializedName(SERIALIZED_NAME_FUN)
  private Double fun;

  public SentimentConnotationInfo() {
  }

  public SentimentConnotationInfo anger(Double anger) {
    this.anger = anger;
    return this;
  }

   /**
   * anger
   * @return anger
  **/
  @javax.annotation.Nullable
  public Double getAnger() {
    return anger;
  }

  public void setAnger(Double anger) {
    this.anger = anger;
  }


  public SentimentConnotationInfo happiness(Double happiness) {
    this.happiness = happiness;
    return this;
  }

   /**
   * happiness
   * @return happiness
  **/
  @javax.annotation.Nullable
  public Double getHappiness() {
    return happiness;
  }

  public void setHappiness(Double happiness) {
    this.happiness = happiness;
  }


  public SentimentConnotationInfo love(Double love) {
    this.love = love;
    return this;
  }

   /**
   * love
   * @return love
  **/
  @javax.annotation.Nullable
  public Double getLove() {
    return love;
  }

  public void setLove(Double love) {
    this.love = love;
  }


  public SentimentConnotationInfo sadness(Double sadness) {
    this.sadness = sadness;
    return this;
  }

   /**
   * sadness
   * @return sadness
  **/
  @javax.annotation.Nullable
  public Double getSadness() {
    return sadness;
  }

  public void setSadness(Double sadness) {
    this.sadness = sadness;
  }


  public SentimentConnotationInfo share(Double share) {
    this.share = share;
    return this;
  }

   /**
   * share
   * @return share
  **/
  @javax.annotation.Nullable
  public Double getShare() {
    return share;
  }

  public void setShare(Double share) {
    this.share = share;
  }


  public SentimentConnotationInfo fun(Double fun) {
    this.fun = fun;
    return this;
  }

   /**
   * fun
   * @return fun
  **/
  @javax.annotation.Nullable
  public Double getFun() {
    return fun;
  }

  public void setFun(Double fun) {
    this.fun = fun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentimentConnotationInfo sentimentConnotationInfo = (SentimentConnotationInfo) o;
    return Objects.equals(this.anger, sentimentConnotationInfo.anger) &&
        Objects.equals(this.happiness, sentimentConnotationInfo.happiness) &&
        Objects.equals(this.love, sentimentConnotationInfo.love) &&
        Objects.equals(this.sadness, sentimentConnotationInfo.sadness) &&
        Objects.equals(this.share, sentimentConnotationInfo.share) &&
        Objects.equals(this.fun, sentimentConnotationInfo.fun);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(anger, happiness, love, sadness, share, fun);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentimentConnotationInfo {\n");
    sb.append("    anger: ").append(toIndentedString(anger)).append("\n");
    sb.append("    happiness: ").append(toIndentedString(happiness)).append("\n");
    sb.append("    love: ").append(toIndentedString(love)).append("\n");
    sb.append("    sadness: ").append(toIndentedString(sadness)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    fun: ").append(toIndentedString(fun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anger");
    openapiFields.add("happiness");
    openapiFields.add("love");
    openapiFields.add("sadness");
    openapiFields.add("share");
    openapiFields.add("fun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SentimentConnotationInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SentimentConnotationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentimentConnotationInfo is not found in the empty JSON string", SentimentConnotationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentimentConnotationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentimentConnotationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentimentConnotationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentimentConnotationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentimentConnotationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentimentConnotationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SentimentConnotationInfo>() {
           @Override
           public void write(JsonWriter out, SentimentConnotationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentimentConnotationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SentimentConnotationInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SentimentConnotationInfo
  * @throws IOException if the JSON string is invalid with respect to SentimentConnotationInfo
  */
  public static SentimentConnotationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentimentConnotationInfo.class);
  }

 /**
  * Convert an instance of SentimentConnotationInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

