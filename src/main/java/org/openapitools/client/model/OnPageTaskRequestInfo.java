/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * OnPageTaskRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-02-29T15:03:59.388297468Z[Etc/UTC]")
public class OnPageTaskRequestInfo {
  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_MAX_CRAWL_PAGES = "max_crawl_pages";
  @SerializedName(SERIALIZED_NAME_MAX_CRAWL_PAGES)
  private Integer maxCrawlPages;

  public static final String SERIALIZED_NAME_START_URL = "start_url";
  @SerializedName(SERIALIZED_NAME_START_URL)
  private String startUrl;

  public static final String SERIALIZED_NAME_FORCE_SITEWIDE_CHECKS = "force_sitewide_checks";
  @SerializedName(SERIALIZED_NAME_FORCE_SITEWIDE_CHECKS)
  private Boolean forceSitewideChecks;

  public static final String SERIALIZED_NAME_PRIORITY_URLS = "priority_urls";
  @SerializedName(SERIALIZED_NAME_PRIORITY_URLS)
  private List<String> priorityUrls;

  public static final String SERIALIZED_NAME_MAX_CRAWL_DEPTH = "max_crawl_depth";
  @SerializedName(SERIALIZED_NAME_MAX_CRAWL_DEPTH)
  private Integer maxCrawlDepth;

  public static final String SERIALIZED_NAME_CRAWL_DELAY = "crawl_delay";
  @SerializedName(SERIALIZED_NAME_CRAWL_DELAY)
  private Integer crawlDelay;

  public static final String SERIALIZED_NAME_STORE_RAW_HTML = "store_raw_html";
  @SerializedName(SERIALIZED_NAME_STORE_RAW_HTML)
  private Boolean storeRawHtml;

  public static final String SERIALIZED_NAME_ENABLE_CONTENT_PARSING = "enable_content_parsing";
  @SerializedName(SERIALIZED_NAME_ENABLE_CONTENT_PARSING)
  private Boolean enableContentParsing;

  public static final String SERIALIZED_NAME_SUPPORT_COOKIES = "support_cookies";
  @SerializedName(SERIALIZED_NAME_SUPPORT_COOKIES)
  private Boolean supportCookies;

  public static final String SERIALIZED_NAME_ACCEPT_LANGUAGE = "accept_language";
  @SerializedName(SERIALIZED_NAME_ACCEPT_LANGUAGE)
  private String acceptLanguage;

  public static final String SERIALIZED_NAME_CUSTOM_ROBOTS_TXT = "custom_robots_txt";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ROBOTS_TXT)
  private String customRobotsTxt;

  public static final String SERIALIZED_NAME_ROBOTS_TXT_MERGE_MODE = "robots_txt_merge_mode";
  @SerializedName(SERIALIZED_NAME_ROBOTS_TXT_MERGE_MODE)
  private String robotsTxtMergeMode;

  public static final String SERIALIZED_NAME_CUSTOM_USER_AGENT = "custom_user_agent";
  @SerializedName(SERIALIZED_NAME_CUSTOM_USER_AGENT)
  private String customUserAgent;

  public static final String SERIALIZED_NAME_BROWSER_PRESET = "browser_preset";
  @SerializedName(SERIALIZED_NAME_BROWSER_PRESET)
  private String browserPreset;

  public static final String SERIALIZED_NAME_BROWSER_SCREEN_WIDTH = "browser_screen_width";
  @SerializedName(SERIALIZED_NAME_BROWSER_SCREEN_WIDTH)
  private Long browserScreenWidth;

  public static final String SERIALIZED_NAME_BROWSER_SCREEN_HEIGHT = "browser_screen_height";
  @SerializedName(SERIALIZED_NAME_BROWSER_SCREEN_HEIGHT)
  private Integer browserScreenHeight;

  public static final String SERIALIZED_NAME_BROWSER_SCREEN_SCALE_FACTOR = "browser_screen_scale_factor";
  @SerializedName(SERIALIZED_NAME_BROWSER_SCREEN_SCALE_FACTOR)
  private Float browserScreenScaleFactor;

  public static final String SERIALIZED_NAME_RESPECT_SITEMAP = "respect_sitemap";
  @SerializedName(SERIALIZED_NAME_RESPECT_SITEMAP)
  private Boolean respectSitemap;

  public static final String SERIALIZED_NAME_CUSTOM_SITEMAP = "custom_sitemap";
  @SerializedName(SERIALIZED_NAME_CUSTOM_SITEMAP)
  private String customSitemap;

  public static final String SERIALIZED_NAME_CRAWL_SITEMAP_ONLY = "crawl_sitemap_only";
  @SerializedName(SERIALIZED_NAME_CRAWL_SITEMAP_ONLY)
  private Boolean crawlSitemapOnly;

  public static final String SERIALIZED_NAME_LOAD_RESOURCES = "load_resources";
  @SerializedName(SERIALIZED_NAME_LOAD_RESOURCES)
  private Boolean loadResources;

  public static final String SERIALIZED_NAME_ENABLE_WWW_REDIRECT_CHECK = "enable_www_redirect_check";
  @SerializedName(SERIALIZED_NAME_ENABLE_WWW_REDIRECT_CHECK)
  private Boolean enableWwwRedirectCheck;

  public static final String SERIALIZED_NAME_ENABLE_JAVASCRIPT = "enable_javascript";
  @SerializedName(SERIALIZED_NAME_ENABLE_JAVASCRIPT)
  private Boolean enableJavascript;

  public static final String SERIALIZED_NAME_ENABLE_XHR = "enable_xhr";
  @SerializedName(SERIALIZED_NAME_ENABLE_XHR)
  private Boolean enableXhr;

  public static final String SERIALIZED_NAME_ENABLE_BROWSER_RENDERING = "enable_browser_rendering";
  @SerializedName(SERIALIZED_NAME_ENABLE_BROWSER_RENDERING)
  private Boolean enableBrowserRendering;

  public static final String SERIALIZED_NAME_DISABLE_COOKIE_POPUP = "disable_cookie_popup";
  @SerializedName(SERIALIZED_NAME_DISABLE_COOKIE_POPUP)
  private Boolean disableCookiePopup;

  public static final String SERIALIZED_NAME_CUSTOM_JS = "custom_js";
  @SerializedName(SERIALIZED_NAME_CUSTOM_JS)
  private String customJs;

  public static final String SERIALIZED_NAME_VALIDATE_MICROMARKUP = "validate_micromarkup";
  @SerializedName(SERIALIZED_NAME_VALIDATE_MICROMARKUP)
  private Boolean validateMicromarkup;

  public static final String SERIALIZED_NAME_ALLOW_SUBDOMAINS = "allow_subdomains";
  @SerializedName(SERIALIZED_NAME_ALLOW_SUBDOMAINS)
  private Boolean allowSubdomains;

  public static final String SERIALIZED_NAME_ALLOWED_SUBDOMAINS = "allowed_subdomains";
  @SerializedName(SERIALIZED_NAME_ALLOWED_SUBDOMAINS)
  private List<String> allowedSubdomains;

  public static final String SERIALIZED_NAME_DISALLOWED_SUBDOMAINS = "disallowed_subdomains";
  @SerializedName(SERIALIZED_NAME_DISALLOWED_SUBDOMAINS)
  private List<String> disallowedSubdomains;

  public static final String SERIALIZED_NAME_CHECK_SPELL = "check_spell";
  @SerializedName(SERIALIZED_NAME_CHECK_SPELL)
  private Boolean checkSpell;

  public static final String SERIALIZED_NAME_CHECK_SPELL_LANGUAGE = "check_spell_language";
  @SerializedName(SERIALIZED_NAME_CHECK_SPELL_LANGUAGE)
  private String checkSpellLanguage;

  public static final String SERIALIZED_NAME_CHECK_SPELL_EXCEPTIONS = "check_spell_exceptions";
  @SerializedName(SERIALIZED_NAME_CHECK_SPELL_EXCEPTIONS)
  private List<String> checkSpellExceptions;

  public static final String SERIALIZED_NAME_CALCULATE_KEYWORD_DENSITY = "calculate_keyword_density";
  @SerializedName(SERIALIZED_NAME_CALCULATE_KEYWORD_DENSITY)
  private Boolean calculateKeywordDensity;

  public static final String SERIALIZED_NAME_CHECKS_THRESHOLD = "checks_threshold";
  @SerializedName(SERIALIZED_NAME_CHECKS_THRESHOLD)
  private Map<String, Long> checksThreshold;

  public static final String SERIALIZED_NAME_DISABLE_SITEWIDE_CHECKS = "disable_sitewide_checks";
  @SerializedName(SERIALIZED_NAME_DISABLE_SITEWIDE_CHECKS)
  private List<String> disableSitewideChecks;

  public static final String SERIALIZED_NAME_DISABLE_PAGE_CHECKS = "disable_page_checks";
  @SerializedName(SERIALIZED_NAME_DISABLE_PAGE_CHECKS)
  private List<String> disablePageChecks;

  public static final String SERIALIZED_NAME_SWITCH_POOL = "switch_pool";
  @SerializedName(SERIALIZED_NAME_SWITCH_POOL)
  private Boolean switchPool;

  public static final String SERIALIZED_NAME_RETURN_DESPITE_TIMEOUT = "return_despite_timeout";
  @SerializedName(SERIALIZED_NAME_RETURN_DESPITE_TIMEOUT)
  private Boolean returnDespiteTimeout;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public static final String SERIALIZED_NAME_PINGBACK_URL = "pingback_url";
  @SerializedName(SERIALIZED_NAME_PINGBACK_URL)
  private String pingbackUrl;

  public OnPageTaskRequestInfo() {
  }

  public OnPageTaskRequestInfo target(String target) {
    this.target = target;
    return this;
  }

   /**
   * target domain required field domain name should be specified without https:// and www. if you specify the page URL, the results will be returned for the domain included in the URL
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public OnPageTaskRequestInfo maxCrawlPages(Integer maxCrawlPages) {
    this.maxCrawlPages = maxCrawlPages;
    return this;
  }

   /**
   * crawled pages limit required field the number of pages to crawl on the specified domain Note: if you set max_crawl_pages to 1 and do not specify start_url or set a homepage in it, the following sitewide checks will be disabled: test_canonicalization, enable_www_redirect_check, test_hidden_server_signature, test_page_not_found, test_directory_browsing, test_https_redirect to enable them anyway, set force_sitewide_checks to trueif you set max_crawl_pages to 1 and specify start_url other than a homepage, all sitewide checks will be disabled; to enable them anyway, set force_sitewide_checks to true
   * @return maxCrawlPages
  **/
  @javax.annotation.Nullable
  public Integer getMaxCrawlPages() {
    return maxCrawlPages;
  }

  public void setMaxCrawlPages(Integer maxCrawlPages) {
    this.maxCrawlPages = maxCrawlPages;
  }


  public OnPageTaskRequestInfo startUrl(String startUrl) {
    this.startUrl = startUrl;
    return this;
  }

   /**
   * the first url to crawl  optional field Note: you should specify an absolute URL if you want to crawl a single page, specify its URL in this field and additionally set the max_crawl_pages parameter to 1 you can also use the live Instant Pages endpoint to get page-specific data
   * @return startUrl
  **/
  @javax.annotation.Nullable
  public String getStartUrl() {
    return startUrl;
  }

  public void setStartUrl(String startUrl) {
    this.startUrl = startUrl;
  }


  public OnPageTaskRequestInfo forceSitewideChecks(Boolean forceSitewideChecks) {
    this.forceSitewideChecks = forceSitewideChecks;
    return this;
  }

   /**
   * enable sitewide checks when crawling a single page optional field set to true to get data on sitewide checks when crawling a single page; default value: false
   * @return forceSitewideChecks
  **/
  @javax.annotation.Nullable
  public Boolean getForceSitewideChecks() {
    return forceSitewideChecks;
  }

  public void setForceSitewideChecks(Boolean forceSitewideChecks) {
    this.forceSitewideChecks = forceSitewideChecks;
  }


  public OnPageTaskRequestInfo priorityUrls(List<String> priorityUrls) {
    this.priorityUrls = priorityUrls;
    return this;
  }

  public OnPageTaskRequestInfo addPriorityUrlsItem(String priorityUrlsItem) {
    if (this.priorityUrls == null) {
      this.priorityUrls = new ArrayList<>();
    }
    this.priorityUrls.add(priorityUrlsItem);
    return this;
  }

   /**
   * urls to be crawled bypassing the queue optional field URLs specified in this array will be crawled in the first instance, bypassing the crawling queue; Note: you should specify the absolute URL; you can specify up to 20 URLs; all URLs in the array must belong to the target domain; subdomains will be ignored unless the allow_subdomains parameter is set to trueexample: \&quot;priority_urls\&quot;: [ \&quot;https://dataforseo.com/apis/serp-api\&quot;, \&quot;https://dataforseo.com/contact\&quot; ]
   * @return priorityUrls
  **/
  @javax.annotation.Nullable
  public List<String> getPriorityUrls() {
    return priorityUrls;
  }

  public void setPriorityUrls(List<String> priorityUrls) {
    this.priorityUrls = priorityUrls;
  }


  public OnPageTaskRequestInfo maxCrawlDepth(Integer maxCrawlDepth) {
    this.maxCrawlDepth = maxCrawlDepth;
    return this;
  }

   /**
   * crawl depth optional field the linking depth of the pages to crawl; for example, starting page of the crawl is level 0, pages that have links from that page are level 1, etc.
   * @return maxCrawlDepth
  **/
  @javax.annotation.Nullable
  public Integer getMaxCrawlDepth() {
    return maxCrawlDepth;
  }

  public void setMaxCrawlDepth(Integer maxCrawlDepth) {
    this.maxCrawlDepth = maxCrawlDepth;
  }


  public OnPageTaskRequestInfo crawlDelay(Integer crawlDelay) {
    this.crawlDelay = crawlDelay;
    return this;
  }

   /**
   * delay between hits, ms optional field the custom delay between crawler hits to the server default value: 2000
   * @return crawlDelay
  **/
  @javax.annotation.Nullable
  public Integer getCrawlDelay() {
    return crawlDelay;
  }

  public void setCrawlDelay(Integer crawlDelay) {
    this.crawlDelay = crawlDelay;
  }


  public OnPageTaskRequestInfo storeRawHtml(Boolean storeRawHtml) {
    this.storeRawHtml = storeRawHtml;
    return this;
  }

   /**
   * store HTML of crawled pages optional field set to true if you want to get the HTML of the page using the OnPage Raw HTML endpoint default value: false
   * @return storeRawHtml
  **/
  @javax.annotation.Nullable
  public Boolean getStoreRawHtml() {
    return storeRawHtml;
  }

  public void setStoreRawHtml(Boolean storeRawHtml) {
    this.storeRawHtml = storeRawHtml;
  }


  public OnPageTaskRequestInfo enableContentParsing(Boolean enableContentParsing) {
    this.enableContentParsing = enableContentParsing;
    return this;
  }

   /**
   * parse content on crawled pages optional field set to true to use the OnPage Content Parsing endpoint default value: false
   * @return enableContentParsing
  **/
  @javax.annotation.Nullable
  public Boolean getEnableContentParsing() {
    return enableContentParsing;
  }

  public void setEnableContentParsing(Boolean enableContentParsing) {
    this.enableContentParsing = enableContentParsing;
  }


  public OnPageTaskRequestInfo supportCookies(Boolean supportCookies) {
    this.supportCookies = supportCookies;
    return this;
  }

   /**
   * support cookies on crawled pages optional field set to true to support cookies when crawling the pages default value: false
   * @return supportCookies
  **/
  @javax.annotation.Nullable
  public Boolean getSupportCookies() {
    return supportCookies;
  }

  public void setSupportCookies(Boolean supportCookies) {
    this.supportCookies = supportCookies;
  }


  public OnPageTaskRequestInfo acceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
    return this;
  }

   /**
   * language header for accessing the website optional field all locale formats are supported (xx, xx-XX, xxx-XX, etc.) Note: if you do not specify this parameter, some websites may deny access; in this case, pages will be returned with the \&quot;type\&quot;:\&quot;broken in the response array
   * @return acceptLanguage
  **/
  @javax.annotation.Nullable
  public String getAcceptLanguage() {
    return acceptLanguage;
  }

  public void setAcceptLanguage(String acceptLanguage) {
    this.acceptLanguage = acceptLanguage;
  }


  public OnPageTaskRequestInfo customRobotsTxt(String customRobotsTxt) {
    this.customRobotsTxt = customRobotsTxt;
    return this;
  }

   /**
   * custom robots.txt settings optional field example: Disallow: /directory1/
   * @return customRobotsTxt
  **/
  @javax.annotation.Nullable
  public String getCustomRobotsTxt() {
    return customRobotsTxt;
  }

  public void setCustomRobotsTxt(String customRobotsTxt) {
    this.customRobotsTxt = customRobotsTxt;
  }


  public OnPageTaskRequestInfo robotsTxtMergeMode(String robotsTxtMergeMode) {
    this.robotsTxtMergeMode = robotsTxtMergeMode;
    return this;
  }

   /**
   * merge with or override robots.txt settings optional field possible values: merge, override; set to override if you want to ignore website crawling restrictions and other robots.txt settings default value: merge; Note: if set to override, specify the custom_robots_txt parameter
   * @return robotsTxtMergeMode
  **/
  @javax.annotation.Nullable
  public String getRobotsTxtMergeMode() {
    return robotsTxtMergeMode;
  }

  public void setRobotsTxtMergeMode(String robotsTxtMergeMode) {
    this.robotsTxtMergeMode = robotsTxtMergeMode;
  }


  public OnPageTaskRequestInfo customUserAgent(String customUserAgent) {
    this.customUserAgent = customUserAgent;
    return this;
  }

   /**
   * custom user agent optional field custom user agent for crawling a website example: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.116 Safari/537.36  default value: Mozilla/5.0 (compatible; RSiteAuditor)
   * @return customUserAgent
  **/
  @javax.annotation.Nullable
  public String getCustomUserAgent() {
    return customUserAgent;
  }

  public void setCustomUserAgent(String customUserAgent) {
    this.customUserAgent = customUserAgent;
  }


  public OnPageTaskRequestInfo browserPreset(String browserPreset) {
    this.browserPreset = browserPreset;
    return this;
  }

   /**
   * preset for browser screen parameters optional field if you use this field, you don’t need to indicate browser_screen_width, browser_screen_height, browser_screen_scale_factorpossible values: desktop, mobile, tabletdesktop preset will apply the following values:browser_screen_width: 1920 browser_screen_height: 1080 browser_screen_scale_factor: 1mobile preset will apply the following values:browser_screen_width: 390 browser_screen_height: 844 browser_screen_scale_factor: 3tablet preset will apply the following values:browser_screen_width: 1024 browser_screen_height: 1366 browser_screen_scale_factor: 2 Note: to use this parameter, set enable_javascript or enable_browser_rendering to true
   * @return browserPreset
  **/
  @javax.annotation.Nullable
  public String getBrowserPreset() {
    return browserPreset;
  }

  public void setBrowserPreset(String browserPreset) {
    this.browserPreset = browserPreset;
  }


  public OnPageTaskRequestInfo browserScreenWidth(Long browserScreenWidth) {
    this.browserScreenWidth = browserScreenWidth;
    return this;
  }

   /**
   * browser screen width optional field you can set a custom browser screen width to perform audit for a particular device; if you use this field, you don’t need to indicate browser_preset as it will be ignored; Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value, in pixels: 240 maximum value, in pixels: 9999
   * @return browserScreenWidth
  **/
  @javax.annotation.Nullable
  public Long getBrowserScreenWidth() {
    return browserScreenWidth;
  }

  public void setBrowserScreenWidth(Long browserScreenWidth) {
    this.browserScreenWidth = browserScreenWidth;
  }


  public OnPageTaskRequestInfo browserScreenHeight(Integer browserScreenHeight) {
    this.browserScreenHeight = browserScreenHeight;
    return this;
  }

   /**
   * browser screen height optional field you can set a custom browser screen height to perform an audit for a particular device; if you use this field, you don’t need to indicate browser_preset as it will be ignored; Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value, in pixels: 240 maximum value, in pixels: 9999
   * @return browserScreenHeight
  **/
  @javax.annotation.Nullable
  public Integer getBrowserScreenHeight() {
    return browserScreenHeight;
  }

  public void setBrowserScreenHeight(Integer browserScreenHeight) {
    this.browserScreenHeight = browserScreenHeight;
  }


  public OnPageTaskRequestInfo browserScreenScaleFactor(Float browserScreenScaleFactor) {
    this.browserScreenScaleFactor = browserScreenScaleFactor;
    return this;
  }

   /**
   * browser screen scale factor optional field you can set a custom browser screen resolution ratio to perform audit for a particular device; if you use this field, you don’t need to indicate browser_preset as it will be ignored; Note: to use this parameter, set enable_javascript or enable_browser_rendering to trueminimum value: 0.5 maximum value: 3
   * @return browserScreenScaleFactor
  **/
  @javax.annotation.Nullable
  public Float getBrowserScreenScaleFactor() {
    return browserScreenScaleFactor;
  }

  public void setBrowserScreenScaleFactor(Float browserScreenScaleFactor) {
    this.browserScreenScaleFactor = browserScreenScaleFactor;
  }


  public OnPageTaskRequestInfo respectSitemap(Boolean respectSitemap) {
    this.respectSitemap = respectSitemap;
    return this;
  }

   /**
   * respect sitemap when crawling optional field set to true if you want to follow the order of pages indicated in the primary sitemap when crawling; default value: false Note: if set to true, the click_depth value in the API response will equal 0; the max_crawl_depth field of the request will be ignored, you can specify the number of pages to crawl using the max_crawl_pages parameter
   * @return respectSitemap
  **/
  @javax.annotation.Nullable
  public Boolean getRespectSitemap() {
    return respectSitemap;
  }

  public void setRespectSitemap(Boolean respectSitemap) {
    this.respectSitemap = respectSitemap;
  }


  public OnPageTaskRequestInfo customSitemap(String customSitemap) {
    this.customSitemap = customSitemap;
    return this;
  }

   /**
   * custom sitemap url optional field the URL of the page where the alternative sitemap is located Note: if you want to use this parameter, respect_sitemap should be true
   * @return customSitemap
  **/
  @javax.annotation.Nullable
  public String getCustomSitemap() {
    return customSitemap;
  }

  public void setCustomSitemap(String customSitemap) {
    this.customSitemap = customSitemap;
  }


  public OnPageTaskRequestInfo crawlSitemapOnly(Boolean crawlSitemapOnly) {
    this.crawlSitemapOnly = crawlSitemapOnly;
    return this;
  }

   /**
   * crawl only pages indicated in the sitemap optional field set to true if you want to crawl only the pages indicated in the sitemap if you set this parameter to true and do not specify custom_sitemap, we will crawl the default sitemap default value: false Note: if you want to use this parameter, respect_sitemap should be true
   * @return crawlSitemapOnly
  **/
  @javax.annotation.Nullable
  public Boolean getCrawlSitemapOnly() {
    return crawlSitemapOnly;
  }

  public void setCrawlSitemapOnly(Boolean crawlSitemapOnly) {
    this.crawlSitemapOnly = crawlSitemapOnly;
  }


  public OnPageTaskRequestInfo loadResources(Boolean loadResources) {
    this.loadResources = loadResources;
    return this;
  }

   /**
   * load resources optional field set to true if you want to load image, stylesheets, scripts, and broken resources default value: false Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
   * @return loadResources
  **/
  @javax.annotation.Nullable
  public Boolean getLoadResources() {
    return loadResources;
  }

  public void setLoadResources(Boolean loadResources) {
    this.loadResources = loadResources;
  }


  public OnPageTaskRequestInfo enableWwwRedirectCheck(Boolean enableWwwRedirectCheck) {
    this.enableWwwRedirectCheck = enableWwwRedirectCheck;
    return this;
  }

   /**
   * check if the domain implemented the www redirection optional field set to true if you want to check if the requested domain implemented the www to non-www redirect; default value: false
   * @return enableWwwRedirectCheck
  **/
  @javax.annotation.Nullable
  public Boolean getEnableWwwRedirectCheck() {
    return enableWwwRedirectCheck;
  }

  public void setEnableWwwRedirectCheck(Boolean enableWwwRedirectCheck) {
    this.enableWwwRedirectCheck = enableWwwRedirectCheck;
  }


  public OnPageTaskRequestInfo enableJavascript(Boolean enableJavascript) {
    this.enableJavascript = enableJavascript;
    return this;
  }

   /**
   * load javascript on a page optional field set to true if you want to load the scripts available on a page default value: false Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
   * @return enableJavascript
  **/
  @javax.annotation.Nullable
  public Boolean getEnableJavascript() {
    return enableJavascript;
  }

  public void setEnableJavascript(Boolean enableJavascript) {
    this.enableJavascript = enableJavascript;
  }


  public OnPageTaskRequestInfo enableXhr(Boolean enableXhr) {
    this.enableXhr = enableXhr;
    return this;
  }

   /**
   * enable XMLHttpRequest on a page optional field set to true if you want our crawler to request data from a web server using the XMLHttpRequest object default value: false;if you use this field, enable_javascript must be set to true;
   * @return enableXhr
  **/
  @javax.annotation.Nullable
  public Boolean getEnableXhr() {
    return enableXhr;
  }

  public void setEnableXhr(Boolean enableXhr) {
    this.enableXhr = enableXhr;
  }


  public OnPageTaskRequestInfo enableBrowserRendering(Boolean enableBrowserRendering) {
    this.enableBrowserRendering = enableBrowserRendering;
    return this;
  }

   /**
   * emulate browser rendering to measure Core Web Vitals optional field by using this parameter you will be able to emulate a browser when loading a web page; enable_browser_rendering loads styles, images, fonts, animations, videos, and other resources on a page; default value: false set to true to obtain Core Web Vitals (FID, CLS, LCP) metrics in the response; if you use this field, enable_javascript, and load_resources parameters must be set to true Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
   * @return enableBrowserRendering
  **/
  @javax.annotation.Nullable
  public Boolean getEnableBrowserRendering() {
    return enableBrowserRendering;
  }

  public void setEnableBrowserRendering(Boolean enableBrowserRendering) {
    this.enableBrowserRendering = enableBrowserRendering;
  }


  public OnPageTaskRequestInfo disableCookiePopup(Boolean disableCookiePopup) {
    this.disableCookiePopup = disableCookiePopup;
    return this;
  }

   /**
   * disable the cookie popup optional field set to true if you want to disable the popup requesting cookie consent from the user; default value: false
   * @return disableCookiePopup
  **/
  @javax.annotation.Nullable
  public Boolean getDisableCookiePopup() {
    return disableCookiePopup;
  }

  public void setDisableCookiePopup(Boolean disableCookiePopup) {
    this.disableCookiePopup = disableCookiePopup;
  }


  public OnPageTaskRequestInfo customJs(String customJs) {
    this.customJs = customJs;
    return this;
  }

   /**
   * custom javascript optional field Note that the execution time for the script you enter here should be 700 ms maximum, for example, you can use the following JS snippet to check if the website contains Google Tag Manager as a scr attribute: let meta &#x3D; { haveGoogleAnalytics: false, haveTagManager: false };\\r\\nfor (var i &#x3D; 0; i &lt; document.scripts.length; i++) {\\r\\n let src &#x3D; document.scripts[i].getAttribute(\\\&quot;src\\\&quot;);\\r\\n if (src !&#x3D; undefined) {\\r\\n if (src.indexOf(\\\&quot;analytics.js\\\&quot;) &gt;&#x3D; 0)\\r\\n      meta.haveGoogleAnalytics &#x3D; true;\\r\\n\\tif (src.indexOf(\\\&quot;gtm.js\\\&quot;) &gt;&#x3D; 0)\\r\\n      meta.haveTagManager &#x3D; true;\\r\\n  }\\r\\n}\\r\\nmeta;the returned value depends on what you specified in this field. For instance, if you specify the following script: meta &#x3D; {}; meta.url &#x3D; document.URL; meta.test &#x3D; &#39;test&#39;; meta; as a response you will receive the following data: \&quot;custom_js_response\&quot;: { \&quot;url\&quot;: \&quot;https://dataforseo.com/\&quot;, \&quot;test\&quot;: \&quot;test\&quot; } Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article; the cost can be calculated on the Pricing Page
   * @return customJs
  **/
  @javax.annotation.Nullable
  public String getCustomJs() {
    return customJs;
  }

  public void setCustomJs(String customJs) {
    this.customJs = customJs;
  }


  public OnPageTaskRequestInfo validateMicromarkup(Boolean validateMicromarkup) {
    this.validateMicromarkup = validateMicromarkup;
    return this;
  }

   /**
   * enable microdata validation optional field set to true if you want to use the OnPage API Microdata endpoint default value: false
   * @return validateMicromarkup
  **/
  @javax.annotation.Nullable
  public Boolean getValidateMicromarkup() {
    return validateMicromarkup;
  }

  public void setValidateMicromarkup(Boolean validateMicromarkup) {
    this.validateMicromarkup = validateMicromarkup;
  }


  public OnPageTaskRequestInfo allowSubdomains(Boolean allowSubdomains) {
    this.allowSubdomains = allowSubdomains;
    return this;
  }

   /**
   * include pages on subdomains optional field set to true if you want to crawl all subdomains of a target website default value: false
   * @return allowSubdomains
  **/
  @javax.annotation.Nullable
  public Boolean getAllowSubdomains() {
    return allowSubdomains;
  }

  public void setAllowSubdomains(Boolean allowSubdomains) {
    this.allowSubdomains = allowSubdomains;
  }


  public OnPageTaskRequestInfo allowedSubdomains(List<String> allowedSubdomains) {
    this.allowedSubdomains = allowedSubdomains;
    return this;
  }

  public OnPageTaskRequestInfo addAllowedSubdomainsItem(String allowedSubdomainsItem) {
    if (this.allowedSubdomains == null) {
      this.allowedSubdomains = new ArrayList<>();
    }
    this.allowedSubdomains.add(allowedSubdomainsItem);
    return this;
  }

   /**
   * subdomains to crawl optional field specify subdomains that you want to crawl example: [\&quot;blog.site.com\&quot;, \&quot;my.site.com\&quot;, \&quot;shop.site.com\&quot;] Note: to use this parameter, the allow_subdomains parameter should be set to false; otherwise, the content of allowed_subdomains field will be ignored and the results will be returned for all subdomains
   * @return allowedSubdomains
  **/
  @javax.annotation.Nullable
  public List<String> getAllowedSubdomains() {
    return allowedSubdomains;
  }

  public void setAllowedSubdomains(List<String> allowedSubdomains) {
    this.allowedSubdomains = allowedSubdomains;
  }


  public OnPageTaskRequestInfo disallowedSubdomains(List<String> disallowedSubdomains) {
    this.disallowedSubdomains = disallowedSubdomains;
    return this;
  }

  public OnPageTaskRequestInfo addDisallowedSubdomainsItem(String disallowedSubdomainsItem) {
    if (this.disallowedSubdomains == null) {
      this.disallowedSubdomains = new ArrayList<>();
    }
    this.disallowedSubdomains.add(disallowedSubdomainsItem);
    return this;
  }

   /**
   * subdomains not to crawl optional field specify subdomains that you don’t want to crawl example: [\&quot;status.site.com\&quot;, \&quot;docs.site.com\&quot;] Note: to use this parameter, the allow_subdomains parameter should be set to true
   * @return disallowedSubdomains
  **/
  @javax.annotation.Nullable
  public List<String> getDisallowedSubdomains() {
    return disallowedSubdomains;
  }

  public void setDisallowedSubdomains(List<String> disallowedSubdomains) {
    this.disallowedSubdomains = disallowedSubdomains;
  }


  public OnPageTaskRequestInfo checkSpell(Boolean checkSpell) {
    this.checkSpell = checkSpell;
    return this;
  }

   /**
   * check spelling optional field set to true to check spelling on a website using Hunspell library default value: false
   * @return checkSpell
  **/
  @javax.annotation.Nullable
  public Boolean getCheckSpell() {
    return checkSpell;
  }

  public void setCheckSpell(Boolean checkSpell) {
    this.checkSpell = checkSpell;
  }


  public OnPageTaskRequestInfo checkSpellLanguage(String checkSpellLanguage) {
    this.checkSpellLanguage = checkSpellLanguage;
    return this;
  }

   /**
   * language of the spell check optional field supported languages: ‘hy’, ‘eu’, ‘bg’, ‘ca’, ‘hr’, ‘cs’, ‘da’, ‘nl’, ‘en’, ‘eo’, ‘et’, ‘fo’, ‘fa’, ‘fr’, ‘fy’, ‘gl’, ‘ka’, ‘de’, ‘el’, ‘he’, ‘hu’, ‘is’, ‘ia’, ‘ga’, ‘it’, ‘rw’, ‘la’, ‘lv’, ‘lt’, ‘mk’, ‘mn’, ‘ne’, ‘nb’, ‘nn’, ‘pl’, ‘pt’, ‘ro’, ‘gd’, ‘sr’, ‘sk’, ‘sl’, ‘es’, ‘sv’, ‘tr’, ‘tk’, ‘uk’, ‘vi’ Note: if no language is specified, it will be set automatically based on page content
   * @return checkSpellLanguage
  **/
  @javax.annotation.Nullable
  public String getCheckSpellLanguage() {
    return checkSpellLanguage;
  }

  public void setCheckSpellLanguage(String checkSpellLanguage) {
    this.checkSpellLanguage = checkSpellLanguage;
  }


  public OnPageTaskRequestInfo checkSpellExceptions(List<String> checkSpellExceptions) {
    this.checkSpellExceptions = checkSpellExceptions;
    return this;
  }

  public OnPageTaskRequestInfo addCheckSpellExceptionsItem(String checkSpellExceptionsItem) {
    if (this.checkSpellExceptions == null) {
      this.checkSpellExceptions = new ArrayList<>();
    }
    this.checkSpellExceptions.add(checkSpellExceptionsItem);
    return this;
  }

   /**
   * words excluded from spell check optional field specify the words that you want to exclude from spell check maximum word length: 100 characters maximum amount of words: 1000 example: \&quot;SERP\&quot;, \&quot;minifiers\&quot;, \&quot;JavaScript\&quot;
   * @return checkSpellExceptions
  **/
  @javax.annotation.Nullable
  public List<String> getCheckSpellExceptions() {
    return checkSpellExceptions;
  }

  public void setCheckSpellExceptions(List<String> checkSpellExceptions) {
    this.checkSpellExceptions = checkSpellExceptions;
  }


  public OnPageTaskRequestInfo calculateKeywordDensity(Boolean calculateKeywordDensity) {
    this.calculateKeywordDensity = calculateKeywordDensity;
    return this;
  }

   /**
   * calculate keyword density for the target domain optional field set to true if you want to calculate keyword density for website pages default value: false Note: if you use this parameter, additional charges will apply; learn more about the cost of tasks with this parameter in our help article once the crawl is completed, you can obtain keyword density values with the Keyword Density endpoint
   * @return calculateKeywordDensity
  **/
  @javax.annotation.Nullable
  public Boolean getCalculateKeywordDensity() {
    return calculateKeywordDensity;
  }

  public void setCalculateKeywordDensity(Boolean calculateKeywordDensity) {
    this.calculateKeywordDensity = calculateKeywordDensity;
  }


  public OnPageTaskRequestInfo checksThreshold(Map<String, Long> checksThreshold) {
    this.checksThreshold = checksThreshold;
    return this;
  }

  public OnPageTaskRequestInfo putChecksThresholdItem(String key, Long checksThresholdItem) {
    if (this.checksThreshold == null) {
      this.checksThreshold = new HashMap<>();
    }
    this.checksThreshold.put(key, checksThresholdItem);
    return this;
  }

   /**
   * custom threshold values for checks optional field you can specify custom threshold values for the parameters included in the checks object of OnPage API responses; Note: only integer threshold values can be modified; for example, the high_loading_time and large_page_size parameters are set to 3 seconds and 1 megabyte respectively by default; if you want to change these thresholds to 1 second and 1000 kbytes, use the following snippet: \&quot;checks_threshold\&quot;: { \&quot;high_loading_time\&quot;: 1, \&quot;large_page_size\&quot;: 1000 }available customizable parameters with default values: \&quot;title_too_short\&quot;, default value: 30, type: \&quot;int\&quot; \&quot;title_too_long\&quot;, default value: 65, type: \&quot;int\&quot; \&quot;small_page_size\&quot;, default value: 1024, type: \&quot;int\&quot; \&quot;large_page_size\&quot;, default value: 1048576 (1024 * 1024), type: \&quot;int\&quot; \&quot;low_character_count\&quot;, default value: 1024, type: \&quot;int\&quot; \&quot;high_character_count\&quot;, default value: 256000 (250 * 1024), type: \&quot;int\&quot; \&quot;low_content_rate\&quot;, default value: 0.1, type: \&quot;float\&quot; \&quot;high_content_rate\&quot;, default value: 0.9, type: \&quot;float\&quot; \&quot;high_loading_time\&quot;, default value: 3000, type: \&quot;int\&quot; \&quot;high_waiting_time\&quot;, default value: 1500, type: \&quot;int\&quot; \&quot;low_readability_rate\&quot;, default value: 15.0, type: \&quot;float\&quot; \&quot;irrelevant_description\&quot;, default value: 0.2, type: \&quot;float\&quot; \&quot;irrelevant_title\&quot;, default value: 0.3, type: \&quot;float\&quot; \&quot;irrelevant_meta_keywords\&quot;, default value: 0.6, type: \&quot;float\&quot;
   * @return checksThreshold
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getChecksThreshold() {
    return checksThreshold;
  }

  public void setChecksThreshold(Map<String, Long> checksThreshold) {
    this.checksThreshold = checksThreshold;
  }


  public OnPageTaskRequestInfo disableSitewideChecks(List<String> disableSitewideChecks) {
    this.disableSitewideChecks = disableSitewideChecks;
    return this;
  }

  public OnPageTaskRequestInfo addDisableSitewideChecksItem(String disableSitewideChecksItem) {
    if (this.disableSitewideChecks == null) {
      this.disableSitewideChecks = new ArrayList<>();
    }
    this.disableSitewideChecks.add(disableSitewideChecksItem);
    return this;
  }

   /**
   * prevent certain sitewide checks from running optional field specify the following checks to prevent them from running on the target website: \&quot;test_page_not_found\&quot; \&quot;test_canonicalization\&quot; \&quot;test_https_redirect\&quot; \&quot;test_directory_browsing\&quot;example: \&quot;disable_sitewide_checks\&quot;: [\&quot;test_directory_browsing\&quot;, \&quot;test_page_not_found\&quot;]learn more on our help center
   * @return disableSitewideChecks
  **/
  @javax.annotation.Nullable
  public List<String> getDisableSitewideChecks() {
    return disableSitewideChecks;
  }

  public void setDisableSitewideChecks(List<String> disableSitewideChecks) {
    this.disableSitewideChecks = disableSitewideChecks;
  }


  public OnPageTaskRequestInfo disablePageChecks(List<String> disablePageChecks) {
    this.disablePageChecks = disablePageChecks;
    return this;
  }

  public OnPageTaskRequestInfo addDisablePageChecksItem(String disablePageChecksItem) {
    if (this.disablePageChecks == null) {
      this.disablePageChecks = new ArrayList<>();
    }
    this.disablePageChecks.add(disablePageChecksItem);
    return this;
  }

   /**
   * prevent certain page checks from running optional field specify certain checks to prevent them from running and impacting the onpage_scoreexample: \&quot;disable_page_checks\&quot;: [\&quot;is_5xx_code\&quot;, \&quot;is_4xx_code\&quot;]
   * @return disablePageChecks
  **/
  @javax.annotation.Nullable
  public List<String> getDisablePageChecks() {
    return disablePageChecks;
  }

  public void setDisablePageChecks(List<String> disablePageChecks) {
    this.disablePageChecks = disablePageChecks;
  }


  public OnPageTaskRequestInfo switchPool(Boolean switchPool) {
    this.switchPool = switchPool;
    return this;
  }

   /**
   * switch proxy pool optional field if true, additional proxy pools will be used to obtain the requested data; the parameter can be used if a multitude of tasks is set simultaneously, resulting in occasional rate-limit and/or site_unreachable errors
   * @return switchPool
  **/
  @javax.annotation.Nullable
  public Boolean getSwitchPool() {
    return switchPool;
  }

  public void setSwitchPool(Boolean switchPool) {
    this.switchPool = switchPool;
  }


  public OnPageTaskRequestInfo returnDespiteTimeout(Boolean returnDespiteTimeout) {
    this.returnDespiteTimeout = returnDespiteTimeout;
    return this;
  }

   /**
   * return data on pages despite the timeout error optional field if true, the data will be provided on pages that failed to load within 120 seconds and responded with a timeout error; default value: false
   * @return returnDespiteTimeout
  **/
  @javax.annotation.Nullable
  public Boolean getReturnDespiteTimeout() {
    return returnDespiteTimeout;
  }

  public void setReturnDespiteTimeout(Boolean returnDespiteTimeout) {
    this.returnDespiteTimeout = returnDespiteTimeout;
  }


  public OnPageTaskRequestInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * user-defined task identifier optional field the character limit is 255 you can use this parameter to identify the task and match it with the result you will find the specified tag value in the data object of the response
   * @return tag
  **/
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }


  public OnPageTaskRequestInfo pingbackUrl(String pingbackUrl) {
    this.pingbackUrl = pingbackUrl;
    return this;
  }

   /**
   * notification URL of a completed task optional field when a task is completed we will notify you by GET request sent to the URL you have specified you can use the ‘$id’ string as a $id variable and ‘$tag’ as urlencoded $tag variable. We will set the necessary values before sending the request. example: http://your-server.com/pingscript?id&#x3D;$id http://your-server.com/pingscript?id&#x3D;$id&amp;tag&#x3D;$tag Note: special symbols in pingback_url will be urlencoded; i.a., the # symbol will be encoded into %23
   * @return pingbackUrl
  **/
  @javax.annotation.Nullable
  public String getPingbackUrl() {
    return pingbackUrl;
  }

  public void setPingbackUrl(String pingbackUrl) {
    this.pingbackUrl = pingbackUrl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnPageTaskRequestInfo onPageTaskRequestInfo = (OnPageTaskRequestInfo) o;
    return Objects.equals(this.target, onPageTaskRequestInfo.target) &&
        Objects.equals(this.maxCrawlPages, onPageTaskRequestInfo.maxCrawlPages) &&
        Objects.equals(this.startUrl, onPageTaskRequestInfo.startUrl) &&
        Objects.equals(this.forceSitewideChecks, onPageTaskRequestInfo.forceSitewideChecks) &&
        Objects.equals(this.priorityUrls, onPageTaskRequestInfo.priorityUrls) &&
        Objects.equals(this.maxCrawlDepth, onPageTaskRequestInfo.maxCrawlDepth) &&
        Objects.equals(this.crawlDelay, onPageTaskRequestInfo.crawlDelay) &&
        Objects.equals(this.storeRawHtml, onPageTaskRequestInfo.storeRawHtml) &&
        Objects.equals(this.enableContentParsing, onPageTaskRequestInfo.enableContentParsing) &&
        Objects.equals(this.supportCookies, onPageTaskRequestInfo.supportCookies) &&
        Objects.equals(this.acceptLanguage, onPageTaskRequestInfo.acceptLanguage) &&
        Objects.equals(this.customRobotsTxt, onPageTaskRequestInfo.customRobotsTxt) &&
        Objects.equals(this.robotsTxtMergeMode, onPageTaskRequestInfo.robotsTxtMergeMode) &&
        Objects.equals(this.customUserAgent, onPageTaskRequestInfo.customUserAgent) &&
        Objects.equals(this.browserPreset, onPageTaskRequestInfo.browserPreset) &&
        Objects.equals(this.browserScreenWidth, onPageTaskRequestInfo.browserScreenWidth) &&
        Objects.equals(this.browserScreenHeight, onPageTaskRequestInfo.browserScreenHeight) &&
        Objects.equals(this.browserScreenScaleFactor, onPageTaskRequestInfo.browserScreenScaleFactor) &&
        Objects.equals(this.respectSitemap, onPageTaskRequestInfo.respectSitemap) &&
        Objects.equals(this.customSitemap, onPageTaskRequestInfo.customSitemap) &&
        Objects.equals(this.crawlSitemapOnly, onPageTaskRequestInfo.crawlSitemapOnly) &&
        Objects.equals(this.loadResources, onPageTaskRequestInfo.loadResources) &&
        Objects.equals(this.enableWwwRedirectCheck, onPageTaskRequestInfo.enableWwwRedirectCheck) &&
        Objects.equals(this.enableJavascript, onPageTaskRequestInfo.enableJavascript) &&
        Objects.equals(this.enableXhr, onPageTaskRequestInfo.enableXhr) &&
        Objects.equals(this.enableBrowserRendering, onPageTaskRequestInfo.enableBrowserRendering) &&
        Objects.equals(this.disableCookiePopup, onPageTaskRequestInfo.disableCookiePopup) &&
        Objects.equals(this.customJs, onPageTaskRequestInfo.customJs) &&
        Objects.equals(this.validateMicromarkup, onPageTaskRequestInfo.validateMicromarkup) &&
        Objects.equals(this.allowSubdomains, onPageTaskRequestInfo.allowSubdomains) &&
        Objects.equals(this.allowedSubdomains, onPageTaskRequestInfo.allowedSubdomains) &&
        Objects.equals(this.disallowedSubdomains, onPageTaskRequestInfo.disallowedSubdomains) &&
        Objects.equals(this.checkSpell, onPageTaskRequestInfo.checkSpell) &&
        Objects.equals(this.checkSpellLanguage, onPageTaskRequestInfo.checkSpellLanguage) &&
        Objects.equals(this.checkSpellExceptions, onPageTaskRequestInfo.checkSpellExceptions) &&
        Objects.equals(this.calculateKeywordDensity, onPageTaskRequestInfo.calculateKeywordDensity) &&
        Objects.equals(this.checksThreshold, onPageTaskRequestInfo.checksThreshold) &&
        Objects.equals(this.disableSitewideChecks, onPageTaskRequestInfo.disableSitewideChecks) &&
        Objects.equals(this.disablePageChecks, onPageTaskRequestInfo.disablePageChecks) &&
        Objects.equals(this.switchPool, onPageTaskRequestInfo.switchPool) &&
        Objects.equals(this.returnDespiteTimeout, onPageTaskRequestInfo.returnDespiteTimeout) &&
        Objects.equals(this.tag, onPageTaskRequestInfo.tag) &&
        Objects.equals(this.pingbackUrl, onPageTaskRequestInfo.pingbackUrl);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, maxCrawlPages, startUrl, forceSitewideChecks, priorityUrls, maxCrawlDepth, crawlDelay, storeRawHtml, enableContentParsing, supportCookies, acceptLanguage, customRobotsTxt, robotsTxtMergeMode, customUserAgent, browserPreset, browserScreenWidth, browserScreenHeight, browserScreenScaleFactor, respectSitemap, customSitemap, crawlSitemapOnly, loadResources, enableWwwRedirectCheck, enableJavascript, enableXhr, enableBrowserRendering, disableCookiePopup, customJs, validateMicromarkup, allowSubdomains, allowedSubdomains, disallowedSubdomains, checkSpell, checkSpellLanguage, checkSpellExceptions, calculateKeywordDensity, checksThreshold, disableSitewideChecks, disablePageChecks, switchPool, returnDespiteTimeout, tag, pingbackUrl);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnPageTaskRequestInfo {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    maxCrawlPages: ").append(toIndentedString(maxCrawlPages)).append("\n");
    sb.append("    startUrl: ").append(toIndentedString(startUrl)).append("\n");
    sb.append("    forceSitewideChecks: ").append(toIndentedString(forceSitewideChecks)).append("\n");
    sb.append("    priorityUrls: ").append(toIndentedString(priorityUrls)).append("\n");
    sb.append("    maxCrawlDepth: ").append(toIndentedString(maxCrawlDepth)).append("\n");
    sb.append("    crawlDelay: ").append(toIndentedString(crawlDelay)).append("\n");
    sb.append("    storeRawHtml: ").append(toIndentedString(storeRawHtml)).append("\n");
    sb.append("    enableContentParsing: ").append(toIndentedString(enableContentParsing)).append("\n");
    sb.append("    supportCookies: ").append(toIndentedString(supportCookies)).append("\n");
    sb.append("    acceptLanguage: ").append(toIndentedString(acceptLanguage)).append("\n");
    sb.append("    customRobotsTxt: ").append(toIndentedString(customRobotsTxt)).append("\n");
    sb.append("    robotsTxtMergeMode: ").append(toIndentedString(robotsTxtMergeMode)).append("\n");
    sb.append("    customUserAgent: ").append(toIndentedString(customUserAgent)).append("\n");
    sb.append("    browserPreset: ").append(toIndentedString(browserPreset)).append("\n");
    sb.append("    browserScreenWidth: ").append(toIndentedString(browserScreenWidth)).append("\n");
    sb.append("    browserScreenHeight: ").append(toIndentedString(browserScreenHeight)).append("\n");
    sb.append("    browserScreenScaleFactor: ").append(toIndentedString(browserScreenScaleFactor)).append("\n");
    sb.append("    respectSitemap: ").append(toIndentedString(respectSitemap)).append("\n");
    sb.append("    customSitemap: ").append(toIndentedString(customSitemap)).append("\n");
    sb.append("    crawlSitemapOnly: ").append(toIndentedString(crawlSitemapOnly)).append("\n");
    sb.append("    loadResources: ").append(toIndentedString(loadResources)).append("\n");
    sb.append("    enableWwwRedirectCheck: ").append(toIndentedString(enableWwwRedirectCheck)).append("\n");
    sb.append("    enableJavascript: ").append(toIndentedString(enableJavascript)).append("\n");
    sb.append("    enableXhr: ").append(toIndentedString(enableXhr)).append("\n");
    sb.append("    enableBrowserRendering: ").append(toIndentedString(enableBrowserRendering)).append("\n");
    sb.append("    disableCookiePopup: ").append(toIndentedString(disableCookiePopup)).append("\n");
    sb.append("    customJs: ").append(toIndentedString(customJs)).append("\n");
    sb.append("    validateMicromarkup: ").append(toIndentedString(validateMicromarkup)).append("\n");
    sb.append("    allowSubdomains: ").append(toIndentedString(allowSubdomains)).append("\n");
    sb.append("    allowedSubdomains: ").append(toIndentedString(allowedSubdomains)).append("\n");
    sb.append("    disallowedSubdomains: ").append(toIndentedString(disallowedSubdomains)).append("\n");
    sb.append("    checkSpell: ").append(toIndentedString(checkSpell)).append("\n");
    sb.append("    checkSpellLanguage: ").append(toIndentedString(checkSpellLanguage)).append("\n");
    sb.append("    checkSpellExceptions: ").append(toIndentedString(checkSpellExceptions)).append("\n");
    sb.append("    calculateKeywordDensity: ").append(toIndentedString(calculateKeywordDensity)).append("\n");
    sb.append("    checksThreshold: ").append(toIndentedString(checksThreshold)).append("\n");
    sb.append("    disableSitewideChecks: ").append(toIndentedString(disableSitewideChecks)).append("\n");
    sb.append("    disablePageChecks: ").append(toIndentedString(disablePageChecks)).append("\n");
    sb.append("    switchPool: ").append(toIndentedString(switchPool)).append("\n");
    sb.append("    returnDespiteTimeout: ").append(toIndentedString(returnDespiteTimeout)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    pingbackUrl: ").append(toIndentedString(pingbackUrl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("target");
    openapiFields.add("max_crawl_pages");
    openapiFields.add("start_url");
    openapiFields.add("force_sitewide_checks");
    openapiFields.add("priority_urls");
    openapiFields.add("max_crawl_depth");
    openapiFields.add("crawl_delay");
    openapiFields.add("store_raw_html");
    openapiFields.add("enable_content_parsing");
    openapiFields.add("support_cookies");
    openapiFields.add("accept_language");
    openapiFields.add("custom_robots_txt");
    openapiFields.add("robots_txt_merge_mode");
    openapiFields.add("custom_user_agent");
    openapiFields.add("browser_preset");
    openapiFields.add("browser_screen_width");
    openapiFields.add("browser_screen_height");
    openapiFields.add("browser_screen_scale_factor");
    openapiFields.add("respect_sitemap");
    openapiFields.add("custom_sitemap");
    openapiFields.add("crawl_sitemap_only");
    openapiFields.add("load_resources");
    openapiFields.add("enable_www_redirect_check");
    openapiFields.add("enable_javascript");
    openapiFields.add("enable_xhr");
    openapiFields.add("enable_browser_rendering");
    openapiFields.add("disable_cookie_popup");
    openapiFields.add("custom_js");
    openapiFields.add("validate_micromarkup");
    openapiFields.add("allow_subdomains");
    openapiFields.add("allowed_subdomains");
    openapiFields.add("disallowed_subdomains");
    openapiFields.add("check_spell");
    openapiFields.add("check_spell_language");
    openapiFields.add("check_spell_exceptions");
    openapiFields.add("calculate_keyword_density");
    openapiFields.add("checks_threshold");
    openapiFields.add("disable_sitewide_checks");
    openapiFields.add("disable_page_checks");
    openapiFields.add("switch_pool");
    openapiFields.add("return_despite_timeout");
    openapiFields.add("tag");
    openapiFields.add("pingback_url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OnPageTaskRequestInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnPageTaskRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnPageTaskRequestInfo is not found in the empty JSON string", OnPageTaskRequestInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnPageTaskRequestInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnPageTaskRequestInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
      if ((jsonObj.get("start_url") != null && !jsonObj.get("start_url").isJsonNull()) && !jsonObj.get("start_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("priority_urls") != null && !jsonObj.get("priority_urls").isJsonNull() && !jsonObj.get("priority_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `priority_urls` to be an array in the JSON string but got `%s`", jsonObj.get("priority_urls").toString()));
      }
      if ((jsonObj.get("accept_language") != null && !jsonObj.get("accept_language").isJsonNull()) && !jsonObj.get("accept_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accept_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accept_language").toString()));
      }
      if ((jsonObj.get("custom_robots_txt") != null && !jsonObj.get("custom_robots_txt").isJsonNull()) && !jsonObj.get("custom_robots_txt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_robots_txt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_robots_txt").toString()));
      }
      if ((jsonObj.get("robots_txt_merge_mode") != null && !jsonObj.get("robots_txt_merge_mode").isJsonNull()) && !jsonObj.get("robots_txt_merge_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `robots_txt_merge_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("robots_txt_merge_mode").toString()));
      }
      if ((jsonObj.get("custom_user_agent") != null && !jsonObj.get("custom_user_agent").isJsonNull()) && !jsonObj.get("custom_user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_user_agent").toString()));
      }
      if ((jsonObj.get("browser_preset") != null && !jsonObj.get("browser_preset").isJsonNull()) && !jsonObj.get("browser_preset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `browser_preset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("browser_preset").toString()));
      }
      if ((jsonObj.get("custom_sitemap") != null && !jsonObj.get("custom_sitemap").isJsonNull()) && !jsonObj.get("custom_sitemap").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_sitemap` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_sitemap").toString()));
      }
      if ((jsonObj.get("custom_js") != null && !jsonObj.get("custom_js").isJsonNull()) && !jsonObj.get("custom_js").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_js` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_js").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowed_subdomains") != null && !jsonObj.get("allowed_subdomains").isJsonNull() && !jsonObj.get("allowed_subdomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowed_subdomains` to be an array in the JSON string but got `%s`", jsonObj.get("allowed_subdomains").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("disallowed_subdomains") != null && !jsonObj.get("disallowed_subdomains").isJsonNull() && !jsonObj.get("disallowed_subdomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disallowed_subdomains` to be an array in the JSON string but got `%s`", jsonObj.get("disallowed_subdomains").toString()));
      }
      if ((jsonObj.get("check_spell_language") != null && !jsonObj.get("check_spell_language").isJsonNull()) && !jsonObj.get("check_spell_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_spell_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_spell_language").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("check_spell_exceptions") != null && !jsonObj.get("check_spell_exceptions").isJsonNull() && !jsonObj.get("check_spell_exceptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_spell_exceptions` to be an array in the JSON string but got `%s`", jsonObj.get("check_spell_exceptions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("disable_sitewide_checks") != null && !jsonObj.get("disable_sitewide_checks").isJsonNull() && !jsonObj.get("disable_sitewide_checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disable_sitewide_checks` to be an array in the JSON string but got `%s`", jsonObj.get("disable_sitewide_checks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("disable_page_checks") != null && !jsonObj.get("disable_page_checks").isJsonNull() && !jsonObj.get("disable_page_checks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `disable_page_checks` to be an array in the JSON string but got `%s`", jsonObj.get("disable_page_checks").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
      if ((jsonObj.get("pingback_url") != null && !jsonObj.get("pingback_url").isJsonNull()) && !jsonObj.get("pingback_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pingback_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pingback_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnPageTaskRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnPageTaskRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnPageTaskRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnPageTaskRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OnPageTaskRequestInfo>() {
           @Override
           public void write(JsonWriter out, OnPageTaskRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnPageTaskRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnPageTaskRequestInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnPageTaskRequestInfo
  * @throws IOException if the JSON string is invalid with respect to OnPageTaskRequestInfo
  */
  public static OnPageTaskRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnPageTaskRequestInfo.class);
  }

 /**
  * Convert an instance of OnPageTaskRequestInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

