/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.api;

import org.dataforseo.client.ApiCallback;
import org.dataforseo.client.ApiClient;
import org.dataforseo.client.ApiException;
import org.dataforseo.client.ApiResponse;
import org.dataforseo.client.Configuration;
import org.dataforseo.client.Pair;
import org.dataforseo.client.ProgressRequestBody;
import org.dataforseo.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.dataforseo.client.model.BacklinksAnchorsLiveRequestInfo;
import org.dataforseo.client.model.BacklinksAnchorsLiveResponseInfo;
import org.dataforseo.client.model.BacklinksAvailableFiltersResponseInfo;
import org.dataforseo.client.model.BacklinksBacklinksLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBacklinksLiveResponseInfo;
import org.dataforseo.client.model.BacklinksBulkBacklinksLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBulkBacklinksLiveResponseInfo;
import org.dataforseo.client.model.BacklinksBulkNewLostBacklinksLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBulkNewLostBacklinksLiveResponseInfo;
import org.dataforseo.client.model.BacklinksBulkNewLostReferringDomainsLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBulkNewLostReferringDomainsLiveResponseInfo;
import org.dataforseo.client.model.BacklinksBulkPagesSummaryLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBulkPagesSummaryLiveResponseInfo;
import org.dataforseo.client.model.BacklinksBulkRanksLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBulkRanksLiveResponseInfo;
import org.dataforseo.client.model.BacklinksBulkReferringDomainsLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBulkReferringDomainsLiveResponseInfo;
import org.dataforseo.client.model.BacklinksBulkSpamScoreLiveRequestInfo;
import org.dataforseo.client.model.BacklinksBulkSpamScoreLiveResponseInfo;
import org.dataforseo.client.model.BacklinksCompetitorsLiveRequestInfo;
import org.dataforseo.client.model.BacklinksCompetitorsLiveResponseInfo;
import org.dataforseo.client.model.BacklinksDomainIntersectionLiveRequestInfo;
import org.dataforseo.client.model.BacklinksDomainIntersectionLiveResponseInfo;
import org.dataforseo.client.model.BacklinksDomainPagesLiveRequestInfo;
import org.dataforseo.client.model.BacklinksDomainPagesLiveResponseInfo;
import org.dataforseo.client.model.BacklinksDomainPagesSummaryLiveRequestInfo;
import org.dataforseo.client.model.BacklinksDomainPagesSummaryLiveResponseInfo;
import org.dataforseo.client.model.BacklinksErrorsRequestInfo;
import org.dataforseo.client.model.BacklinksErrorsResponseInfo;
import org.dataforseo.client.model.BacklinksHistoryLiveRequestInfo;
import org.dataforseo.client.model.BacklinksHistoryLiveResponseInfo;
import org.dataforseo.client.model.BacklinksIdListRequestInfo;
import org.dataforseo.client.model.BacklinksIdListResponseInfo;
import org.dataforseo.client.model.BacklinksIndexResponseInfo;
import org.dataforseo.client.model.BacklinksPageIntersectionLiveRequestInfo;
import org.dataforseo.client.model.BacklinksPageIntersectionLiveResponseInfo;
import org.dataforseo.client.model.BacklinksReferringDomainsLiveRequestInfo;
import org.dataforseo.client.model.BacklinksReferringDomainsLiveResponseInfo;
import org.dataforseo.client.model.BacklinksReferringNetworksLiveRequestInfo;
import org.dataforseo.client.model.BacklinksReferringNetworksLiveResponseInfo;
import org.dataforseo.client.model.BacklinksSummaryLiveRequestInfo;
import org.dataforseo.client.model.BacklinksSummaryLiveResponseInfo;
import org.dataforseo.client.model.BacklinksTimeseriesNewLostSummaryLiveRequestInfo;
import org.dataforseo.client.model.BacklinksTimeseriesNewLostSummaryLiveResponseInfo;
import org.dataforseo.client.model.BacklinksTimeseriesSummaryLiveRequestInfo;
import org.dataforseo.client.model.BacklinksTimeseriesSummaryLiveResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BacklinksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BacklinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BacklinksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for anchorsLive
     * @param backlinksAnchorsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anchorsLiveCall(List<BacklinksAnchorsLiveRequestInfo> backlinksAnchorsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksAnchorsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/anchors/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anchorsLiveValidateBeforeCall(List<BacklinksAnchorsLiveRequestInfo> backlinksAnchorsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return anchorsLiveCall(backlinksAnchorsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of anchors used when linking to the specified website with relevant backlink data for each of them. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/anchors/live/?bash&#39;
     * @param backlinksAnchorsLiveRequestInfo  (optional)
     * @return BacklinksAnchorsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksAnchorsLiveResponseInfo anchorsLive(List<BacklinksAnchorsLiveRequestInfo> backlinksAnchorsLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksAnchorsLiveResponseInfo> localVarResp = anchorsLiveWithHttpInfo(backlinksAnchorsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of anchors used when linking to the specified website with relevant backlink data for each of them. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/anchors/live/?bash&#39;
     * @param backlinksAnchorsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksAnchorsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksAnchorsLiveResponseInfo> anchorsLiveWithHttpInfo(List<BacklinksAnchorsLiveRequestInfo> backlinksAnchorsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = anchorsLiveValidateBeforeCall(backlinksAnchorsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksAnchorsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a detailed overview of anchors used when linking to the specified website with relevant backlink data for each of them. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/anchors/live/?bash&#39;
     * @param backlinksAnchorsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anchorsLiveAsync(List<BacklinksAnchorsLiveRequestInfo> backlinksAnchorsLiveRequestInfo, final ApiCallback<BacklinksAnchorsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = anchorsLiveValidateBeforeCall(backlinksAnchorsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksAnchorsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backlinksAvailableFilters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksAvailableFiltersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/backlinks/available_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backlinksAvailableFiltersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return backlinksAvailableFiltersCall(_callback);

    }

    /**
     * 
     * Backlinks API features plenty of parameters that support custom filtration. By applying filters to your POST requests, you will be able to effortlessly extract data that matches your requirements. Note that we do not charge any fees for using data filtering or sorting rules. ‌‌ Here you will find all the necessary information about filters that can be used with DataForSEO Backlinks API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/filters/?bash&#39;
     * @return BacklinksAvailableFiltersResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksAvailableFiltersResponseInfo backlinksAvailableFilters() throws ApiException {
        ApiResponse<BacklinksAvailableFiltersResponseInfo> localVarResp = backlinksAvailableFiltersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Backlinks API features plenty of parameters that support custom filtration. By applying filters to your POST requests, you will be able to effortlessly extract data that matches your requirements. Note that we do not charge any fees for using data filtering or sorting rules. ‌‌ Here you will find all the necessary information about filters that can be used with DataForSEO Backlinks API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/filters/?bash&#39;
     * @return ApiResponse&lt;BacklinksAvailableFiltersResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksAvailableFiltersResponseInfo> backlinksAvailableFiltersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = backlinksAvailableFiltersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BacklinksAvailableFiltersResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Backlinks API features plenty of parameters that support custom filtration. By applying filters to your POST requests, you will be able to effortlessly extract data that matches your requirements. Note that we do not charge any fees for using data filtering or sorting rules. ‌‌ Here you will find all the necessary information about filters that can be used with DataForSEO Backlinks API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/filters/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksAvailableFiltersAsync(final ApiCallback<BacklinksAvailableFiltersResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = backlinksAvailableFiltersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BacklinksAvailableFiltersResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backlinksErrors
     * @param backlinksErrorsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksErrorsCall(List<BacklinksErrorsRequestInfo> backlinksErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksErrorsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backlinksErrorsValidateBeforeCall(List<BacklinksErrorsRequestInfo> backlinksErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        return backlinksErrorsCall(backlinksErrorsRequestInfo, _callback);

    }

    /**
     * 
     * By calling this endpoint you will receive information about the Backlinks API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/errors/?bash&#39;
     * @param backlinksErrorsRequestInfo  (optional)
     * @return BacklinksErrorsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksErrorsResponseInfo backlinksErrors(List<BacklinksErrorsRequestInfo> backlinksErrorsRequestInfo) throws ApiException {
        ApiResponse<BacklinksErrorsResponseInfo> localVarResp = backlinksErrorsWithHttpInfo(backlinksErrorsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this endpoint you will receive information about the Backlinks API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/errors/?bash&#39;
     * @param backlinksErrorsRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksErrorsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksErrorsResponseInfo> backlinksErrorsWithHttpInfo(List<BacklinksErrorsRequestInfo> backlinksErrorsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = backlinksErrorsValidateBeforeCall(backlinksErrorsRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksErrorsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this endpoint you will receive information about the Backlinks API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/errors/?bash&#39;
     * @param backlinksErrorsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksErrorsAsync(List<BacklinksErrorsRequestInfo> backlinksErrorsRequestInfo, final ApiCallback<BacklinksErrorsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = backlinksErrorsValidateBeforeCall(backlinksErrorsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksErrorsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backlinksIdList
     * @param backlinksIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksIdListCall(List<BacklinksIdListRequestInfo> backlinksIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backlinksIdListValidateBeforeCall(List<BacklinksIdListRequestInfo> backlinksIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return backlinksIdListCall(backlinksIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Backlinks tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/id_list/?bash&#39;
     * @param backlinksIdListRequestInfo  (optional)
     * @return BacklinksIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksIdListResponseInfo backlinksIdList(List<BacklinksIdListRequestInfo> backlinksIdListRequestInfo) throws ApiException {
        ApiResponse<BacklinksIdListResponseInfo> localVarResp = backlinksIdListWithHttpInfo(backlinksIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Backlinks tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/id_list/?bash&#39;
     * @param backlinksIdListRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksIdListResponseInfo> backlinksIdListWithHttpInfo(List<BacklinksIdListRequestInfo> backlinksIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = backlinksIdListValidateBeforeCall(backlinksIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Backlinks tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/id_list/?bash&#39;
     * @param backlinksIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksIdListAsync(List<BacklinksIdListRequestInfo> backlinksIdListRequestInfo, final ApiCallback<BacklinksIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = backlinksIdListValidateBeforeCall(backlinksIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for backlinksLive
     * @param backlinksBacklinksLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksLiveCall(List<BacklinksBacklinksLiveRequestInfo> backlinksBacklinksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBacklinksLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/backlinks/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call backlinksLiveValidateBeforeCall(List<BacklinksBacklinksLiveRequestInfo> backlinksBacklinksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return backlinksLiveCall(backlinksBacklinksLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with a list of backlinks and relevant data for the specified domain, subdomain, or webpage. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/backlinks/live/?bash&#39;
     * @param backlinksBacklinksLiveRequestInfo  (optional)
     * @return BacklinksBacklinksLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBacklinksLiveResponseInfo backlinksLive(List<BacklinksBacklinksLiveRequestInfo> backlinksBacklinksLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBacklinksLiveResponseInfo> localVarResp = backlinksLiveWithHttpInfo(backlinksBacklinksLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with a list of backlinks and relevant data for the specified domain, subdomain, or webpage. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/backlinks/live/?bash&#39;
     * @param backlinksBacklinksLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBacklinksLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBacklinksLiveResponseInfo> backlinksLiveWithHttpInfo(List<BacklinksBacklinksLiveRequestInfo> backlinksBacklinksLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = backlinksLiveValidateBeforeCall(backlinksBacklinksLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBacklinksLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with a list of backlinks and relevant data for the specified domain, subdomain, or webpage. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/backlinks/live/?bash&#39;
     * @param backlinksBacklinksLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call backlinksLiveAsync(List<BacklinksBacklinksLiveRequestInfo> backlinksBacklinksLiveRequestInfo, final ApiCallback<BacklinksBacklinksLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = backlinksLiveValidateBeforeCall(backlinksBacklinksLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBacklinksLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkBacklinksLive
     * @param backlinksBulkBacklinksLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkBacklinksLiveCall(List<BacklinksBulkBacklinksLiveRequestInfo> backlinksBulkBacklinksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBulkBacklinksLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/bulk_backlinks/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkBacklinksLiveValidateBeforeCall(List<BacklinksBulkBacklinksLiveRequestInfo> backlinksBulkBacklinksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bulkBacklinksLiveCall(backlinksBulkBacklinksLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of backlinks pointing to domains, subdomains, and pages specified in the targets array. The returned numbers correspond to all live backlinks, that is, total number of referring links with all attributes (e.g., nofollow, noreferrer, ugc, sponsored etc) that were found during the latest check. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_backlinks/live/?bash&#39;
     * @param backlinksBulkBacklinksLiveRequestInfo  (optional)
     * @return BacklinksBulkBacklinksLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBulkBacklinksLiveResponseInfo bulkBacklinksLive(List<BacklinksBulkBacklinksLiveRequestInfo> backlinksBulkBacklinksLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBulkBacklinksLiveResponseInfo> localVarResp = bulkBacklinksLiveWithHttpInfo(backlinksBulkBacklinksLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of backlinks pointing to domains, subdomains, and pages specified in the targets array. The returned numbers correspond to all live backlinks, that is, total number of referring links with all attributes (e.g., nofollow, noreferrer, ugc, sponsored etc) that were found during the latest check. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_backlinks/live/?bash&#39;
     * @param backlinksBulkBacklinksLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBulkBacklinksLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBulkBacklinksLiveResponseInfo> bulkBacklinksLiveWithHttpInfo(List<BacklinksBulkBacklinksLiveRequestInfo> backlinksBulkBacklinksLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bulkBacklinksLiveValidateBeforeCall(backlinksBulkBacklinksLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBulkBacklinksLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the number of backlinks pointing to domains, subdomains, and pages specified in the targets array. The returned numbers correspond to all live backlinks, that is, total number of referring links with all attributes (e.g., nofollow, noreferrer, ugc, sponsored etc) that were found during the latest check. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_backlinks/live/?bash&#39;
     * @param backlinksBulkBacklinksLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkBacklinksLiveAsync(List<BacklinksBulkBacklinksLiveRequestInfo> backlinksBulkBacklinksLiveRequestInfo, final ApiCallback<BacklinksBulkBacklinksLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkBacklinksLiveValidateBeforeCall(backlinksBulkBacklinksLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBulkBacklinksLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkNewLostBacklinksLive
     * @param backlinksBulkNewLostBacklinksLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkNewLostBacklinksLiveCall(List<BacklinksBulkNewLostBacklinksLiveRequestInfo> backlinksBulkNewLostBacklinksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBulkNewLostBacklinksLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/bulk_new_lost_backlinks/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkNewLostBacklinksLiveValidateBeforeCall(List<BacklinksBulkNewLostBacklinksLiveRequestInfo> backlinksBulkNewLostBacklinksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bulkNewLostBacklinksLiveCall(backlinksBulkNewLostBacklinksLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of new and lost backlinks for the domains, subdomains, and pages specified in the targets array. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_new_lost_backlinks/live/?bash&#39;
     * @param backlinksBulkNewLostBacklinksLiveRequestInfo  (optional)
     * @return BacklinksBulkNewLostBacklinksLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBulkNewLostBacklinksLiveResponseInfo bulkNewLostBacklinksLive(List<BacklinksBulkNewLostBacklinksLiveRequestInfo> backlinksBulkNewLostBacklinksLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBulkNewLostBacklinksLiveResponseInfo> localVarResp = bulkNewLostBacklinksLiveWithHttpInfo(backlinksBulkNewLostBacklinksLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of new and lost backlinks for the domains, subdomains, and pages specified in the targets array. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_new_lost_backlinks/live/?bash&#39;
     * @param backlinksBulkNewLostBacklinksLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBulkNewLostBacklinksLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBulkNewLostBacklinksLiveResponseInfo> bulkNewLostBacklinksLiveWithHttpInfo(List<BacklinksBulkNewLostBacklinksLiveRequestInfo> backlinksBulkNewLostBacklinksLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bulkNewLostBacklinksLiveValidateBeforeCall(backlinksBulkNewLostBacklinksLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBulkNewLostBacklinksLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the number of new and lost backlinks for the domains, subdomains, and pages specified in the targets array. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_new_lost_backlinks/live/?bash&#39;
     * @param backlinksBulkNewLostBacklinksLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkNewLostBacklinksLiveAsync(List<BacklinksBulkNewLostBacklinksLiveRequestInfo> backlinksBulkNewLostBacklinksLiveRequestInfo, final ApiCallback<BacklinksBulkNewLostBacklinksLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkNewLostBacklinksLiveValidateBeforeCall(backlinksBulkNewLostBacklinksLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBulkNewLostBacklinksLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkNewLostReferringDomainsLive
     * @param backlinksBulkNewLostReferringDomainsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkNewLostReferringDomainsLiveCall(List<BacklinksBulkNewLostReferringDomainsLiveRequestInfo> backlinksBulkNewLostReferringDomainsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBulkNewLostReferringDomainsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/bulk_new_lost_referring_domains/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkNewLostReferringDomainsLiveValidateBeforeCall(List<BacklinksBulkNewLostReferringDomainsLiveRequestInfo> backlinksBulkNewLostReferringDomainsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bulkNewLostReferringDomainsLiveCall(backlinksBulkNewLostReferringDomainsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of referring domains pointing to the domains, subdomains and pages specified in the targets array. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_new_lost_referring_domains/live/?bash&#39;
     * @param backlinksBulkNewLostReferringDomainsLiveRequestInfo  (optional)
     * @return BacklinksBulkNewLostReferringDomainsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBulkNewLostReferringDomainsLiveResponseInfo bulkNewLostReferringDomainsLive(List<BacklinksBulkNewLostReferringDomainsLiveRequestInfo> backlinksBulkNewLostReferringDomainsLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBulkNewLostReferringDomainsLiveResponseInfo> localVarResp = bulkNewLostReferringDomainsLiveWithHttpInfo(backlinksBulkNewLostReferringDomainsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of referring domains pointing to the domains, subdomains and pages specified in the targets array. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_new_lost_referring_domains/live/?bash&#39;
     * @param backlinksBulkNewLostReferringDomainsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBulkNewLostReferringDomainsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBulkNewLostReferringDomainsLiveResponseInfo> bulkNewLostReferringDomainsLiveWithHttpInfo(List<BacklinksBulkNewLostReferringDomainsLiveRequestInfo> backlinksBulkNewLostReferringDomainsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bulkNewLostReferringDomainsLiveValidateBeforeCall(backlinksBulkNewLostReferringDomainsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBulkNewLostReferringDomainsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the number of referring domains pointing to the domains, subdomains and pages specified in the targets array. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_new_lost_referring_domains/live/?bash&#39;
     * @param backlinksBulkNewLostReferringDomainsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkNewLostReferringDomainsLiveAsync(List<BacklinksBulkNewLostReferringDomainsLiveRequestInfo> backlinksBulkNewLostReferringDomainsLiveRequestInfo, final ApiCallback<BacklinksBulkNewLostReferringDomainsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkNewLostReferringDomainsLiveValidateBeforeCall(backlinksBulkNewLostReferringDomainsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBulkNewLostReferringDomainsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkPagesSummaryLive
     * @param backlinksBulkPagesSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkPagesSummaryLiveCall(List<BacklinksBulkPagesSummaryLiveRequestInfo> backlinksBulkPagesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBulkPagesSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/bulk_pages_summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkPagesSummaryLiveValidateBeforeCall(List<BacklinksBulkPagesSummaryLiveRequestInfo> backlinksBulkPagesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bulkPagesSummaryLiveCall(backlinksBulkPagesSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint will provide you with a comprehensive overview of backlinks and related data for a bulk of up to 1000 pages, domains, or subdomains. If you indicate a single page as a target, you will get comprehensive summary data on all backlinks for that page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_pages_summary/live/?bash&#39;
     * @param backlinksBulkPagesSummaryLiveRequestInfo  (optional)
     * @return BacklinksBulkPagesSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBulkPagesSummaryLiveResponseInfo bulkPagesSummaryLive(List<BacklinksBulkPagesSummaryLiveRequestInfo> backlinksBulkPagesSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBulkPagesSummaryLiveResponseInfo> localVarResp = bulkPagesSummaryLiveWithHttpInfo(backlinksBulkPagesSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with a comprehensive overview of backlinks and related data for a bulk of up to 1000 pages, domains, or subdomains. If you indicate a single page as a target, you will get comprehensive summary data on all backlinks for that page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_pages_summary/live/?bash&#39;
     * @param backlinksBulkPagesSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBulkPagesSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBulkPagesSummaryLiveResponseInfo> bulkPagesSummaryLiveWithHttpInfo(List<BacklinksBulkPagesSummaryLiveRequestInfo> backlinksBulkPagesSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bulkPagesSummaryLiveValidateBeforeCall(backlinksBulkPagesSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBulkPagesSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with a comprehensive overview of backlinks and related data for a bulk of up to 1000 pages, domains, or subdomains. If you indicate a single page as a target, you will get comprehensive summary data on all backlinks for that page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_pages_summary/live/?bash&#39;
     * @param backlinksBulkPagesSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkPagesSummaryLiveAsync(List<BacklinksBulkPagesSummaryLiveRequestInfo> backlinksBulkPagesSummaryLiveRequestInfo, final ApiCallback<BacklinksBulkPagesSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkPagesSummaryLiveValidateBeforeCall(backlinksBulkPagesSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBulkPagesSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkRanksLive
     * @param backlinksBulkRanksLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkRanksLiveCall(List<BacklinksBulkRanksLiveRequestInfo> backlinksBulkRanksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBulkRanksLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/bulk_ranks/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkRanksLiveValidateBeforeCall(List<BacklinksBulkRanksLiveRequestInfo> backlinksBulkRanksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bulkRanksLiveCall(backlinksBulkRanksLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with rank scores of the domains, subdomains, and pages specified in the targets array. The score is based on the number of referring domains pointing to the specified domains, subdomains, or pages. rank values range from 0 (no backlinks detected) to 1,000 (highest rank). A similar scoring system is used in Google’s Page Rank algorithm. You can learn more about rank scores in this help center article for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_ranks/live/?bash&#39;
     * @param backlinksBulkRanksLiveRequestInfo  (optional)
     * @return BacklinksBulkRanksLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBulkRanksLiveResponseInfo bulkRanksLive(List<BacklinksBulkRanksLiveRequestInfo> backlinksBulkRanksLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBulkRanksLiveResponseInfo> localVarResp = bulkRanksLiveWithHttpInfo(backlinksBulkRanksLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with rank scores of the domains, subdomains, and pages specified in the targets array. The score is based on the number of referring domains pointing to the specified domains, subdomains, or pages. rank values range from 0 (no backlinks detected) to 1,000 (highest rank). A similar scoring system is used in Google’s Page Rank algorithm. You can learn more about rank scores in this help center article for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_ranks/live/?bash&#39;
     * @param backlinksBulkRanksLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBulkRanksLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBulkRanksLiveResponseInfo> bulkRanksLiveWithHttpInfo(List<BacklinksBulkRanksLiveRequestInfo> backlinksBulkRanksLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bulkRanksLiveValidateBeforeCall(backlinksBulkRanksLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBulkRanksLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with rank scores of the domains, subdomains, and pages specified in the targets array. The score is based on the number of referring domains pointing to the specified domains, subdomains, or pages. rank values range from 0 (no backlinks detected) to 1,000 (highest rank). A similar scoring system is used in Google’s Page Rank algorithm. You can learn more about rank scores in this help center article for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_ranks/live/?bash&#39;
     * @param backlinksBulkRanksLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkRanksLiveAsync(List<BacklinksBulkRanksLiveRequestInfo> backlinksBulkRanksLiveRequestInfo, final ApiCallback<BacklinksBulkRanksLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkRanksLiveValidateBeforeCall(backlinksBulkRanksLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBulkRanksLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkReferringDomainsLive
     * @param backlinksBulkReferringDomainsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkReferringDomainsLiveCall(List<BacklinksBulkReferringDomainsLiveRequestInfo> backlinksBulkReferringDomainsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBulkReferringDomainsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/bulk_referring_domains/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkReferringDomainsLiveValidateBeforeCall(List<BacklinksBulkReferringDomainsLiveRequestInfo> backlinksBulkReferringDomainsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bulkReferringDomainsLiveCall(backlinksBulkReferringDomainsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of referring domains pointing to domains, subdomains, and pages specified in the targets array. The returned numbers are based on all live referring domains, that is, total number of domains pointing to the target with any type of backlinks (e.g., nofollow, noreferrer, ugc, sponsored etc) that were found during the latest check. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_referring_domains/live/?bash&#39;
     * @param backlinksBulkReferringDomainsLiveRequestInfo  (optional)
     * @return BacklinksBulkReferringDomainsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBulkReferringDomainsLiveResponseInfo bulkReferringDomainsLive(List<BacklinksBulkReferringDomainsLiveRequestInfo> backlinksBulkReferringDomainsLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBulkReferringDomainsLiveResponseInfo> localVarResp = bulkReferringDomainsLiveWithHttpInfo(backlinksBulkReferringDomainsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of referring domains pointing to domains, subdomains, and pages specified in the targets array. The returned numbers are based on all live referring domains, that is, total number of domains pointing to the target with any type of backlinks (e.g., nofollow, noreferrer, ugc, sponsored etc) that were found during the latest check. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_referring_domains/live/?bash&#39;
     * @param backlinksBulkReferringDomainsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBulkReferringDomainsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBulkReferringDomainsLiveResponseInfo> bulkReferringDomainsLiveWithHttpInfo(List<BacklinksBulkReferringDomainsLiveRequestInfo> backlinksBulkReferringDomainsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bulkReferringDomainsLiveValidateBeforeCall(backlinksBulkReferringDomainsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBulkReferringDomainsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the number of referring domains pointing to domains, subdomains, and pages specified in the targets array. The returned numbers are based on all live referring domains, that is, total number of domains pointing to the target with any type of backlinks (e.g., nofollow, noreferrer, ugc, sponsored etc) that were found during the latest check. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_referring_domains/live/?bash&#39;
     * @param backlinksBulkReferringDomainsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkReferringDomainsLiveAsync(List<BacklinksBulkReferringDomainsLiveRequestInfo> backlinksBulkReferringDomainsLiveRequestInfo, final ApiCallback<BacklinksBulkReferringDomainsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkReferringDomainsLiveValidateBeforeCall(backlinksBulkReferringDomainsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBulkReferringDomainsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkSpamScoreLive
     * @param backlinksBulkSpamScoreLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSpamScoreLiveCall(List<BacklinksBulkSpamScoreLiveRequestInfo> backlinksBulkSpamScoreLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksBulkSpamScoreLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/bulk_spam_score/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSpamScoreLiveValidateBeforeCall(List<BacklinksBulkSpamScoreLiveRequestInfo> backlinksBulkSpamScoreLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bulkSpamScoreLiveCall(backlinksBulkSpamScoreLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with spam scores of the domains, subdomains, and pages you specified in the targets array. Spam Score is DataForSEO’s proprietary metric that indicates how “spammy” your target is on a scale from 0 to 100. You can learn more about Spam Score, how it is calculated, and signals it takes into account in this help center article for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_spam_score/live/?bash&#39;
     * @param backlinksBulkSpamScoreLiveRequestInfo  (optional)
     * @return BacklinksBulkSpamScoreLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksBulkSpamScoreLiveResponseInfo bulkSpamScoreLive(List<BacklinksBulkSpamScoreLiveRequestInfo> backlinksBulkSpamScoreLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksBulkSpamScoreLiveResponseInfo> localVarResp = bulkSpamScoreLiveWithHttpInfo(backlinksBulkSpamScoreLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with spam scores of the domains, subdomains, and pages you specified in the targets array. Spam Score is DataForSEO’s proprietary metric that indicates how “spammy” your target is on a scale from 0 to 100. You can learn more about Spam Score, how it is calculated, and signals it takes into account in this help center article for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_spam_score/live/?bash&#39;
     * @param backlinksBulkSpamScoreLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksBulkSpamScoreLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksBulkSpamScoreLiveResponseInfo> bulkSpamScoreLiveWithHttpInfo(List<BacklinksBulkSpamScoreLiveRequestInfo> backlinksBulkSpamScoreLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bulkSpamScoreLiveValidateBeforeCall(backlinksBulkSpamScoreLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksBulkSpamScoreLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with spam scores of the domains, subdomains, and pages you specified in the targets array. Spam Score is DataForSEO’s proprietary metric that indicates how “spammy” your target is on a scale from 0 to 100. You can learn more about Spam Score, how it is calculated, and signals it takes into account in this help center article for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/bulk_spam_score/live/?bash&#39;
     * @param backlinksBulkSpamScoreLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSpamScoreLiveAsync(List<BacklinksBulkSpamScoreLiveRequestInfo> backlinksBulkSpamScoreLiveRequestInfo, final ApiCallback<BacklinksBulkSpamScoreLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSpamScoreLiveValidateBeforeCall(backlinksBulkSpamScoreLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksBulkSpamScoreLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for competitorsLive
     * @param backlinksCompetitorsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call competitorsLiveCall(List<BacklinksCompetitorsLiveRequestInfo> backlinksCompetitorsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksCompetitorsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/competitors/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call competitorsLiveValidateBeforeCall(List<BacklinksCompetitorsLiveRequestInfo> backlinksCompetitorsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return competitorsLiveCall(backlinksCompetitorsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of competitors that share some part of the backlink profile with a target website, along with a number of backlink intersections and the rank of every competing website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/competitors/live/?bash&#39;
     * @param backlinksCompetitorsLiveRequestInfo  (optional)
     * @return BacklinksCompetitorsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksCompetitorsLiveResponseInfo competitorsLive(List<BacklinksCompetitorsLiveRequestInfo> backlinksCompetitorsLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksCompetitorsLiveResponseInfo> localVarResp = competitorsLiveWithHttpInfo(backlinksCompetitorsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of competitors that share some part of the backlink profile with a target website, along with a number of backlink intersections and the rank of every competing website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/competitors/live/?bash&#39;
     * @param backlinksCompetitorsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksCompetitorsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksCompetitorsLiveResponseInfo> competitorsLiveWithHttpInfo(List<BacklinksCompetitorsLiveRequestInfo> backlinksCompetitorsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = competitorsLiveValidateBeforeCall(backlinksCompetitorsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksCompetitorsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a list of competitors that share some part of the backlink profile with a target website, along with a number of backlink intersections and the rank of every competing website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/competitors/live/?bash&#39;
     * @param backlinksCompetitorsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call competitorsLiveAsync(List<BacklinksCompetitorsLiveRequestInfo> backlinksCompetitorsLiveRequestInfo, final ApiCallback<BacklinksCompetitorsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = competitorsLiveValidateBeforeCall(backlinksCompetitorsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksCompetitorsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainIntersectionLive
     * @param backlinksDomainIntersectionLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainIntersectionLiveCall(List<BacklinksDomainIntersectionLiveRequestInfo> backlinksDomainIntersectionLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksDomainIntersectionLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/domain_intersection/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainIntersectionLiveValidateBeforeCall(List<BacklinksDomainIntersectionLiveRequestInfo> backlinksDomainIntersectionLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return domainIntersectionLiveCall(backlinksDomainIntersectionLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the list of domains pointing to the specified websites. This endpoint is especially useful for creating a Link Gap feature that shows what domains link to your competitors but do not link out to your website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_intersection/live/?bash&#39;
     * @param backlinksDomainIntersectionLiveRequestInfo  (optional)
     * @return BacklinksDomainIntersectionLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksDomainIntersectionLiveResponseInfo domainIntersectionLive(List<BacklinksDomainIntersectionLiveRequestInfo> backlinksDomainIntersectionLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksDomainIntersectionLiveResponseInfo> localVarResp = domainIntersectionLiveWithHttpInfo(backlinksDomainIntersectionLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the list of domains pointing to the specified websites. This endpoint is especially useful for creating a Link Gap feature that shows what domains link to your competitors but do not link out to your website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_intersection/live/?bash&#39;
     * @param backlinksDomainIntersectionLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksDomainIntersectionLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksDomainIntersectionLiveResponseInfo> domainIntersectionLiveWithHttpInfo(List<BacklinksDomainIntersectionLiveRequestInfo> backlinksDomainIntersectionLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = domainIntersectionLiveValidateBeforeCall(backlinksDomainIntersectionLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksDomainIntersectionLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the list of domains pointing to the specified websites. This endpoint is especially useful for creating a Link Gap feature that shows what domains link to your competitors but do not link out to your website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_intersection/live/?bash&#39;
     * @param backlinksDomainIntersectionLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainIntersectionLiveAsync(List<BacklinksDomainIntersectionLiveRequestInfo> backlinksDomainIntersectionLiveRequestInfo, final ApiCallback<BacklinksDomainIntersectionLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainIntersectionLiveValidateBeforeCall(backlinksDomainIntersectionLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksDomainIntersectionLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainPagesLive
     * @param backlinksDomainPagesLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainPagesLiveCall(List<BacklinksDomainPagesLiveRequestInfo> backlinksDomainPagesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksDomainPagesLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/domain_pages/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainPagesLiveValidateBeforeCall(List<BacklinksDomainPagesLiveRequestInfo> backlinksDomainPagesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return domainPagesLiveCall(backlinksDomainPagesLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of domain pages with backlink data for each page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_pages/live/?bash&#39;
     * @param backlinksDomainPagesLiveRequestInfo  (optional)
     * @return BacklinksDomainPagesLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksDomainPagesLiveResponseInfo domainPagesLive(List<BacklinksDomainPagesLiveRequestInfo> backlinksDomainPagesLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksDomainPagesLiveResponseInfo> localVarResp = domainPagesLiveWithHttpInfo(backlinksDomainPagesLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of domain pages with backlink data for each page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_pages/live/?bash&#39;
     * @param backlinksDomainPagesLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksDomainPagesLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksDomainPagesLiveResponseInfo> domainPagesLiveWithHttpInfo(List<BacklinksDomainPagesLiveRequestInfo> backlinksDomainPagesLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = domainPagesLiveValidateBeforeCall(backlinksDomainPagesLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksDomainPagesLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a detailed overview of domain pages with backlink data for each page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_pages/live/?bash&#39;
     * @param backlinksDomainPagesLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainPagesLiveAsync(List<BacklinksDomainPagesLiveRequestInfo> backlinksDomainPagesLiveRequestInfo, final ApiCallback<BacklinksDomainPagesLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainPagesLiveValidateBeforeCall(backlinksDomainPagesLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksDomainPagesLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainPagesSummaryLive
     * @param backlinksDomainPagesSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainPagesSummaryLiveCall(List<BacklinksDomainPagesSummaryLiveRequestInfo> backlinksDomainPagesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksDomainPagesSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/domain_pages_summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainPagesSummaryLiveValidateBeforeCall(List<BacklinksDomainPagesSummaryLiveRequestInfo> backlinksDomainPagesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return domainPagesSummaryLiveCall(backlinksDomainPagesSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint will provide you with detailed summary data on all backlinks and related metrics for each page of the target domain or subdomain you specify. If you indicate a single page as a target, you will get comprehensive summary data on all backlinks for that page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_pages_summary/live/?bash&#39;
     * @param backlinksDomainPagesSummaryLiveRequestInfo  (optional)
     * @return BacklinksDomainPagesSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksDomainPagesSummaryLiveResponseInfo domainPagesSummaryLive(List<BacklinksDomainPagesSummaryLiveRequestInfo> backlinksDomainPagesSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksDomainPagesSummaryLiveResponseInfo> localVarResp = domainPagesSummaryLiveWithHttpInfo(backlinksDomainPagesSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with detailed summary data on all backlinks and related metrics for each page of the target domain or subdomain you specify. If you indicate a single page as a target, you will get comprehensive summary data on all backlinks for that page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_pages_summary/live/?bash&#39;
     * @param backlinksDomainPagesSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksDomainPagesSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksDomainPagesSummaryLiveResponseInfo> domainPagesSummaryLiveWithHttpInfo(List<BacklinksDomainPagesSummaryLiveRequestInfo> backlinksDomainPagesSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = domainPagesSummaryLiveValidateBeforeCall(backlinksDomainPagesSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksDomainPagesSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with detailed summary data on all backlinks and related metrics for each page of the target domain or subdomain you specify. If you indicate a single page as a target, you will get comprehensive summary data on all backlinks for that page. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/domain_pages_summary/live/?bash&#39;
     * @param backlinksDomainPagesSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainPagesSummaryLiveAsync(List<BacklinksDomainPagesSummaryLiveRequestInfo> backlinksDomainPagesSummaryLiveRequestInfo, final ApiCallback<BacklinksDomainPagesSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainPagesSummaryLiveValidateBeforeCall(backlinksDomainPagesSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksDomainPagesSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for historyLive
     * @param backlinksHistoryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyLiveCall(List<BacklinksHistoryLiveRequestInfo> backlinksHistoryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksHistoryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/history/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call historyLiveValidateBeforeCall(List<BacklinksHistoryLiveRequestInfo> backlinksHistoryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return historyLiveCall(backlinksHistoryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with historical backlinks data back to the beginning of 2019. You can receive the number of backlinks a given domain had in a specific time period, the number of new &amp; lost backlinks, referring domains, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/history/live/?bash&#39;
     * @param backlinksHistoryLiveRequestInfo  (optional)
     * @return BacklinksHistoryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksHistoryLiveResponseInfo historyLive(List<BacklinksHistoryLiveRequestInfo> backlinksHistoryLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksHistoryLiveResponseInfo> localVarResp = historyLiveWithHttpInfo(backlinksHistoryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with historical backlinks data back to the beginning of 2019. You can receive the number of backlinks a given domain had in a specific time period, the number of new &amp; lost backlinks, referring domains, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/history/live/?bash&#39;
     * @param backlinksHistoryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksHistoryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksHistoryLiveResponseInfo> historyLiveWithHttpInfo(List<BacklinksHistoryLiveRequestInfo> backlinksHistoryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = historyLiveValidateBeforeCall(backlinksHistoryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksHistoryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with historical backlinks data back to the beginning of 2019. You can receive the number of backlinks a given domain had in a specific time period, the number of new &amp; lost backlinks, referring domains, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/history/live/?bash&#39;
     * @param backlinksHistoryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call historyLiveAsync(List<BacklinksHistoryLiveRequestInfo> backlinksHistoryLiveRequestInfo, final ApiCallback<BacklinksHistoryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = historyLiveValidateBeforeCall(backlinksHistoryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksHistoryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for index
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/backlinks/index";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call indexValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return indexCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the total number of backlinks, domains, and pages our database contains for the moment when you make a request. You will also get stats for the last 12 months. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/index/?bash&#39;
     * @return BacklinksIndexResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksIndexResponseInfo index() throws ApiException {
        ApiResponse<BacklinksIndexResponseInfo> localVarResp = indexWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the total number of backlinks, domains, and pages our database contains for the moment when you make a request. You will also get stats for the last 12 months. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/index/?bash&#39;
     * @return ApiResponse&lt;BacklinksIndexResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksIndexResponseInfo> indexWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = indexValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BacklinksIndexResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the total number of backlinks, domains, and pages our database contains for the moment when you make a request. You will also get stats for the last 12 months. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/index/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call indexAsync(final ApiCallback<BacklinksIndexResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = indexValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BacklinksIndexResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageIntersectionLive
     * @param backlinksPageIntersectionLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageIntersectionLiveCall(List<BacklinksPageIntersectionLiveRequestInfo> backlinksPageIntersectionLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksPageIntersectionLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/page_intersection/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageIntersectionLiveValidateBeforeCall(List<BacklinksPageIntersectionLiveRequestInfo> backlinksPageIntersectionLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return pageIntersectionLiveCall(backlinksPageIntersectionLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the list of referring pages pointing to the specified targets. It is especially useful for finding the backlinks that point to your competitors but don’t point to your website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/page_intersection/live/?bash&#39;
     * @param backlinksPageIntersectionLiveRequestInfo  (optional)
     * @return BacklinksPageIntersectionLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksPageIntersectionLiveResponseInfo pageIntersectionLive(List<BacklinksPageIntersectionLiveRequestInfo> backlinksPageIntersectionLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksPageIntersectionLiveResponseInfo> localVarResp = pageIntersectionLiveWithHttpInfo(backlinksPageIntersectionLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the list of referring pages pointing to the specified targets. It is especially useful for finding the backlinks that point to your competitors but don’t point to your website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/page_intersection/live/?bash&#39;
     * @param backlinksPageIntersectionLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksPageIntersectionLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksPageIntersectionLiveResponseInfo> pageIntersectionLiveWithHttpInfo(List<BacklinksPageIntersectionLiveRequestInfo> backlinksPageIntersectionLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = pageIntersectionLiveValidateBeforeCall(backlinksPageIntersectionLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksPageIntersectionLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the list of referring pages pointing to the specified targets. It is especially useful for finding the backlinks that point to your competitors but don’t point to your website. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/page_intersection/live/?bash&#39;
     * @param backlinksPageIntersectionLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageIntersectionLiveAsync(List<BacklinksPageIntersectionLiveRequestInfo> backlinksPageIntersectionLiveRequestInfo, final ApiCallback<BacklinksPageIntersectionLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageIntersectionLiveValidateBeforeCall(backlinksPageIntersectionLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksPageIntersectionLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referringDomainsLive
     * @param backlinksReferringDomainsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referringDomainsLiveCall(List<BacklinksReferringDomainsLiveRequestInfo> backlinksReferringDomainsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksReferringDomainsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/referring_domains/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referringDomainsLiveValidateBeforeCall(List<BacklinksReferringDomainsLiveRequestInfo> backlinksReferringDomainsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return referringDomainsLiveCall(backlinksReferringDomainsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of referring domains pointing to the target you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/referring_domains/live/?bash&#39;
     * @param backlinksReferringDomainsLiveRequestInfo  (optional)
     * @return BacklinksReferringDomainsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksReferringDomainsLiveResponseInfo referringDomainsLive(List<BacklinksReferringDomainsLiveRequestInfo> backlinksReferringDomainsLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksReferringDomainsLiveResponseInfo> localVarResp = referringDomainsLiveWithHttpInfo(backlinksReferringDomainsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of referring domains pointing to the target you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/referring_domains/live/?bash&#39;
     * @param backlinksReferringDomainsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksReferringDomainsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksReferringDomainsLiveResponseInfo> referringDomainsLiveWithHttpInfo(List<BacklinksReferringDomainsLiveRequestInfo> backlinksReferringDomainsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = referringDomainsLiveValidateBeforeCall(backlinksReferringDomainsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksReferringDomainsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a detailed overview of referring domains pointing to the target you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/referring_domains/live/?bash&#39;
     * @param backlinksReferringDomainsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referringDomainsLiveAsync(List<BacklinksReferringDomainsLiveRequestInfo> backlinksReferringDomainsLiveRequestInfo, final ApiCallback<BacklinksReferringDomainsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = referringDomainsLiveValidateBeforeCall(backlinksReferringDomainsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksReferringDomainsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for referringNetworksLive
     * @param backlinksReferringNetworksLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referringNetworksLiveCall(List<BacklinksReferringNetworksLiveRequestInfo> backlinksReferringNetworksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksReferringNetworksLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/referring_networks/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call referringNetworksLiveValidateBeforeCall(List<BacklinksReferringNetworksLiveRequestInfo> backlinksReferringNetworksLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return referringNetworksLiveCall(backlinksReferringNetworksLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of referring IPs and subnets pointing to the target you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/referring_networks/live/?bash&#39;
     * @param backlinksReferringNetworksLiveRequestInfo  (optional)
     * @return BacklinksReferringNetworksLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksReferringNetworksLiveResponseInfo referringNetworksLive(List<BacklinksReferringNetworksLiveRequestInfo> backlinksReferringNetworksLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksReferringNetworksLiveResponseInfo> localVarResp = referringNetworksLiveWithHttpInfo(backlinksReferringNetworksLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of referring IPs and subnets pointing to the target you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/referring_networks/live/?bash&#39;
     * @param backlinksReferringNetworksLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksReferringNetworksLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksReferringNetworksLiveResponseInfo> referringNetworksLiveWithHttpInfo(List<BacklinksReferringNetworksLiveRequestInfo> backlinksReferringNetworksLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = referringNetworksLiveValidateBeforeCall(backlinksReferringNetworksLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksReferringNetworksLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a detailed overview of referring IPs and subnets pointing to the target you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/referring_networks/live/?bash&#39;
     * @param backlinksReferringNetworksLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call referringNetworksLiveAsync(List<BacklinksReferringNetworksLiveRequestInfo> backlinksReferringNetworksLiveRequestInfo, final ApiCallback<BacklinksReferringNetworksLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = referringNetworksLiveValidateBeforeCall(backlinksReferringNetworksLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksReferringNetworksLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for summaryLive
     * @param backlinksSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryLiveCall(List<BacklinksSummaryLiveRequestInfo> backlinksSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summaryLiveValidateBeforeCall(List<BacklinksSummaryLiveRequestInfo> backlinksSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return summaryLiveCall(backlinksSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with an overview of backlinks data available for a given domain, subdomain, or webpage. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/summary/live/?bash&#39;
     * @param backlinksSummaryLiveRequestInfo  (optional)
     * @return BacklinksSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksSummaryLiveResponseInfo summaryLive(List<BacklinksSummaryLiveRequestInfo> backlinksSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksSummaryLiveResponseInfo> localVarResp = summaryLiveWithHttpInfo(backlinksSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with an overview of backlinks data available for a given domain, subdomain, or webpage. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/summary/live/?bash&#39;
     * @param backlinksSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksSummaryLiveResponseInfo> summaryLiveWithHttpInfo(List<BacklinksSummaryLiveRequestInfo> backlinksSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = summaryLiveValidateBeforeCall(backlinksSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with an overview of backlinks data available for a given domain, subdomain, or webpage. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/summary/live/?bash&#39;
     * @param backlinksSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryLiveAsync(List<BacklinksSummaryLiveRequestInfo> backlinksSummaryLiveRequestInfo, final ApiCallback<BacklinksSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = summaryLiveValidateBeforeCall(backlinksSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeseriesNewLostSummaryLive
     * @param backlinksTimeseriesNewLostSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeseriesNewLostSummaryLiveCall(List<BacklinksTimeseriesNewLostSummaryLiveRequestInfo> backlinksTimeseriesNewLostSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksTimeseriesNewLostSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/timeseries_new_lost_summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeseriesNewLostSummaryLiveValidateBeforeCall(List<BacklinksTimeseriesNewLostSummaryLiveRequestInfo> backlinksTimeseriesNewLostSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return timeseriesNewLostSummaryLiveCall(backlinksTimeseriesNewLostSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of new and lost backlinks and referring domains for the domain specified in the target field. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/timeseries_new_lost_summary/live/?bash&#39;
     * @param backlinksTimeseriesNewLostSummaryLiveRequestInfo  (optional)
     * @return BacklinksTimeseriesNewLostSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksTimeseriesNewLostSummaryLiveResponseInfo timeseriesNewLostSummaryLive(List<BacklinksTimeseriesNewLostSummaryLiveRequestInfo> backlinksTimeseriesNewLostSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksTimeseriesNewLostSummaryLiveResponseInfo> localVarResp = timeseriesNewLostSummaryLiveWithHttpInfo(backlinksTimeseriesNewLostSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the number of new and lost backlinks and referring domains for the domain specified in the target field. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/timeseries_new_lost_summary/live/?bash&#39;
     * @param backlinksTimeseriesNewLostSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksTimeseriesNewLostSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksTimeseriesNewLostSummaryLiveResponseInfo> timeseriesNewLostSummaryLiveWithHttpInfo(List<BacklinksTimeseriesNewLostSummaryLiveRequestInfo> backlinksTimeseriesNewLostSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = timeseriesNewLostSummaryLiveValidateBeforeCall(backlinksTimeseriesNewLostSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksTimeseriesNewLostSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the number of new and lost backlinks and referring domains for the domain specified in the target field. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/timeseries_new_lost_summary/live/?bash&#39;
     * @param backlinksTimeseriesNewLostSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeseriesNewLostSummaryLiveAsync(List<BacklinksTimeseriesNewLostSummaryLiveRequestInfo> backlinksTimeseriesNewLostSummaryLiveRequestInfo, final ApiCallback<BacklinksTimeseriesNewLostSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeseriesNewLostSummaryLiveValidateBeforeCall(backlinksTimeseriesNewLostSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksTimeseriesNewLostSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for timeseriesSummaryLive
     * @param backlinksTimeseriesSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeseriesSummaryLiveCall(List<BacklinksTimeseriesSummaryLiveRequestInfo> backlinksTimeseriesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backlinksTimeseriesSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/backlinks/timeseries_summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call timeseriesSummaryLiveValidateBeforeCall(List<BacklinksTimeseriesSummaryLiveRequestInfo> backlinksTimeseriesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return timeseriesSummaryLiveCall(backlinksTimeseriesSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with an overview of backlink data for the target domain available during a period between the two indicated dates. Backlink metrics will be grouped by the time range that you define: day, week, month, or year. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/timeseries_summary/live/?bash&#39;
     * @param backlinksTimeseriesSummaryLiveRequestInfo  (optional)
     * @return BacklinksTimeseriesSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BacklinksTimeseriesSummaryLiveResponseInfo timeseriesSummaryLive(List<BacklinksTimeseriesSummaryLiveRequestInfo> backlinksTimeseriesSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<BacklinksTimeseriesSummaryLiveResponseInfo> localVarResp = timeseriesSummaryLiveWithHttpInfo(backlinksTimeseriesSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with an overview of backlink data for the target domain available during a period between the two indicated dates. Backlink metrics will be grouped by the time range that you define: day, week, month, or year. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/timeseries_summary/live/?bash&#39;
     * @param backlinksTimeseriesSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BacklinksTimeseriesSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BacklinksTimeseriesSummaryLiveResponseInfo> timeseriesSummaryLiveWithHttpInfo(List<BacklinksTimeseriesSummaryLiveRequestInfo> backlinksTimeseriesSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = timeseriesSummaryLiveValidateBeforeCall(backlinksTimeseriesSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BacklinksTimeseriesSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with an overview of backlink data for the target domain available during a period between the two indicated dates. Backlink metrics will be grouped by the time range that you define: day, week, month, or year. for more info please visit &#39;https://docs.dataforseo.com/v3/backlinks/timeseries_summary/live/?bash&#39;
     * @param backlinksTimeseriesSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call timeseriesSummaryLiveAsync(List<BacklinksTimeseriesSummaryLiveRequestInfo> backlinksTimeseriesSummaryLiveRequestInfo, final ApiCallback<BacklinksTimeseriesSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = timeseriesSummaryLiveValidateBeforeCall(backlinksTimeseriesSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BacklinksTimeseriesSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
