/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.api;

import org.dataforseo.client.ApiCallback;
import org.dataforseo.client.ApiClient;
import org.dataforseo.client.ApiException;
import org.dataforseo.client.ApiResponse;
import org.dataforseo.client.Configuration;
import org.dataforseo.client.Pair;
import org.dataforseo.client.ProgressRequestBody;
import org.dataforseo.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.dataforseo.client.model.SerpAiSummaryRequestInfo;
import org.dataforseo.client.model.SerpAiSummaryResponseInfo;
import org.dataforseo.client.model.SerpBaiduLanguagesResponseInfo;
import org.dataforseo.client.model.SerpBaiduLocationsCountryResponseInfo;
import org.dataforseo.client.model.SerpBaiduLocationsResponseInfo;
import org.dataforseo.client.model.SerpBaiduOrganicTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpBaiduOrganicTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpBaiduOrganicTaskGetRegularResponseInfo;
import org.dataforseo.client.model.SerpBaiduOrganicTaskPostRequestInfo;
import org.dataforseo.client.model.SerpBaiduOrganicTaskPostResponseInfo;
import org.dataforseo.client.model.SerpBaiduOrganicTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpBaiduOrganicTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpBingLanguagesResponseInfo;
import org.dataforseo.client.model.SerpBingLocalPackLiveHtmlResponseInfo;
import org.dataforseo.client.model.SerpBingLocalPackLiveRegularResponseInfo;
import org.dataforseo.client.model.SerpBingLocalPackTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpBingLocalPackTaskGetRegularResponseInfo;
import org.dataforseo.client.model.SerpBingLocalPackTaskPostResponseInfo;
import org.dataforseo.client.model.SerpBingLocalPackTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpBingLocalPackTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpBingLocationsCountryResponseInfo;
import org.dataforseo.client.model.SerpBingLocationsResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicLiveHtmlResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicLiveRegularResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicTaskGetRegularResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicTaskPostResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpBingOrganicTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpErrorsRequestInfo;
import org.dataforseo.client.model.SerpErrorsResponseInfo;
import org.dataforseo.client.model.SerpGoogleAutocompleteLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpGoogleAutocompleteLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleAutocompleteTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleAutocompleteTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleAutocompleteTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleAutocompleteTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleAutocompleteTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetInfoLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpGoogleDatasetInfoLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetInfoTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleDatasetInfoTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetInfoTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetInfoTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetSearchLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpGoogleDatasetSearchLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetSearchTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleDatasetSearchTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetSearchTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleDatasetSearchTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleEventsLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpGoogleEventsLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleEventsTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleEventsTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleEventsTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleEventsTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleEventsTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleImagesLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleImagesLiveHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleImagesTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleImagesTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleImagesTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleImagesTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleImagesTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleJobsTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleJobsTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleJobsTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleJobsTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleJobsTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleJobsTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleLanguagesResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderLiveHtmlRequestInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderLiveHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocalFinderTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocationsCountryResponseInfo;
import org.dataforseo.client.model.SerpGoogleLocationsResponseInfo;
import org.dataforseo.client.model.SerpGoogleMapsLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpGoogleMapsLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleMapsTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleMapsTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleMapsTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleMapsTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleMapsTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleNewsLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleNewsLiveHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleNewsTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleNewsTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleNewsTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleNewsTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleNewsTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicLiveHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicLiveRegularResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicTaskGetRegularResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleOrganicTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpGoogleSearchByImageTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpGoogleSearchByImageTaskPostRequestInfo;
import org.dataforseo.client.model.SerpGoogleSearchByImageTaskPostResponseInfo;
import org.dataforseo.client.model.SerpGoogleSearchByImageTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpGoogleSearchByImageTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpIdListRequestInfo;
import org.dataforseo.client.model.SerpIdListResponseInfo;
import org.dataforseo.client.model.SerpNaverOrganicTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpNaverOrganicTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpNaverOrganicTaskGetRegularResponseInfo;
import org.dataforseo.client.model.SerpNaverOrganicTaskPostResponseInfo;
import org.dataforseo.client.model.SerpNaverOrganicTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpNaverOrganicTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpScreenshotRequestInfo;
import org.dataforseo.client.model.SerpScreenshotResponseInfo;
import org.dataforseo.client.model.SerpSeznamLanguagesResponseInfo;
import org.dataforseo.client.model.SerpSeznamLocationsCountryResponseInfo;
import org.dataforseo.client.model.SerpSeznamLocationsResponseInfo;
import org.dataforseo.client.model.SerpSeznamOrganicTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpSeznamOrganicTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpSeznamOrganicTaskGetRegularResponseInfo;
import org.dataforseo.client.model.SerpSeznamOrganicTaskPostResponseInfo;
import org.dataforseo.client.model.SerpSeznamOrganicTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpSeznamOrganicTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpTaskRequestInfo;
import org.dataforseo.client.model.SerpYahooLanguagesResponseInfo;
import org.dataforseo.client.model.SerpYahooLocationsCountryResponseInfo;
import org.dataforseo.client.model.SerpYahooLocationsResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicLiveHtmlResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicLiveRegularResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicTaskGetRegularResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicTaskPostResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpYahooOrganicTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpYoutubeLanguagesResponseInfo;
import org.dataforseo.client.model.SerpYoutubeLocationsCountryResponseInfo;
import org.dataforseo.client.model.SerpYoutubeLocationsResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoCommentsLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpYoutubeVideoCommentsLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoCommentsTaskPostRequestInfo;
import org.dataforseo.client.model.SerpYoutubeVideoCommentsTaskPostResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoCommentsTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoCommentsTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoInfoLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpYoutubeVideoInfoLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoInfoTaskPostRequestInfo;
import org.dataforseo.client.model.SerpYoutubeVideoInfoTaskPostResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoInfoTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoInfoTasksReadyResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo;
import org.dataforseo.client.model.SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoSubtitlesTaskPostRequestInfo;
import org.dataforseo.client.model.SerpYoutubeVideoSubtitlesTaskPostResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoSubtitlesTasksFixedResponseInfo;
import org.dataforseo.client.model.SerpYoutubeVideoSubtitlesTasksReadyResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SerpApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SerpApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SerpApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for aiSummary
     * @param serpAiSummaryRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aiSummaryCall(List<SerpAiSummaryRequestInfo> serpAiSummaryRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpAiSummaryRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/ai_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call aiSummaryValidateBeforeCall(List<SerpAiSummaryRequestInfo> serpAiSummaryRequestInfo, final ApiCallback _callback) throws ApiException {
        return aiSummaryCall(serpAiSummaryRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ The purpose of the Live SERP API AI Summary endpoint is to provide a summary of the content found on any SERP and generate a response based on the user’s specified prompt. To obtain results, you have to specify task_id, which you can find in the response to the POST request. Learn more in our Help Center. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/ai_summary/?bash&#39;
     * @param serpAiSummaryRequestInfo  (optional)
     * @return SerpAiSummaryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpAiSummaryResponseInfo aiSummary(List<SerpAiSummaryRequestInfo> serpAiSummaryRequestInfo) throws ApiException {
        ApiResponse<SerpAiSummaryResponseInfo> localVarResp = aiSummaryWithHttpInfo(serpAiSummaryRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ The purpose of the Live SERP API AI Summary endpoint is to provide a summary of the content found on any SERP and generate a response based on the user’s specified prompt. To obtain results, you have to specify task_id, which you can find in the response to the POST request. Learn more in our Help Center. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/ai_summary/?bash&#39;
     * @param serpAiSummaryRequestInfo  (optional)
     * @return ApiResponse&lt;SerpAiSummaryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpAiSummaryResponseInfo> aiSummaryWithHttpInfo(List<SerpAiSummaryRequestInfo> serpAiSummaryRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = aiSummaryValidateBeforeCall(serpAiSummaryRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpAiSummaryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ The purpose of the Live SERP API AI Summary endpoint is to provide a summary of the content found on any SERP and generate a response based on the user’s specified prompt. To obtain results, you have to specify task_id, which you can find in the response to the POST request. Learn more in our Help Center. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/ai_summary/?bash&#39;
     * @param serpAiSummaryRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call aiSummaryAsync(List<SerpAiSummaryRequestInfo> serpAiSummaryRequestInfo, final ApiCallback<SerpAiSummaryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = aiSummaryValidateBeforeCall(serpAiSummaryRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpAiSummaryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for baiduOrganicTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/organic/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call baiduOrganicTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling baiduOrganicTaskGetAdvanced(Async)");
        }

        return baiduOrganicTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpBaiduOrganicTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduOrganicTaskGetAdvancedResponseInfo baiduOrganicTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpBaiduOrganicTaskGetAdvancedResponseInfo> localVarResp = baiduOrganicTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBaiduOrganicTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduOrganicTaskGetAdvancedResponseInfo> baiduOrganicTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = baiduOrganicTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskGetAdvancedAsync(String id, final ApiCallback<SerpBaiduOrganicTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = baiduOrganicTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for baiduOrganicTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/organic/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call baiduOrganicTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling baiduOrganicTaskGetHtml(Async)");
        }

        return baiduOrganicTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpBaiduOrganicTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduOrganicTaskGetHtmlResponseInfo baiduOrganicTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpBaiduOrganicTaskGetHtmlResponseInfo> localVarResp = baiduOrganicTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBaiduOrganicTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduOrganicTaskGetHtmlResponseInfo> baiduOrganicTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = baiduOrganicTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskGetHtmlAsync(String id, final ApiCallback<SerpBaiduOrganicTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = baiduOrganicTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for baiduOrganicTaskGetRegular
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskGetRegularCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/organic/task_get/regular/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call baiduOrganicTaskGetRegularValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling baiduOrganicTaskGetRegular(Async)");
        }

        return baiduOrganicTaskGetRegularCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpBaiduOrganicTaskGetRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduOrganicTaskGetRegularResponseInfo baiduOrganicTaskGetRegular(String id) throws ApiException {
        ApiResponse<SerpBaiduOrganicTaskGetRegularResponseInfo> localVarResp = baiduOrganicTaskGetRegularWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBaiduOrganicTaskGetRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduOrganicTaskGetRegularResponseInfo> baiduOrganicTaskGetRegularWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = baiduOrganicTaskGetRegularValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskGetRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskGetRegularAsync(String id, final ApiCallback<SerpBaiduOrganicTaskGetRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = baiduOrganicTaskGetRegularValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskGetRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for baiduOrganicTaskPost
     * @param serpBaiduOrganicTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskPostCall(List<SerpBaiduOrganicTaskPostRequestInfo> serpBaiduOrganicTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpBaiduOrganicTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/organic/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call baiduOrganicTaskPostValidateBeforeCall(List<SerpBaiduOrganicTaskPostRequestInfo> serpBaiduOrganicTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return baiduOrganicTaskPostCall(serpBaiduOrganicTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Baidu SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and other settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_post/?bash&#39;
     * @param serpBaiduOrganicTaskPostRequestInfo  (optional)
     * @return SerpBaiduOrganicTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduOrganicTaskPostResponseInfo baiduOrganicTaskPost(List<SerpBaiduOrganicTaskPostRequestInfo> serpBaiduOrganicTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpBaiduOrganicTaskPostResponseInfo> localVarResp = baiduOrganicTaskPostWithHttpInfo(serpBaiduOrganicTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Baidu SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and other settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_post/?bash&#39;
     * @param serpBaiduOrganicTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBaiduOrganicTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduOrganicTaskPostResponseInfo> baiduOrganicTaskPostWithHttpInfo(List<SerpBaiduOrganicTaskPostRequestInfo> serpBaiduOrganicTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = baiduOrganicTaskPostValidateBeforeCall(serpBaiduOrganicTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Baidu SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and other settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/task_post/?bash&#39;
     * @param serpBaiduOrganicTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTaskPostAsync(List<SerpBaiduOrganicTaskPostRequestInfo> serpBaiduOrganicTaskPostRequestInfo, final ApiCallback<SerpBaiduOrganicTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = baiduOrganicTaskPostValidateBeforeCall(serpBaiduOrganicTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for baiduOrganicTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/organic/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call baiduOrganicTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return baiduOrganicTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/tasks_fixed/?bash&#39;
     * @return SerpBaiduOrganicTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduOrganicTasksFixedResponseInfo baiduOrganicTasksFixed() throws ApiException {
        ApiResponse<SerpBaiduOrganicTasksFixedResponseInfo> localVarResp = baiduOrganicTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpBaiduOrganicTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduOrganicTasksFixedResponseInfo> baiduOrganicTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = baiduOrganicTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTasksFixedAsync(final ApiCallback<SerpBaiduOrganicTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = baiduOrganicTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for baiduOrganicTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/organic/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call baiduOrganicTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return baiduOrganicTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/tasks_ready/?bash&#39;
     * @return SerpBaiduOrganicTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduOrganicTasksReadyResponseInfo baiduOrganicTasksReady() throws ApiException {
        ApiResponse<SerpBaiduOrganicTasksReadyResponseInfo> localVarResp = baiduOrganicTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpBaiduOrganicTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduOrganicTasksReadyResponseInfo> baiduOrganicTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = baiduOrganicTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/organic/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call baiduOrganicTasksReadyAsync(final ApiCallback<SerpBaiduOrganicTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = baiduOrganicTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBaiduOrganicTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingLocalPackLiveHtml
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackLiveHtmlCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/local_pack/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingLocalPackLiveHtmlValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingLocalPackLiveHtmlCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpBingLocalPackLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocalPackLiveHtmlResponseInfo bingLocalPackLiveHtml(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpBingLocalPackLiveHtmlResponseInfo> localVarResp = bingLocalPackLiveHtmlWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBingLocalPackLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocalPackLiveHtmlResponseInfo> bingLocalPackLiveHtmlWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingLocalPackLiveHtmlValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackLiveHtmlAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpBingLocalPackLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingLocalPackLiveHtmlValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingLocalPackLiveRegular
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackLiveRegularCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/local_pack/live/regular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingLocalPackLiveRegularValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingLocalPackLiveRegularCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live Bing Local Pack SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpBingLocalPackLiveRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocalPackLiveRegularResponseInfo bingLocalPackLiveRegular(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpBingLocalPackLiveRegularResponseInfo> localVarResp = bingLocalPackLiveRegularWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live Bing Local Pack SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBingLocalPackLiveRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocalPackLiveRegularResponseInfo> bingLocalPackLiveRegularWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingLocalPackLiveRegularValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackLiveRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live Bing Local Pack SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackLiveRegularAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpBingLocalPackLiveRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingLocalPackLiveRegularValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackLiveRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingLocalPackTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/local_pack/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingLocalPackTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingLocalPackTaskGetHtml(Async)");
        }

        return bingLocalPackTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpBingLocalPackTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocalPackTaskGetHtmlResponseInfo bingLocalPackTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpBingLocalPackTaskGetHtmlResponseInfo> localVarResp = bingLocalPackTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBingLocalPackTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocalPackTaskGetHtmlResponseInfo> bingLocalPackTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingLocalPackTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTaskGetHtmlAsync(String id, final ApiCallback<SerpBingLocalPackTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingLocalPackTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingLocalPackTaskGetRegular
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTaskGetRegularCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/local_pack/task_get/regular/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingLocalPackTaskGetRegularValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingLocalPackTaskGetRegular(Async)");
        }

        return bingLocalPackTaskGetRegularCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpBingLocalPackTaskGetRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocalPackTaskGetRegularResponseInfo bingLocalPackTaskGetRegular(String id) throws ApiException {
        ApiResponse<SerpBingLocalPackTaskGetRegularResponseInfo> localVarResp = bingLocalPackTaskGetRegularWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBingLocalPackTaskGetRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocalPackTaskGetRegularResponseInfo> bingLocalPackTaskGetRegularWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingLocalPackTaskGetRegularValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTaskGetRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTaskGetRegularAsync(String id, final ApiCallback<SerpBingLocalPackTaskGetRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingLocalPackTaskGetRegularValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTaskGetRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingLocalPackTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/local_pack/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingLocalPackTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingLocalPackTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpBingLocalPackTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocalPackTaskPostResponseInfo bingLocalPackTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpBingLocalPackTaskPostResponseInfo> localVarResp = bingLocalPackTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBingLocalPackTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocalPackTaskPostResponseInfo> bingLocalPackTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingLocalPackTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpBingLocalPackTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingLocalPackTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingLocalPackTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/local_pack/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingLocalPackTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingLocalPackTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/tasks_fixed/?bash&#39;
     * @return SerpBingLocalPackTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocalPackTasksFixedResponseInfo bingLocalPackTasksFixed() throws ApiException {
        ApiResponse<SerpBingLocalPackTasksFixedResponseInfo> localVarResp = bingLocalPackTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpBingLocalPackTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocalPackTasksFixedResponseInfo> bingLocalPackTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingLocalPackTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTasksFixedAsync(final ApiCallback<SerpBingLocalPackTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingLocalPackTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingLocalPackTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/local_pack/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingLocalPackTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingLocalPackTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/tasks_ready/?bash&#39;
     * @return SerpBingLocalPackTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocalPackTasksReadyResponseInfo bingLocalPackTasksReady() throws ApiException {
        ApiResponse<SerpBingLocalPackTasksReadyResponseInfo> localVarResp = bingLocalPackTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpBingLocalPackTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocalPackTasksReadyResponseInfo> bingLocalPackTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingLocalPackTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/local_pack/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingLocalPackTasksReadyAsync(final ApiCallback<SerpBingLocalPackTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingLocalPackTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBingLocalPackTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicLiveAdvanced
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicLiveAdvancedCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicLiveAdvancedValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingOrganicLiveAdvancedCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. This endpoint will supply a complete overview of featured snippets and other extra elements of SERPs. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpBingOrganicLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicLiveAdvancedResponseInfo bingOrganicLiveAdvanced(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpBingOrganicLiveAdvancedResponseInfo> localVarResp = bingOrganicLiveAdvancedWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. This endpoint will supply a complete overview of featured snippets and other extra elements of SERPs. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBingOrganicLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicLiveAdvancedResponseInfo> bingOrganicLiveAdvancedWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingOrganicLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. This endpoint will supply a complete overview of featured snippets and other extra elements of SERPs. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicLiveAdvancedAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpBingOrganicLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicLiveHtml
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicLiveHtmlCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicLiveHtmlValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingOrganicLiveHtmlCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpBingOrganicLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicLiveHtmlResponseInfo bingOrganicLiveHtml(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpBingOrganicLiveHtmlResponseInfo> localVarResp = bingOrganicLiveHtmlWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBingOrganicLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicLiveHtmlResponseInfo> bingOrganicLiveHtmlWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingOrganicLiveHtmlValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicLiveHtmlAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpBingOrganicLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicLiveHtmlValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicLiveRegular
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicLiveRegularCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/live/regular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicLiveRegularValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingOrganicLiveRegularCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpBingOrganicLiveRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicLiveRegularResponseInfo bingOrganicLiveRegular(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpBingOrganicLiveRegularResponseInfo> localVarResp = bingOrganicLiveRegularWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBingOrganicLiveRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicLiveRegularResponseInfo> bingOrganicLiveRegularWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingOrganicLiveRegularValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicLiveRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicLiveRegularAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpBingOrganicLiveRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicLiveRegularValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicLiveRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingOrganicTaskGetAdvanced(Async)");
        }

        return bingOrganicTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpBingOrganicTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicTaskGetAdvancedResponseInfo bingOrganicTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpBingOrganicTaskGetAdvancedResponseInfo> localVarResp = bingOrganicTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBingOrganicTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicTaskGetAdvancedResponseInfo> bingOrganicTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingOrganicTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskGetAdvancedAsync(String id, final ApiCallback<SerpBingOrganicTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingOrganicTaskGetHtml(Async)");
        }

        return bingOrganicTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpBingOrganicTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicTaskGetHtmlResponseInfo bingOrganicTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpBingOrganicTaskGetHtmlResponseInfo> localVarResp = bingOrganicTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBingOrganicTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicTaskGetHtmlResponseInfo> bingOrganicTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingOrganicTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskGetHtmlAsync(String id, final ApiCallback<SerpBingOrganicTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicTaskGetRegular
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskGetRegularCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/task_get/regular/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicTaskGetRegularValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingOrganicTaskGetRegular(Async)");
        }

        return bingOrganicTaskGetRegularCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpBingOrganicTaskGetRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicTaskGetRegularResponseInfo bingOrganicTaskGetRegular(String id) throws ApiException {
        ApiResponse<SerpBingOrganicTaskGetRegularResponseInfo> localVarResp = bingOrganicTaskGetRegularWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpBingOrganicTaskGetRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicTaskGetRegularResponseInfo> bingOrganicTaskGetRegularWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingOrganicTaskGetRegularValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskGetRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskGetRegularAsync(String id, final ApiCallback<SerpBingOrganicTaskGetRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicTaskGetRegularValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskGetRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingOrganicTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpBingOrganicTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicTaskPostResponseInfo bingOrganicTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpBingOrganicTaskPostResponseInfo> localVarResp = bingOrganicTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpBingOrganicTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicTaskPostResponseInfo> bingOrganicTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpBingOrganicTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingOrganicTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/tasks_fixed/?bash&#39;
     * @return SerpBingOrganicTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicTasksFixedResponseInfo bingOrganicTasksFixed() throws ApiException {
        ApiResponse<SerpBingOrganicTasksFixedResponseInfo> localVarResp = bingOrganicTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpBingOrganicTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicTasksFixedResponseInfo> bingOrganicTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingOrganicTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTasksFixedAsync(final ApiCallback<SerpBingOrganicTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingOrganicTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/organic/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingOrganicTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingOrganicTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/tasks_ready/?bash&#39;
     * @return SerpBingOrganicTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingOrganicTasksReadyResponseInfo bingOrganicTasksReady() throws ApiException {
        ApiResponse<SerpBingOrganicTasksReadyResponseInfo> localVarResp = bingOrganicTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpBingOrganicTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingOrganicTasksReadyResponseInfo> bingOrganicTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingOrganicTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/organic/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingOrganicTasksReadyAsync(final ApiCallback<SerpBingOrganicTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingOrganicTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBingOrganicTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAutocompleteLiveAdvanced
     * @param serpGoogleAutocompleteLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteLiveAdvancedCall(List<SerpGoogleAutocompleteLiveAdvancedRequestInfo> serpGoogleAutocompleteLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleAutocompleteLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/autocomplete/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAutocompleteLiveAdvancedValidateBeforeCall(List<SerpGoogleAutocompleteLiveAdvancedRequestInfo> serpGoogleAutocompleteLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAutocompleteLiveAdvancedCall(serpGoogleAutocompleteLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Autocomplete is a feature within Google Search that improves the search experience by allowing users to complete searches they started to type. DataForSEO SERP API will provide you with all the suggestions Google Autocomplete offers for a particular keyword, the position of the cursor pointer, and the search client. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/live/advanced/?bash&#39;
     * @param serpGoogleAutocompleteLiveAdvancedRequestInfo  (optional)
     * @return SerpGoogleAutocompleteLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleAutocompleteLiveAdvancedResponseInfo googleAutocompleteLiveAdvanced(List<SerpGoogleAutocompleteLiveAdvancedRequestInfo> serpGoogleAutocompleteLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleAutocompleteLiveAdvancedResponseInfo> localVarResp = googleAutocompleteLiveAdvancedWithHttpInfo(serpGoogleAutocompleteLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Autocomplete is a feature within Google Search that improves the search experience by allowing users to complete searches they started to type. DataForSEO SERP API will provide you with all the suggestions Google Autocomplete offers for a particular keyword, the position of the cursor pointer, and the search client. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/live/advanced/?bash&#39;
     * @param serpGoogleAutocompleteLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleAutocompleteLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleAutocompleteLiveAdvancedResponseInfo> googleAutocompleteLiveAdvancedWithHttpInfo(List<SerpGoogleAutocompleteLiveAdvancedRequestInfo> serpGoogleAutocompleteLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAutocompleteLiveAdvancedValidateBeforeCall(serpGoogleAutocompleteLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Autocomplete is a feature within Google Search that improves the search experience by allowing users to complete searches they started to type. DataForSEO SERP API will provide you with all the suggestions Google Autocomplete offers for a particular keyword, the position of the cursor pointer, and the search client. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/live/advanced/?bash&#39;
     * @param serpGoogleAutocompleteLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteLiveAdvancedAsync(List<SerpGoogleAutocompleteLiveAdvancedRequestInfo> serpGoogleAutocompleteLiveAdvancedRequestInfo, final ApiCallback<SerpGoogleAutocompleteLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAutocompleteLiveAdvancedValidateBeforeCall(serpGoogleAutocompleteLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAutocompleteTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/autocomplete/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAutocompleteTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleAutocompleteTaskGetAdvanced(Async)");
        }

        return googleAutocompleteTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleAutocompleteTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleAutocompleteTaskGetAdvancedResponseInfo googleAutocompleteTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleAutocompleteTaskGetAdvancedResponseInfo> localVarResp = googleAutocompleteTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleAutocompleteTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleAutocompleteTaskGetAdvancedResponseInfo> googleAutocompleteTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleAutocompleteTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleAutocompleteTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAutocompleteTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAutocompleteTaskPost
     * @param serpGoogleAutocompleteTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTaskPostCall(List<SerpGoogleAutocompleteTaskPostRequestInfo> serpGoogleAutocompleteTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleAutocompleteTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/autocomplete/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAutocompleteTaskPostValidateBeforeCall(List<SerpGoogleAutocompleteTaskPostRequestInfo> serpGoogleAutocompleteTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAutocompleteTaskPostCall(serpGoogleAutocompleteTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Autocomplete is a feature within Google Search that improves the search experience by allowing users to complete searches they started to type. DataForSEO SERP API will provide you with all the suggestions Google Autocomplete offers for a particular keyword, the position of the cursor pointer, and the search client. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/task_post/?bash&#39;
     * @param serpGoogleAutocompleteTaskPostRequestInfo  (optional)
     * @return SerpGoogleAutocompleteTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleAutocompleteTaskPostResponseInfo googleAutocompleteTaskPost(List<SerpGoogleAutocompleteTaskPostRequestInfo> serpGoogleAutocompleteTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleAutocompleteTaskPostResponseInfo> localVarResp = googleAutocompleteTaskPostWithHttpInfo(serpGoogleAutocompleteTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Autocomplete is a feature within Google Search that improves the search experience by allowing users to complete searches they started to type. DataForSEO SERP API will provide you with all the suggestions Google Autocomplete offers for a particular keyword, the position of the cursor pointer, and the search client. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/task_post/?bash&#39;
     * @param serpGoogleAutocompleteTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleAutocompleteTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleAutocompleteTaskPostResponseInfo> googleAutocompleteTaskPostWithHttpInfo(List<SerpGoogleAutocompleteTaskPostRequestInfo> serpGoogleAutocompleteTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAutocompleteTaskPostValidateBeforeCall(serpGoogleAutocompleteTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Autocomplete is a feature within Google Search that improves the search experience by allowing users to complete searches they started to type. DataForSEO SERP API will provide you with all the suggestions Google Autocomplete offers for a particular keyword, the position of the cursor pointer, and the search client. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/task_post/?bash&#39;
     * @param serpGoogleAutocompleteTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTaskPostAsync(List<SerpGoogleAutocompleteTaskPostRequestInfo> serpGoogleAutocompleteTaskPostRequestInfo, final ApiCallback<SerpGoogleAutocompleteTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAutocompleteTaskPostValidateBeforeCall(serpGoogleAutocompleteTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAutocompleteTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/autocomplete/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAutocompleteTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleAutocompleteTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/tasks_fixed/?bash&#39;
     * @return SerpGoogleAutocompleteTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleAutocompleteTasksFixedResponseInfo googleAutocompleteTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleAutocompleteTasksFixedResponseInfo> localVarResp = googleAutocompleteTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleAutocompleteTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleAutocompleteTasksFixedResponseInfo> googleAutocompleteTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleAutocompleteTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTasksFixedAsync(final ApiCallback<SerpGoogleAutocompleteTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAutocompleteTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAutocompleteTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/autocomplete/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAutocompleteTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleAutocompleteTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/tasks_ready/?bash&#39;
     * @return SerpGoogleAutocompleteTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleAutocompleteTasksReadyResponseInfo googleAutocompleteTasksReady() throws ApiException {
        ApiResponse<SerpGoogleAutocompleteTasksReadyResponseInfo> localVarResp = googleAutocompleteTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleAutocompleteTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleAutocompleteTasksReadyResponseInfo> googleAutocompleteTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleAutocompleteTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/autocomplete/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAutocompleteTasksReadyAsync(final ApiCallback<SerpGoogleAutocompleteTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAutocompleteTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleAutocompleteTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetInfoLiveAdvanced
     * @param serpGoogleDatasetInfoLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoLiveAdvancedCall(List<SerpGoogleDatasetInfoLiveAdvancedRequestInfo> serpGoogleDatasetInfoLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleDatasetInfoLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_info/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetInfoLiveAdvancedValidateBeforeCall(List<SerpGoogleDatasetInfoLiveAdvancedRequestInfo> serpGoogleDatasetInfoLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleDatasetInfoLiveAdvancedCall(serpGoogleDatasetInfoLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live Google Dataset Info provides real-time data on the dataset you specify in the request. You will get data from a page of the dataset displayed separately from the SERP. It contains information about dataset content, authors, licenses, and description on the SERP. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/live/advanced/?bash&#39;
     * @param serpGoogleDatasetInfoLiveAdvancedRequestInfo  (optional)
     * @return SerpGoogleDatasetInfoLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetInfoLiveAdvancedResponseInfo googleDatasetInfoLiveAdvanced(List<SerpGoogleDatasetInfoLiveAdvancedRequestInfo> serpGoogleDatasetInfoLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleDatasetInfoLiveAdvancedResponseInfo> localVarResp = googleDatasetInfoLiveAdvancedWithHttpInfo(serpGoogleDatasetInfoLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live Google Dataset Info provides real-time data on the dataset you specify in the request. You will get data from a page of the dataset displayed separately from the SERP. It contains information about dataset content, authors, licenses, and description on the SERP. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/live/advanced/?bash&#39;
     * @param serpGoogleDatasetInfoLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleDatasetInfoLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetInfoLiveAdvancedResponseInfo> googleDatasetInfoLiveAdvancedWithHttpInfo(List<SerpGoogleDatasetInfoLiveAdvancedRequestInfo> serpGoogleDatasetInfoLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleDatasetInfoLiveAdvancedValidateBeforeCall(serpGoogleDatasetInfoLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live Google Dataset Info provides real-time data on the dataset you specify in the request. You will get data from a page of the dataset displayed separately from the SERP. It contains information about dataset content, authors, licenses, and description on the SERP. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/live/advanced/?bash&#39;
     * @param serpGoogleDatasetInfoLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoLiveAdvancedAsync(List<SerpGoogleDatasetInfoLiveAdvancedRequestInfo> serpGoogleDatasetInfoLiveAdvancedRequestInfo, final ApiCallback<SerpGoogleDatasetInfoLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetInfoLiveAdvancedValidateBeforeCall(serpGoogleDatasetInfoLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetInfoTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_info/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetInfoTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleDatasetInfoTaskGetAdvanced(Async)");
        }

        return googleDatasetInfoTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo googleDatasetInfoTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo> localVarResp = googleDatasetInfoTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo> googleDatasetInfoTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleDatasetInfoTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetInfoTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetInfoTaskPost
     * @param serpGoogleDatasetInfoTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTaskPostCall(List<SerpGoogleDatasetInfoTaskPostRequestInfo> serpGoogleDatasetInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleDatasetInfoTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_info/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetInfoTaskPostValidateBeforeCall(List<SerpGoogleDatasetInfoTaskPostRequestInfo> serpGoogleDatasetInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleDatasetInfoTaskPostCall(serpGoogleDatasetInfoTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Dataset Info API provides detailed information about the dataset you specify in the POST request. You will get data from a page of the dataset displayed separately from the SERP. It contains information about dataset content, authors, licenses, and description on the SERP. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/task_post/?bash&#39;
     * @param serpGoogleDatasetInfoTaskPostRequestInfo  (optional)
     * @return SerpGoogleDatasetInfoTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetInfoTaskPostResponseInfo googleDatasetInfoTaskPost(List<SerpGoogleDatasetInfoTaskPostRequestInfo> serpGoogleDatasetInfoTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleDatasetInfoTaskPostResponseInfo> localVarResp = googleDatasetInfoTaskPostWithHttpInfo(serpGoogleDatasetInfoTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Dataset Info API provides detailed information about the dataset you specify in the POST request. You will get data from a page of the dataset displayed separately from the SERP. It contains information about dataset content, authors, licenses, and description on the SERP. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/task_post/?bash&#39;
     * @param serpGoogleDatasetInfoTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleDatasetInfoTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetInfoTaskPostResponseInfo> googleDatasetInfoTaskPostWithHttpInfo(List<SerpGoogleDatasetInfoTaskPostRequestInfo> serpGoogleDatasetInfoTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleDatasetInfoTaskPostValidateBeforeCall(serpGoogleDatasetInfoTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Dataset Info API provides detailed information about the dataset you specify in the POST request. You will get data from a page of the dataset displayed separately from the SERP. It contains information about dataset content, authors, licenses, and description on the SERP. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/task_post/?bash&#39;
     * @param serpGoogleDatasetInfoTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTaskPostAsync(List<SerpGoogleDatasetInfoTaskPostRequestInfo> serpGoogleDatasetInfoTaskPostRequestInfo, final ApiCallback<SerpGoogleDatasetInfoTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetInfoTaskPostValidateBeforeCall(serpGoogleDatasetInfoTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetInfoTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_info/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetInfoTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleDatasetInfoTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/tasks_fixed/?bash&#39;
     * @return SerpGoogleDatasetInfoTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetInfoTasksFixedResponseInfo googleDatasetInfoTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleDatasetInfoTasksFixedResponseInfo> localVarResp = googleDatasetInfoTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleDatasetInfoTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetInfoTasksFixedResponseInfo> googleDatasetInfoTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleDatasetInfoTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTasksFixedAsync(final ApiCallback<SerpGoogleDatasetInfoTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetInfoTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetInfoTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_info/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetInfoTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleDatasetInfoTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/tasks_ready/?bash&#39;
     * @return SerpGoogleDatasetInfoTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetInfoTasksReadyResponseInfo googleDatasetInfoTasksReady() throws ApiException {
        ApiResponse<SerpGoogleDatasetInfoTasksReadyResponseInfo> localVarResp = googleDatasetInfoTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleDatasetInfoTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetInfoTasksReadyResponseInfo> googleDatasetInfoTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleDatasetInfoTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_info/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetInfoTasksReadyAsync(final ApiCallback<SerpGoogleDatasetInfoTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetInfoTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetInfoTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetSearchLiveAdvanced
     * @param serpGoogleDatasetSearchLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchLiveAdvancedCall(List<SerpGoogleDatasetSearchLiveAdvancedRequestInfo> serpGoogleDatasetSearchLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleDatasetSearchLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_search/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetSearchLiveAdvancedValidateBeforeCall(List<SerpGoogleDatasetSearchLiveAdvancedRequestInfo> serpGoogleDatasetSearchLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleDatasetSearchLiveAdvancedCall(serpGoogleDatasetSearchLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live Google Dataset Search provides real-time data on the top 20 Google Dataset search engine results. These results are specific to the indicated keyword. You can specify other parameters optionally. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/live/advanced/?bash&#39;
     * @param serpGoogleDatasetSearchLiveAdvancedRequestInfo  (optional)
     * @return SerpGoogleDatasetSearchLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetSearchLiveAdvancedResponseInfo googleDatasetSearchLiveAdvanced(List<SerpGoogleDatasetSearchLiveAdvancedRequestInfo> serpGoogleDatasetSearchLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleDatasetSearchLiveAdvancedResponseInfo> localVarResp = googleDatasetSearchLiveAdvancedWithHttpInfo(serpGoogleDatasetSearchLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live Google Dataset Search provides real-time data on the top 20 Google Dataset search engine results. These results are specific to the indicated keyword. You can specify other parameters optionally. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/live/advanced/?bash&#39;
     * @param serpGoogleDatasetSearchLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleDatasetSearchLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetSearchLiveAdvancedResponseInfo> googleDatasetSearchLiveAdvancedWithHttpInfo(List<SerpGoogleDatasetSearchLiveAdvancedRequestInfo> serpGoogleDatasetSearchLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleDatasetSearchLiveAdvancedValidateBeforeCall(serpGoogleDatasetSearchLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live Google Dataset Search provides real-time data on the top 20 Google Dataset search engine results. These results are specific to the indicated keyword. You can specify other parameters optionally. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/live/advanced/?bash&#39;
     * @param serpGoogleDatasetSearchLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchLiveAdvancedAsync(List<SerpGoogleDatasetSearchLiveAdvancedRequestInfo> serpGoogleDatasetSearchLiveAdvancedRequestInfo, final ApiCallback<SerpGoogleDatasetSearchLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetSearchLiveAdvancedValidateBeforeCall(serpGoogleDatasetSearchLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetSearchTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_search/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetSearchTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleDatasetSearchTaskGetAdvanced(Async)");
        }

        return googleDatasetSearchTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo googleDatasetSearchTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo> localVarResp = googleDatasetSearchTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo> googleDatasetSearchTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleDatasetSearchTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetSearchTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetSearchTaskPost
     * @param serpGoogleDatasetSearchTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTaskPostCall(List<SerpGoogleDatasetSearchTaskPostRequestInfo> serpGoogleDatasetSearchTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleDatasetSearchTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_search/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetSearchTaskPostValidateBeforeCall(List<SerpGoogleDatasetSearchTaskPostRequestInfo> serpGoogleDatasetSearchTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleDatasetSearchTaskPostCall(serpGoogleDatasetSearchTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Dataset Search API provides top 20 Google Dataset search engine results. These results are specific to the indicated keyword. You can specify other parameters optionally. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/task_post/?bash&#39;
     * @param serpGoogleDatasetSearchTaskPostRequestInfo  (optional)
     * @return SerpGoogleDatasetSearchTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetSearchTaskPostResponseInfo googleDatasetSearchTaskPost(List<SerpGoogleDatasetSearchTaskPostRequestInfo> serpGoogleDatasetSearchTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleDatasetSearchTaskPostResponseInfo> localVarResp = googleDatasetSearchTaskPostWithHttpInfo(serpGoogleDatasetSearchTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Dataset Search API provides top 20 Google Dataset search engine results. These results are specific to the indicated keyword. You can specify other parameters optionally. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/task_post/?bash&#39;
     * @param serpGoogleDatasetSearchTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleDatasetSearchTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetSearchTaskPostResponseInfo> googleDatasetSearchTaskPostWithHttpInfo(List<SerpGoogleDatasetSearchTaskPostRequestInfo> serpGoogleDatasetSearchTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleDatasetSearchTaskPostValidateBeforeCall(serpGoogleDatasetSearchTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Dataset Search API provides top 20 Google Dataset search engine results. These results are specific to the indicated keyword. You can specify other parameters optionally. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/task_post/?bash&#39;
     * @param serpGoogleDatasetSearchTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTaskPostAsync(List<SerpGoogleDatasetSearchTaskPostRequestInfo> serpGoogleDatasetSearchTaskPostRequestInfo, final ApiCallback<SerpGoogleDatasetSearchTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetSearchTaskPostValidateBeforeCall(serpGoogleDatasetSearchTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetSearchTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_search/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetSearchTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleDatasetSearchTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/tasks_fixed/?bash&#39;
     * @return SerpGoogleDatasetSearchTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetSearchTasksFixedResponseInfo googleDatasetSearchTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleDatasetSearchTasksFixedResponseInfo> localVarResp = googleDatasetSearchTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleDatasetSearchTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetSearchTasksFixedResponseInfo> googleDatasetSearchTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleDatasetSearchTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTasksFixedAsync(final ApiCallback<SerpGoogleDatasetSearchTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetSearchTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleDatasetSearchTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/dataset_search/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleDatasetSearchTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleDatasetSearchTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/tasks_ready/?bash&#39;
     * @return SerpGoogleDatasetSearchTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleDatasetSearchTasksReadyResponseInfo googleDatasetSearchTasksReady() throws ApiException {
        ApiResponse<SerpGoogleDatasetSearchTasksReadyResponseInfo> localVarResp = googleDatasetSearchTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleDatasetSearchTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleDatasetSearchTasksReadyResponseInfo> googleDatasetSearchTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleDatasetSearchTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/dataset_search/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleDatasetSearchTasksReadyAsync(final ApiCallback<SerpGoogleDatasetSearchTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleDatasetSearchTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleDatasetSearchTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleEventsLiveAdvanced
     * @param serpGoogleEventsLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsLiveAdvancedCall(List<SerpGoogleEventsLiveAdvancedRequestInfo> serpGoogleEventsLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleEventsLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/events/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleEventsLiveAdvancedValidateBeforeCall(List<SerpGoogleEventsLiveAdvancedRequestInfo> serpGoogleEventsLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleEventsLiveAdvancedCall(serpGoogleEventsLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live Google Events SERP provides real-time data from Google Events Search for the specified keyword and location. Note that Google Events SERP API works for the English language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/live/advanced/?bash&#39;
     * @param serpGoogleEventsLiveAdvancedRequestInfo  (optional)
     * @return SerpGoogleEventsLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleEventsLiveAdvancedResponseInfo googleEventsLiveAdvanced(List<SerpGoogleEventsLiveAdvancedRequestInfo> serpGoogleEventsLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleEventsLiveAdvancedResponseInfo> localVarResp = googleEventsLiveAdvancedWithHttpInfo(serpGoogleEventsLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live Google Events SERP provides real-time data from Google Events Search for the specified keyword and location. Note that Google Events SERP API works for the English language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/live/advanced/?bash&#39;
     * @param serpGoogleEventsLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleEventsLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleEventsLiveAdvancedResponseInfo> googleEventsLiveAdvancedWithHttpInfo(List<SerpGoogleEventsLiveAdvancedRequestInfo> serpGoogleEventsLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleEventsLiveAdvancedValidateBeforeCall(serpGoogleEventsLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live Google Events SERP provides real-time data from Google Events Search for the specified keyword and location. Note that Google Events SERP API works for the English language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/live/advanced/?bash&#39;
     * @param serpGoogleEventsLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsLiveAdvancedAsync(List<SerpGoogleEventsLiveAdvancedRequestInfo> serpGoogleEventsLiveAdvancedRequestInfo, final ApiCallback<SerpGoogleEventsLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleEventsLiveAdvancedValidateBeforeCall(serpGoogleEventsLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleEventsTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/events/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleEventsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleEventsTaskGetAdvanced(Async)");
        }

        return googleEventsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleEventsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleEventsTaskGetAdvancedResponseInfo googleEventsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleEventsTaskGetAdvancedResponseInfo> localVarResp = googleEventsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleEventsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleEventsTaskGetAdvancedResponseInfo> googleEventsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleEventsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleEventsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleEventsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleEventsTaskPost
     * @param serpGoogleEventsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTaskPostCall(List<SerpGoogleEventsTaskPostRequestInfo> serpGoogleEventsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleEventsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/events/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleEventsTaskPostValidateBeforeCall(List<SerpGoogleEventsTaskPostRequestInfo> serpGoogleEventsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleEventsTaskPostCall(serpGoogleEventsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Events SERP provides data from Google Events Search for the specified keyword and location (see the List of Locations). Note that Google Events SERP API works for the English language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/task_post/?bash&#39;
     * @param serpGoogleEventsTaskPostRequestInfo  (optional)
     * @return SerpGoogleEventsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleEventsTaskPostResponseInfo googleEventsTaskPost(List<SerpGoogleEventsTaskPostRequestInfo> serpGoogleEventsTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleEventsTaskPostResponseInfo> localVarResp = googleEventsTaskPostWithHttpInfo(serpGoogleEventsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Events SERP provides data from Google Events Search for the specified keyword and location (see the List of Locations). Note that Google Events SERP API works for the English language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/task_post/?bash&#39;
     * @param serpGoogleEventsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleEventsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleEventsTaskPostResponseInfo> googleEventsTaskPostWithHttpInfo(List<SerpGoogleEventsTaskPostRequestInfo> serpGoogleEventsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleEventsTaskPostValidateBeforeCall(serpGoogleEventsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Events SERP provides data from Google Events Search for the specified keyword and location (see the List of Locations). Note that Google Events SERP API works for the English language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/task_post/?bash&#39;
     * @param serpGoogleEventsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTaskPostAsync(List<SerpGoogleEventsTaskPostRequestInfo> serpGoogleEventsTaskPostRequestInfo, final ApiCallback<SerpGoogleEventsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleEventsTaskPostValidateBeforeCall(serpGoogleEventsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleEventsTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/events/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleEventsTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleEventsTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/tasks_fixed/?bash&#39;
     * @return SerpGoogleEventsTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleEventsTasksFixedResponseInfo googleEventsTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleEventsTasksFixedResponseInfo> localVarResp = googleEventsTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleEventsTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleEventsTasksFixedResponseInfo> googleEventsTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleEventsTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTasksFixedAsync(final ApiCallback<SerpGoogleEventsTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleEventsTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleEventsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/events/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleEventsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleEventsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/tasks_ready/?bash&#39;
     * @return SerpGoogleEventsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleEventsTasksReadyResponseInfo googleEventsTasksReady() throws ApiException {
        ApiResponse<SerpGoogleEventsTasksReadyResponseInfo> localVarResp = googleEventsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleEventsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleEventsTasksReadyResponseInfo> googleEventsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleEventsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/events/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleEventsTasksReadyAsync(final ApiCallback<SerpGoogleEventsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleEventsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleEventsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleImagesLiveAdvanced
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesLiveAdvancedCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/images/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleImagesLiveAdvancedValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleImagesLiveAdvancedCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live Google Images SERP provides real-time data on top 100 images results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleImagesLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleImagesLiveAdvancedResponseInfo googleImagesLiveAdvanced(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleImagesLiveAdvancedResponseInfo> localVarResp = googleImagesLiveAdvancedWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live Google Images SERP provides real-time data on top 100 images results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleImagesLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleImagesLiveAdvancedResponseInfo> googleImagesLiveAdvancedWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleImagesLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live Google Images SERP provides real-time data on top 100 images results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesLiveAdvancedAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleImagesLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleImagesLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleImagesLiveHtml
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesLiveHtmlCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/images/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleImagesLiveHtmlValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleImagesLiveHtmlCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleImagesLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleImagesLiveHtmlResponseInfo googleImagesLiveHtml(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleImagesLiveHtmlResponseInfo> localVarResp = googleImagesLiveHtmlWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleImagesLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleImagesLiveHtmlResponseInfo> googleImagesLiveHtmlWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleImagesLiveHtmlValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesLiveHtmlAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleImagesLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleImagesLiveHtmlValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleImagesTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/images/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleImagesTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleImagesTaskGetAdvanced(Async)");
        }

        return googleImagesTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleImagesTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleImagesTaskGetAdvancedResponseInfo googleImagesTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleImagesTaskGetAdvancedResponseInfo> localVarResp = googleImagesTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleImagesTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleImagesTaskGetAdvancedResponseInfo> googleImagesTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleImagesTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleImagesTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleImagesTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleImagesTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/images/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleImagesTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleImagesTaskGetHtml(Async)");
        }

        return googleImagesTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpGoogleImagesTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleImagesTaskGetHtmlResponseInfo googleImagesTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpGoogleImagesTaskGetHtmlResponseInfo> localVarResp = googleImagesTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleImagesTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleImagesTaskGetHtmlResponseInfo> googleImagesTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleImagesTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTaskGetHtmlAsync(String id, final ApiCallback<SerpGoogleImagesTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleImagesTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleImagesTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/images/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleImagesTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleImagesTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleImagesTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleImagesTaskPostResponseInfo googleImagesTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleImagesTaskPostResponseInfo> localVarResp = googleImagesTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleImagesTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleImagesTaskPostResponseInfo> googleImagesTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleImagesTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleImagesTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleImagesTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleImagesTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/images/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleImagesTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleImagesTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/tasks_fixed/?bash&#39;
     * @return SerpGoogleImagesTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleImagesTasksFixedResponseInfo googleImagesTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleImagesTasksFixedResponseInfo> localVarResp = googleImagesTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleImagesTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleImagesTasksFixedResponseInfo> googleImagesTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleImagesTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTasksFixedAsync(final ApiCallback<SerpGoogleImagesTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleImagesTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleImagesTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/images/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleImagesTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleImagesTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/tasks_ready/?bash&#39;
     * @return SerpGoogleImagesTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleImagesTasksReadyResponseInfo googleImagesTasksReady() throws ApiException {
        ApiResponse<SerpGoogleImagesTasksReadyResponseInfo> localVarResp = googleImagesTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleImagesTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleImagesTasksReadyResponseInfo> googleImagesTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleImagesTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/images/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleImagesTasksReadyAsync(final ApiCallback<SerpGoogleImagesTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleImagesTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleImagesTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleJobsTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/jobs/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleJobsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleJobsTaskGetAdvanced(Async)");
        }

        return googleJobsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleJobsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleJobsTaskGetAdvancedResponseInfo googleJobsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleJobsTaskGetAdvancedResponseInfo> localVarResp = googleJobsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleJobsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleJobsTaskGetAdvancedResponseInfo> googleJobsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleJobsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleJobsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleJobsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleJobsTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/jobs/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleJobsTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleJobsTaskGetHtml(Async)");
        }

        return googleJobsTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpGoogleJobsTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleJobsTaskGetHtmlResponseInfo googleJobsTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpGoogleJobsTaskGetHtmlResponseInfo> localVarResp = googleJobsTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleJobsTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleJobsTaskGetHtmlResponseInfo> googleJobsTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleJobsTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTaskGetHtmlAsync(String id, final ApiCallback<SerpGoogleJobsTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleJobsTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleJobsTaskPost
     * @param serpGoogleJobsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTaskPostCall(List<SerpGoogleJobsTaskPostRequestInfo> serpGoogleJobsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleJobsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/jobs/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleJobsTaskPostValidateBeforeCall(List<SerpGoogleJobsTaskPostRequestInfo> serpGoogleJobsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleJobsTaskPostCall(serpGoogleJobsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with SERP data from the Google Jobs search engine. The returned results are specific to the keyword as well as the language and location parameters of the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_post/?bash&#39;
     * @param serpGoogleJobsTaskPostRequestInfo  (optional)
     * @return SerpGoogleJobsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleJobsTaskPostResponseInfo googleJobsTaskPost(List<SerpGoogleJobsTaskPostRequestInfo> serpGoogleJobsTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleJobsTaskPostResponseInfo> localVarResp = googleJobsTaskPostWithHttpInfo(serpGoogleJobsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with SERP data from the Google Jobs search engine. The returned results are specific to the keyword as well as the language and location parameters of the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_post/?bash&#39;
     * @param serpGoogleJobsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleJobsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleJobsTaskPostResponseInfo> googleJobsTaskPostWithHttpInfo(List<SerpGoogleJobsTaskPostRequestInfo> serpGoogleJobsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleJobsTaskPostValidateBeforeCall(serpGoogleJobsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with SERP data from the Google Jobs search engine. The returned results are specific to the keyword as well as the language and location parameters of the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/task_post/?bash&#39;
     * @param serpGoogleJobsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTaskPostAsync(List<SerpGoogleJobsTaskPostRequestInfo> serpGoogleJobsTaskPostRequestInfo, final ApiCallback<SerpGoogleJobsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleJobsTaskPostValidateBeforeCall(serpGoogleJobsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleJobsTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/jobs/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleJobsTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleJobsTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/tasks_fixed/?bash&#39;
     * @return SerpGoogleJobsTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleJobsTasksFixedResponseInfo googleJobsTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleJobsTasksFixedResponseInfo> localVarResp = googleJobsTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleJobsTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleJobsTasksFixedResponseInfo> googleJobsTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleJobsTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTasksFixedAsync(final ApiCallback<SerpGoogleJobsTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleJobsTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleJobsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/jobs/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleJobsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleJobsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/tasks_ready/?bash&#39;
     * @return SerpGoogleJobsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleJobsTasksReadyResponseInfo googleJobsTasksReady() throws ApiException {
        ApiResponse<SerpGoogleJobsTasksReadyResponseInfo> localVarResp = googleJobsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleJobsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleJobsTasksReadyResponseInfo> googleJobsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleJobsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/jobs/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleJobsTasksReadyAsync(final ApiCallback<SerpGoogleJobsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleJobsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleJobsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleLocalFinderLiveAdvanced
     * @param serpGoogleLocalFinderLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderLiveAdvancedCall(List<SerpGoogleLocalFinderLiveAdvancedRequestInfo> serpGoogleLocalFinderLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleLocalFinderLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/local_finder/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleLocalFinderLiveAdvancedValidateBeforeCall(List<SerpGoogleLocalFinderLiveAdvancedRequestInfo> serpGoogleLocalFinderLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleLocalFinderLiveAdvancedCall(serpGoogleLocalFinderLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live Google Local finder SERP provides real-time search engine results for the specified keyword and location. By default, you can get up to 20 results for desktop and up to 10 results for mobile. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/live/advanced/?bash&#39;
     * @param serpGoogleLocalFinderLiveAdvancedRequestInfo  (optional)
     * @return SerpGoogleLocalFinderLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocalFinderLiveAdvancedResponseInfo googleLocalFinderLiveAdvanced(List<SerpGoogleLocalFinderLiveAdvancedRequestInfo> serpGoogleLocalFinderLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleLocalFinderLiveAdvancedResponseInfo> localVarResp = googleLocalFinderLiveAdvancedWithHttpInfo(serpGoogleLocalFinderLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live Google Local finder SERP provides real-time search engine results for the specified keyword and location. By default, you can get up to 20 results for desktop and up to 10 results for mobile. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/live/advanced/?bash&#39;
     * @param serpGoogleLocalFinderLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleLocalFinderLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocalFinderLiveAdvancedResponseInfo> googleLocalFinderLiveAdvancedWithHttpInfo(List<SerpGoogleLocalFinderLiveAdvancedRequestInfo> serpGoogleLocalFinderLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleLocalFinderLiveAdvancedValidateBeforeCall(serpGoogleLocalFinderLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live Google Local finder SERP provides real-time search engine results for the specified keyword and location. By default, you can get up to 20 results for desktop and up to 10 results for mobile. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/live/advanced/?bash&#39;
     * @param serpGoogleLocalFinderLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderLiveAdvancedAsync(List<SerpGoogleLocalFinderLiveAdvancedRequestInfo> serpGoogleLocalFinderLiveAdvancedRequestInfo, final ApiCallback<SerpGoogleLocalFinderLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleLocalFinderLiveAdvancedValidateBeforeCall(serpGoogleLocalFinderLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleLocalFinderLiveHtml
     * @param serpGoogleLocalFinderLiveHtmlRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderLiveHtmlCall(List<SerpGoogleLocalFinderLiveHtmlRequestInfo> serpGoogleLocalFinderLiveHtmlRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleLocalFinderLiveHtmlRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/local_finder/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleLocalFinderLiveHtmlValidateBeforeCall(List<SerpGoogleLocalFinderLiveHtmlRequestInfo> serpGoogleLocalFinderLiveHtmlRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleLocalFinderLiveHtmlCall(serpGoogleLocalFinderLiveHtmlRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live Google Local Finder SERP HTML provides a raw HTML page of the search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/live/html/?bash&#39;
     * @param serpGoogleLocalFinderLiveHtmlRequestInfo  (optional)
     * @return SerpGoogleLocalFinderLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocalFinderLiveHtmlResponseInfo googleLocalFinderLiveHtml(List<SerpGoogleLocalFinderLiveHtmlRequestInfo> serpGoogleLocalFinderLiveHtmlRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleLocalFinderLiveHtmlResponseInfo> localVarResp = googleLocalFinderLiveHtmlWithHttpInfo(serpGoogleLocalFinderLiveHtmlRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live Google Local Finder SERP HTML provides a raw HTML page of the search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/live/html/?bash&#39;
     * @param serpGoogleLocalFinderLiveHtmlRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleLocalFinderLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocalFinderLiveHtmlResponseInfo> googleLocalFinderLiveHtmlWithHttpInfo(List<SerpGoogleLocalFinderLiveHtmlRequestInfo> serpGoogleLocalFinderLiveHtmlRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleLocalFinderLiveHtmlValidateBeforeCall(serpGoogleLocalFinderLiveHtmlRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live Google Local Finder SERP HTML provides a raw HTML page of the search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/live/html/?bash&#39;
     * @param serpGoogleLocalFinderLiveHtmlRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderLiveHtmlAsync(List<SerpGoogleLocalFinderLiveHtmlRequestInfo> serpGoogleLocalFinderLiveHtmlRequestInfo, final ApiCallback<SerpGoogleLocalFinderLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleLocalFinderLiveHtmlValidateBeforeCall(serpGoogleLocalFinderLiveHtmlRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleLocalFinderTaskGetAdvanced
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/local_finder/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleLocalFinderTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleLocalFinderTaskGetAdvanced(Async)");
        }

        return googleLocalFinderTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_get/advanced/?bash&#39;
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleLocalFinderTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocalFinderTaskGetAdvancedResponseInfo googleLocalFinderTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleLocalFinderTaskGetAdvancedResponseInfo> localVarResp = googleLocalFinderTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_get/advanced/?bash&#39;
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleLocalFinderTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocalFinderTaskGetAdvancedResponseInfo> googleLocalFinderTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleLocalFinderTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_get/advanced/?bash&#39;
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleLocalFinderTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleLocalFinderTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleLocalFinderTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/local_finder/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleLocalFinderTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleLocalFinderTaskGetHtml(Async)");
        }

        return googleLocalFinderTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpGoogleLocalFinderTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocalFinderTaskGetHtmlResponseInfo googleLocalFinderTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpGoogleLocalFinderTaskGetHtmlResponseInfo> localVarResp = googleLocalFinderTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleLocalFinderTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocalFinderTaskGetHtmlResponseInfo> googleLocalFinderTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleLocalFinderTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTaskGetHtmlAsync(String id, final ApiCallback<SerpGoogleLocalFinderTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleLocalFinderTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleLocalFinderTaskPost
     * @param serpGoogleLocalFinderTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTaskPostCall(List<SerpGoogleLocalFinderTaskPostRequestInfo> serpGoogleLocalFinderTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleLocalFinderTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/local_finder/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleLocalFinderTaskPostValidateBeforeCall(List<SerpGoogleLocalFinderTaskPostRequestInfo> serpGoogleLocalFinderTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleLocalFinderTaskPostCall(serpGoogleLocalFinderTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Local Finder SERP API provides top search engine results specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_post/?bash&#39;
     * @param serpGoogleLocalFinderTaskPostRequestInfo  (optional)
     * @return SerpGoogleLocalFinderTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocalFinderTaskPostResponseInfo googleLocalFinderTaskPost(List<SerpGoogleLocalFinderTaskPostRequestInfo> serpGoogleLocalFinderTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleLocalFinderTaskPostResponseInfo> localVarResp = googleLocalFinderTaskPostWithHttpInfo(serpGoogleLocalFinderTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Local Finder SERP API provides top search engine results specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_post/?bash&#39;
     * @param serpGoogleLocalFinderTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleLocalFinderTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocalFinderTaskPostResponseInfo> googleLocalFinderTaskPostWithHttpInfo(List<SerpGoogleLocalFinderTaskPostRequestInfo> serpGoogleLocalFinderTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleLocalFinderTaskPostValidateBeforeCall(serpGoogleLocalFinderTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Local Finder SERP API provides top search engine results specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/task_post/?bash&#39;
     * @param serpGoogleLocalFinderTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTaskPostAsync(List<SerpGoogleLocalFinderTaskPostRequestInfo> serpGoogleLocalFinderTaskPostRequestInfo, final ApiCallback<SerpGoogleLocalFinderTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleLocalFinderTaskPostValidateBeforeCall(serpGoogleLocalFinderTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleLocalFinderTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/local_finder/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleLocalFinderTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleLocalFinderTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/tasks_fixed/?bash&#39;
     * @return SerpGoogleLocalFinderTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocalFinderTasksFixedResponseInfo googleLocalFinderTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleLocalFinderTasksFixedResponseInfo> localVarResp = googleLocalFinderTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleLocalFinderTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocalFinderTasksFixedResponseInfo> googleLocalFinderTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleLocalFinderTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTasksFixedAsync(final ApiCallback<SerpGoogleLocalFinderTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleLocalFinderTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleLocalFinderTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/local_finder/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleLocalFinderTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleLocalFinderTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/tasks_ready/?bash&#39;
     * @return SerpGoogleLocalFinderTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocalFinderTasksReadyResponseInfo googleLocalFinderTasksReady() throws ApiException {
        ApiResponse<SerpGoogleLocalFinderTasksReadyResponseInfo> localVarResp = googleLocalFinderTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleLocalFinderTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocalFinderTasksReadyResponseInfo> googleLocalFinderTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleLocalFinderTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/local_finder/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleLocalFinderTasksReadyAsync(final ApiCallback<SerpGoogleLocalFinderTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleLocalFinderTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocalFinderTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMapsLiveAdvanced
     * @param serpGoogleMapsLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsLiveAdvancedCall(List<SerpGoogleMapsLiveAdvancedRequestInfo> serpGoogleMapsLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleMapsLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/maps/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMapsLiveAdvancedValidateBeforeCall(List<SerpGoogleMapsLiveAdvancedRequestInfo> serpGoogleMapsLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleMapsLiveAdvancedCall(serpGoogleMapsLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live Google Maps SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/live/advanced/?bash&#39;
     * @param serpGoogleMapsLiveAdvancedRequestInfo  (optional)
     * @return SerpGoogleMapsLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleMapsLiveAdvancedResponseInfo googleMapsLiveAdvanced(List<SerpGoogleMapsLiveAdvancedRequestInfo> serpGoogleMapsLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleMapsLiveAdvancedResponseInfo> localVarResp = googleMapsLiveAdvancedWithHttpInfo(serpGoogleMapsLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live Google Maps SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/live/advanced/?bash&#39;
     * @param serpGoogleMapsLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleMapsLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleMapsLiveAdvancedResponseInfo> googleMapsLiveAdvancedWithHttpInfo(List<SerpGoogleMapsLiveAdvancedRequestInfo> serpGoogleMapsLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleMapsLiveAdvancedValidateBeforeCall(serpGoogleMapsLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live Google Maps SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/live/advanced/?bash&#39;
     * @param serpGoogleMapsLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsLiveAdvancedAsync(List<SerpGoogleMapsLiveAdvancedRequestInfo> serpGoogleMapsLiveAdvancedRequestInfo, final ApiCallback<SerpGoogleMapsLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMapsLiveAdvancedValidateBeforeCall(serpGoogleMapsLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMapsTaskGetAdvanced
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/maps/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMapsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleMapsTaskGetAdvanced(Async)");
        }

        return googleMapsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/task_get/advanced/?bash&#39;
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleMapsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleMapsTaskGetAdvancedResponseInfo googleMapsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleMapsTaskGetAdvancedResponseInfo> localVarResp = googleMapsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/task_get/advanced/?bash&#39;
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleMapsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleMapsTaskGetAdvancedResponseInfo> googleMapsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleMapsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/task_get/advanced/?bash&#39;
     * @param id task identifier a universally unique identifier (UUID) unique task identifier in our system you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleMapsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMapsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMapsTaskPost
     * @param serpGoogleMapsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTaskPostCall(List<SerpGoogleMapsTaskPostRequestInfo> serpGoogleMapsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleMapsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/maps/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMapsTaskPostValidateBeforeCall(List<SerpGoogleMapsTaskPostRequestInfo> serpGoogleMapsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleMapsTaskPostCall(serpGoogleMapsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/task_post/?bash&#39;
     * @param serpGoogleMapsTaskPostRequestInfo  (optional)
     * @return SerpGoogleMapsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleMapsTaskPostResponseInfo googleMapsTaskPost(List<SerpGoogleMapsTaskPostRequestInfo> serpGoogleMapsTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleMapsTaskPostResponseInfo> localVarResp = googleMapsTaskPostWithHttpInfo(serpGoogleMapsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/task_post/?bash&#39;
     * @param serpGoogleMapsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleMapsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleMapsTaskPostResponseInfo> googleMapsTaskPostWithHttpInfo(List<SerpGoogleMapsTaskPostRequestInfo> serpGoogleMapsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleMapsTaskPostValidateBeforeCall(serpGoogleMapsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/task_post/?bash&#39;
     * @param serpGoogleMapsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTaskPostAsync(List<SerpGoogleMapsTaskPostRequestInfo> serpGoogleMapsTaskPostRequestInfo, final ApiCallback<SerpGoogleMapsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMapsTaskPostValidateBeforeCall(serpGoogleMapsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMapsTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/maps/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMapsTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleMapsTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/tasks_fixed/?bash&#39;
     * @return SerpGoogleMapsTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleMapsTasksFixedResponseInfo googleMapsTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleMapsTasksFixedResponseInfo> localVarResp = googleMapsTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleMapsTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleMapsTasksFixedResponseInfo> googleMapsTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleMapsTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTasksFixedAsync(final ApiCallback<SerpGoogleMapsTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMapsTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMapsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/maps/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMapsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleMapsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/tasks_ready/?bash&#39;
     * @return SerpGoogleMapsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleMapsTasksReadyResponseInfo googleMapsTasksReady() throws ApiException {
        ApiResponse<SerpGoogleMapsTasksReadyResponseInfo> localVarResp = googleMapsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleMapsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleMapsTasksReadyResponseInfo> googleMapsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleMapsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/maps/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMapsTasksReadyAsync(final ApiCallback<SerpGoogleMapsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMapsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleMapsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleNewsLiveAdvanced
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsLiveAdvancedCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/news/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleNewsLiveAdvancedValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleNewsLiveAdvancedCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live Google News SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleNewsLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleNewsLiveAdvancedResponseInfo googleNewsLiveAdvanced(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleNewsLiveAdvancedResponseInfo> localVarResp = googleNewsLiveAdvancedWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live Google News SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleNewsLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleNewsLiveAdvancedResponseInfo> googleNewsLiveAdvancedWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleNewsLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live Google News SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsLiveAdvancedAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleNewsLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleNewsLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleNewsLiveHtml
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsLiveHtmlCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/news/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleNewsLiveHtmlValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleNewsLiveHtmlCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleNewsLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleNewsLiveHtmlResponseInfo googleNewsLiveHtml(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleNewsLiveHtmlResponseInfo> localVarResp = googleNewsLiveHtmlWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleNewsLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleNewsLiveHtmlResponseInfo> googleNewsLiveHtmlWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleNewsLiveHtmlValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsLiveHtmlAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleNewsLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleNewsLiveHtmlValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleNewsTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/news/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleNewsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleNewsTaskGetAdvanced(Async)");
        }

        return googleNewsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleNewsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleNewsTaskGetAdvancedResponseInfo googleNewsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleNewsTaskGetAdvancedResponseInfo> localVarResp = googleNewsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleNewsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleNewsTaskGetAdvancedResponseInfo> googleNewsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleNewsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleNewsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleNewsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleNewsTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/news/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleNewsTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleNewsTaskGetHtml(Async)");
        }

        return googleNewsTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpGoogleNewsTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleNewsTaskGetHtmlResponseInfo googleNewsTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpGoogleNewsTaskGetHtmlResponseInfo> localVarResp = googleNewsTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleNewsTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleNewsTaskGetHtmlResponseInfo> googleNewsTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleNewsTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTaskGetHtmlAsync(String id, final ApiCallback<SerpGoogleNewsTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleNewsTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleNewsTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/news/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleNewsTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleNewsTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleNewsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleNewsTaskPostResponseInfo googleNewsTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleNewsTaskPostResponseInfo> localVarResp = googleNewsTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleNewsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleNewsTaskPostResponseInfo> googleNewsTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleNewsTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleNewsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleNewsTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleNewsTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/news/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleNewsTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleNewsTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/tasks_fixed/?bash&#39;
     * @return SerpGoogleNewsTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleNewsTasksFixedResponseInfo googleNewsTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleNewsTasksFixedResponseInfo> localVarResp = googleNewsTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleNewsTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleNewsTasksFixedResponseInfo> googleNewsTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleNewsTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTasksFixedAsync(final ApiCallback<SerpGoogleNewsTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleNewsTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleNewsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/news/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleNewsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleNewsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/tasks_ready/?bash&#39;
     * @return SerpGoogleNewsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleNewsTasksReadyResponseInfo googleNewsTasksReady() throws ApiException {
        ApiResponse<SerpGoogleNewsTasksReadyResponseInfo> localVarResp = googleNewsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleNewsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleNewsTasksReadyResponseInfo> googleNewsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleNewsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/news/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleNewsTasksReadyAsync(final ApiCallback<SerpGoogleNewsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleNewsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleNewsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicLiveAdvanced
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicLiveAdvancedCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicLiveAdvancedValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleOrganicLiveAdvancedCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. This endpoint will supply a complete overview of featured snippets and other extra elements of SERPs. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleOrganicLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicLiveAdvancedResponseInfo googleOrganicLiveAdvanced(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleOrganicLiveAdvancedResponseInfo> localVarResp = googleOrganicLiveAdvancedWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. This endpoint will supply a complete overview of featured snippets and other extra elements of SERPs. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleOrganicLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicLiveAdvancedResponseInfo> googleOrganicLiveAdvancedWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleOrganicLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. This endpoint will supply a complete overview of featured snippets and other extra elements of SERPs. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicLiveAdvancedAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleOrganicLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicLiveHtml
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicLiveHtmlCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicLiveHtmlValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleOrganicLiveHtmlCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleOrganicLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicLiveHtmlResponseInfo googleOrganicLiveHtml(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleOrganicLiveHtmlResponseInfo> localVarResp = googleOrganicLiveHtmlWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleOrganicLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicLiveHtmlResponseInfo> googleOrganicLiveHtmlWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleOrganicLiveHtmlValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicLiveHtmlAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleOrganicLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicLiveHtmlValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicLiveRegular
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicLiveRegularCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/live/regular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicLiveRegularValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleOrganicLiveRegularCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleOrganicLiveRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicLiveRegularResponseInfo googleOrganicLiveRegular(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleOrganicLiveRegularResponseInfo> localVarResp = googleOrganicLiveRegularWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleOrganicLiveRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicLiveRegularResponseInfo> googleOrganicLiveRegularWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleOrganicLiveRegularValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicLiveRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live SERP provides real-time data on top 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicLiveRegularAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleOrganicLiveRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicLiveRegularValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicLiveRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleOrganicTaskGetAdvanced(Async)");
        }

        return googleOrganicTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleOrganicTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicTaskGetAdvancedResponseInfo googleOrganicTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleOrganicTaskGetAdvancedResponseInfo> localVarResp = googleOrganicTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleOrganicTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicTaskGetAdvancedResponseInfo> googleOrganicTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleOrganicTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleOrganicTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleOrganicTaskGetHtml(Async)");
        }

        return googleOrganicTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpGoogleOrganicTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicTaskGetHtmlResponseInfo googleOrganicTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpGoogleOrganicTaskGetHtmlResponseInfo> localVarResp = googleOrganicTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleOrganicTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicTaskGetHtmlResponseInfo> googleOrganicTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleOrganicTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskGetHtmlAsync(String id, final ApiCallback<SerpGoogleOrganicTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicTaskGetRegular
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskGetRegularCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/task_get/regular/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicTaskGetRegularValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleOrganicTaskGetRegular(Async)");
        }

        return googleOrganicTaskGetRegularCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleOrganicTaskGetRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicTaskGetRegularResponseInfo googleOrganicTaskGetRegular(String id) throws ApiException {
        ApiResponse<SerpGoogleOrganicTaskGetRegularResponseInfo> localVarResp = googleOrganicTaskGetRegularWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleOrganicTaskGetRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicTaskGetRegularResponseInfo> googleOrganicTaskGetRegularWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleOrganicTaskGetRegularValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskGetRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskGetRegularAsync(String id, final ApiCallback<SerpGoogleOrganicTaskGetRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicTaskGetRegularValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskGetRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleOrganicTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpGoogleOrganicTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicTaskPostResponseInfo googleOrganicTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleOrganicTaskPostResponseInfo> localVarResp = googleOrganicTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleOrganicTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicTaskPostResponseInfo> googleOrganicTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ SERP API provides top 100 search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpGoogleOrganicTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleOrganicTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/tasks_fixed/?bash&#39;
     * @return SerpGoogleOrganicTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicTasksFixedResponseInfo googleOrganicTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleOrganicTasksFixedResponseInfo> localVarResp = googleOrganicTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleOrganicTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicTasksFixedResponseInfo> googleOrganicTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleOrganicTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTasksFixedAsync(final ApiCallback<SerpGoogleOrganicTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleOrganicTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/organic/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleOrganicTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleOrganicTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/tasks_ready/?bash&#39;
     * @return SerpGoogleOrganicTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleOrganicTasksReadyResponseInfo googleOrganicTasksReady() throws ApiException {
        ApiResponse<SerpGoogleOrganicTasksReadyResponseInfo> localVarResp = googleOrganicTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleOrganicTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleOrganicTasksReadyResponseInfo> googleOrganicTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleOrganicTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/organic/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleOrganicTasksReadyAsync(final ApiCallback<SerpGoogleOrganicTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleOrganicTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleOrganicTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSearchByImageTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/search_by_image/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSearchByImageTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleSearchByImageTaskGetAdvanced(Async)");
        }

        return googleSearchByImageTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpGoogleSearchByImageTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleSearchByImageTaskGetAdvancedResponseInfo googleSearchByImageTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpGoogleSearchByImageTaskGetAdvancedResponseInfo> localVarResp = googleSearchByImageTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpGoogleSearchByImageTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleSearchByImageTaskGetAdvancedResponseInfo> googleSearchByImageTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleSearchByImageTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTaskGetAdvancedAsync(String id, final ApiCallback<SerpGoogleSearchByImageTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSearchByImageTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSearchByImageTaskPost
     * @param serpGoogleSearchByImageTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTaskPostCall(List<SerpGoogleSearchByImageTaskPostRequestInfo> serpGoogleSearchByImageTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpGoogleSearchByImageTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/google/search_by_image/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSearchByImageTaskPostValidateBeforeCall(List<SerpGoogleSearchByImageTaskPostRequestInfo> serpGoogleSearchByImageTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleSearchByImageTaskPostCall(serpGoogleSearchByImageTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Search By Image SERP API provides up to top 100 search engine results based on the image you specified. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/task_post/?bash&#39;
     * @param serpGoogleSearchByImageTaskPostRequestInfo  (optional)
     * @return SerpGoogleSearchByImageTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleSearchByImageTaskPostResponseInfo googleSearchByImageTaskPost(List<SerpGoogleSearchByImageTaskPostRequestInfo> serpGoogleSearchByImageTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpGoogleSearchByImageTaskPostResponseInfo> localVarResp = googleSearchByImageTaskPostWithHttpInfo(serpGoogleSearchByImageTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Search By Image SERP API provides up to top 100 search engine results based on the image you specified. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/task_post/?bash&#39;
     * @param serpGoogleSearchByImageTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpGoogleSearchByImageTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleSearchByImageTaskPostResponseInfo> googleSearchByImageTaskPostWithHttpInfo(List<SerpGoogleSearchByImageTaskPostRequestInfo> serpGoogleSearchByImageTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleSearchByImageTaskPostValidateBeforeCall(serpGoogleSearchByImageTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Search By Image SERP API provides up to top 100 search engine results based on the image you specified. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/task_post/?bash&#39;
     * @param serpGoogleSearchByImageTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTaskPostAsync(List<SerpGoogleSearchByImageTaskPostRequestInfo> serpGoogleSearchByImageTaskPostRequestInfo, final ApiCallback<SerpGoogleSearchByImageTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSearchByImageTaskPostValidateBeforeCall(serpGoogleSearchByImageTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSearchByImageTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/search_by_image/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSearchByImageTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleSearchByImageTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/tasks_fixed/?bash&#39;
     * @return SerpGoogleSearchByImageTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleSearchByImageTasksFixedResponseInfo googleSearchByImageTasksFixed() throws ApiException {
        ApiResponse<SerpGoogleSearchByImageTasksFixedResponseInfo> localVarResp = googleSearchByImageTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleSearchByImageTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleSearchByImageTasksFixedResponseInfo> googleSearchByImageTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleSearchByImageTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTasksFixedAsync(final ApiCallback<SerpGoogleSearchByImageTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSearchByImageTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleSearchByImageTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/search_by_image/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleSearchByImageTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleSearchByImageTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/tasks_ready/?bash&#39;
     * @return SerpGoogleSearchByImageTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleSearchByImageTasksReadyResponseInfo googleSearchByImageTasksReady() throws ApiException {
        ApiResponse<SerpGoogleSearchByImageTasksReadyResponseInfo> localVarResp = googleSearchByImageTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleSearchByImageTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleSearchByImageTasksReadyResponseInfo> googleSearchByImageTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleSearchByImageTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/search_by_image/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleSearchByImageTasksReadyAsync(final ApiCallback<SerpGoogleSearchByImageTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleSearchByImageTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleSearchByImageTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for naverOrganicTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/naver/organic/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call naverOrganicTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling naverOrganicTaskGetAdvanced(Async)");
        }

        return naverOrganicTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpNaverOrganicTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpNaverOrganicTaskGetAdvancedResponseInfo naverOrganicTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpNaverOrganicTaskGetAdvancedResponseInfo> localVarResp = naverOrganicTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpNaverOrganicTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpNaverOrganicTaskGetAdvancedResponseInfo> naverOrganicTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = naverOrganicTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskGetAdvancedAsync(String id, final ApiCallback<SerpNaverOrganicTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = naverOrganicTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for naverOrganicTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/naver/organic/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call naverOrganicTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling naverOrganicTaskGetHtml(Async)");
        }

        return naverOrganicTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpNaverOrganicTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpNaverOrganicTaskGetHtmlResponseInfo naverOrganicTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpNaverOrganicTaskGetHtmlResponseInfo> localVarResp = naverOrganicTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpNaverOrganicTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpNaverOrganicTaskGetHtmlResponseInfo> naverOrganicTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = naverOrganicTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskGetHtmlAsync(String id, final ApiCallback<SerpNaverOrganicTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = naverOrganicTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for naverOrganicTaskGetRegular
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskGetRegularCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/naver/organic/task_get/regular/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call naverOrganicTaskGetRegularValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling naverOrganicTaskGetRegular(Async)");
        }

        return naverOrganicTaskGetRegularCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpNaverOrganicTaskGetRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpNaverOrganicTaskGetRegularResponseInfo naverOrganicTaskGetRegular(String id) throws ApiException {
        ApiResponse<SerpNaverOrganicTaskGetRegularResponseInfo> localVarResp = naverOrganicTaskGetRegularWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpNaverOrganicTaskGetRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpNaverOrganicTaskGetRegularResponseInfo> naverOrganicTaskGetRegularWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = naverOrganicTaskGetRegularValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskGetRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskGetRegularAsync(String id, final ApiCallback<SerpNaverOrganicTaskGetRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = naverOrganicTaskGetRegularValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskGetRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for naverOrganicTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/naver/organic/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call naverOrganicTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return naverOrganicTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Naver SERP API provides top 100 search engine results. Naver search results do not vary by location and language, and the search parameters for this search engine do not contain language and location variables. However, you can specify a keyword in any language, and the search engine results may vary depending on the language you used for specifying the search query. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpNaverOrganicTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpNaverOrganicTaskPostResponseInfo naverOrganicTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpNaverOrganicTaskPostResponseInfo> localVarResp = naverOrganicTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Naver SERP API provides top 100 search engine results. Naver search results do not vary by location and language, and the search parameters for this search engine do not contain language and location variables. However, you can specify a keyword in any language, and the search engine results may vary depending on the language you used for specifying the search query. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpNaverOrganicTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpNaverOrganicTaskPostResponseInfo> naverOrganicTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = naverOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Naver SERP API provides top 100 search engine results. Naver search results do not vary by location and language, and the search parameters for this search engine do not contain language and location variables. However, you can specify a keyword in any language, and the search engine results may vary depending on the language you used for specifying the search query. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpNaverOrganicTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = naverOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for naverOrganicTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/naver/organic/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call naverOrganicTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return naverOrganicTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/tasks_fixed/?bash&#39;
     * @return SerpNaverOrganicTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpNaverOrganicTasksFixedResponseInfo naverOrganicTasksFixed() throws ApiException {
        ApiResponse<SerpNaverOrganicTasksFixedResponseInfo> localVarResp = naverOrganicTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpNaverOrganicTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpNaverOrganicTasksFixedResponseInfo> naverOrganicTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = naverOrganicTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTasksFixedAsync(final ApiCallback<SerpNaverOrganicTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = naverOrganicTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for naverOrganicTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/naver/organic/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call naverOrganicTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return naverOrganicTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/tasks_ready/?bash&#39;
     * @return SerpNaverOrganicTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpNaverOrganicTasksReadyResponseInfo naverOrganicTasksReady() throws ApiException {
        ApiResponse<SerpNaverOrganicTasksReadyResponseInfo> localVarResp = naverOrganicTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpNaverOrganicTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpNaverOrganicTasksReadyResponseInfo> naverOrganicTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = naverOrganicTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/naver/organic/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call naverOrganicTasksReadyAsync(final ApiCallback<SerpNaverOrganicTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = naverOrganicTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpNaverOrganicTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for screenshot
     * @param serpScreenshotRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotCall(List<SerpScreenshotRequestInfo> serpScreenshotRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpScreenshotRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/screenshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call screenshotValidateBeforeCall(List<SerpScreenshotRequestInfo> serpScreenshotRequestInfo, final ApiCallback _callback) throws ApiException {
        return screenshotCall(serpScreenshotRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Using the Live Page Screenshot endpoint, you can capture a screenshot of any SERP page. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/screenshot/?bash&#39;
     * @param serpScreenshotRequestInfo  (optional)
     * @return SerpScreenshotResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpScreenshotResponseInfo screenshot(List<SerpScreenshotRequestInfo> serpScreenshotRequestInfo) throws ApiException {
        ApiResponse<SerpScreenshotResponseInfo> localVarResp = screenshotWithHttpInfo(serpScreenshotRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Using the Live Page Screenshot endpoint, you can capture a screenshot of any SERP page. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/screenshot/?bash&#39;
     * @param serpScreenshotRequestInfo  (optional)
     * @return ApiResponse&lt;SerpScreenshotResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpScreenshotResponseInfo> screenshotWithHttpInfo(List<SerpScreenshotRequestInfo> serpScreenshotRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = screenshotValidateBeforeCall(serpScreenshotRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpScreenshotResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Using the Live Page Screenshot endpoint, you can capture a screenshot of any SERP page. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/screenshot/?bash&#39;
     * @param serpScreenshotRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call screenshotAsync(List<SerpScreenshotRequestInfo> serpScreenshotRequestInfo, final ApiCallback<SerpScreenshotResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = screenshotValidateBeforeCall(serpScreenshotRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpScreenshotResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpBaiduLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBaiduLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpBaiduLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpBaiduLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. You can also download the full list of supported languages in the CSV format (last updated 2023-05-02). for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/languages/?bash&#39;
     * @return SerpBaiduLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduLanguagesResponseInfo serpBaiduLanguages() throws ApiException {
        ApiResponse<SerpBaiduLanguagesResponseInfo> localVarResp = serpBaiduLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. You can also download the full list of supported languages in the CSV format (last updated 2023-05-02). for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/languages/?bash&#39;
     * @return ApiResponse&lt;SerpBaiduLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduLanguagesResponseInfo> serpBaiduLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpBaiduLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBaiduLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. You can also download the full list of supported languages in the CSV format (last updated 2023-05-02). for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBaiduLanguagesAsync(final ApiCallback<SerpBaiduLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpBaiduLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBaiduLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpBaiduLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBaiduLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpBaiduLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpBaiduLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/locations/?bash&#39;
     * @return SerpBaiduLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduLocationsResponseInfo serpBaiduLocations() throws ApiException {
        ApiResponse<SerpBaiduLocationsResponseInfo> localVarResp = serpBaiduLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/locations/?bash&#39;
     * @return ApiResponse&lt;SerpBaiduLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduLocationsResponseInfo> serpBaiduLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpBaiduLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBaiduLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBaiduLocationsAsync(final ApiCallback<SerpBaiduLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpBaiduLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBaiduLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpBaiduLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBaiduLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/baidu/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpBaiduLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling serpBaiduLocationsCountry(Async)");
        }

        return serpBaiduLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return SerpBaiduLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBaiduLocationsCountryResponseInfo serpBaiduLocationsCountry(String country) throws ApiException {
        ApiResponse<SerpBaiduLocationsCountryResponseInfo> localVarResp = serpBaiduLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;SerpBaiduLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBaiduLocationsCountryResponseInfo> serpBaiduLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = serpBaiduLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<SerpBaiduLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/baidu/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBaiduLocationsCountryAsync(String country, final ApiCallback<SerpBaiduLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpBaiduLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<SerpBaiduLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpBingLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBingLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpBingLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpBingLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/languages/?bash&#39;
     * @return SerpBingLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLanguagesResponseInfo serpBingLanguages() throws ApiException {
        ApiResponse<SerpBingLanguagesResponseInfo> localVarResp = serpBingLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/languages/?bash&#39;
     * @return ApiResponse&lt;SerpBingLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLanguagesResponseInfo> serpBingLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpBingLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBingLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBingLanguagesAsync(final ApiCallback<SerpBingLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpBingLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBingLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpBingLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBingLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpBingLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpBingLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/locations/?bash&#39;
     * @return SerpBingLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocationsResponseInfo serpBingLocations() throws ApiException {
        ApiResponse<SerpBingLocationsResponseInfo> localVarResp = serpBingLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/locations/?bash&#39;
     * @return ApiResponse&lt;SerpBingLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocationsResponseInfo> serpBingLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpBingLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpBingLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBingLocationsAsync(final ApiCallback<SerpBingLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpBingLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpBingLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpBingLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBingLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/bing/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpBingLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling serpBingLocationsCountry(Async)");
        }

        return serpBingLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return SerpBingLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpBingLocationsCountryResponseInfo serpBingLocationsCountry(String country) throws ApiException {
        ApiResponse<SerpBingLocationsCountryResponseInfo> localVarResp = serpBingLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;SerpBingLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpBingLocationsCountryResponseInfo> serpBingLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = serpBingLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<SerpBingLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/bing/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpBingLocationsCountryAsync(String country, final ApiCallback<SerpBingLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpBingLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<SerpBingLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpErrors
     * @param serpErrorsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpErrorsCall(List<SerpErrorsRequestInfo> serpErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpErrorsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpErrorsValidateBeforeCall(List<SerpErrorsRequestInfo> serpErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        return serpErrorsCall(serpErrorsRequestInfo, _callback);

    }

    /**
     * 
     * By calling this endpoint you will receive information about the SERP API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/errors/?bash&#39;
     * @param serpErrorsRequestInfo  (optional)
     * @return SerpErrorsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpErrorsResponseInfo serpErrors(List<SerpErrorsRequestInfo> serpErrorsRequestInfo) throws ApiException {
        ApiResponse<SerpErrorsResponseInfo> localVarResp = serpErrorsWithHttpInfo(serpErrorsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this endpoint you will receive information about the SERP API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/errors/?bash&#39;
     * @param serpErrorsRequestInfo  (optional)
     * @return ApiResponse&lt;SerpErrorsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpErrorsResponseInfo> serpErrorsWithHttpInfo(List<SerpErrorsRequestInfo> serpErrorsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = serpErrorsValidateBeforeCall(serpErrorsRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpErrorsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this endpoint you will receive information about the SERP API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/errors/?bash&#39;
     * @param serpErrorsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpErrorsAsync(List<SerpErrorsRequestInfo> serpErrorsRequestInfo, final ApiCallback<SerpErrorsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpErrorsValidateBeforeCall(serpErrorsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpErrorsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpGoogleLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpGoogleLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpGoogleLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpGoogleLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/languages/?bash&#39;
     * @return SerpGoogleLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLanguagesResponseInfo serpGoogleLanguages() throws ApiException {
        ApiResponse<SerpGoogleLanguagesResponseInfo> localVarResp = serpGoogleLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/languages/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLanguagesResponseInfo> serpGoogleLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpGoogleLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpGoogleLanguagesAsync(final ApiCallback<SerpGoogleLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpGoogleLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpGoogleLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpGoogleLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpGoogleLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpGoogleLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/locations/?bash&#39;
     * @return SerpGoogleLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocationsResponseInfo serpGoogleLocations() throws ApiException {
        ApiResponse<SerpGoogleLocationsResponseInfo> localVarResp = serpGoogleLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/locations/?bash&#39;
     * @return ApiResponse&lt;SerpGoogleLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocationsResponseInfo> serpGoogleLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpGoogleLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpGoogleLocationsAsync(final ApiCallback<SerpGoogleLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpGoogleLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpGoogleLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpGoogleLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/google/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpGoogleLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling serpGoogleLocationsCountry(Async)");
        }

        return serpGoogleLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return SerpGoogleLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpGoogleLocationsCountryResponseInfo serpGoogleLocationsCountry(String country) throws ApiException {
        ApiResponse<SerpGoogleLocationsCountryResponseInfo> localVarResp = serpGoogleLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;SerpGoogleLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpGoogleLocationsCountryResponseInfo> serpGoogleLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = serpGoogleLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<SerpGoogleLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpGoogleLocationsCountryAsync(String country, final ApiCallback<SerpGoogleLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpGoogleLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<SerpGoogleLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpIdList
     * @param serpIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpIdListCall(List<SerpIdListRequestInfo> serpIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpIdListValidateBeforeCall(List<SerpIdListRequestInfo> serpIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return serpIdListCall(serpIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed SERP tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/id_list/?bash&#39;
     * @param serpIdListRequestInfo  (optional)
     * @return SerpIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpIdListResponseInfo serpIdList(List<SerpIdListRequestInfo> serpIdListRequestInfo) throws ApiException {
        ApiResponse<SerpIdListResponseInfo> localVarResp = serpIdListWithHttpInfo(serpIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed SERP tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/id_list/?bash&#39;
     * @param serpIdListRequestInfo  (optional)
     * @return ApiResponse&lt;SerpIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpIdListResponseInfo> serpIdListWithHttpInfo(List<SerpIdListRequestInfo> serpIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = serpIdListValidateBeforeCall(serpIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed SERP tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/id_list/?bash&#39;
     * @param serpIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpIdListAsync(List<SerpIdListRequestInfo> serpIdListRequestInfo, final ApiCallback<SerpIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpIdListValidateBeforeCall(serpIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpSeznamLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpSeznamLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpSeznamLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpSeznamLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/languages/?bash&#39;
     * @return SerpSeznamLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamLanguagesResponseInfo serpSeznamLanguages() throws ApiException {
        ApiResponse<SerpSeznamLanguagesResponseInfo> localVarResp = serpSeznamLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/languages/?bash&#39;
     * @return ApiResponse&lt;SerpSeznamLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamLanguagesResponseInfo> serpSeznamLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpSeznamLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpSeznamLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpSeznamLanguagesAsync(final ApiCallback<SerpSeznamLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpSeznamLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpSeznamLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpSeznamLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpSeznamLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpSeznamLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpSeznamLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/locations/?bash&#39;
     * @return SerpSeznamLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamLocationsResponseInfo serpSeznamLocations() throws ApiException {
        ApiResponse<SerpSeznamLocationsResponseInfo> localVarResp = serpSeznamLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/locations/?bash&#39;
     * @return ApiResponse&lt;SerpSeznamLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamLocationsResponseInfo> serpSeznamLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpSeznamLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpSeznamLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpSeznamLocationsAsync(final ApiCallback<SerpSeznamLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpSeznamLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpSeznamLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpSeznamLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpSeznamLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpSeznamLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling serpSeznamLocationsCountry(Async)");
        }

        return serpSeznamLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return SerpSeznamLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamLocationsCountryResponseInfo serpSeznamLocationsCountry(String country) throws ApiException {
        ApiResponse<SerpSeznamLocationsCountryResponseInfo> localVarResp = serpSeznamLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;SerpSeznamLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamLocationsCountryResponseInfo> serpSeznamLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = serpSeznamLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<SerpSeznamLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpSeznamLocationsCountryAsync(String country, final ApiCallback<SerpSeznamLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpSeznamLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<SerpSeznamLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpYahooLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYahooLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpYahooLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpYahooLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/languages/?bash&#39;
     * @return SerpYahooLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooLanguagesResponseInfo serpYahooLanguages() throws ApiException {
        ApiResponse<SerpYahooLanguagesResponseInfo> localVarResp = serpYahooLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/languages/?bash&#39;
     * @return ApiResponse&lt;SerpYahooLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooLanguagesResponseInfo> serpYahooLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpYahooLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYahooLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYahooLanguagesAsync(final ApiCallback<SerpYahooLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpYahooLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYahooLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpYahooLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYahooLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpYahooLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpYahooLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/locations/?bash&#39;
     * @return SerpYahooLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooLocationsResponseInfo serpYahooLocations() throws ApiException {
        ApiResponse<SerpYahooLocationsResponseInfo> localVarResp = serpYahooLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/locations/?bash&#39;
     * @return ApiResponse&lt;SerpYahooLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooLocationsResponseInfo> serpYahooLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpYahooLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYahooLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYahooLocationsAsync(final ApiCallback<SerpYahooLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpYahooLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYahooLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpYahooLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYahooLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpYahooLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling serpYahooLocationsCountry(Async)");
        }

        return serpYahooLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return SerpYahooLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooLocationsCountryResponseInfo serpYahooLocationsCountry(String country) throws ApiException {
        ApiResponse<SerpYahooLocationsCountryResponseInfo> localVarResp = serpYahooLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;SerpYahooLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooLocationsCountryResponseInfo> serpYahooLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = serpYahooLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<SerpYahooLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYahooLocationsCountryAsync(String country, final ApiCallback<SerpYahooLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpYahooLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpYoutubeLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYoutubeLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpYoutubeLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpYoutubeLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/languages/?bash&#39;
     * @return SerpYoutubeLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeLanguagesResponseInfo serpYoutubeLanguages() throws ApiException {
        ApiResponse<SerpYoutubeLanguagesResponseInfo> localVarResp = serpYoutubeLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/languages/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeLanguagesResponseInfo> serpYoutubeLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpYoutubeLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYoutubeLanguagesAsync(final ApiCallback<SerpYoutubeLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpYoutubeLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpYoutubeLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYoutubeLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpYoutubeLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return serpYoutubeLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/locations/?bash&#39;
     * @return SerpYoutubeLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeLocationsResponseInfo serpYoutubeLocations() throws ApiException {
        ApiResponse<SerpYoutubeLocationsResponseInfo> localVarResp = serpYoutubeLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/locations/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeLocationsResponseInfo> serpYoutubeLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = serpYoutubeLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYoutubeLocationsAsync(final ApiCallback<SerpYoutubeLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpYoutubeLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for serpYoutubeLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYoutubeLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call serpYoutubeLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling serpYoutubeLocationsCountry(Async)");
        }

        return serpYoutubeLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return SerpYoutubeLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeLocationsCountryResponseInfo serpYoutubeLocationsCountry(String country) throws ApiException {
        ApiResponse<SerpYoutubeLocationsCountryResponseInfo> localVarResp = serpYoutubeLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;SerpYoutubeLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeLocationsCountryResponseInfo> serpYoutubeLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = serpYoutubeLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call serpYoutubeLocationsCountryAsync(String country, final ApiCallback<SerpYoutubeLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = serpYoutubeLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seznamOrganicTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/organic/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seznamOrganicTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seznamOrganicTaskGetAdvanced(Async)");
        }

        return seznamOrganicTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpSeznamOrganicTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamOrganicTaskGetAdvancedResponseInfo seznamOrganicTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpSeznamOrganicTaskGetAdvancedResponseInfo> localVarResp = seznamOrganicTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpSeznamOrganicTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamOrganicTaskGetAdvancedResponseInfo> seznamOrganicTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = seznamOrganicTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskGetAdvancedAsync(String id, final ApiCallback<SerpSeznamOrganicTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = seznamOrganicTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seznamOrganicTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/organic/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seznamOrganicTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seznamOrganicTaskGetHtml(Async)");
        }

        return seznamOrganicTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpSeznamOrganicTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamOrganicTaskGetHtmlResponseInfo seznamOrganicTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpSeznamOrganicTaskGetHtmlResponseInfo> localVarResp = seznamOrganicTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpSeznamOrganicTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamOrganicTaskGetHtmlResponseInfo> seznamOrganicTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = seznamOrganicTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskGetHtmlAsync(String id, final ApiCallback<SerpSeznamOrganicTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = seznamOrganicTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seznamOrganicTaskGetRegular
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskGetRegularCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/organic/task_get/regular/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seznamOrganicTaskGetRegularValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seznamOrganicTaskGetRegular(Async)");
        }

        return seznamOrganicTaskGetRegularCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpSeznamOrganicTaskGetRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamOrganicTaskGetRegularResponseInfo seznamOrganicTaskGetRegular(String id) throws ApiException {
        ApiResponse<SerpSeznamOrganicTaskGetRegularResponseInfo> localVarResp = seznamOrganicTaskGetRegularWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpSeznamOrganicTaskGetRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamOrganicTaskGetRegularResponseInfo> seznamOrganicTaskGetRegularWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = seznamOrganicTaskGetRegularValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskGetRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskGetRegularAsync(String id, final ApiCallback<SerpSeznamOrganicTaskGetRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = seznamOrganicTaskGetRegularValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskGetRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seznamOrganicTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/organic/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seznamOrganicTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return seznamOrganicTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Seznam SERP API provides top 10 search engine results from one of the most popular search engines in the Czech Republic. Seznam is focused on the local search market, and thus supports the Czech language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpSeznamOrganicTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamOrganicTaskPostResponseInfo seznamOrganicTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpSeznamOrganicTaskPostResponseInfo> localVarResp = seznamOrganicTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Seznam SERP API provides top 10 search engine results from one of the most popular search engines in the Czech Republic. Seznam is focused on the local search market, and thus supports the Czech language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpSeznamOrganicTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamOrganicTaskPostResponseInfo> seznamOrganicTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = seznamOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Seznam SERP API provides top 10 search engine results from one of the most popular search engines in the Czech Republic. Seznam is focused on the local search market, and thus supports the Czech language only. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpSeznamOrganicTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = seznamOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seznamOrganicTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/organic/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seznamOrganicTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return seznamOrganicTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/tasks_fixed/?bash&#39;
     * @return SerpSeznamOrganicTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamOrganicTasksFixedResponseInfo seznamOrganicTasksFixed() throws ApiException {
        ApiResponse<SerpSeznamOrganicTasksFixedResponseInfo> localVarResp = seznamOrganicTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpSeznamOrganicTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamOrganicTasksFixedResponseInfo> seznamOrganicTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = seznamOrganicTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTasksFixedAsync(final ApiCallback<SerpSeznamOrganicTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = seznamOrganicTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seznamOrganicTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/seznam/organic/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seznamOrganicTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return seznamOrganicTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/tasks_ready/?bash&#39;
     * @return SerpSeznamOrganicTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpSeznamOrganicTasksReadyResponseInfo seznamOrganicTasksReady() throws ApiException {
        ApiResponse<SerpSeznamOrganicTasksReadyResponseInfo> localVarResp = seznamOrganicTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpSeznamOrganicTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpSeznamOrganicTasksReadyResponseInfo> seznamOrganicTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = seznamOrganicTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/seznam/organic/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seznamOrganicTasksReadyAsync(final ApiCallback<SerpSeznamOrganicTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = seznamOrganicTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpSeznamOrganicTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicLiveAdvanced
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicLiveAdvancedCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicLiveAdvancedValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return yahooOrganicLiveAdvancedCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP provides real-time data on top search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpYahooOrganicLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicLiveAdvancedResponseInfo yahooOrganicLiveAdvanced(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpYahooOrganicLiveAdvancedResponseInfo> localVarResp = yahooOrganicLiveAdvancedWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP provides real-time data on top search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYahooOrganicLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicLiveAdvancedResponseInfo> yahooOrganicLiveAdvancedWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP provides real-time data on top search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/advanced/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicLiveAdvancedAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpYahooOrganicLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicLiveAdvancedValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicLiveHtml
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicLiveHtmlCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicLiveHtmlValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return yahooOrganicLiveHtmlCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpYahooOrganicLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicLiveHtmlResponseInfo yahooOrganicLiveHtml(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpYahooOrganicLiveHtmlResponseInfo> localVarResp = yahooOrganicLiveHtmlWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYahooOrganicLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicLiveHtmlResponseInfo> yahooOrganicLiveHtmlWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicLiveHtmlValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live SERP HTML provides a raw HTML page of 100 search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/html/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicLiveHtmlAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpYahooOrganicLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicLiveHtmlValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicLiveRegular
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicLiveRegularCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/live/regular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicLiveRegularValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return yahooOrganicLiveRegularCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Live Yahoo SERP provides real-time data on up to 100 top search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpYahooOrganicLiveRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicLiveRegularResponseInfo yahooOrganicLiveRegular(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpYahooOrganicLiveRegularResponseInfo> localVarResp = yahooOrganicLiveRegularWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Live Yahoo SERP provides real-time data on up to 100 top search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYahooOrganicLiveRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicLiveRegularResponseInfo> yahooOrganicLiveRegularWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicLiveRegularValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicLiveRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Live Yahoo SERP provides real-time data on up to 100 top search engine results for the specified keyword, search engine, and location. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/live/regular/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicLiveRegularAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpYahooOrganicLiveRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicLiveRegularValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicLiveRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling yahooOrganicTaskGetAdvanced(Async)");
        }

        return yahooOrganicTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpYahooOrganicTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicTaskGetAdvancedResponseInfo yahooOrganicTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpYahooOrganicTaskGetAdvancedResponseInfo> localVarResp = yahooOrganicTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpYahooOrganicTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicTaskGetAdvancedResponseInfo> yahooOrganicTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskGetAdvancedAsync(String id, final ApiCallback<SerpYahooOrganicTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling yahooOrganicTaskGetHtml(Async)");
        }

        return yahooOrganicTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return SerpYahooOrganicTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicTaskGetHtmlResponseInfo yahooOrganicTaskGetHtml(String id) throws ApiException {
        ApiResponse<SerpYahooOrganicTaskGetHtmlResponseInfo> localVarResp = yahooOrganicTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpYahooOrganicTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicTaskGetHtmlResponseInfo> yahooOrganicTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskGetHtmlAsync(String id, final ApiCallback<SerpYahooOrganicTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicTaskGetRegular
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskGetRegularCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/task_get/regular/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicTaskGetRegularValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling yahooOrganicTaskGetRegular(Async)");
        }

        return yahooOrganicTaskGetRegularCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpYahooOrganicTaskGetRegularResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicTaskGetRegularResponseInfo yahooOrganicTaskGetRegular(String id) throws ApiException {
        ApiResponse<SerpYahooOrganicTaskGetRegularResponseInfo> localVarResp = yahooOrganicTaskGetRegularWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpYahooOrganicTaskGetRegularResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicTaskGetRegularResponseInfo> yahooOrganicTaskGetRegularWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicTaskGetRegularValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskGetRegularResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_get/regular/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskGetRegularAsync(String id, final ApiCallback<SerpYahooOrganicTaskGetRegularResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicTaskGetRegularValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskGetRegularResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicTaskPost
     * @param serpTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskPostCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicTaskPostValidateBeforeCall(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return yahooOrganicTaskPostCall(serpTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ SERP API provides top search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return SerpYahooOrganicTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicTaskPostResponseInfo yahooOrganicTaskPost(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        ApiResponse<SerpYahooOrganicTaskPostResponseInfo> localVarResp = yahooOrganicTaskPostWithHttpInfo(serpTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ SERP API provides top search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYahooOrganicTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicTaskPostResponseInfo> yahooOrganicTaskPostWithHttpInfo(List<SerpTaskRequestInfo> serpTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ SERP API provides top search engine results. These results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/task_post/?bash&#39;
     * @param serpTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTaskPostAsync(List<SerpTaskRequestInfo> serpTaskRequestInfo, final ApiCallback<SerpYahooOrganicTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicTaskPostValidateBeforeCall(serpTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return yahooOrganicTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/tasks_fixed/?bash&#39;
     * @return SerpYahooOrganicTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicTasksFixedResponseInfo yahooOrganicTasksFixed() throws ApiException {
        ApiResponse<SerpYahooOrganicTasksFixedResponseInfo> localVarResp = yahooOrganicTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpYahooOrganicTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicTasksFixedResponseInfo> yahooOrganicTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTasksFixedAsync(final ApiCallback<SerpYahooOrganicTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for yahooOrganicTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/yahoo/organic/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call yahooOrganicTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return yahooOrganicTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/tasks_ready/?bash&#39;
     * @return SerpYahooOrganicTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYahooOrganicTasksReadyResponseInfo yahooOrganicTasksReady() throws ApiException {
        ApiResponse<SerpYahooOrganicTasksReadyResponseInfo> localVarResp = yahooOrganicTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpYahooOrganicTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYahooOrganicTasksReadyResponseInfo> yahooOrganicTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = yahooOrganicTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/yahoo/organic/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call yahooOrganicTasksReadyAsync(final ApiCallback<SerpYahooOrganicTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = yahooOrganicTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYahooOrganicTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoCommentsLiveAdvanced
     * @param serpYoutubeVideoCommentsLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsLiveAdvancedCall(List<SerpYoutubeVideoCommentsLiveAdvancedRequestInfo> serpYoutubeVideoCommentsLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpYoutubeVideoCommentsLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_comments/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoCommentsLiveAdvancedValidateBeforeCall(List<SerpYoutubeVideoCommentsLiveAdvancedRequestInfo> serpYoutubeVideoCommentsLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return youtubeVideoCommentsLiveAdvancedCall(serpYoutubeVideoCommentsLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live YouTube Comments provides real-time data on comments on the video you specify in the request. You will get the top 20 comments on the video as well as information about the author, and key comment metrics. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/live/advanced/?bash&#39;
     * @param serpYoutubeVideoCommentsLiveAdvancedRequestInfo  (optional)
     * @return SerpYoutubeVideoCommentsLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoCommentsLiveAdvancedResponseInfo youtubeVideoCommentsLiveAdvanced(List<SerpYoutubeVideoCommentsLiveAdvancedRequestInfo> serpYoutubeVideoCommentsLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpYoutubeVideoCommentsLiveAdvancedResponseInfo> localVarResp = youtubeVideoCommentsLiveAdvancedWithHttpInfo(serpYoutubeVideoCommentsLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live YouTube Comments provides real-time data on comments on the video you specify in the request. You will get the top 20 comments on the video as well as information about the author, and key comment metrics. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/live/advanced/?bash&#39;
     * @param serpYoutubeVideoCommentsLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYoutubeVideoCommentsLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoCommentsLiveAdvancedResponseInfo> youtubeVideoCommentsLiveAdvancedWithHttpInfo(List<SerpYoutubeVideoCommentsLiveAdvancedRequestInfo> serpYoutubeVideoCommentsLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoCommentsLiveAdvancedValidateBeforeCall(serpYoutubeVideoCommentsLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live YouTube Comments provides real-time data on comments on the video you specify in the request. You will get the top 20 comments on the video as well as information about the author, and key comment metrics. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/live/advanced/?bash&#39;
     * @param serpYoutubeVideoCommentsLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsLiveAdvancedAsync(List<SerpYoutubeVideoCommentsLiveAdvancedRequestInfo> serpYoutubeVideoCommentsLiveAdvancedRequestInfo, final ApiCallback<SerpYoutubeVideoCommentsLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoCommentsLiveAdvancedValidateBeforeCall(serpYoutubeVideoCommentsLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoCommentsTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_comments/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoCommentsTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling youtubeVideoCommentsTaskGetAdvanced(Async)");
        }

        return youtubeVideoCommentsTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo youtubeVideoCommentsTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo> localVarResp = youtubeVideoCommentsTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo> youtubeVideoCommentsTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoCommentsTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTaskGetAdvancedAsync(String id, final ApiCallback<SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoCommentsTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoCommentsTaskPost
     * @param serpYoutubeVideoCommentsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTaskPostCall(List<SerpYoutubeVideoCommentsTaskPostRequestInfo> serpYoutubeVideoCommentsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpYoutubeVideoCommentsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_comments/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoCommentsTaskPostValidateBeforeCall(List<SerpYoutubeVideoCommentsTaskPostRequestInfo> serpYoutubeVideoCommentsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return youtubeVideoCommentsTaskPostCall(serpYoutubeVideoCommentsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ YouTube Comments API provides data on comments on the video you specify in the request. You will get the top 20 comments on the video as well as information about the author, and key comment metrics. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/task_post/?bash&#39;
     * @param serpYoutubeVideoCommentsTaskPostRequestInfo  (optional)
     * @return SerpYoutubeVideoCommentsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoCommentsTaskPostResponseInfo youtubeVideoCommentsTaskPost(List<SerpYoutubeVideoCommentsTaskPostRequestInfo> serpYoutubeVideoCommentsTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpYoutubeVideoCommentsTaskPostResponseInfo> localVarResp = youtubeVideoCommentsTaskPostWithHttpInfo(serpYoutubeVideoCommentsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ YouTube Comments API provides data on comments on the video you specify in the request. You will get the top 20 comments on the video as well as information about the author, and key comment metrics. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/task_post/?bash&#39;
     * @param serpYoutubeVideoCommentsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYoutubeVideoCommentsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoCommentsTaskPostResponseInfo> youtubeVideoCommentsTaskPostWithHttpInfo(List<SerpYoutubeVideoCommentsTaskPostRequestInfo> serpYoutubeVideoCommentsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoCommentsTaskPostValidateBeforeCall(serpYoutubeVideoCommentsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ YouTube Comments API provides data on comments on the video you specify in the request. You will get the top 20 comments on the video as well as information about the author, and key comment metrics. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/task_post/?bash&#39;
     * @param serpYoutubeVideoCommentsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTaskPostAsync(List<SerpYoutubeVideoCommentsTaskPostRequestInfo> serpYoutubeVideoCommentsTaskPostRequestInfo, final ApiCallback<SerpYoutubeVideoCommentsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoCommentsTaskPostValidateBeforeCall(serpYoutubeVideoCommentsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoCommentsTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_comments/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoCommentsTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return youtubeVideoCommentsTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/tasks_fixed/?bash&#39;
     * @return SerpYoutubeVideoCommentsTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoCommentsTasksFixedResponseInfo youtubeVideoCommentsTasksFixed() throws ApiException {
        ApiResponse<SerpYoutubeVideoCommentsTasksFixedResponseInfo> localVarResp = youtubeVideoCommentsTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeVideoCommentsTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoCommentsTasksFixedResponseInfo> youtubeVideoCommentsTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoCommentsTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTasksFixedAsync(final ApiCallback<SerpYoutubeVideoCommentsTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoCommentsTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoCommentsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_comments/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoCommentsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return youtubeVideoCommentsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/tasks_ready/?bash&#39;
     * @return SerpYoutubeVideoCommentsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoCommentsTasksReadyResponseInfo youtubeVideoCommentsTasksReady() throws ApiException {
        ApiResponse<SerpYoutubeVideoCommentsTasksReadyResponseInfo> localVarResp = youtubeVideoCommentsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeVideoCommentsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoCommentsTasksReadyResponseInfo> youtubeVideoCommentsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoCommentsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_comments/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoCommentsTasksReadyAsync(final ApiCallback<SerpYoutubeVideoCommentsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoCommentsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoCommentsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoInfoLiveAdvanced
     * @param serpYoutubeVideoInfoLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoLiveAdvancedCall(List<SerpYoutubeVideoInfoLiveAdvancedRequestInfo> serpYoutubeVideoInfoLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpYoutubeVideoInfoLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_info/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoInfoLiveAdvancedValidateBeforeCall(List<SerpYoutubeVideoInfoLiveAdvancedRequestInfo> serpYoutubeVideoInfoLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return youtubeVideoInfoLiveAdvancedCall(serpYoutubeVideoInfoLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live YouTube Video Info provides real-time data on the video you specify in the request. You will get data from the watching page containing key video and content metrics as well as the channel where the video is published. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/live/advanced/?bash&#39;
     * @param serpYoutubeVideoInfoLiveAdvancedRequestInfo  (optional)
     * @return SerpYoutubeVideoInfoLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoInfoLiveAdvancedResponseInfo youtubeVideoInfoLiveAdvanced(List<SerpYoutubeVideoInfoLiveAdvancedRequestInfo> serpYoutubeVideoInfoLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpYoutubeVideoInfoLiveAdvancedResponseInfo> localVarResp = youtubeVideoInfoLiveAdvancedWithHttpInfo(serpYoutubeVideoInfoLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live YouTube Video Info provides real-time data on the video you specify in the request. You will get data from the watching page containing key video and content metrics as well as the channel where the video is published. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/live/advanced/?bash&#39;
     * @param serpYoutubeVideoInfoLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYoutubeVideoInfoLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoInfoLiveAdvancedResponseInfo> youtubeVideoInfoLiveAdvancedWithHttpInfo(List<SerpYoutubeVideoInfoLiveAdvancedRequestInfo> serpYoutubeVideoInfoLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoInfoLiveAdvancedValidateBeforeCall(serpYoutubeVideoInfoLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live YouTube Video Info provides real-time data on the video you specify in the request. You will get data from the watching page containing key video and content metrics as well as the channel where the video is published. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/live/advanced/?bash&#39;
     * @param serpYoutubeVideoInfoLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoLiveAdvancedAsync(List<SerpYoutubeVideoInfoLiveAdvancedRequestInfo> serpYoutubeVideoInfoLiveAdvancedRequestInfo, final ApiCallback<SerpYoutubeVideoInfoLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoInfoLiveAdvancedValidateBeforeCall(serpYoutubeVideoInfoLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoInfoTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_info/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoInfoTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling youtubeVideoInfoTaskGetAdvanced(Async)");
        }

        return youtubeVideoInfoTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo youtubeVideoInfoTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo> localVarResp = youtubeVideoInfoTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo> youtubeVideoInfoTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoInfoTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTaskGetAdvancedAsync(String id, final ApiCallback<SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoInfoTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoInfoTaskPost
     * @param serpYoutubeVideoInfoTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTaskPostCall(List<SerpYoutubeVideoInfoTaskPostRequestInfo> serpYoutubeVideoInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpYoutubeVideoInfoTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_info/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoInfoTaskPostValidateBeforeCall(List<SerpYoutubeVideoInfoTaskPostRequestInfo> serpYoutubeVideoInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return youtubeVideoInfoTaskPostCall(serpYoutubeVideoInfoTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ YouTube Video Info API provides detailed information about the video you specify in the POST request. You will get data from the watching page containing key video and content metrics as well as the channel where the video is published. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/task_post/?bash&#39;
     * @param serpYoutubeVideoInfoTaskPostRequestInfo  (optional)
     * @return SerpYoutubeVideoInfoTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoInfoTaskPostResponseInfo youtubeVideoInfoTaskPost(List<SerpYoutubeVideoInfoTaskPostRequestInfo> serpYoutubeVideoInfoTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpYoutubeVideoInfoTaskPostResponseInfo> localVarResp = youtubeVideoInfoTaskPostWithHttpInfo(serpYoutubeVideoInfoTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ YouTube Video Info API provides detailed information about the video you specify in the POST request. You will get data from the watching page containing key video and content metrics as well as the channel where the video is published. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/task_post/?bash&#39;
     * @param serpYoutubeVideoInfoTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYoutubeVideoInfoTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoInfoTaskPostResponseInfo> youtubeVideoInfoTaskPostWithHttpInfo(List<SerpYoutubeVideoInfoTaskPostRequestInfo> serpYoutubeVideoInfoTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoInfoTaskPostValidateBeforeCall(serpYoutubeVideoInfoTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ YouTube Video Info API provides detailed information about the video you specify in the POST request. You will get data from the watching page containing key video and content metrics as well as the channel where the video is published. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/task_post/?bash&#39;
     * @param serpYoutubeVideoInfoTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTaskPostAsync(List<SerpYoutubeVideoInfoTaskPostRequestInfo> serpYoutubeVideoInfoTaskPostRequestInfo, final ApiCallback<SerpYoutubeVideoInfoTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoInfoTaskPostValidateBeforeCall(serpYoutubeVideoInfoTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoInfoTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_info/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoInfoTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return youtubeVideoInfoTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/tasks_fixed/?bash&#39;
     * @return SerpYoutubeVideoInfoTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoInfoTasksFixedResponseInfo youtubeVideoInfoTasksFixed() throws ApiException {
        ApiResponse<SerpYoutubeVideoInfoTasksFixedResponseInfo> localVarResp = youtubeVideoInfoTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeVideoInfoTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoInfoTasksFixedResponseInfo> youtubeVideoInfoTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoInfoTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTasksFixedAsync(final ApiCallback<SerpYoutubeVideoInfoTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoInfoTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoInfoTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_info/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoInfoTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return youtubeVideoInfoTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/tasks_ready/?bash&#39;
     * @return SerpYoutubeVideoInfoTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoInfoTasksReadyResponseInfo youtubeVideoInfoTasksReady() throws ApiException {
        ApiResponse<SerpYoutubeVideoInfoTasksReadyResponseInfo> localVarResp = youtubeVideoInfoTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeVideoInfoTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoInfoTasksReadyResponseInfo> youtubeVideoInfoTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoInfoTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_info/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoInfoTasksReadyAsync(final ApiCallback<SerpYoutubeVideoInfoTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoInfoTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoInfoTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoSubtitlesLiveAdvanced
     * @param serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesLiveAdvancedCall(List<SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo> serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_subtitles/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoSubtitlesLiveAdvancedValidateBeforeCall(List<SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo> serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return youtubeVideoSubtitlesLiveAdvancedCall(serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Live YouTube Subtitles provides real-time data on subtitles in the video you specify in the request. You will get data from the watching page containing subtitled text, its language, and duration in the video. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/live/advanced/?bash&#39;
     * @param serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo  (optional)
     * @return SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo youtubeVideoSubtitlesLiveAdvanced(List<SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo> serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo> localVarResp = youtubeVideoSubtitlesLiveAdvancedWithHttpInfo(serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Live YouTube Subtitles provides real-time data on subtitles in the video you specify in the request. You will get data from the watching page containing subtitled text, its language, and duration in the video. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/live/advanced/?bash&#39;
     * @param serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo> youtubeVideoSubtitlesLiveAdvancedWithHttpInfo(List<SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo> serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoSubtitlesLiveAdvancedValidateBeforeCall(serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Live YouTube Subtitles provides real-time data on subtitles in the video you specify in the request. You will get data from the watching page containing subtitled text, its language, and duration in the video. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/live/advanced/?bash&#39;
     * @param serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesLiveAdvancedAsync(List<SerpYoutubeVideoSubtitlesLiveAdvancedRequestInfo> serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo, final ApiCallback<SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoSubtitlesLiveAdvancedValidateBeforeCall(serpYoutubeVideoSubtitlesLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoSubtitlesTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_subtitles/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoSubtitlesTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling youtubeVideoSubtitlesTaskGetAdvanced(Async)");
        }

        return youtubeVideoSubtitlesTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo youtubeVideoSubtitlesTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo> localVarResp = youtubeVideoSubtitlesTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo> youtubeVideoSubtitlesTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoSubtitlesTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Description of the fields for sending a request: for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTaskGetAdvancedAsync(String id, final ApiCallback<SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoSubtitlesTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoSubtitlesTaskPost
     * @param serpYoutubeVideoSubtitlesTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTaskPostCall(List<SerpYoutubeVideoSubtitlesTaskPostRequestInfo> serpYoutubeVideoSubtitlesTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = serpYoutubeVideoSubtitlesTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_subtitles/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoSubtitlesTaskPostValidateBeforeCall(List<SerpYoutubeVideoSubtitlesTaskPostRequestInfo> serpYoutubeVideoSubtitlesTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return youtubeVideoSubtitlesTaskPostCall(serpYoutubeVideoSubtitlesTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ YouTube Subtitles API provides data on all subtitles in the video you specify in the POST request. You will get data from the watching page containing subtitled text, its language, and duration in the video. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/task_post/?bash&#39;
     * @param serpYoutubeVideoSubtitlesTaskPostRequestInfo  (optional)
     * @return SerpYoutubeVideoSubtitlesTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoSubtitlesTaskPostResponseInfo youtubeVideoSubtitlesTaskPost(List<SerpYoutubeVideoSubtitlesTaskPostRequestInfo> serpYoutubeVideoSubtitlesTaskPostRequestInfo) throws ApiException {
        ApiResponse<SerpYoutubeVideoSubtitlesTaskPostResponseInfo> localVarResp = youtubeVideoSubtitlesTaskPostWithHttpInfo(serpYoutubeVideoSubtitlesTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ YouTube Subtitles API provides data on all subtitles in the video you specify in the POST request. You will get data from the watching page containing subtitled text, its language, and duration in the video. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/task_post/?bash&#39;
     * @param serpYoutubeVideoSubtitlesTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;SerpYoutubeVideoSubtitlesTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoSubtitlesTaskPostResponseInfo> youtubeVideoSubtitlesTaskPostWithHttpInfo(List<SerpYoutubeVideoSubtitlesTaskPostRequestInfo> serpYoutubeVideoSubtitlesTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoSubtitlesTaskPostValidateBeforeCall(serpYoutubeVideoSubtitlesTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ YouTube Subtitles API provides data on all subtitles in the video you specify in the POST request. You will get data from the watching page containing subtitled text, its language, and duration in the video. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/task_post/?bash&#39;
     * @param serpYoutubeVideoSubtitlesTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTaskPostAsync(List<SerpYoutubeVideoSubtitlesTaskPostRequestInfo> serpYoutubeVideoSubtitlesTaskPostRequestInfo, final ApiCallback<SerpYoutubeVideoSubtitlesTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoSubtitlesTaskPostValidateBeforeCall(serpYoutubeVideoSubtitlesTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoSubtitlesTasksFixed
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTasksFixedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_subtitles/tasks_fixed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoSubtitlesTasksFixedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return youtubeVideoSubtitlesTasksFixedCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/tasks_fixed/?bash&#39;
     * @return SerpYoutubeVideoSubtitlesTasksFixedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoSubtitlesTasksFixedResponseInfo youtubeVideoSubtitlesTasksFixed() throws ApiException {
        ApiResponse<SerpYoutubeVideoSubtitlesTasksFixedResponseInfo> localVarResp = youtubeVideoSubtitlesTasksFixedWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/tasks_fixed/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeVideoSubtitlesTasksFixedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoSubtitlesTasksFixedResponseInfo> youtubeVideoSubtitlesTasksFixedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoSubtitlesTasksFixedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTasksFixedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Fixed’ endpoint is designed to provide you with the list of re-parsed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed re-parsed tasks using this endpoint. Then, you can re-collect the fixed results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/tasks_fixed/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTasksFixedAsync(final ApiCallback<SerpYoutubeVideoSubtitlesTasksFixedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoSubtitlesTasksFixedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTasksFixedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for youtubeVideoSubtitlesTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/serp/youtube/video_subtitles/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call youtubeVideoSubtitlesTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return youtubeVideoSubtitlesTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/tasks_ready/?bash&#39;
     * @return SerpYoutubeVideoSubtitlesTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public SerpYoutubeVideoSubtitlesTasksReadyResponseInfo youtubeVideoSubtitlesTasksReady() throws ApiException {
        ApiResponse<SerpYoutubeVideoSubtitlesTasksReadyResponseInfo> localVarResp = youtubeVideoSubtitlesTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;SerpYoutubeVideoSubtitlesTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SerpYoutubeVideoSubtitlesTasksReadyResponseInfo> youtubeVideoSubtitlesTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = youtubeVideoSubtitlesTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/serp/youtube/video_subtitles/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call youtubeVideoSubtitlesTasksReadyAsync(final ApiCallback<SerpYoutubeVideoSubtitlesTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = youtubeVideoSubtitlesTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<SerpYoutubeVideoSubtitlesTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
