/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.api;

import org.dataforseo.client.ApiCallback;
import org.dataforseo.client.ApiClient;
import org.dataforseo.client.ApiException;
import org.dataforseo.client.ApiResponse;
import org.dataforseo.client.Configuration;
import org.dataforseo.client.Pair;
import org.dataforseo.client.ProgressRequestBody;
import org.dataforseo.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.dataforseo.client.model.BusinessDataBusinessListingsAvailableFiltersResponseInfo;
import org.dataforseo.client.model.BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo;
import org.dataforseo.client.model.BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo;
import org.dataforseo.client.model.BusinessDataBusinessListingsCategoriesResponseInfo;
import org.dataforseo.client.model.BusinessDataBusinessListingsLocationsResponseInfo;
import org.dataforseo.client.model.BusinessDataBusinessListingsSearchLiveRequestInfo;
import org.dataforseo.client.model.BusinessDataBusinessListingsSearchLiveResponseInfo;
import org.dataforseo.client.model.BusinessDataErrorsRequestInfo;
import org.dataforseo.client.model.BusinessDataErrorsResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoLiveHtmlRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoLiveHtmlResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelInfoTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelSearchesLiveRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelSearchesLiveResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelSearchesTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelSearchesTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelSearchesTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleHotelSearchesTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleLanguagesResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleLocationsCountryResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleLocationsResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleReviewsTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleReviewsTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataGoogleReviewsTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataGoogleReviewsTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataIdListRequestInfo;
import org.dataforseo.client.model.BusinessDataIdListResponseInfo;
import org.dataforseo.client.model.BusinessDataSocialMediaFacebookLiveRequestInfo;
import org.dataforseo.client.model.BusinessDataSocialMediaFacebookLiveResponseInfo;
import org.dataforseo.client.model.BusinessDataSocialMediaPinterestLiveRequestInfo;
import org.dataforseo.client.model.BusinessDataSocialMediaPinterestLiveResponseInfo;
import org.dataforseo.client.model.BusinessDataSocialMediaRedditLiveRequestInfo;
import org.dataforseo.client.model.BusinessDataSocialMediaRedditLiveResponseInfo;
import org.dataforseo.client.model.BusinessDataTaskRequestInfo;
import org.dataforseo.client.model.BusinessDataTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorLanguagesResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorLocationsCountryResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorLocationsResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorReviewsTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorReviewsTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorReviewsTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorReviewsTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorSearchTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorSearchTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorSearchTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataTripadvisorSearchTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotReviewsTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotReviewsTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotReviewsTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotReviewsTasksReadyResponseInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotSearchTaskGetResponseInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotSearchTaskPostRequestInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotSearchTaskPostResponseInfo;
import org.dataforseo.client.model.BusinessDataTrustpilotSearchTasksReadyResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BusinessDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for businessDataBusinessListingsLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataBusinessListingsLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/business_listings/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataBusinessListingsLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessDataBusinessListingsLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can also download the full list of supported locations in the CSV format (last updated 2024-06-17). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/locations/?bash&#39;
     * @return BusinessDataBusinessListingsLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataBusinessListingsLocationsResponseInfo businessDataBusinessListingsLocations() throws ApiException {
        ApiResponse<BusinessDataBusinessListingsLocationsResponseInfo> localVarResp = businessDataBusinessListingsLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can also download the full list of supported locations in the CSV format (last updated 2024-06-17). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/locations/?bash&#39;
     * @return ApiResponse&lt;BusinessDataBusinessListingsLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataBusinessListingsLocationsResponseInfo> businessDataBusinessListingsLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessDataBusinessListingsLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can also download the full list of supported locations in the CSV format (last updated 2024-06-17). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataBusinessListingsLocationsAsync(final ApiCallback<BusinessDataBusinessListingsLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataBusinessListingsLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataErrors
     * @param businessDataErrorsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataErrorsCall(List<BusinessDataErrorsRequestInfo> businessDataErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataErrorsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataErrorsValidateBeforeCall(List<BusinessDataErrorsRequestInfo> businessDataErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        return businessDataErrorsCall(businessDataErrorsRequestInfo, _callback);

    }

    /**
     * 
     * By calling this endpoint you will receive information about the Business Data API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/errors/?bash&#39;
     * @param businessDataErrorsRequestInfo  (optional)
     * @return BusinessDataErrorsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataErrorsResponseInfo businessDataErrors(List<BusinessDataErrorsRequestInfo> businessDataErrorsRequestInfo) throws ApiException {
        ApiResponse<BusinessDataErrorsResponseInfo> localVarResp = businessDataErrorsWithHttpInfo(businessDataErrorsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this endpoint you will receive information about the Business Data API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/errors/?bash&#39;
     * @param businessDataErrorsRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataErrorsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataErrorsResponseInfo> businessDataErrorsWithHttpInfo(List<BusinessDataErrorsRequestInfo> businessDataErrorsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = businessDataErrorsValidateBeforeCall(businessDataErrorsRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataErrorsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this endpoint you will receive information about the Business Data API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/errors/?bash&#39;
     * @param businessDataErrorsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataErrorsAsync(List<BusinessDataErrorsRequestInfo> businessDataErrorsRequestInfo, final ApiCallback<BusinessDataErrorsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataErrorsValidateBeforeCall(businessDataErrorsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataErrorsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataGoogleLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataGoogleLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataGoogleLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessDataGoogleLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/languages/?bash&#39;
     * @return BusinessDataGoogleLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleLanguagesResponseInfo businessDataGoogleLanguages() throws ApiException {
        ApiResponse<BusinessDataGoogleLanguagesResponseInfo> localVarResp = businessDataGoogleLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/languages/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleLanguagesResponseInfo> businessDataGoogleLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessDataGoogleLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataGoogleLanguagesAsync(final ApiCallback<BusinessDataGoogleLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataGoogleLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataGoogleLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataGoogleLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataGoogleLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessDataGoogleLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/locations/?bash&#39;
     * @return BusinessDataGoogleLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleLocationsResponseInfo businessDataGoogleLocations() throws ApiException {
        ApiResponse<BusinessDataGoogleLocationsResponseInfo> localVarResp = businessDataGoogleLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/locations/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleLocationsResponseInfo> businessDataGoogleLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessDataGoogleLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataGoogleLocationsAsync(final ApiCallback<BusinessDataGoogleLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataGoogleLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataGoogleLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataGoogleLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataGoogleLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling businessDataGoogleLocationsCountry(Async)");
        }

        return businessDataGoogleLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return BusinessDataGoogleLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleLocationsCountryResponseInfo businessDataGoogleLocationsCountry(String country) throws ApiException {
        ApiResponse<BusinessDataGoogleLocationsCountryResponseInfo> localVarResp = businessDataGoogleLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;BusinessDataGoogleLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleLocationsCountryResponseInfo> businessDataGoogleLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = businessDataGoogleLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataGoogleLocationsCountryAsync(String country, final ApiCallback<BusinessDataGoogleLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataGoogleLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataIdList
     * @param businessDataIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataIdListCall(List<BusinessDataIdListRequestInfo> businessDataIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataIdListValidateBeforeCall(List<BusinessDataIdListRequestInfo> businessDataIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return businessDataIdListCall(businessDataIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Business Data tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/id_list/?bash&#39;
     * @param businessDataIdListRequestInfo  (optional)
     * @return BusinessDataIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataIdListResponseInfo businessDataIdList(List<BusinessDataIdListRequestInfo> businessDataIdListRequestInfo) throws ApiException {
        ApiResponse<BusinessDataIdListResponseInfo> localVarResp = businessDataIdListWithHttpInfo(businessDataIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Business Data tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/id_list/?bash&#39;
     * @param businessDataIdListRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataIdListResponseInfo> businessDataIdListWithHttpInfo(List<BusinessDataIdListRequestInfo> businessDataIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = businessDataIdListValidateBeforeCall(businessDataIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Business Data tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/id_list/?bash&#39;
     * @param businessDataIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataIdListAsync(List<BusinessDataIdListRequestInfo> businessDataIdListRequestInfo, final ApiCallback<BusinessDataIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataIdListValidateBeforeCall(businessDataIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessDataTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/tasks_ready/?bash&#39;
     * @return BusinessDataTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTasksReadyResponseInfo businessDataTasksReady() throws ApiException {
        ApiResponse<BusinessDataTasksReadyResponseInfo> localVarResp = businessDataTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTasksReadyResponseInfo> businessDataTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessDataTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTasksReadyAsync(final ApiCallback<BusinessDataTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataTripadvisorLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTripadvisorLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataTripadvisorLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessDataTripadvisorLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/languages/?bash&#39;
     * @return BusinessDataTripadvisorLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorLanguagesResponseInfo businessDataTripadvisorLanguages() throws ApiException {
        ApiResponse<BusinessDataTripadvisorLanguagesResponseInfo> localVarResp = businessDataTripadvisorLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/languages/?bash&#39;
     * @return ApiResponse&lt;BusinessDataTripadvisorLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorLanguagesResponseInfo> businessDataTripadvisorLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessDataTripadvisorLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTripadvisorLanguagesAsync(final ApiCallback<BusinessDataTripadvisorLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataTripadvisorLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataTripadvisorLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTripadvisorLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataTripadvisorLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessDataTripadvisorLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. Note that supported location types in Tripadvisor Business Data API are City and Region only. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/locations/?bash&#39;
     * @return BusinessDataTripadvisorLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorLocationsResponseInfo businessDataTripadvisorLocations() throws ApiException {
        ApiResponse<BusinessDataTripadvisorLocationsResponseInfo> localVarResp = businessDataTripadvisorLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. Note that supported location types in Tripadvisor Business Data API are City and Region only. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/locations/?bash&#39;
     * @return ApiResponse&lt;BusinessDataTripadvisorLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorLocationsResponseInfo> businessDataTripadvisorLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessDataTripadvisorLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. Note that supported location types in Tripadvisor Business Data API are City and Region only. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTripadvisorLocationsAsync(final ApiCallback<BusinessDataTripadvisorLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataTripadvisorLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessDataTripadvisorLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTripadvisorLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessDataTripadvisorLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling businessDataTripadvisorLocationsCountry(Async)");
        }

        return businessDataTripadvisorLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. Note that supported location types in Tripadvisor Business Data API are City and Region only. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return BusinessDataTripadvisorLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorLocationsCountryResponseInfo businessDataTripadvisorLocationsCountry(String country) throws ApiException {
        ApiResponse<BusinessDataTripadvisorLocationsCountryResponseInfo> localVarResp = businessDataTripadvisorLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. Note that supported location types in Tripadvisor Business Data API are City and Region only. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;BusinessDataTripadvisorLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorLocationsCountryResponseInfo> businessDataTripadvisorLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = businessDataTripadvisorLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. You can filter the list of locations by country when setting a task. Note that supported location types in Tripadvisor Business Data API are City and Region only. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessDataTripadvisorLocationsCountryAsync(String country, final ApiCallback<BusinessDataTripadvisorLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessDataTripadvisorLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessListingsAvailableFilters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsAvailableFiltersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/business_listings/available_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessListingsAvailableFiltersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessListingsAvailableFiltersCall(_callback);

    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Business Listings API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/filters/?bash&#39;
     * @return BusinessDataBusinessListingsAvailableFiltersResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataBusinessListingsAvailableFiltersResponseInfo businessListingsAvailableFilters() throws ApiException {
        ApiResponse<BusinessDataBusinessListingsAvailableFiltersResponseInfo> localVarResp = businessListingsAvailableFiltersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Business Listings API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/filters/?bash&#39;
     * @return ApiResponse&lt;BusinessDataBusinessListingsAvailableFiltersResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataBusinessListingsAvailableFiltersResponseInfo> businessListingsAvailableFiltersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessListingsAvailableFiltersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsAvailableFiltersResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Here you will find all the necessary information about filters that can be used with Business Listings API. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/filters/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsAvailableFiltersAsync(final ApiCallback<BusinessDataBusinessListingsAvailableFiltersResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessListingsAvailableFiltersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsAvailableFiltersResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessListingsCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/business_listings/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessListingsCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return businessListingsCategoriesCall(_callback);

    }

    /**
     * 
     * This endpoint will provide you with the list of top categories by business count. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/categories/?bash&#39;
     * @return BusinessDataBusinessListingsCategoriesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataBusinessListingsCategoriesResponseInfo businessListingsCategories() throws ApiException {
        ApiResponse<BusinessDataBusinessListingsCategoriesResponseInfo> localVarResp = businessListingsCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with the list of top categories by business count. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/categories/?bash&#39;
     * @return ApiResponse&lt;BusinessDataBusinessListingsCategoriesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataBusinessListingsCategoriesResponseInfo> businessListingsCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = businessListingsCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsCategoriesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with the list of top categories by business count. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/categories/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsCategoriesAsync(final ApiCallback<BusinessDataBusinessListingsCategoriesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessListingsCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsCategoriesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessListingsCategoriesAggregationLive
     * @param businessDataBusinessListingsCategoriesAggregationLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsCategoriesAggregationLiveCall(List<BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo> businessDataBusinessListingsCategoriesAggregationLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataBusinessListingsCategoriesAggregationLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/business_listings/categories_aggregation/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessListingsCategoriesAggregationLiveValidateBeforeCall(List<BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo> businessDataBusinessListingsCategoriesAggregationLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return businessListingsCategoriesAggregationLiveCall(businessDataBusinessListingsCategoriesAggregationLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Business Listings Categories Aggregation endpoint provides results containing information about groups of related categories along with the number of entities in each category. The provided results are specific to the specified parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/categories_aggregation/live/?bash&#39;
     * @param businessDataBusinessListingsCategoriesAggregationLiveRequestInfo  (optional)
     * @return BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo businessListingsCategoriesAggregationLive(List<BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo> businessDataBusinessListingsCategoriesAggregationLiveRequestInfo) throws ApiException {
        ApiResponse<BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo> localVarResp = businessListingsCategoriesAggregationLiveWithHttpInfo(businessDataBusinessListingsCategoriesAggregationLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Business Listings Categories Aggregation endpoint provides results containing information about groups of related categories along with the number of entities in each category. The provided results are specific to the specified parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/categories_aggregation/live/?bash&#39;
     * @param businessDataBusinessListingsCategoriesAggregationLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo> businessListingsCategoriesAggregationLiveWithHttpInfo(List<BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo> businessDataBusinessListingsCategoriesAggregationLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = businessListingsCategoriesAggregationLiveValidateBeforeCall(businessDataBusinessListingsCategoriesAggregationLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Business Listings Categories Aggregation endpoint provides results containing information about groups of related categories along with the number of entities in each category. The provided results are specific to the specified parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/categories_aggregation/live/?bash&#39;
     * @param businessDataBusinessListingsCategoriesAggregationLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsCategoriesAggregationLiveAsync(List<BusinessDataBusinessListingsCategoriesAggregationLiveRequestInfo> businessDataBusinessListingsCategoriesAggregationLiveRequestInfo, final ApiCallback<BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessListingsCategoriesAggregationLiveValidateBeforeCall(businessDataBusinessListingsCategoriesAggregationLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsCategoriesAggregationLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for businessListingsSearchLive
     * @param businessDataBusinessListingsSearchLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsSearchLiveCall(List<BusinessDataBusinessListingsSearchLiveRequestInfo> businessDataBusinessListingsSearchLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataBusinessListingsSearchLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/business_listings/search/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessListingsSearchLiveValidateBeforeCall(List<BusinessDataBusinessListingsSearchLiveRequestInfo> businessDataBusinessListingsSearchLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return businessListingsSearchLiveCall(businessDataBusinessListingsSearchLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Business Listings Search API provides results containing information about business entities listed on Google Maps in the specified categories. You will receive the address, contacts, rating, working hours, and other relevant data. The provided results are specific to the selected location (see the List of Locations) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/search/live/?bash&#39;
     * @param businessDataBusinessListingsSearchLiveRequestInfo  (optional)
     * @return BusinessDataBusinessListingsSearchLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataBusinessListingsSearchLiveResponseInfo businessListingsSearchLive(List<BusinessDataBusinessListingsSearchLiveRequestInfo> businessDataBusinessListingsSearchLiveRequestInfo) throws ApiException {
        ApiResponse<BusinessDataBusinessListingsSearchLiveResponseInfo> localVarResp = businessListingsSearchLiveWithHttpInfo(businessDataBusinessListingsSearchLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Business Listings Search API provides results containing information about business entities listed on Google Maps in the specified categories. You will receive the address, contacts, rating, working hours, and other relevant data. The provided results are specific to the selected location (see the List of Locations) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/search/live/?bash&#39;
     * @param businessDataBusinessListingsSearchLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataBusinessListingsSearchLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataBusinessListingsSearchLiveResponseInfo> businessListingsSearchLiveWithHttpInfo(List<BusinessDataBusinessListingsSearchLiveRequestInfo> businessDataBusinessListingsSearchLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = businessListingsSearchLiveValidateBeforeCall(businessDataBusinessListingsSearchLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsSearchLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Business Listings Search API provides results containing information about business entities listed on Google Maps in the specified categories. You will receive the address, contacts, rating, working hours, and other relevant data. The provided results are specific to the selected location (see the List of Locations) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/business_listings/search/live/?bash&#39;
     * @param businessDataBusinessListingsSearchLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call businessListingsSearchLiveAsync(List<BusinessDataBusinessListingsSearchLiveRequestInfo> businessDataBusinessListingsSearchLiveRequestInfo, final ApiCallback<BusinessDataBusinessListingsSearchLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessListingsSearchLiveValidateBeforeCall(businessDataBusinessListingsSearchLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataBusinessListingsSearchLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelInfoLiveAdvanced
     * @param businessDataGoogleHotelInfoLiveAdvancedRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoLiveAdvancedCall(List<BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo> businessDataGoogleHotelInfoLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleHotelInfoLiveAdvancedRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_info/live/advanced";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelInfoLiveAdvancedValidateBeforeCall(List<BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo> businessDataGoogleHotelInfoLiveAdvancedRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleHotelInfoLiveAdvancedCall(businessDataGoogleHotelInfoLiveAdvancedRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Hotel Info will provide you with structured data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/live/advanced/?bash&#39;
     * @param businessDataGoogleHotelInfoLiveAdvancedRequestInfo  (optional)
     * @return BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo googleHotelInfoLiveAdvanced(List<BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo> businessDataGoogleHotelInfoLiveAdvancedRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo> localVarResp = googleHotelInfoLiveAdvancedWithHttpInfo(businessDataGoogleHotelInfoLiveAdvancedRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Hotel Info will provide you with structured data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/live/advanced/?bash&#39;
     * @param businessDataGoogleHotelInfoLiveAdvancedRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo> googleHotelInfoLiveAdvancedWithHttpInfo(List<BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo> businessDataGoogleHotelInfoLiveAdvancedRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleHotelInfoLiveAdvancedValidateBeforeCall(businessDataGoogleHotelInfoLiveAdvancedRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Hotel Info will provide you with structured data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/live/advanced/?bash&#39;
     * @param businessDataGoogleHotelInfoLiveAdvancedRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoLiveAdvancedAsync(List<BusinessDataGoogleHotelInfoLiveAdvancedRequestInfo> businessDataGoogleHotelInfoLiveAdvancedRequestInfo, final ApiCallback<BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelInfoLiveAdvancedValidateBeforeCall(businessDataGoogleHotelInfoLiveAdvancedRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoLiveAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelInfoLiveHtml
     * @param businessDataGoogleHotelInfoLiveHtmlRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoLiveHtmlCall(List<BusinessDataGoogleHotelInfoLiveHtmlRequestInfo> businessDataGoogleHotelInfoLiveHtmlRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleHotelInfoLiveHtmlRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_info/live/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelInfoLiveHtmlValidateBeforeCall(List<BusinessDataGoogleHotelInfoLiveHtmlRequestInfo> businessDataGoogleHotelInfoLiveHtmlRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleHotelInfoLiveHtmlCall(businessDataGoogleHotelInfoLiveHtmlRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Hotel Info will provide you with unstructured HTML data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/live/html/?bash&#39;
     * @param businessDataGoogleHotelInfoLiveHtmlRequestInfo  (optional)
     * @return BusinessDataGoogleHotelInfoLiveHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelInfoLiveHtmlResponseInfo googleHotelInfoLiveHtml(List<BusinessDataGoogleHotelInfoLiveHtmlRequestInfo> businessDataGoogleHotelInfoLiveHtmlRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelInfoLiveHtmlResponseInfo> localVarResp = googleHotelInfoLiveHtmlWithHttpInfo(businessDataGoogleHotelInfoLiveHtmlRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Hotel Info will provide you with unstructured HTML data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/live/html/?bash&#39;
     * @param businessDataGoogleHotelInfoLiveHtmlRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleHotelInfoLiveHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelInfoLiveHtmlResponseInfo> googleHotelInfoLiveHtmlWithHttpInfo(List<BusinessDataGoogleHotelInfoLiveHtmlRequestInfo> businessDataGoogleHotelInfoLiveHtmlRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleHotelInfoLiveHtmlValidateBeforeCall(businessDataGoogleHotelInfoLiveHtmlRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoLiveHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Hotel Info will provide you with unstructured HTML data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/live/html/?bash&#39;
     * @param businessDataGoogleHotelInfoLiveHtmlRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoLiveHtmlAsync(List<BusinessDataGoogleHotelInfoLiveHtmlRequestInfo> businessDataGoogleHotelInfoLiveHtmlRequestInfo, final ApiCallback<BusinessDataGoogleHotelInfoLiveHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelInfoLiveHtmlValidateBeforeCall(businessDataGoogleHotelInfoLiveHtmlRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoLiveHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelInfoTaskGetAdvanced
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTaskGetAdvancedCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_info/task_get/advanced/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelInfoTaskGetAdvancedValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleHotelInfoTaskGetAdvanced(Async)");
        }

        return googleHotelInfoTaskGetAdvancedCall(id, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo googleHotelInfoTaskGetAdvanced(String id) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo> localVarResp = googleHotelInfoTaskGetAdvancedWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo> googleHotelInfoTaskGetAdvancedWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleHotelInfoTaskGetAdvancedValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_get/advanced/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTaskGetAdvancedAsync(String id, final ApiCallback<BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelInfoTaskGetAdvancedValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTaskGetAdvancedResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelInfoTaskGetHtml
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTaskGetHtmlCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_info/task_get/html/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelInfoTaskGetHtmlValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleHotelInfoTaskGetHtml(Async)");
        }

        return googleHotelInfoTaskGetHtmlCall(id, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo googleHotelInfoTaskGetHtml(String id) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo> localVarResp = googleHotelInfoTaskGetHtmlWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo> googleHotelInfoTaskGetHtmlWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleHotelInfoTaskGetHtmlValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_get/html/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 7 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTaskGetHtmlAsync(String id, final ApiCallback<BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelInfoTaskGetHtmlValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTaskGetHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelInfoTaskPost
     * @param businessDataGoogleHotelInfoTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTaskPostCall(List<BusinessDataGoogleHotelInfoTaskPostRequestInfo> businessDataGoogleHotelInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleHotelInfoTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_info/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelInfoTaskPostValidateBeforeCall(List<BusinessDataGoogleHotelInfoTaskPostRequestInfo> businessDataGoogleHotelInfoTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleHotelInfoTaskPostCall(businessDataGoogleHotelInfoTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Google Hotel Info will provide you with structured data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_post/?bash&#39;
     * @param businessDataGoogleHotelInfoTaskPostRequestInfo  (optional)
     * @return BusinessDataGoogleHotelInfoTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelInfoTaskPostResponseInfo googleHotelInfoTaskPost(List<BusinessDataGoogleHotelInfoTaskPostRequestInfo> businessDataGoogleHotelInfoTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelInfoTaskPostResponseInfo> localVarResp = googleHotelInfoTaskPostWithHttpInfo(businessDataGoogleHotelInfoTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Google Hotel Info will provide you with structured data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_post/?bash&#39;
     * @param businessDataGoogleHotelInfoTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleHotelInfoTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelInfoTaskPostResponseInfo> googleHotelInfoTaskPostWithHttpInfo(List<BusinessDataGoogleHotelInfoTaskPostRequestInfo> businessDataGoogleHotelInfoTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleHotelInfoTaskPostValidateBeforeCall(businessDataGoogleHotelInfoTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Google Hotel Info will provide you with structured data available for a specific hotel entity on the Google Hotels platform: such as service description, location details, rating, amenities, reviews, images, prices, and more. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/task_post/?bash&#39;
     * @param businessDataGoogleHotelInfoTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTaskPostAsync(List<BusinessDataGoogleHotelInfoTaskPostRequestInfo> businessDataGoogleHotelInfoTaskPostRequestInfo, final ApiCallback<BusinessDataGoogleHotelInfoTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelInfoTaskPostValidateBeforeCall(businessDataGoogleHotelInfoTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelInfoTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_info/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelInfoTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleHotelInfoTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/tasks_ready/?bash&#39;
     * @return BusinessDataGoogleHotelInfoTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelInfoTasksReadyResponseInfo googleHotelInfoTasksReady() throws ApiException {
        ApiResponse<BusinessDataGoogleHotelInfoTasksReadyResponseInfo> localVarResp = googleHotelInfoTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleHotelInfoTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelInfoTasksReadyResponseInfo> googleHotelInfoTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleHotelInfoTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_info/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelInfoTasksReadyAsync(final ApiCallback<BusinessDataGoogleHotelInfoTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelInfoTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelInfoTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelSearchesLive
     * @param businessDataGoogleHotelSearchesLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesLiveCall(List<BusinessDataGoogleHotelSearchesLiveRequestInfo> businessDataGoogleHotelSearchesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleHotelSearchesLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_searches/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelSearchesLiveValidateBeforeCall(List<BusinessDataGoogleHotelSearchesLiveRequestInfo> businessDataGoogleHotelSearchesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleHotelSearchesLiveCall(businessDataGoogleHotelSearchesLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Hotel Searches API provides results containing information about different hotels listed on Google Hotels. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/live/?bash&#39;
     * @param businessDataGoogleHotelSearchesLiveRequestInfo  (optional)
     * @return BusinessDataGoogleHotelSearchesLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelSearchesLiveResponseInfo googleHotelSearchesLive(List<BusinessDataGoogleHotelSearchesLiveRequestInfo> businessDataGoogleHotelSearchesLiveRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelSearchesLiveResponseInfo> localVarResp = googleHotelSearchesLiveWithHttpInfo(businessDataGoogleHotelSearchesLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Hotel Searches API provides results containing information about different hotels listed on Google Hotels. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/live/?bash&#39;
     * @param businessDataGoogleHotelSearchesLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleHotelSearchesLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelSearchesLiveResponseInfo> googleHotelSearchesLiveWithHttpInfo(List<BusinessDataGoogleHotelSearchesLiveRequestInfo> businessDataGoogleHotelSearchesLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleHotelSearchesLiveValidateBeforeCall(businessDataGoogleHotelSearchesLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Hotel Searches API provides results containing information about different hotels listed on Google Hotels. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/live/?bash&#39;
     * @param businessDataGoogleHotelSearchesLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesLiveAsync(List<BusinessDataGoogleHotelSearchesLiveRequestInfo> businessDataGoogleHotelSearchesLiveRequestInfo, final ApiCallback<BusinessDataGoogleHotelSearchesLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelSearchesLiveValidateBeforeCall(businessDataGoogleHotelSearchesLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelSearchesTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_searches/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelSearchesTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleHotelSearchesTaskGet(Async)");
        }

        return googleHotelSearchesTaskGetCall(id, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataGoogleHotelSearchesTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelSearchesTaskGetResponseInfo googleHotelSearchesTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelSearchesTaskGetResponseInfo> localVarResp = googleHotelSearchesTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataGoogleHotelSearchesTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelSearchesTaskGetResponseInfo> googleHotelSearchesTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleHotelSearchesTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesTaskGetAsync(String id, final ApiCallback<BusinessDataGoogleHotelSearchesTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelSearchesTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelSearchesTaskPost
     * @param businessDataGoogleHotelSearchesTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesTaskPostCall(List<BusinessDataGoogleHotelSearchesTaskPostRequestInfo> businessDataGoogleHotelSearchesTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleHotelSearchesTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_searches/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelSearchesTaskPostValidateBeforeCall(List<BusinessDataGoogleHotelSearchesTaskPostRequestInfo> businessDataGoogleHotelSearchesTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleHotelSearchesTaskPostCall(businessDataGoogleHotelSearchesTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Hotel Searches API provides results containing information about different hotels listed on Google. The provided results are specific to the keyword, selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/task_post/?bash&#39;
     * @param businessDataGoogleHotelSearchesTaskPostRequestInfo  (optional)
     * @return BusinessDataGoogleHotelSearchesTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelSearchesTaskPostResponseInfo googleHotelSearchesTaskPost(List<BusinessDataGoogleHotelSearchesTaskPostRequestInfo> businessDataGoogleHotelSearchesTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleHotelSearchesTaskPostResponseInfo> localVarResp = googleHotelSearchesTaskPostWithHttpInfo(businessDataGoogleHotelSearchesTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Hotel Searches API provides results containing information about different hotels listed on Google. The provided results are specific to the keyword, selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/task_post/?bash&#39;
     * @param businessDataGoogleHotelSearchesTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleHotelSearchesTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelSearchesTaskPostResponseInfo> googleHotelSearchesTaskPostWithHttpInfo(List<BusinessDataGoogleHotelSearchesTaskPostRequestInfo> businessDataGoogleHotelSearchesTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleHotelSearchesTaskPostValidateBeforeCall(businessDataGoogleHotelSearchesTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Hotel Searches API provides results containing information about different hotels listed on Google. The provided results are specific to the keyword, selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/task_post/?bash&#39;
     * @param businessDataGoogleHotelSearchesTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesTaskPostAsync(List<BusinessDataGoogleHotelSearchesTaskPostRequestInfo> businessDataGoogleHotelSearchesTaskPostRequestInfo, final ApiCallback<BusinessDataGoogleHotelSearchesTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelSearchesTaskPostValidateBeforeCall(businessDataGoogleHotelSearchesTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleHotelSearchesTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/hotel_searches/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleHotelSearchesTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleHotelSearchesTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/tasks_ready/?bash&#39;
     * @return BusinessDataGoogleHotelSearchesTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleHotelSearchesTasksReadyResponseInfo googleHotelSearchesTasksReady() throws ApiException {
        ApiResponse<BusinessDataGoogleHotelSearchesTasksReadyResponseInfo> localVarResp = googleHotelSearchesTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleHotelSearchesTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleHotelSearchesTasksReadyResponseInfo> googleHotelSearchesTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleHotelSearchesTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/hotel_searches/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleHotelSearchesTasksReadyAsync(final ApiCallback<BusinessDataGoogleHotelSearchesTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleHotelSearchesTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleHotelSearchesTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMyBusinessInfoTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessInfoTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/my_business_info/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMyBusinessInfoTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleMyBusinessInfoTaskGet(Async)");
        }

        return googleMyBusinessInfoTaskGetCall(id, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo googleMyBusinessInfoTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo> localVarResp = googleMyBusinessInfoTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo> googleMyBusinessInfoTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleMyBusinessInfoTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessInfoTaskGetAsync(String id, final ApiCallback<BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMyBusinessInfoTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessInfoTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMyBusinessInfoTaskPost
     * @param businessDataTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessInfoTaskPostCall(List<BusinessDataTaskRequestInfo> businessDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/my_business_info/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMyBusinessInfoTaskPostValidateBeforeCall(List<BusinessDataTaskRequestInfo> businessDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleMyBusinessInfoTaskPostCall(businessDataTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Business Data API provides results containing information about specific business entity from Google. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/task_post/?bash&#39;
     * @param businessDataTaskRequestInfo  (optional)
     * @return BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo googleMyBusinessInfoTaskPost(List<BusinessDataTaskRequestInfo> businessDataTaskRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo> localVarResp = googleMyBusinessInfoTaskPostWithHttpInfo(businessDataTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Business Data API provides results containing information about specific business entity from Google. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/task_post/?bash&#39;
     * @param businessDataTaskRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo> googleMyBusinessInfoTaskPostWithHttpInfo(List<BusinessDataTaskRequestInfo> businessDataTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleMyBusinessInfoTaskPostValidateBeforeCall(businessDataTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Business Data API provides results containing information about specific business entity from Google. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/task_post/?bash&#39;
     * @param businessDataTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessInfoTaskPostAsync(List<BusinessDataTaskRequestInfo> businessDataTaskRequestInfo, final ApiCallback<BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMyBusinessInfoTaskPostValidateBeforeCall(businessDataTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessInfoTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMyBusinessInfoTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessInfoTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/my_business_info/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMyBusinessInfoTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleMyBusinessInfoTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/tasks_ready/?bash&#39;
     * @return BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo googleMyBusinessInfoTasksReady() throws ApiException {
        ApiResponse<BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo> localVarResp = googleMyBusinessInfoTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo> googleMyBusinessInfoTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleMyBusinessInfoTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_info/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessInfoTasksReadyAsync(final ApiCallback<BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMyBusinessInfoTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessInfoTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMyBusinessUpdatesTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessUpdatesTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/my_business_updates/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMyBusinessUpdatesTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleMyBusinessUpdatesTaskGet(Async)");
        }

        return googleMyBusinessUpdatesTaskGetCall(id, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo googleMyBusinessUpdatesTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo> localVarResp = googleMyBusinessUpdatesTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo> googleMyBusinessUpdatesTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleMyBusinessUpdatesTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessUpdatesTaskGetAsync(String id, final ApiCallback<BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMyBusinessUpdatesTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessUpdatesTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMyBusinessUpdatesTaskPost
     * @param businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessUpdatesTaskPostCall(List<BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo> businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/my_business_updates/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMyBusinessUpdatesTaskPostValidateBeforeCall(List<BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo> businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleMyBusinessUpdatesTaskPostCall(businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoints provides the latest updates of a specific business entity from Google SERP. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/task_post/?bash&#39;
     * @param businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo  (optional)
     * @return BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo googleMyBusinessUpdatesTaskPost(List<BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo> businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo> localVarResp = googleMyBusinessUpdatesTaskPostWithHttpInfo(businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoints provides the latest updates of a specific business entity from Google SERP. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/task_post/?bash&#39;
     * @param businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo> googleMyBusinessUpdatesTaskPostWithHttpInfo(List<BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo> businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleMyBusinessUpdatesTaskPostValidateBeforeCall(businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoints provides the latest updates of a specific business entity from Google SERP. The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/task_post/?bash&#39;
     * @param businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessUpdatesTaskPostAsync(List<BusinessDataGoogleMyBusinessUpdatesTaskPostRequestInfo> businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo, final ApiCallback<BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMyBusinessUpdatesTaskPostValidateBeforeCall(businessDataGoogleMyBusinessUpdatesTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessUpdatesTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleMyBusinessUpdatesTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessUpdatesTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/my_business_updates/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleMyBusinessUpdatesTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleMyBusinessUpdatesTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/tasks_ready/?bash&#39;
     * @return BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo googleMyBusinessUpdatesTasksReady() throws ApiException {
        ApiResponse<BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo> localVarResp = googleMyBusinessUpdatesTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo> googleMyBusinessUpdatesTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleMyBusinessUpdatesTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/my_business_updates/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleMyBusinessUpdatesTasksReadyAsync(final ApiCallback<BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleMyBusinessUpdatesTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleMyBusinessUpdatesTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleQuestionsAndAnswersLive
     * @param businessDataGoogleQuestionsAndAnswersLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersLiveCall(List<BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo> businessDataGoogleQuestionsAndAnswersLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleQuestionsAndAnswersLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/questions_and_answers/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleQuestionsAndAnswersLiveValidateBeforeCall(List<BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo> businessDataGoogleQuestionsAndAnswersLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleQuestionsAndAnswersLiveCall(businessDataGoogleQuestionsAndAnswersLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of questions and answers associated with a specific business entity listed on Google My Business. By submitting a request to this endpoint, you can access comprehensive data on the inquiries and responses related to a particular business, including the full text of the questions and answers, as well as metadata such as timestamps, user information.   The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings.   Your account will be billed for every 20 questions, the maximum number of answers returned for each question is 5. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/live/?bash&#39;
     * @param businessDataGoogleQuestionsAndAnswersLiveRequestInfo  (optional)
     * @return BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo googleQuestionsAndAnswersLive(List<BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo> businessDataGoogleQuestionsAndAnswersLiveRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo> localVarResp = googleQuestionsAndAnswersLiveWithHttpInfo(businessDataGoogleQuestionsAndAnswersLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of questions and answers associated with a specific business entity listed on Google My Business. By submitting a request to this endpoint, you can access comprehensive data on the inquiries and responses related to a particular business, including the full text of the questions and answers, as well as metadata such as timestamps, user information.   The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings.   Your account will be billed for every 20 questions, the maximum number of answers returned for each question is 5. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/live/?bash&#39;
     * @param businessDataGoogleQuestionsAndAnswersLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo> googleQuestionsAndAnswersLiveWithHttpInfo(List<BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo> businessDataGoogleQuestionsAndAnswersLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleQuestionsAndAnswersLiveValidateBeforeCall(businessDataGoogleQuestionsAndAnswersLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a detailed overview of questions and answers associated with a specific business entity listed on Google My Business. By submitting a request to this endpoint, you can access comprehensive data on the inquiries and responses related to a particular business, including the full text of the questions and answers, as well as metadata such as timestamps, user information.   The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings.   Your account will be billed for every 20 questions, the maximum number of answers returned for each question is 5. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/live/?bash&#39;
     * @param businessDataGoogleQuestionsAndAnswersLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersLiveAsync(List<BusinessDataGoogleQuestionsAndAnswersLiveRequestInfo> businessDataGoogleQuestionsAndAnswersLiveRequestInfo, final ApiCallback<BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleQuestionsAndAnswersLiveValidateBeforeCall(businessDataGoogleQuestionsAndAnswersLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleQuestionsAndAnswersTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/questions_and_answers/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleQuestionsAndAnswersTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleQuestionsAndAnswersTaskGet(Async)");
        }

        return googleQuestionsAndAnswersTaskGetCall(id, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo googleQuestionsAndAnswersTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo> localVarResp = googleQuestionsAndAnswersTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo> googleQuestionsAndAnswersTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleQuestionsAndAnswersTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersTaskGetAsync(String id, final ApiCallback<BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleQuestionsAndAnswersTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleQuestionsAndAnswersTaskPost
     * @param businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersTaskPostCall(List<BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo> businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/questions_and_answers/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleQuestionsAndAnswersTaskPostValidateBeforeCall(List<BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo> businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleQuestionsAndAnswersTaskPostCall(businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of questions and answers associated with a specific business entity listed on Google My Business. By submitting a request to this endpoint, you can access comprehensive data on the inquiries and responses related to a particular business, including the full text of the questions and answers, as well as metadata such as timestamps, user information.   The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings.   Your account will be billed for every 20 questions, the maximum number of answers returned for each question is 5. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/task_post/?bash&#39;
     * @param businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo  (optional)
     * @return BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo googleQuestionsAndAnswersTaskPost(List<BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo> businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo> localVarResp = googleQuestionsAndAnswersTaskPostWithHttpInfo(businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a detailed overview of questions and answers associated with a specific business entity listed on Google My Business. By submitting a request to this endpoint, you can access comprehensive data on the inquiries and responses related to a particular business, including the full text of the questions and answers, as well as metadata such as timestamps, user information.   The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings.   Your account will be billed for every 20 questions, the maximum number of answers returned for each question is 5. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/task_post/?bash&#39;
     * @param businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo> googleQuestionsAndAnswersTaskPostWithHttpInfo(List<BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo> businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleQuestionsAndAnswersTaskPostValidateBeforeCall(businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a detailed overview of questions and answers associated with a specific business entity listed on Google My Business. By submitting a request to this endpoint, you can access comprehensive data on the inquiries and responses related to a particular business, including the full text of the questions and answers, as well as metadata such as timestamps, user information.   The provided results are specific to the selected location (see the List of Locations) and language (see the List of Languages) settings.   Your account will be billed for every 20 questions, the maximum number of answers returned for each question is 5. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/task_post/?bash&#39;
     * @param businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersTaskPostAsync(List<BusinessDataGoogleQuestionsAndAnswersTaskPostRequestInfo> businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo, final ApiCallback<BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleQuestionsAndAnswersTaskPostValidateBeforeCall(businessDataGoogleQuestionsAndAnswersTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleQuestionsAndAnswersTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/questions_and_answers/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleQuestionsAndAnswersTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleQuestionsAndAnswersTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/tasks_ready/?bash&#39;
     * @return BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo googleQuestionsAndAnswersTasksReady() throws ApiException {
        ApiResponse<BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo> localVarResp = googleQuestionsAndAnswersTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo> googleQuestionsAndAnswersTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleQuestionsAndAnswersTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/questions_and_answers/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleQuestionsAndAnswersTasksReadyAsync(final ApiCallback<BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleQuestionsAndAnswersTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleQuestionsAndAnswersTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleReviewsTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleReviewsTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/reviews/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleReviewsTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleReviewsTaskGet(Async)");
        }

        return googleReviewsTaskGetCall(id, _callback);

    }

    /**
     * 
     * The returned results are specific to the indicated local establishment name, search engine, location and language parameters. We emulate set location and search engine with the highest accuracy so that the results you receive will match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus would not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataGoogleReviewsTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleReviewsTaskGetResponseInfo googleReviewsTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataGoogleReviewsTaskGetResponseInfo> localVarResp = googleReviewsTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * The returned results are specific to the indicated local establishment name, search engine, location and language parameters. We emulate set location and search engine with the highest accuracy so that the results you receive will match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus would not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataGoogleReviewsTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleReviewsTaskGetResponseInfo> googleReviewsTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleReviewsTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleReviewsTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The returned results are specific to the indicated local establishment name, search engine, location and language parameters. We emulate set location and search engine with the highest accuracy so that the results you receive will match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus would not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleReviewsTaskGetAsync(String id, final ApiCallback<BusinessDataGoogleReviewsTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleReviewsTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleReviewsTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleReviewsTaskPost
     * @param businessDataGoogleReviewsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleReviewsTaskPostCall(List<BusinessDataGoogleReviewsTaskPostRequestInfo> businessDataGoogleReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataGoogleReviewsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/reviews/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleReviewsTaskPostValidateBeforeCall(List<BusinessDataGoogleReviewsTaskPostRequestInfo> businessDataGoogleReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleReviewsTaskPostCall(businessDataGoogleReviewsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides results from the “Reviews” element of Google SERPs. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/task_post/?bash&#39;
     * @param businessDataGoogleReviewsTaskPostRequestInfo  (optional)
     * @return BusinessDataGoogleReviewsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleReviewsTaskPostResponseInfo googleReviewsTaskPost(List<BusinessDataGoogleReviewsTaskPostRequestInfo> businessDataGoogleReviewsTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataGoogleReviewsTaskPostResponseInfo> localVarResp = googleReviewsTaskPostWithHttpInfo(businessDataGoogleReviewsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides results from the “Reviews” element of Google SERPs. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/task_post/?bash&#39;
     * @param businessDataGoogleReviewsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataGoogleReviewsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleReviewsTaskPostResponseInfo> googleReviewsTaskPostWithHttpInfo(List<BusinessDataGoogleReviewsTaskPostRequestInfo> businessDataGoogleReviewsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleReviewsTaskPostValidateBeforeCall(businessDataGoogleReviewsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleReviewsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides results from the “Reviews” element of Google SERPs. The results are specific to the selected location (see the List of Locations) and language (see the List of Languages) parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/task_post/?bash&#39;
     * @param businessDataGoogleReviewsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleReviewsTaskPostAsync(List<BusinessDataGoogleReviewsTaskPostRequestInfo> businessDataGoogleReviewsTaskPostRequestInfo, final ApiCallback<BusinessDataGoogleReviewsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleReviewsTaskPostValidateBeforeCall(businessDataGoogleReviewsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleReviewsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleReviewsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleReviewsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/google/reviews/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleReviewsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleReviewsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/tasks_ready/?bash&#39;
     * @return BusinessDataGoogleReviewsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataGoogleReviewsTasksReadyResponseInfo googleReviewsTasksReady() throws ApiException {
        ApiResponse<BusinessDataGoogleReviewsTasksReadyResponseInfo> localVarResp = googleReviewsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataGoogleReviewsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataGoogleReviewsTasksReadyResponseInfo> googleReviewsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleReviewsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleReviewsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/google/reviews/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleReviewsTasksReadyAsync(final ApiCallback<BusinessDataGoogleReviewsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleReviewsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataGoogleReviewsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialMediaFacebookLive
     * @param businessDataSocialMediaFacebookLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialMediaFacebookLiveCall(List<BusinessDataSocialMediaFacebookLiveRequestInfo> businessDataSocialMediaFacebookLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataSocialMediaFacebookLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/social_media/facebook/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialMediaFacebookLiveValidateBeforeCall(List<BusinessDataSocialMediaFacebookLiveRequestInfo> businessDataSocialMediaFacebookLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return socialMediaFacebookLiveCall(businessDataSocialMediaFacebookLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Social Media Facebook API will provide you with the number of likes a certain page received through the Facebook Like button embed. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/facebook/live/?bash&#39;
     * @param businessDataSocialMediaFacebookLiveRequestInfo  (optional)
     * @return BusinessDataSocialMediaFacebookLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataSocialMediaFacebookLiveResponseInfo socialMediaFacebookLive(List<BusinessDataSocialMediaFacebookLiveRequestInfo> businessDataSocialMediaFacebookLiveRequestInfo) throws ApiException {
        ApiResponse<BusinessDataSocialMediaFacebookLiveResponseInfo> localVarResp = socialMediaFacebookLiveWithHttpInfo(businessDataSocialMediaFacebookLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Social Media Facebook API will provide you with the number of likes a certain page received through the Facebook Like button embed. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/facebook/live/?bash&#39;
     * @param businessDataSocialMediaFacebookLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataSocialMediaFacebookLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataSocialMediaFacebookLiveResponseInfo> socialMediaFacebookLiveWithHttpInfo(List<BusinessDataSocialMediaFacebookLiveRequestInfo> businessDataSocialMediaFacebookLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = socialMediaFacebookLiveValidateBeforeCall(businessDataSocialMediaFacebookLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataSocialMediaFacebookLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Social Media Facebook API will provide you with the number of likes a certain page received through the Facebook Like button embed. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/facebook/live/?bash&#39;
     * @param businessDataSocialMediaFacebookLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialMediaFacebookLiveAsync(List<BusinessDataSocialMediaFacebookLiveRequestInfo> businessDataSocialMediaFacebookLiveRequestInfo, final ApiCallback<BusinessDataSocialMediaFacebookLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialMediaFacebookLiveValidateBeforeCall(businessDataSocialMediaFacebookLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataSocialMediaFacebookLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialMediaPinterestLive
     * @param businessDataSocialMediaPinterestLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialMediaPinterestLiveCall(List<BusinessDataSocialMediaPinterestLiveRequestInfo> businessDataSocialMediaPinterestLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataSocialMediaPinterestLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/social_media/pinterest/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialMediaPinterestLiveValidateBeforeCall(List<BusinessDataSocialMediaPinterestLiveRequestInfo> businessDataSocialMediaPinterestLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return socialMediaPinterestLiveCall(businessDataSocialMediaPinterestLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Social Media Pinterest API will provide you with data on pins made from the specified URLs. Pins on Pinterest correspond to content saves. For each specified page URL, you will get the number of content saves to Pinterest made using the Pinterest Save Button placed on that page. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/pinterest/live/?bash&#39;
     * @param businessDataSocialMediaPinterestLiveRequestInfo  (optional)
     * @return BusinessDataSocialMediaPinterestLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataSocialMediaPinterestLiveResponseInfo socialMediaPinterestLive(List<BusinessDataSocialMediaPinterestLiveRequestInfo> businessDataSocialMediaPinterestLiveRequestInfo) throws ApiException {
        ApiResponse<BusinessDataSocialMediaPinterestLiveResponseInfo> localVarResp = socialMediaPinterestLiveWithHttpInfo(businessDataSocialMediaPinterestLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Social Media Pinterest API will provide you with data on pins made from the specified URLs. Pins on Pinterest correspond to content saves. For each specified page URL, you will get the number of content saves to Pinterest made using the Pinterest Save Button placed on that page. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/pinterest/live/?bash&#39;
     * @param businessDataSocialMediaPinterestLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataSocialMediaPinterestLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataSocialMediaPinterestLiveResponseInfo> socialMediaPinterestLiveWithHttpInfo(List<BusinessDataSocialMediaPinterestLiveRequestInfo> businessDataSocialMediaPinterestLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = socialMediaPinterestLiveValidateBeforeCall(businessDataSocialMediaPinterestLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataSocialMediaPinterestLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Social Media Pinterest API will provide you with data on pins made from the specified URLs. Pins on Pinterest correspond to content saves. For each specified page URL, you will get the number of content saves to Pinterest made using the Pinterest Save Button placed on that page. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/pinterest/live/?bash&#39;
     * @param businessDataSocialMediaPinterestLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialMediaPinterestLiveAsync(List<BusinessDataSocialMediaPinterestLiveRequestInfo> businessDataSocialMediaPinterestLiveRequestInfo, final ApiCallback<BusinessDataSocialMediaPinterestLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialMediaPinterestLiveValidateBeforeCall(businessDataSocialMediaPinterestLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataSocialMediaPinterestLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for socialMediaRedditLive
     * @param businessDataSocialMediaRedditLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialMediaRedditLiveCall(List<BusinessDataSocialMediaRedditLiveRequestInfo> businessDataSocialMediaRedditLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataSocialMediaRedditLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/social_media/reddit/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call socialMediaRedditLiveValidateBeforeCall(List<BusinessDataSocialMediaRedditLiveRequestInfo> businessDataSocialMediaRedditLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return socialMediaRedditLiveCall(businessDataSocialMediaRedditLiveRequestInfo, _callback);

    }

    /**
     * 
     * Social Media Reddit API provides information for each share of the target webpage on Reddit. For each specified Reddit URL, you will get subreddit and author names, permalink, title, and the number of subreddit members. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/reddit/live/?bash&#39;
     * @param businessDataSocialMediaRedditLiveRequestInfo  (optional)
     * @return BusinessDataSocialMediaRedditLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataSocialMediaRedditLiveResponseInfo socialMediaRedditLive(List<BusinessDataSocialMediaRedditLiveRequestInfo> businessDataSocialMediaRedditLiveRequestInfo) throws ApiException {
        ApiResponse<BusinessDataSocialMediaRedditLiveResponseInfo> localVarResp = socialMediaRedditLiveWithHttpInfo(businessDataSocialMediaRedditLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * Social Media Reddit API provides information for each share of the target webpage on Reddit. For each specified Reddit URL, you will get subreddit and author names, permalink, title, and the number of subreddit members. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/reddit/live/?bash&#39;
     * @param businessDataSocialMediaRedditLiveRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataSocialMediaRedditLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataSocialMediaRedditLiveResponseInfo> socialMediaRedditLiveWithHttpInfo(List<BusinessDataSocialMediaRedditLiveRequestInfo> businessDataSocialMediaRedditLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = socialMediaRedditLiveValidateBeforeCall(businessDataSocialMediaRedditLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataSocialMediaRedditLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Social Media Reddit API provides information for each share of the target webpage on Reddit. For each specified Reddit URL, you will get subreddit and author names, permalink, title, and the number of subreddit members. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/social_media/reddit/live/?bash&#39;
     * @param businessDataSocialMediaRedditLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call socialMediaRedditLiveAsync(List<BusinessDataSocialMediaRedditLiveRequestInfo> businessDataSocialMediaRedditLiveRequestInfo, final ApiCallback<BusinessDataSocialMediaRedditLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = socialMediaRedditLiveValidateBeforeCall(businessDataSocialMediaRedditLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataSocialMediaRedditLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripadvisorReviewsTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorReviewsTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/reviews/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripadvisorReviewsTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tripadvisorReviewsTaskGet(Async)");
        }

        return tripadvisorReviewsTaskGetCall(id, _callback);

    }

    /**
     * 
     * This endpoint provides feedback data on businesses listed on the Tripadvisor platform, including their locations, ratings, review content and count. The results are specific to the URL path indicated in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataTripadvisorReviewsTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorReviewsTaskGetResponseInfo tripadvisorReviewsTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataTripadvisorReviewsTaskGetResponseInfo> localVarResp = tripadvisorReviewsTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint provides feedback data on businesses listed on the Tripadvisor platform, including their locations, ratings, review content and count. The results are specific to the URL path indicated in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataTripadvisorReviewsTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorReviewsTaskGetResponseInfo> tripadvisorReviewsTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = tripadvisorReviewsTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorReviewsTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint provides feedback data on businesses listed on the Tripadvisor platform, including their locations, ratings, review content and count. The results are specific to the URL path indicated in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorReviewsTaskGetAsync(String id, final ApiCallback<BusinessDataTripadvisorReviewsTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripadvisorReviewsTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorReviewsTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripadvisorReviewsTaskPost
     * @param businessDataTripadvisorReviewsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorReviewsTaskPostCall(List<BusinessDataTripadvisorReviewsTaskPostRequestInfo> businessDataTripadvisorReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataTripadvisorReviewsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/reviews/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripadvisorReviewsTaskPostValidateBeforeCall(List<BusinessDataTripadvisorReviewsTaskPostRequestInfo> businessDataTripadvisorReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return tripadvisorReviewsTaskPostCall(businessDataTripadvisorReviewsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides results from the “Reviews” element on the Tripadvisor platform. The results are specific to the URL path or keyword you indicate, and and the selected location (see the List of Locations). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/task_post/?bash&#39;
     * @param businessDataTripadvisorReviewsTaskPostRequestInfo  (optional)
     * @return BusinessDataTripadvisorReviewsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorReviewsTaskPostResponseInfo tripadvisorReviewsTaskPost(List<BusinessDataTripadvisorReviewsTaskPostRequestInfo> businessDataTripadvisorReviewsTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataTripadvisorReviewsTaskPostResponseInfo> localVarResp = tripadvisorReviewsTaskPostWithHttpInfo(businessDataTripadvisorReviewsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides results from the “Reviews” element on the Tripadvisor platform. The results are specific to the URL path or keyword you indicate, and and the selected location (see the List of Locations). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/task_post/?bash&#39;
     * @param businessDataTripadvisorReviewsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataTripadvisorReviewsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorReviewsTaskPostResponseInfo> tripadvisorReviewsTaskPostWithHttpInfo(List<BusinessDataTripadvisorReviewsTaskPostRequestInfo> businessDataTripadvisorReviewsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = tripadvisorReviewsTaskPostValidateBeforeCall(businessDataTripadvisorReviewsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorReviewsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides results from the “Reviews” element on the Tripadvisor platform. The results are specific to the URL path or keyword you indicate, and and the selected location (see the List of Locations). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/task_post/?bash&#39;
     * @param businessDataTripadvisorReviewsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorReviewsTaskPostAsync(List<BusinessDataTripadvisorReviewsTaskPostRequestInfo> businessDataTripadvisorReviewsTaskPostRequestInfo, final ApiCallback<BusinessDataTripadvisorReviewsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripadvisorReviewsTaskPostValidateBeforeCall(businessDataTripadvisorReviewsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorReviewsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripadvisorReviewsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorReviewsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/reviews/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripadvisorReviewsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tripadvisorReviewsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/tasks_ready/?bash&#39;
     * @return BusinessDataTripadvisorReviewsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorReviewsTasksReadyResponseInfo tripadvisorReviewsTasksReady() throws ApiException {
        ApiResponse<BusinessDataTripadvisorReviewsTasksReadyResponseInfo> localVarResp = tripadvisorReviewsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataTripadvisorReviewsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorReviewsTasksReadyResponseInfo> tripadvisorReviewsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tripadvisorReviewsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorReviewsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/reviews/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorReviewsTasksReadyAsync(final ApiCallback<BusinessDataTripadvisorReviewsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripadvisorReviewsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorReviewsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripadvisorSearchTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorSearchTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/search/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripadvisorSearchTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling tripadvisorSearchTaskGet(Async)");
        }

        return tripadvisorSearchTaskGetCall(id, _callback);

    }

    /**
     * 
     * This endpoint will provide you with data on businesses listed on the Tripadvisor platform. The results obtained through this endpoint are specific to the location (see the List of Tripadvisor Locations) and keyword parameters used in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataTripadvisorSearchTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorSearchTaskGetResponseInfo tripadvisorSearchTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataTripadvisorSearchTaskGetResponseInfo> localVarResp = tripadvisorSearchTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with data on businesses listed on the Tripadvisor platform. The results obtained through this endpoint are specific to the location (see the List of Tripadvisor Locations) and keyword parameters used in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataTripadvisorSearchTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorSearchTaskGetResponseInfo> tripadvisorSearchTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = tripadvisorSearchTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorSearchTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with data on businesses listed on the Tripadvisor platform. The results obtained through this endpoint are specific to the location (see the List of Tripadvisor Locations) and keyword parameters used in the POST request. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorSearchTaskGetAsync(String id, final ApiCallback<BusinessDataTripadvisorSearchTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripadvisorSearchTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorSearchTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripadvisorSearchTaskPost
     * @param businessDataTripadvisorSearchTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorSearchTaskPostCall(List<BusinessDataTripadvisorSearchTaskPostRequestInfo> businessDataTripadvisorSearchTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataTripadvisorSearchTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/search/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripadvisorSearchTaskPostValidateBeforeCall(List<BusinessDataTripadvisorSearchTaskPostRequestInfo> businessDataTripadvisorSearchTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return tripadvisorSearchTaskPostCall(businessDataTripadvisorSearchTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides a list of business profiles listed on the Tripadvisor platform. The returned results are relevant to the specified keyword and the selected location (see the List of Locations). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/task_post/?bash&#39;
     * @param businessDataTripadvisorSearchTaskPostRequestInfo  (optional)
     * @return BusinessDataTripadvisorSearchTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorSearchTaskPostResponseInfo tripadvisorSearchTaskPost(List<BusinessDataTripadvisorSearchTaskPostRequestInfo> businessDataTripadvisorSearchTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataTripadvisorSearchTaskPostResponseInfo> localVarResp = tripadvisorSearchTaskPostWithHttpInfo(businessDataTripadvisorSearchTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides a list of business profiles listed on the Tripadvisor platform. The returned results are relevant to the specified keyword and the selected location (see the List of Locations). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/task_post/?bash&#39;
     * @param businessDataTripadvisorSearchTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataTripadvisorSearchTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorSearchTaskPostResponseInfo> tripadvisorSearchTaskPostWithHttpInfo(List<BusinessDataTripadvisorSearchTaskPostRequestInfo> businessDataTripadvisorSearchTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = tripadvisorSearchTaskPostValidateBeforeCall(businessDataTripadvisorSearchTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorSearchTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides a list of business profiles listed on the Tripadvisor platform. The returned results are relevant to the specified keyword and the selected location (see the List of Locations). for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/task_post/?bash&#39;
     * @param businessDataTripadvisorSearchTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorSearchTaskPostAsync(List<BusinessDataTripadvisorSearchTaskPostRequestInfo> businessDataTripadvisorSearchTaskPostRequestInfo, final ApiCallback<BusinessDataTripadvisorSearchTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripadvisorSearchTaskPostValidateBeforeCall(businessDataTripadvisorSearchTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorSearchTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tripadvisorSearchTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorSearchTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/tripadvisor/search/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tripadvisorSearchTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tripadvisorSearchTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/tasks_ready/?bash&#39;
     * @return BusinessDataTripadvisorSearchTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTripadvisorSearchTasksReadyResponseInfo tripadvisorSearchTasksReady() throws ApiException {
        ApiResponse<BusinessDataTripadvisorSearchTasksReadyResponseInfo> localVarResp = tripadvisorSearchTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataTripadvisorSearchTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTripadvisorSearchTasksReadyResponseInfo> tripadvisorSearchTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tripadvisorSearchTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorSearchTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/tripadvisor/search/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tripadvisorSearchTasksReadyAsync(final ApiCallback<BusinessDataTripadvisorSearchTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = tripadvisorSearchTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataTripadvisorSearchTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustpilotReviewsTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotReviewsTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/trustpilot/reviews/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustpilotReviewsTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trustpilotReviewsTaskGet(Async)");
        }

        return trustpilotReviewsTaskGetCall(id, _callback);

    }

    /**
     * 
     * This endpoint provides reviews published on the Trustpilot platform The returned results are specific to the indicated business entity. We emulate set parameters with the highest accuracy so that the results you receive will match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus would not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataTrustpilotReviewsTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTrustpilotReviewsTaskGetResponseInfo trustpilotReviewsTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataTrustpilotReviewsTaskGetResponseInfo> localVarResp = trustpilotReviewsTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint provides reviews published on the Trustpilot platform The returned results are specific to the indicated business entity. We emulate set parameters with the highest accuracy so that the results you receive will match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus would not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataTrustpilotReviewsTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTrustpilotReviewsTaskGetResponseInfo> trustpilotReviewsTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = trustpilotReviewsTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotReviewsTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint provides reviews published on the Trustpilot platform The returned results are specific to the indicated business entity. We emulate set parameters with the highest accuracy so that the results you receive will match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus would not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotReviewsTaskGetAsync(String id, final ApiCallback<BusinessDataTrustpilotReviewsTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustpilotReviewsTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotReviewsTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustpilotReviewsTaskPost
     * @param businessDataTrustpilotReviewsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotReviewsTaskPostCall(List<BusinessDataTrustpilotReviewsTaskPostRequestInfo> businessDataTrustpilotReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataTrustpilotReviewsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/trustpilot/reviews/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustpilotReviewsTaskPostValidateBeforeCall(List<BusinessDataTrustpilotReviewsTaskPostRequestInfo> businessDataTrustpilotReviewsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return trustpilotReviewsTaskPostCall(businessDataTrustpilotReviewsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides reviews published on the Trustpilot platform for the local establishment specified in the domain field. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/task_post/?bash&#39;
     * @param businessDataTrustpilotReviewsTaskPostRequestInfo  (optional)
     * @return BusinessDataTrustpilotReviewsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTrustpilotReviewsTaskPostResponseInfo trustpilotReviewsTaskPost(List<BusinessDataTrustpilotReviewsTaskPostRequestInfo> businessDataTrustpilotReviewsTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataTrustpilotReviewsTaskPostResponseInfo> localVarResp = trustpilotReviewsTaskPostWithHttpInfo(businessDataTrustpilotReviewsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides reviews published on the Trustpilot platform for the local establishment specified in the domain field. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/task_post/?bash&#39;
     * @param businessDataTrustpilotReviewsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataTrustpilotReviewsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTrustpilotReviewsTaskPostResponseInfo> trustpilotReviewsTaskPostWithHttpInfo(List<BusinessDataTrustpilotReviewsTaskPostRequestInfo> businessDataTrustpilotReviewsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = trustpilotReviewsTaskPostValidateBeforeCall(businessDataTrustpilotReviewsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotReviewsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides reviews published on the Trustpilot platform for the local establishment specified in the domain field. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/task_post/?bash&#39;
     * @param businessDataTrustpilotReviewsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotReviewsTaskPostAsync(List<BusinessDataTrustpilotReviewsTaskPostRequestInfo> businessDataTrustpilotReviewsTaskPostRequestInfo, final ApiCallback<BusinessDataTrustpilotReviewsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustpilotReviewsTaskPostValidateBeforeCall(businessDataTrustpilotReviewsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotReviewsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustpilotReviewsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotReviewsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/trustpilot/reviews/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustpilotReviewsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return trustpilotReviewsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/tasks_ready/?bash&#39;
     * @return BusinessDataTrustpilotReviewsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTrustpilotReviewsTasksReadyResponseInfo trustpilotReviewsTasksReady() throws ApiException {
        ApiResponse<BusinessDataTrustpilotReviewsTasksReadyResponseInfo> localVarResp = trustpilotReviewsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataTrustpilotReviewsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTrustpilotReviewsTasksReadyResponseInfo> trustpilotReviewsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = trustpilotReviewsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotReviewsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/reviews/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotReviewsTasksReadyAsync(final ApiCallback<BusinessDataTrustpilotReviewsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustpilotReviewsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotReviewsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustpilotSearchTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotSearchTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/trustpilot/search/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustpilotSearchTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling trustpilotSearchTaskGet(Async)");
        }

        return trustpilotSearchTaskGetCall(id, _callback);

    }

    /**
     * 
     * This endpoint provides a list of business profiles listed on the Trustpilot platform. The returned results are relevant to the keyword specified in a POST request. We emulate set parameters with the highest accuracy so that the results you receive match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus will not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return BusinessDataTrustpilotSearchTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTrustpilotSearchTaskGetResponseInfo trustpilotSearchTaskGet(String id) throws ApiException {
        ApiResponse<BusinessDataTrustpilotSearchTaskGetResponseInfo> localVarResp = trustpilotSearchTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint provides a list of business profiles listed on the Trustpilot platform. The returned results are relevant to the keyword specified in a POST request. We emulate set parameters with the highest accuracy so that the results you receive match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus will not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;BusinessDataTrustpilotSearchTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTrustpilotSearchTaskGetResponseInfo> trustpilotSearchTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = trustpilotSearchTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotSearchTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint provides a list of business profiles listed on the Trustpilot platform. The returned results are relevant to the keyword specified in a POST request. We emulate set parameters with the highest accuracy so that the results you receive match the actual search results for the specified parameters at the time of task setting. You can always check the returned results accessing the check_url in the Incognito mode to make sure the received data is entirely relevant. Note that user preferences, search history, and other personalized search factors are ignored by our system and thus will not be reflected in the returned results. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotSearchTaskGetAsync(String id, final ApiCallback<BusinessDataTrustpilotSearchTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustpilotSearchTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotSearchTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustpilotSearchTaskPost
     * @param businessDataTrustpilotSearchTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotSearchTaskPostCall(List<BusinessDataTrustpilotSearchTaskPostRequestInfo> businessDataTrustpilotSearchTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessDataTrustpilotSearchTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/business_data/trustpilot/search/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustpilotSearchTaskPostValidateBeforeCall(List<BusinessDataTrustpilotSearchTaskPostRequestInfo> businessDataTrustpilotSearchTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return trustpilotSearchTaskPostCall(businessDataTrustpilotSearchTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides a list of business profiles listed on the Trustpilot platform. The returned results are relevant to the specified keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/task_post/?bash&#39;
     * @param businessDataTrustpilotSearchTaskPostRequestInfo  (optional)
     * @return BusinessDataTrustpilotSearchTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTrustpilotSearchTaskPostResponseInfo trustpilotSearchTaskPost(List<BusinessDataTrustpilotSearchTaskPostRequestInfo> businessDataTrustpilotSearchTaskPostRequestInfo) throws ApiException {
        ApiResponse<BusinessDataTrustpilotSearchTaskPostResponseInfo> localVarResp = trustpilotSearchTaskPostWithHttpInfo(businessDataTrustpilotSearchTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides a list of business profiles listed on the Trustpilot platform. The returned results are relevant to the specified keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/task_post/?bash&#39;
     * @param businessDataTrustpilotSearchTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;BusinessDataTrustpilotSearchTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTrustpilotSearchTaskPostResponseInfo> trustpilotSearchTaskPostWithHttpInfo(List<BusinessDataTrustpilotSearchTaskPostRequestInfo> businessDataTrustpilotSearchTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = trustpilotSearchTaskPostValidateBeforeCall(businessDataTrustpilotSearchTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotSearchTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides a list of business profiles listed on the Trustpilot platform. The returned results are relevant to the specified keyword. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/task_post/?bash&#39;
     * @param businessDataTrustpilotSearchTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotSearchTaskPostAsync(List<BusinessDataTrustpilotSearchTaskPostRequestInfo> businessDataTrustpilotSearchTaskPostRequestInfo, final ApiCallback<BusinessDataTrustpilotSearchTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustpilotSearchTaskPostValidateBeforeCall(businessDataTrustpilotSearchTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotSearchTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for trustpilotSearchTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotSearchTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/business_data/trustpilot/search/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call trustpilotSearchTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return trustpilotSearchTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/tasks_ready/?bash&#39;
     * @return BusinessDataTrustpilotSearchTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public BusinessDataTrustpilotSearchTasksReadyResponseInfo trustpilotSearchTasksReady() throws ApiException {
        ApiResponse<BusinessDataTrustpilotSearchTasksReadyResponseInfo> localVarResp = trustpilotSearchTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;BusinessDataTrustpilotSearchTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BusinessDataTrustpilotSearchTasksReadyResponseInfo> trustpilotSearchTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = trustpilotSearchTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotSearchTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you don’t use the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/business_data/trustpilot/search/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call trustpilotSearchTasksReadyAsync(final ApiCallback<BusinessDataTrustpilotSearchTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = trustpilotSearchTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BusinessDataTrustpilotSearchTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
