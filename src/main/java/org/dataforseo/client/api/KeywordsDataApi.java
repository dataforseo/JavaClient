/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.api;

import org.dataforseo.client.ApiCallback;
import org.dataforseo.client.ApiClient;
import org.dataforseo.client.ApiException;
import org.dataforseo.client.ApiResponse;
import org.dataforseo.client.Configuration;
import org.dataforseo.client.Pair;
import org.dataforseo.client.ProgressRequestBody;
import org.dataforseo.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.dataforseo.client.model.KeywordsDataBingKeywordPerformanceLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordPerformanceLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordPerformanceTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordPerformanceTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordPerformanceTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForKeywordsLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForKeywordsLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForSiteLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForSiteLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForSiteTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForSiteTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForSiteTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingLanguagesResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingLocationsResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeHistoryLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeHistoryLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataBingSearchVolumeTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsDemographyLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsDemographyLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsExploreLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsExploreLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsLocationsCountryResponseInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsLocationsResponseInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataErrorsRequestInfo;
import org.dataforseo.client.model.KeywordsDataErrorsResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsLanguagesResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsLocationsCountryResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsLocationsResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleAdsStatusResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsCategoriesResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsExploreLiveRequestInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsExploreLiveResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsExploreTaskGetResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsExploreTaskPostRequestInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsExploreTaskPostResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsLanguagesResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsLocationsCountryResponseInfo;
import org.dataforseo.client.model.KeywordsDataGoogleTrendsLocationsResponseInfo;
import org.dataforseo.client.model.KeywordsDataIdListRequestInfo;
import org.dataforseo.client.model.KeywordsDataIdListResponseInfo;
import org.dataforseo.client.model.KeywordsDataTaskRequestInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class KeywordsDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public KeywordsDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public KeywordsDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for bingKeywordPerformanceLive
     * @param keywordsDataBingKeywordPerformanceLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceLiveCall(List<KeywordsDataBingKeywordPerformanceLiveRequestInfo> keywordsDataBingKeywordPerformanceLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingKeywordPerformanceLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keyword_performance/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordPerformanceLiveValidateBeforeCall(List<KeywordsDataBingKeywordPerformanceLiveRequestInfo> keywordsDataBingKeywordPerformanceLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingKeywordPerformanceLiveCall(keywordsDataBingKeywordPerformanceLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/live/?bash&#39;
     * @param keywordsDataBingKeywordPerformanceLiveRequestInfo  (optional)
     * @return KeywordsDataBingKeywordPerformanceLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordPerformanceLiveResponseInfo bingKeywordPerformanceLive(List<KeywordsDataBingKeywordPerformanceLiveRequestInfo> keywordsDataBingKeywordPerformanceLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordPerformanceLiveResponseInfo> localVarResp = bingKeywordPerformanceLiveWithHttpInfo(keywordsDataBingKeywordPerformanceLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/live/?bash&#39;
     * @param keywordsDataBingKeywordPerformanceLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingKeywordPerformanceLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordPerformanceLiveResponseInfo> bingKeywordPerformanceLiveWithHttpInfo(List<KeywordsDataBingKeywordPerformanceLiveRequestInfo> keywordsDataBingKeywordPerformanceLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordPerformanceLiveValidateBeforeCall(keywordsDataBingKeywordPerformanceLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/live/?bash&#39;
     * @param keywordsDataBingKeywordPerformanceLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceLiveAsync(List<KeywordsDataBingKeywordPerformanceLiveRequestInfo> keywordsDataBingKeywordPerformanceLiveRequestInfo, final ApiCallback<KeywordsDataBingKeywordPerformanceLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordPerformanceLiveValidateBeforeCall(keywordsDataBingKeywordPerformanceLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordPerformanceTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keyword_performance/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordPerformanceTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingKeywordPerformanceTaskGet(Async)");
        }

        return bingKeywordPerformanceTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataBingKeywordPerformanceTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordPerformanceTaskGetResponseInfo bingKeywordPerformanceTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordPerformanceTaskGetResponseInfo> localVarResp = bingKeywordPerformanceTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataBingKeywordPerformanceTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordPerformanceTaskGetResponseInfo> bingKeywordPerformanceTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordPerformanceTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceTaskGetAsync(String id, final ApiCallback<KeywordsDataBingKeywordPerformanceTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordPerformanceTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordPerformanceTaskPost
     * @param keywordsDataBingKeywordPerformanceTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceTaskPostCall(List<KeywordsDataBingKeywordPerformanceTaskPostRequestInfo> keywordsDataBingKeywordPerformanceTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingKeywordPerformanceTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keyword_performance/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordPerformanceTaskPostValidateBeforeCall(List<KeywordsDataBingKeywordPerformanceTaskPostRequestInfo> keywordsDataBingKeywordPerformanceTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingKeywordPerformanceTaskPostCall(keywordsDataBingKeywordPerformanceTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/task_post/?bash&#39;
     * @param keywordsDataBingKeywordPerformanceTaskPostRequestInfo  (optional)
     * @return KeywordsDataBingKeywordPerformanceTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordPerformanceTaskPostResponseInfo bingKeywordPerformanceTaskPost(List<KeywordsDataBingKeywordPerformanceTaskPostRequestInfo> keywordsDataBingKeywordPerformanceTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordPerformanceTaskPostResponseInfo> localVarResp = bingKeywordPerformanceTaskPostWithHttpInfo(keywordsDataBingKeywordPerformanceTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/task_post/?bash&#39;
     * @param keywordsDataBingKeywordPerformanceTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingKeywordPerformanceTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordPerformanceTaskPostResponseInfo> bingKeywordPerformanceTaskPostWithHttpInfo(List<KeywordsDataBingKeywordPerformanceTaskPostRequestInfo> keywordsDataBingKeywordPerformanceTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordPerformanceTaskPostValidateBeforeCall(keywordsDataBingKeywordPerformanceTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ You can receive a set of keyword performance stats for a group of keywords depending on the specified match type, location and language parameters. Ad position, clicks, impressions, and other keyword metrics are aggregated for the last month for one or all of the following device types: mobile, desktop, tablet. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/task_post/?bash&#39;
     * @param keywordsDataBingKeywordPerformanceTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceTaskPostAsync(List<KeywordsDataBingKeywordPerformanceTaskPostRequestInfo> keywordsDataBingKeywordPerformanceTaskPostRequestInfo, final ApiCallback<KeywordsDataBingKeywordPerformanceTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordPerformanceTaskPostValidateBeforeCall(keywordsDataBingKeywordPerformanceTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordPerformanceTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keyword_performance/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordPerformanceTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingKeywordPerformanceTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/tasks_ready/?bash&#39;
     * @return KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo bingKeywordPerformanceTasksReady() throws ApiException {
        ApiResponse<KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo> localVarResp = bingKeywordPerformanceTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo> bingKeywordPerformanceTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingKeywordPerformanceTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordPerformanceTasksReadyAsync(final ApiCallback<KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordPerformanceTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForKeywordsLive
     * @param keywordsDataBingKeywordsForKeywordsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsLiveCall(List<KeywordsDataBingKeywordsForKeywordsLiveRequestInfo> keywordsDataBingKeywordsForKeywordsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingKeywordsForKeywordsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_keywords/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForKeywordsLiveValidateBeforeCall(List<KeywordsDataBingKeywordsForKeywordsLiveRequestInfo> keywordsDataBingKeywordsForKeywordsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingKeywordsForKeywordsLiveCall(keywordsDataBingKeywordsForKeywordsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will select the relevant keywords for the specified ones. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/live/?bash&#39;
     * @param keywordsDataBingKeywordsForKeywordsLiveRequestInfo  (optional)
     * @return KeywordsDataBingKeywordsForKeywordsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForKeywordsLiveResponseInfo bingKeywordsForKeywordsLive(List<KeywordsDataBingKeywordsForKeywordsLiveRequestInfo> keywordsDataBingKeywordsForKeywordsLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForKeywordsLiveResponseInfo> localVarResp = bingKeywordsForKeywordsLiveWithHttpInfo(keywordsDataBingKeywordsForKeywordsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will select the relevant keywords for the specified ones. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/live/?bash&#39;
     * @param keywordsDataBingKeywordsForKeywordsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForKeywordsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForKeywordsLiveResponseInfo> bingKeywordsForKeywordsLiveWithHttpInfo(List<KeywordsDataBingKeywordsForKeywordsLiveRequestInfo> keywordsDataBingKeywordsForKeywordsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForKeywordsLiveValidateBeforeCall(keywordsDataBingKeywordsForKeywordsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will select the relevant keywords for the specified ones. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/live/?bash&#39;
     * @param keywordsDataBingKeywordsForKeywordsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsLiveAsync(List<KeywordsDataBingKeywordsForKeywordsLiveRequestInfo> keywordsDataBingKeywordsForKeywordsLiveRequestInfo, final ApiCallback<KeywordsDataBingKeywordsForKeywordsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForKeywordsLiveValidateBeforeCall(keywordsDataBingKeywordsForKeywordsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForKeywordsTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_keywords/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForKeywordsTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingKeywordsForKeywordsTaskGet(Async)");
        }

        return bingKeywordsForKeywordsTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ This endpoint will select relevant keywords for the specified terms. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo bingKeywordsForKeywordsTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo> localVarResp = bingKeywordsForKeywordsTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will select relevant keywords for the specified terms. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo> bingKeywordsForKeywordsTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForKeywordsTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will select relevant keywords for the specified terms. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsTaskGetAsync(String id, final ApiCallback<KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForKeywordsTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForKeywordsTaskPost
     * @param keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsTaskPostCall(List<KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo> keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_keywords/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForKeywordsTaskPostValidateBeforeCall(List<KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo> keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingKeywordsForKeywordsTaskPostCall(keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will select relevant keywords for the specified terms. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/task_post/?bash&#39;
     * @param keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @return KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo bingKeywordsForKeywordsTaskPost(List<KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo> keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo> localVarResp = bingKeywordsForKeywordsTaskPostWithHttpInfo(keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will select relevant keywords for the specified terms. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/task_post/?bash&#39;
     * @param keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo> bingKeywordsForKeywordsTaskPostWithHttpInfo(List<KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo> keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForKeywordsTaskPostValidateBeforeCall(keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will select relevant keywords for the specified terms. Set up to 200 keywords and get the results, which are suggested by Bing Ads for your query. You can get up to 3000 keyword suggestions using this function. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/task_post/?bash&#39;
     * @param keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsTaskPostAsync(List<KeywordsDataBingKeywordsForKeywordsTaskPostRequestInfo> keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo, final ApiCallback<KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForKeywordsTaskPostValidateBeforeCall(keywordsDataBingKeywordsForKeywordsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForKeywordsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_keywords/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForKeywordsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingKeywordsForKeywordsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/tasks_ready/?bash&#39;
     * @return KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo bingKeywordsForKeywordsTasksReady() throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo> localVarResp = bingKeywordsForKeywordsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo> bingKeywordsForKeywordsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForKeywordsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_keywords/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForKeywordsTasksReadyAsync(final ApiCallback<KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForKeywordsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForKeywordsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForSiteLive
     * @param keywordsDataBingKeywordsForSiteLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteLiveCall(List<KeywordsDataBingKeywordsForSiteLiveRequestInfo> keywordsDataBingKeywordsForSiteLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingKeywordsForSiteLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_site/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForSiteLiveValidateBeforeCall(List<KeywordsDataBingKeywordsForSiteLiveRequestInfo> keywordsDataBingKeywordsForSiteLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingKeywordsForSiteLiveCall(keywordsDataBingKeywordsForSiteLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌This endpoint will provide you with a list of keywords relevant to the specified URL along with their search volume for the last month, search volume trend for up to 24 past months (for estimating search volume dynamics), current cost-per-click and competition values for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/live/?bash&#39;
     * @param keywordsDataBingKeywordsForSiteLiveRequestInfo  (optional)
     * @return KeywordsDataBingKeywordsForSiteLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForSiteLiveResponseInfo bingKeywordsForSiteLive(List<KeywordsDataBingKeywordsForSiteLiveRequestInfo> keywordsDataBingKeywordsForSiteLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForSiteLiveResponseInfo> localVarResp = bingKeywordsForSiteLiveWithHttpInfo(keywordsDataBingKeywordsForSiteLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌This endpoint will provide you with a list of keywords relevant to the specified URL along with their search volume for the last month, search volume trend for up to 24 past months (for estimating search volume dynamics), current cost-per-click and competition values for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/live/?bash&#39;
     * @param keywordsDataBingKeywordsForSiteLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForSiteLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForSiteLiveResponseInfo> bingKeywordsForSiteLiveWithHttpInfo(List<KeywordsDataBingKeywordsForSiteLiveRequestInfo> keywordsDataBingKeywordsForSiteLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForSiteLiveValidateBeforeCall(keywordsDataBingKeywordsForSiteLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌This endpoint will provide you with a list of keywords relevant to the specified URL along with their search volume for the last month, search volume trend for up to 24 past months (for estimating search volume dynamics), current cost-per-click and competition values for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/live/?bash&#39;
     * @param keywordsDataBingKeywordsForSiteLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteLiveAsync(List<KeywordsDataBingKeywordsForSiteLiveRequestInfo> keywordsDataBingKeywordsForSiteLiveRequestInfo, final ApiCallback<KeywordsDataBingKeywordsForSiteLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForSiteLiveValidateBeforeCall(keywordsDataBingKeywordsForSiteLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForSiteTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_site/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForSiteTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingKeywordsForSiteTaskGet(Async)");
        }

        return bingKeywordsForSiteTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with a list of keywords relevant to the specified website along with their search volume for the last month, search volume trend for the last year (for estimating search volume dynamics), current cost-per-click and competition level for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataBingKeywordsForSiteTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForSiteTaskGetResponseInfo bingKeywordsForSiteTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForSiteTaskGetResponseInfo> localVarResp = bingKeywordsForSiteTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with a list of keywords relevant to the specified website along with their search volume for the last month, search volume trend for the last year (for estimating search volume dynamics), current cost-per-click and competition level for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForSiteTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForSiteTaskGetResponseInfo> bingKeywordsForSiteTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForSiteTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with a list of keywords relevant to the specified website along with their search volume for the last month, search volume trend for the last year (for estimating search volume dynamics), current cost-per-click and competition level for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteTaskGetAsync(String id, final ApiCallback<KeywordsDataBingKeywordsForSiteTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForSiteTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForSiteTaskPost
     * @param keywordsDataBingKeywordsForSiteTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteTaskPostCall(List<KeywordsDataBingKeywordsForSiteTaskPostRequestInfo> keywordsDataBingKeywordsForSiteTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingKeywordsForSiteTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_site/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForSiteTaskPostValidateBeforeCall(List<KeywordsDataBingKeywordsForSiteTaskPostRequestInfo> keywordsDataBingKeywordsForSiteTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingKeywordsForSiteTaskPostCall(keywordsDataBingKeywordsForSiteTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌This endpoint will provide you with a list of keywords relevant to the specified website along with their search volume for the last month, search volume trend for up to 24 past months (for estimating search volume dynamics), current cost-per-click and competition level for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/task_post/?bash&#39;
     * @param keywordsDataBingKeywordsForSiteTaskPostRequestInfo  (optional)
     * @return KeywordsDataBingKeywordsForSiteTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForSiteTaskPostResponseInfo bingKeywordsForSiteTaskPost(List<KeywordsDataBingKeywordsForSiteTaskPostRequestInfo> keywordsDataBingKeywordsForSiteTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForSiteTaskPostResponseInfo> localVarResp = bingKeywordsForSiteTaskPostWithHttpInfo(keywordsDataBingKeywordsForSiteTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌This endpoint will provide you with a list of keywords relevant to the specified website along with their search volume for the last month, search volume trend for up to 24 past months (for estimating search volume dynamics), current cost-per-click and competition level for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/task_post/?bash&#39;
     * @param keywordsDataBingKeywordsForSiteTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForSiteTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForSiteTaskPostResponseInfo> bingKeywordsForSiteTaskPostWithHttpInfo(List<KeywordsDataBingKeywordsForSiteTaskPostRequestInfo> keywordsDataBingKeywordsForSiteTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForSiteTaskPostValidateBeforeCall(keywordsDataBingKeywordsForSiteTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌This endpoint will provide you with a list of keywords relevant to the specified website along with their search volume for the last month, search volume trend for up to 24 past months (for estimating search volume dynamics), current cost-per-click and competition level for paid search. The maximum number of returned keywords is 3000. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/task_post/?bash&#39;
     * @param keywordsDataBingKeywordsForSiteTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteTaskPostAsync(List<KeywordsDataBingKeywordsForSiteTaskPostRequestInfo> keywordsDataBingKeywordsForSiteTaskPostRequestInfo, final ApiCallback<KeywordsDataBingKeywordsForSiteTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForSiteTaskPostValidateBeforeCall(keywordsDataBingKeywordsForSiteTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingKeywordsForSiteTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keywords_for_site/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingKeywordsForSiteTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingKeywordsForSiteTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/tasks_ready/?bash&#39;
     * @return KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo bingKeywordsForSiteTasksReady() throws ApiException {
        ApiResponse<KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo> localVarResp = bingKeywordsForSiteTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo> bingKeywordsForSiteTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingKeywordsForSiteTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keywords_for_site/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingKeywordsForSiteTasksReadyAsync(final ApiCallback<KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingKeywordsForSiteTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordsForSiteTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeHistoryLive
     * @param keywordsDataBingSearchVolumeHistoryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryLiveCall(List<KeywordsDataBingSearchVolumeHistoryLiveRequestInfo> keywordsDataBingSearchVolumeHistoryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingSearchVolumeHistoryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume_history/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeHistoryLiveValidateBeforeCall(List<KeywordsDataBingSearchVolumeHistoryLiveRequestInfo> keywordsDataBingSearchVolumeHistoryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingSearchVolumeHistoryLiveCall(keywordsDataBingSearchVolumeHistoryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌This endpoint will provide you with historical search volume data for up to 1000 keywords in one request. You can get search volume for keywords in monthly, weekly, or daily format and specify the device type. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/live/?bash&#39;
     * @param keywordsDataBingSearchVolumeHistoryLiveRequestInfo  (optional)
     * @return KeywordsDataBingSearchVolumeHistoryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeHistoryLiveResponseInfo bingSearchVolumeHistoryLive(List<KeywordsDataBingSearchVolumeHistoryLiveRequestInfo> keywordsDataBingSearchVolumeHistoryLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeHistoryLiveResponseInfo> localVarResp = bingSearchVolumeHistoryLiveWithHttpInfo(keywordsDataBingSearchVolumeHistoryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌This endpoint will provide you with historical search volume data for up to 1000 keywords in one request. You can get search volume for keywords in monthly, weekly, or daily format and specify the device type. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/live/?bash&#39;
     * @param keywordsDataBingSearchVolumeHistoryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeHistoryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeHistoryLiveResponseInfo> bingSearchVolumeHistoryLiveWithHttpInfo(List<KeywordsDataBingSearchVolumeHistoryLiveRequestInfo> keywordsDataBingSearchVolumeHistoryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeHistoryLiveValidateBeforeCall(keywordsDataBingSearchVolumeHistoryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌This endpoint will provide you with historical search volume data for up to 1000 keywords in one request. You can get search volume for keywords in monthly, weekly, or daily format and specify the device type. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/live/?bash&#39;
     * @param keywordsDataBingSearchVolumeHistoryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryLiveAsync(List<KeywordsDataBingSearchVolumeHistoryLiveRequestInfo> keywordsDataBingSearchVolumeHistoryLiveRequestInfo, final ApiCallback<KeywordsDataBingSearchVolumeHistoryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeHistoryLiveValidateBeforeCall(keywordsDataBingSearchVolumeHistoryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeHistoryTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume_history/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeHistoryTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingSearchVolumeHistoryTaskGet(Async)");
        }

        return bingSearchVolumeHistoryTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo bingSearchVolumeHistoryTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo> localVarResp = bingSearchVolumeHistoryTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo> bingSearchVolumeHistoryTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeHistoryTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryTaskGetAsync(String id, final ApiCallback<KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeHistoryTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeHistoryTaskPost
     * @param keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryTaskPostCall(List<KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo> keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume_history/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeHistoryTaskPostValidateBeforeCall(List<KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo> keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingSearchVolumeHistoryTaskPostCall(keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with historical search volume data for up to 1000 keywords in one request. You can get search volume for keywords in monthly, weekly, or daily format and specify the device type. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/task_post/?bash&#39;
     * @param keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo  (optional)
     * @return KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo bingSearchVolumeHistoryTaskPost(List<KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo> keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo> localVarResp = bingSearchVolumeHistoryTaskPostWithHttpInfo(keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with historical search volume data for up to 1000 keywords in one request. You can get search volume for keywords in monthly, weekly, or daily format and specify the device type. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/task_post/?bash&#39;
     * @param keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo> bingSearchVolumeHistoryTaskPostWithHttpInfo(List<KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo> keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeHistoryTaskPostValidateBeforeCall(keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with historical search volume data for up to 1000 keywords in one request. You can get search volume for keywords in monthly, weekly, or daily format and specify the device type. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/task_post/?bash&#39;
     * @param keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryTaskPostAsync(List<KeywordsDataBingSearchVolumeHistoryTaskPostRequestInfo> keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo, final ApiCallback<KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeHistoryTaskPostValidateBeforeCall(keywordsDataBingSearchVolumeHistoryTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeHistoryTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume_history/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeHistoryTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingSearchVolumeHistoryTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/tasks_ready/?bash&#39;
     * @return KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo bingSearchVolumeHistoryTasksReady() throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo> localVarResp = bingSearchVolumeHistoryTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo> bingSearchVolumeHistoryTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeHistoryTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeHistoryTasksReadyAsync(final ApiCallback<KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeHistoryTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeLive
     * @param keywordsDataBingSearchVolumeLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeLiveCall(List<KeywordsDataBingSearchVolumeLiveRequestInfo> keywordsDataBingSearchVolumeLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingSearchVolumeLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeLiveValidateBeforeCall(List<KeywordsDataBingSearchVolumeLiveRequestInfo> keywordsDataBingSearchVolumeLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingSearchVolumeLiveCall(keywordsDataBingSearchVolumeLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌This endpoint will provide you with search volume data for the last month, search volume trend for up to 24 past months (that will let you estimate search volume dynamics), current cost-per-click and competition values for paid search. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/live/?bash&#39;
     * @param keywordsDataBingSearchVolumeLiveRequestInfo  (optional)
     * @return KeywordsDataBingSearchVolumeLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeLiveResponseInfo bingSearchVolumeLive(List<KeywordsDataBingSearchVolumeLiveRequestInfo> keywordsDataBingSearchVolumeLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeLiveResponseInfo> localVarResp = bingSearchVolumeLiveWithHttpInfo(keywordsDataBingSearchVolumeLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌This endpoint will provide you with search volume data for the last month, search volume trend for up to 24 past months (that will let you estimate search volume dynamics), current cost-per-click and competition values for paid search. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/live/?bash&#39;
     * @param keywordsDataBingSearchVolumeLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeLiveResponseInfo> bingSearchVolumeLiveWithHttpInfo(List<KeywordsDataBingSearchVolumeLiveRequestInfo> keywordsDataBingSearchVolumeLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeLiveValidateBeforeCall(keywordsDataBingSearchVolumeLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌This endpoint will provide you with search volume data for the last month, search volume trend for up to 24 past months (that will let you estimate search volume dynamics), current cost-per-click and competition values for paid search. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/live/?bash&#39;
     * @param keywordsDataBingSearchVolumeLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeLiveAsync(List<KeywordsDataBingSearchVolumeLiveRequestInfo> keywordsDataBingSearchVolumeLiveRequestInfo, final ApiCallback<KeywordsDataBingSearchVolumeLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeLiveValidateBeforeCall(keywordsDataBingSearchVolumeLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling bingSearchVolumeTaskGet(Async)");
        }

        return bingSearchVolumeTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataBingSearchVolumeTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeTaskGetResponseInfo bingSearchVolumeTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeTaskGetResponseInfo> localVarResp = bingSearchVolumeTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeTaskGetResponseInfo> bingSearchVolumeTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeTaskGetAsync(String id, final ApiCallback<KeywordsDataBingSearchVolumeTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeTaskPost
     * @param keywordsDataBingSearchVolumeTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeTaskPostCall(List<KeywordsDataBingSearchVolumeTaskPostRequestInfo> keywordsDataBingSearchVolumeTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataBingSearchVolumeTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeTaskPostValidateBeforeCall(List<KeywordsDataBingSearchVolumeTaskPostRequestInfo> keywordsDataBingSearchVolumeTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return bingSearchVolumeTaskPostCall(keywordsDataBingSearchVolumeTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with search volume data for the last month, search volume trend for up to 24 past months (that will let you estimate search volume dynamics), current cost-per-click and competition values for paid search. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/task_post/?bash&#39;
     * @param keywordsDataBingSearchVolumeTaskPostRequestInfo  (optional)
     * @return KeywordsDataBingSearchVolumeTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeTaskPostResponseInfo bingSearchVolumeTaskPost(List<KeywordsDataBingSearchVolumeTaskPostRequestInfo> keywordsDataBingSearchVolumeTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeTaskPostResponseInfo> localVarResp = bingSearchVolumeTaskPostWithHttpInfo(keywordsDataBingSearchVolumeTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with search volume data for the last month, search volume trend for up to 24 past months (that will let you estimate search volume dynamics), current cost-per-click and competition values for paid search. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/task_post/?bash&#39;
     * @param keywordsDataBingSearchVolumeTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeTaskPostResponseInfo> bingSearchVolumeTaskPostWithHttpInfo(List<KeywordsDataBingSearchVolumeTaskPostRequestInfo> keywordsDataBingSearchVolumeTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeTaskPostValidateBeforeCall(keywordsDataBingSearchVolumeTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with search volume data for the last month, search volume trend for up to 24 past months (that will let you estimate search volume dynamics), current cost-per-click and competition values for paid search. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/task_post/?bash&#39;
     * @param keywordsDataBingSearchVolumeTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeTaskPostAsync(List<KeywordsDataBingSearchVolumeTaskPostRequestInfo> keywordsDataBingSearchVolumeTaskPostRequestInfo, final ApiCallback<KeywordsDataBingSearchVolumeTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeTaskPostValidateBeforeCall(keywordsDataBingSearchVolumeTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for bingSearchVolumeTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bingSearchVolumeTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return bingSearchVolumeTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/tasks_ready/?bash&#39;
     * @return KeywordsDataBingSearchVolumeTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeTasksReadyResponseInfo bingSearchVolumeTasksReady() throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeTasksReadyResponseInfo> localVarResp = bingSearchVolumeTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeTasksReadyResponseInfo> bingSearchVolumeTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = bingSearchVolumeTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bingSearchVolumeTasksReadyAsync(final ApiCallback<KeywordsDataBingSearchVolumeTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = bingSearchVolumeTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clickstreamDataBulkSearchVolumeLive
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickstreamDataBulkSearchVolumeLiveCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/clickstream_data/bulk_search_volume/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clickstreamDataBulkSearchVolumeLiveValidateBeforeCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return clickstreamDataBulkSearchVolumeLiveCall(keywordsDataTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌  The Bulk Clickstream Search Volume endpoint of DataForSEO Keywords Data API is designed to provide clickstream-based search volume data for up to 1000 keywords in a single Live request. What’s more, it offers historical search volume values for up to 12 months (depending on keywords, location, and language parameters). for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/bulk_search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo clickstreamDataBulkSearchVolumeLive(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo> localVarResp = clickstreamDataBulkSearchVolumeLiveWithHttpInfo(keywordsDataTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌  The Bulk Clickstream Search Volume endpoint of DataForSEO Keywords Data API is designed to provide clickstream-based search volume data for up to 1000 keywords in a single Live request. What’s more, it offers historical search volume values for up to 12 months (depending on keywords, location, and language parameters). for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/bulk_search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo> clickstreamDataBulkSearchVolumeLiveWithHttpInfo(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = clickstreamDataBulkSearchVolumeLiveValidateBeforeCall(keywordsDataTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌  The Bulk Clickstream Search Volume endpoint of DataForSEO Keywords Data API is designed to provide clickstream-based search volume data for up to 1000 keywords in a single Live request. What’s more, it offers historical search volume values for up to 12 months (depending on keywords, location, and language parameters). for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/bulk_search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickstreamDataBulkSearchVolumeLiveAsync(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback<KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = clickstreamDataBulkSearchVolumeLiveValidateBeforeCall(keywordsDataTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataBulkSearchVolumeLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clickstreamDataDataforseoSearchVolumeLive
     * @param keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickstreamDataDataforseoSearchVolumeLiveCall(List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo> keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/clickstream_data/dataforseo_search_volume/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clickstreamDataDataforseoSearchVolumeLiveValidateBeforeCall(List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo> keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return clickstreamDataDataforseoSearchVolumeLiveCall(keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/dataforseo_search_volume/live/?bash&#39;
     * @param keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo  (optional)
     * @return KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo clickstreamDataDataforseoSearchVolumeLive(List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo> keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo> localVarResp = clickstreamDataDataforseoSearchVolumeLiveWithHttpInfo(keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/dataforseo_search_volume/live/?bash&#39;
     * @param keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo> clickstreamDataDataforseoSearchVolumeLiveWithHttpInfo(List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo> keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = clickstreamDataDataforseoSearchVolumeLiveValidateBeforeCall(keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/dataforseo_search_volume/live/?bash&#39;
     * @param keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickstreamDataDataforseoSearchVolumeLiveAsync(List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo> keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo, final ApiCallback<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = clickstreamDataDataforseoSearchVolumeLiveValidateBeforeCall(keywordsDataClickstreamDataDataforseoSearchVolumeLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for clickstreamDataGlobalSearchVolumeLive
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickstreamDataGlobalSearchVolumeLiveCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/clickstream_data/global_search_volume/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clickstreamDataGlobalSearchVolumeLiveValidateBeforeCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return clickstreamDataGlobalSearchVolumeLiveCall(keywordsDataTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌  The Clickstream Global Search Volume endpoint of DataForSEO Keywords Data API is designed to provide clickstream-based search volume data for up to 1000 keywords in a single Live request. What’s more, it offers geographical distribution of clickstream search volume values across all available locations. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/global_search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo clickstreamDataGlobalSearchVolumeLive(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo> localVarResp = clickstreamDataGlobalSearchVolumeLiveWithHttpInfo(keywordsDataTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌  The Clickstream Global Search Volume endpoint of DataForSEO Keywords Data API is designed to provide clickstream-based search volume data for up to 1000 keywords in a single Live request. What’s more, it offers geographical distribution of clickstream search volume values across all available locations. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/global_search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo> clickstreamDataGlobalSearchVolumeLiveWithHttpInfo(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = clickstreamDataGlobalSearchVolumeLiveValidateBeforeCall(keywordsDataTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌  The Clickstream Global Search Volume endpoint of DataForSEO Keywords Data API is designed to provide clickstream-based search volume data for up to 1000 keywords in a single Live request. What’s more, it offers geographical distribution of clickstream search volume values across all available locations. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/global_search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clickstreamDataGlobalSearchVolumeLiveAsync(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback<KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = clickstreamDataGlobalSearchVolumeLiveValidateBeforeCall(keywordsDataTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataGlobalSearchVolumeLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataforseoTrendsDemographyLive
     * @param keywordsDataDataforseoTrendsDemographyLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsDemographyLiveCall(List<KeywordsDataDataforseoTrendsDemographyLiveRequestInfo> keywordsDataDataforseoTrendsDemographyLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataDataforseoTrendsDemographyLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/dataforseo_trends/demography/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataforseoTrendsDemographyLiveValidateBeforeCall(List<KeywordsDataDataforseoTrendsDemographyLiveRequestInfo> keywordsDataDataforseoTrendsDemographyLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return dataforseoTrendsDemographyLiveCall(keywordsDataDataforseoTrendsDemographyLiveRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint will provide you with the demographic breakdown (by age and gender) of keyword popularity per each specified term based on DataForSEO Trends data. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/demography/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsDemographyLiveRequestInfo  (optional)
     * @return KeywordsDataDataforseoTrendsDemographyLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataDataforseoTrendsDemographyLiveResponseInfo dataforseoTrendsDemographyLive(List<KeywordsDataDataforseoTrendsDemographyLiveRequestInfo> keywordsDataDataforseoTrendsDemographyLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataDataforseoTrendsDemographyLiveResponseInfo> localVarResp = dataforseoTrendsDemographyLiveWithHttpInfo(keywordsDataDataforseoTrendsDemographyLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with the demographic breakdown (by age and gender) of keyword popularity per each specified term based on DataForSEO Trends data. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/demography/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsDemographyLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataDataforseoTrendsDemographyLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataDataforseoTrendsDemographyLiveResponseInfo> dataforseoTrendsDemographyLiveWithHttpInfo(List<KeywordsDataDataforseoTrendsDemographyLiveRequestInfo> keywordsDataDataforseoTrendsDemographyLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = dataforseoTrendsDemographyLiveValidateBeforeCall(keywordsDataDataforseoTrendsDemographyLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsDemographyLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with the demographic breakdown (by age and gender) of keyword popularity per each specified term based on DataForSEO Trends data. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/demography/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsDemographyLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsDemographyLiveAsync(List<KeywordsDataDataforseoTrendsDemographyLiveRequestInfo> keywordsDataDataforseoTrendsDemographyLiveRequestInfo, final ApiCallback<KeywordsDataDataforseoTrendsDemographyLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataforseoTrendsDemographyLiveValidateBeforeCall(keywordsDataDataforseoTrendsDemographyLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsDemographyLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataforseoTrendsExploreLive
     * @param keywordsDataDataforseoTrendsExploreLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsExploreLiveCall(List<KeywordsDataDataforseoTrendsExploreLiveRequestInfo> keywordsDataDataforseoTrendsExploreLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataDataforseoTrendsExploreLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/dataforseo_trends/explore/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataforseoTrendsExploreLiveValidateBeforeCall(List<KeywordsDataDataforseoTrendsExploreLiveRequestInfo> keywordsDataDataforseoTrendsExploreLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return dataforseoTrendsExploreLiveCall(keywordsDataDataforseoTrendsExploreLiveRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint will provide you with the keyword popularity data from DataForSEO Trends. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/explore/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsExploreLiveRequestInfo  (optional)
     * @return KeywordsDataDataforseoTrendsExploreLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataDataforseoTrendsExploreLiveResponseInfo dataforseoTrendsExploreLive(List<KeywordsDataDataforseoTrendsExploreLiveRequestInfo> keywordsDataDataforseoTrendsExploreLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataDataforseoTrendsExploreLiveResponseInfo> localVarResp = dataforseoTrendsExploreLiveWithHttpInfo(keywordsDataDataforseoTrendsExploreLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with the keyword popularity data from DataForSEO Trends. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/explore/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsExploreLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataDataforseoTrendsExploreLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataDataforseoTrendsExploreLiveResponseInfo> dataforseoTrendsExploreLiveWithHttpInfo(List<KeywordsDataDataforseoTrendsExploreLiveRequestInfo> keywordsDataDataforseoTrendsExploreLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = dataforseoTrendsExploreLiveValidateBeforeCall(keywordsDataDataforseoTrendsExploreLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsExploreLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with the keyword popularity data from DataForSEO Trends. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/explore/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsExploreLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsExploreLiveAsync(List<KeywordsDataDataforseoTrendsExploreLiveRequestInfo> keywordsDataDataforseoTrendsExploreLiveRequestInfo, final ApiCallback<KeywordsDataDataforseoTrendsExploreLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataforseoTrendsExploreLiveValidateBeforeCall(keywordsDataDataforseoTrendsExploreLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsExploreLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataforseoTrendsMergedDataLive
     * @param keywordsDataDataforseoTrendsMergedDataLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsMergedDataLiveCall(List<KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo> keywordsDataDataforseoTrendsMergedDataLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataDataforseoTrendsMergedDataLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/dataforseo_trends/merged_data/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataforseoTrendsMergedDataLiveValidateBeforeCall(List<KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo> keywordsDataDataforseoTrendsMergedDataLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return dataforseoTrendsMergedDataLiveCall(keywordsDataDataforseoTrendsMergedDataLiveRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint will provide you with the keyword popularity data from DataForSEO Trends. In addition to keyword popularity rate over the given time range, you will get location-specific keyword popularity data, and a demographic breakdown of keyword popularity per each specified term along with comparative values. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/merged_data/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsMergedDataLiveRequestInfo  (optional)
     * @return KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo dataforseoTrendsMergedDataLive(List<KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo> keywordsDataDataforseoTrendsMergedDataLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo> localVarResp = dataforseoTrendsMergedDataLiveWithHttpInfo(keywordsDataDataforseoTrendsMergedDataLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with the keyword popularity data from DataForSEO Trends. In addition to keyword popularity rate over the given time range, you will get location-specific keyword popularity data, and a demographic breakdown of keyword popularity per each specified term along with comparative values. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/merged_data/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsMergedDataLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo> dataforseoTrendsMergedDataLiveWithHttpInfo(List<KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo> keywordsDataDataforseoTrendsMergedDataLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = dataforseoTrendsMergedDataLiveValidateBeforeCall(keywordsDataDataforseoTrendsMergedDataLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with the keyword popularity data from DataForSEO Trends. In addition to keyword popularity rate over the given time range, you will get location-specific keyword popularity data, and a demographic breakdown of keyword popularity per each specified term along with comparative values. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/merged_data/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsMergedDataLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsMergedDataLiveAsync(List<KeywordsDataDataforseoTrendsMergedDataLiveRequestInfo> keywordsDataDataforseoTrendsMergedDataLiveRequestInfo, final ApiCallback<KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataforseoTrendsMergedDataLiveValidateBeforeCall(keywordsDataDataforseoTrendsMergedDataLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsMergedDataLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataforseoTrendsSubregionInterestsLive
     * @param keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsSubregionInterestsLiveCall(List<KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo> keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/dataforseo_trends/subregion_interests/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataforseoTrendsSubregionInterestsLiveValidateBeforeCall(List<KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo> keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return dataforseoTrendsSubregionInterestsLiveCall(keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint will provide you with location-specific keyword popularity data from DataForSEO Trends. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/subregion_interests/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo  (optional)
     * @return KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo dataforseoTrendsSubregionInterestsLive(List<KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo> keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo> localVarResp = dataforseoTrendsSubregionInterestsLiveWithHttpInfo(keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with location-specific keyword popularity data from DataForSEO Trends. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/subregion_interests/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo> dataforseoTrendsSubregionInterestsLiveWithHttpInfo(List<KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo> keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = dataforseoTrendsSubregionInterestsLiveValidateBeforeCall(keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with location-specific keyword popularity data from DataForSEO Trends. You can check keyword trends for Google Search, Google News, and Google Shopping. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/subregion_interests/live/?bash&#39;
     * @param keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataforseoTrendsSubregionInterestsLiveAsync(List<KeywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo> keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo, final ApiCallback<KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataforseoTrendsSubregionInterestsLiveValidateBeforeCall(keywordsDataDataforseoTrendsSubregionInterestsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsSubregionInterestsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsAdTrafficByKeywordsLive
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsLiveCall(List<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/ad_traffic_by_keywords/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsAdTrafficByKeywordsLiveValidateBeforeCall(List<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsAdTrafficByKeywordsLiveCall(keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/live/?bash&#39;
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo googleAdsAdTrafficByKeywordsLive(List<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo> localVarResp = googleAdsAdTrafficByKeywordsLiveWithHttpInfo(keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/live/?bash&#39;
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo> googleAdsAdTrafficByKeywordsLiveWithHttpInfo(List<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsLiveValidateBeforeCall(keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/live/?bash&#39;
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsLiveAsync(List<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo, final ApiCallback<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsLiveValidateBeforeCall(keywordsDataGoogleAdsAdTrafficByKeywordsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsAdTrafficByKeywordsTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsAdTrafficByKeywordsTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleAdsAdTrafficByKeywordsTaskGet(Async)");
        }

        return googleAdsAdTrafficByKeywordsTaskGetCall(id, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo googleAdsAdTrafficByKeywordsTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo> localVarResp = googleAdsAdTrafficByKeywordsTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo> googleAdsAdTrafficByKeywordsTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsTaskGetAsync(String id, final ApiCallback<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsAdTrafficByKeywordsTaskPost
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsTaskPostCall(List<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsAdTrafficByKeywordsTaskPostValidateBeforeCall(List<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsAdTrafficByKeywordsTaskPostCall(keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo googleAdsAdTrafficByKeywordsTaskPost(List<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo> localVarResp = googleAdsAdTrafficByKeywordsTaskPostWithHttpInfo(keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo> googleAdsAdTrafficByKeywordsTaskPostWithHttpInfo(List<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsTaskPostValidateBeforeCall(keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsTaskPostAsync(List<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo, final ApiCallback<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsTaskPostValidateBeforeCall(keywordsDataGoogleAdsAdTrafficByKeywordsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsAdTrafficByKeywordsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/ad_traffic_by_keywords/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsAdTrafficByKeywordsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleAdsAdTrafficByKeywordsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/tasks_ready/?bash&#39;
     * @return KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo googleAdsAdTrafficByKeywordsTasksReady() throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo> localVarResp = googleAdsAdTrafficByKeywordsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo> googleAdsAdTrafficByKeywordsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/ad_traffic_by_keywords/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsAdTrafficByKeywordsTasksReadyAsync(final ApiCallback<KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsAdTrafficByKeywordsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsAdTrafficByKeywordsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForKeywordsLive
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsLiveCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_keywords/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForKeywordsLiveValidateBeforeCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsKeywordsForKeywordsLiveCall(keywordsDataTaskRequestInfo, _callback);

    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide relevant keywords for the specified terms. Set up to 20 keywords in the keywords array and get keyword suggestions from Google Ads. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo googleAdsKeywordsForKeywordsLive(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo> localVarResp = googleAdsKeywordsForKeywordsLiveWithHttpInfo(keywordsDataTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide relevant keywords for the specified terms. Set up to 20 keywords in the keywords array and get keyword suggestions from Google Ads. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo> googleAdsKeywordsForKeywordsLiveWithHttpInfo(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsLiveValidateBeforeCall(keywordsDataTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide relevant keywords for the specified terms. Set up to 20 keywords in the keywords array and get keyword suggestions from Google Ads. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsLiveAsync(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback<KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsLiveValidateBeforeCall(keywordsDataTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForKeywordsTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_keywords/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForKeywordsTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleAdsKeywordsForKeywordsTaskGet(Async)");
        }

        return googleAdsKeywordsForKeywordsTaskGetCall(id, _callback);

    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌ This endpoint will select relevant keywords for the specified terms. Set up to 20 keywords and get the results, which are suggested by Google Ads for your query. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo googleAdsKeywordsForKeywordsTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo> localVarResp = googleAdsKeywordsForKeywordsTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌ This endpoint will select relevant keywords for the specified terms. Set up to 20 keywords and get the results, which are suggested by Google Ads for your query. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo> googleAdsKeywordsForKeywordsTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌ This endpoint will select relevant keywords for the specified terms. Set up to 20 keywords and get the results, which are suggested by Google Ads for your query. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsTaskGetAsync(String id, final ApiCallback<KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForKeywordsTaskPost
     * @param keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsTaskPostCall(List<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_keywords/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForKeywordsTaskPostValidateBeforeCall(List<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsKeywordsForKeywordsTaskPostCall(keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide relevant keywords for the specified terms. Set up to 20 keywords in the keywords array and get keyword suggestions from Google Ads. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo googleAdsKeywordsForKeywordsTaskPost(List<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo> localVarResp = googleAdsKeywordsForKeywordsTaskPostWithHttpInfo(keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide relevant keywords for the specified terms. Set up to 20 keywords in the keywords array and get keyword suggestions from Google Ads. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo> googleAdsKeywordsForKeywordsTaskPostWithHttpInfo(List<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsTaskPostValidateBeforeCall(keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide relevant keywords for the specified terms. Set up to 20 keywords in the keywords array and get keyword suggestions from Google Ads. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsTaskPostAsync(List<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo, final ApiCallback<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsTaskPostValidateBeforeCall(keywordsDataGoogleAdsKeywordsForKeywordsTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForKeywordsTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_keywords/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForKeywordsTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleAdsKeywordsForKeywordsTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/tasks_ready/?bash&#39;
     * @return KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo googleAdsKeywordsForKeywordsTasksReady() throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo> localVarResp = googleAdsKeywordsForKeywordsTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo> googleAdsKeywordsForKeywordsTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_keywords/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForKeywordsTasksReadyAsync(final ApiCallback<KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForKeywordsTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForKeywordsTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForSiteLive
     * @param keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteLiveCall(List<KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo> keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_site/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForSiteLiveValidateBeforeCall(List<KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo> keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsKeywordsForSiteLiveCall(keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo, _callback);

    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide you with a list of keywords relevant to the specified domain along with their bids, search volumes for the last month, search volume trends for the last year (for estimating search volume dynamics), and competition levels. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/live/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo googleAdsKeywordsForSiteLive(List<KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo> keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo> localVarResp = googleAdsKeywordsForSiteLiveWithHttpInfo(keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide you with a list of keywords relevant to the specified domain along with their bids, search volumes for the last month, search volume trends for the last year (for estimating search volume dynamics), and competition levels. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/live/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo> googleAdsKeywordsForSiteLiveWithHttpInfo(List<KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo> keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForSiteLiveValidateBeforeCall(keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide you with a list of keywords relevant to the specified domain along with their bids, search volumes for the last month, search volume trends for the last year (for estimating search volume dynamics), and competition levels. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/live/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteLiveAsync(List<KeywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo> keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo, final ApiCallback<KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForSiteLiveValidateBeforeCall(keywordsDataGoogleAdsKeywordsForSiteLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForSiteTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_site/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForSiteTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleAdsKeywordsForSiteTaskGet(Async)");
        }

        return googleAdsKeywordsForSiteTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide you with a list of keywords relevant to the specified domain along with their bids, search volumes for the last month, search volume trends for the last year (for estimating search volume dynamics), and competition levels. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo googleAdsKeywordsForSiteTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo> localVarResp = googleAdsKeywordsForSiteTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide you with a list of keywords relevant to the specified domain along with their bids, search volumes for the last month, search volume trends for the last year (for estimating search volume dynamics), and competition levels. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo> googleAdsKeywordsForSiteTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForSiteTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. ‌‌ This endpoint will provide you with a list of keywords relevant to the specified domain along with their bids, search volumes for the last month, search volume trends for the last year (for estimating search volume dynamics), and competition levels. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteTaskGetAsync(String id, final ApiCallback<KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForSiteTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForSiteTaskPost
     * @param keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteTaskPostCall(List<KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_site/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForSiteTaskPostValidateBeforeCall(List<KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsKeywordsForSiteTaskPostCall(keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo googleAdsKeywordsForSiteTaskPost(List<KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo> localVarResp = googleAdsKeywordsForSiteTaskPostWithHttpInfo(keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo> googleAdsKeywordsForSiteTaskPostWithHttpInfo(List<KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForSiteTaskPostValidateBeforeCall(keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/task_post/?bash&#39;
     * @param keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteTaskPostAsync(List<KeywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo> keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo, final ApiCallback<KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForSiteTaskPostValidateBeforeCall(keywordsDataGoogleAdsKeywordsForSiteTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsKeywordsForSiteTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/keywords_for_site/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsKeywordsForSiteTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleAdsKeywordsForSiteTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/tasks_ready/?bash&#39;
     * @return KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo googleAdsKeywordsForSiteTasksReady() throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo> localVarResp = googleAdsKeywordsForSiteTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo> googleAdsKeywordsForSiteTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleAdsKeywordsForSiteTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/keywords_for_site/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsKeywordsForSiteTasksReadyAsync(final ApiCallback<KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsKeywordsForSiteTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsKeywordsForSiteTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsSearchVolumeLive
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeLiveCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/search_volume/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsSearchVolumeLiveValidateBeforeCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsSearchVolumeLiveCall(keywordsDataTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo googleAdsSearchVolumeLive(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo> localVarResp = googleAdsSearchVolumeLiveWithHttpInfo(keywordsDataTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo> googleAdsSearchVolumeLiveWithHttpInfo(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsSearchVolumeLiveValidateBeforeCall(keywordsDataTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/live/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeLiveAsync(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback<KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsSearchVolumeLiveValidateBeforeCall(keywordsDataTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsSearchVolumeTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/search_volume/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsSearchVolumeTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleAdsSearchVolumeTaskGet(Async)");
        }

        return googleAdsSearchVolumeTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo googleAdsSearchVolumeTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo> localVarResp = googleAdsSearchVolumeTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo> googleAdsSearchVolumeTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleAdsSearchVolumeTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeTaskGetAsync(String id, final ApiCallback<KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsSearchVolumeTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsSearchVolumeTaskPost
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeTaskPostCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/search_volume/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsSearchVolumeTaskPostValidateBeforeCall(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleAdsSearchVolumeTaskPostCall(keywordsDataTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/task_post/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo googleAdsSearchVolumeTaskPost(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo> localVarResp = googleAdsSearchVolumeTaskPostWithHttpInfo(keywordsDataTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/task_post/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo> googleAdsSearchVolumeTaskPostWithHttpInfo(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleAdsSearchVolumeTaskPostValidateBeforeCall(keywordsDataTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Note that Google Ads Keywords Data API is based on the latest version of the Google Ads API that has replaced legacy Google AdWords API. If you’re using DataForSEO Google AdWords API, you need to upgrade to DataForSEO Google Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/task_post/?bash&#39;
     * @param keywordsDataTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeTaskPostAsync(List<KeywordsDataTaskRequestInfo> keywordsDataTaskRequestInfo, final ApiCallback<KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsSearchVolumeTaskPostValidateBeforeCall(keywordsDataTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsSearchVolumeTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/search_volume/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsSearchVolumeTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleAdsSearchVolumeTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/tasks_ready/?bash&#39;
     * @return KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo googleAdsSearchVolumeTasksReady() throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo> localVarResp = googleAdsSearchVolumeTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo> googleAdsSearchVolumeTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleAdsSearchVolumeTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/search_volume/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsSearchVolumeTasksReadyAsync(final ApiCallback<KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsSearchVolumeTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsSearchVolumeTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleAdsStatus
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleAdsStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleAdsStatusCall(_callback);

    }

    /**
     * 
     * ‌ By calling this endpoint, you will know if Google updated keyword data for the previous month. Generally, Google updates keyword data in the middle of the month. So, if Google updated its data in October, you would be able to see the actual search volume, cost-per-click, competition, and other metrics for September. If Google didn’t update its data in October, the latest information would be available for August. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/status/?bash&#39;
     * @return KeywordsDataGoogleAdsStatusResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsStatusResponseInfo googleAdsStatus() throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsStatusResponseInfo> localVarResp = googleAdsStatusWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ By calling this endpoint, you will know if Google updated keyword data for the previous month. Generally, Google updates keyword data in the middle of the month. So, if Google updated its data in October, you would be able to see the actual search volume, cost-per-click, competition, and other metrics for September. If Google didn’t update its data in October, the latest information would be available for August. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/status/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleAdsStatusResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsStatusResponseInfo> googleAdsStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleAdsStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsStatusResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ By calling this endpoint, you will know if Google updated keyword data for the previous month. Generally, Google updates keyword data in the middle of the month. So, if Google updated its data in October, you would be able to see the actual search volume, cost-per-click, competition, and other metrics for September. If Google didn’t update its data in October, the latest information would be available for August. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/status/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleAdsStatusAsync(final ApiCallback<KeywordsDataGoogleAdsStatusResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleAdsStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsStatusResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleTrendsCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleTrendsCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleTrendsCategoriesCall(_callback);

    }

    /**
     * 
     * By calling this API you will receive the list of categories supported by Google Trends API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available categories. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/categories/?bash&#39;
     * @return KeywordsDataGoogleTrendsCategoriesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsCategoriesResponseInfo googleTrendsCategories() throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsCategoriesResponseInfo> localVarResp = googleTrendsCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this API you will receive the list of categories supported by Google Trends API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available categories. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/categories/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsCategoriesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsCategoriesResponseInfo> googleTrendsCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleTrendsCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsCategoriesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this API you will receive the list of categories supported by Google Trends API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available categories. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/categories/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsCategoriesAsync(final ApiCallback<KeywordsDataGoogleTrendsCategoriesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleTrendsCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsCategoriesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleTrendsExploreLive
     * @param keywordsDataGoogleTrendsExploreLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreLiveCall(List<KeywordsDataGoogleTrendsExploreLiveRequestInfo> keywordsDataGoogleTrendsExploreLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataGoogleTrendsExploreLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/explore/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleTrendsExploreLiveValidateBeforeCall(List<KeywordsDataGoogleTrendsExploreLiveRequestInfo> keywordsDataGoogleTrendsExploreLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleTrendsExploreLiveCall(keywordsDataGoogleTrendsExploreLiveRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint will provide you with the keyword popularity data from the ‘Explore’ feature of Google Trends. You can check keyword trends for Google Search, Google News, Google Images, Google Shopping, and YouTube. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/live/?bash&#39;
     * @param keywordsDataGoogleTrendsExploreLiveRequestInfo  (optional)
     * @return KeywordsDataGoogleTrendsExploreLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsExploreLiveResponseInfo googleTrendsExploreLive(List<KeywordsDataGoogleTrendsExploreLiveRequestInfo> keywordsDataGoogleTrendsExploreLiveRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsExploreLiveResponseInfo> localVarResp = googleTrendsExploreLiveWithHttpInfo(keywordsDataGoogleTrendsExploreLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with the keyword popularity data from the ‘Explore’ feature of Google Trends. You can check keyword trends for Google Search, Google News, Google Images, Google Shopping, and YouTube. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/live/?bash&#39;
     * @param keywordsDataGoogleTrendsExploreLiveRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsExploreLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsExploreLiveResponseInfo> googleTrendsExploreLiveWithHttpInfo(List<KeywordsDataGoogleTrendsExploreLiveRequestInfo> keywordsDataGoogleTrendsExploreLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleTrendsExploreLiveValidateBeforeCall(keywordsDataGoogleTrendsExploreLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with the keyword popularity data from the ‘Explore’ feature of Google Trends. You can check keyword trends for Google Search, Google News, Google Images, Google Shopping, and YouTube. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/live/?bash&#39;
     * @param keywordsDataGoogleTrendsExploreLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreLiveAsync(List<KeywordsDataGoogleTrendsExploreLiveRequestInfo> keywordsDataGoogleTrendsExploreLiveRequestInfo, final ApiCallback<KeywordsDataGoogleTrendsExploreLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleTrendsExploreLiveValidateBeforeCall(keywordsDataGoogleTrendsExploreLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleTrendsExploreTaskGet
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreTaskGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/explore/task_get/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleTrendsExploreTaskGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling googleTrendsExploreTaskGet(Async)");
        }

        return googleTrendsExploreTaskGetCall(id, _callback);

    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return KeywordsDataGoogleTrendsExploreTaskGetResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsExploreTaskGetResponseInfo googleTrendsExploreTaskGet(String id) throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsExploreTaskGetResponseInfo> localVarResp = googleTrendsExploreTaskGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsExploreTaskGetResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsExploreTaskGetResponseInfo> googleTrendsExploreTaskGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = googleTrendsExploreTaskGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreTaskGetResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/task_get/?bash&#39;
     * @param id task identifier unique task identifier in our system in the UUID format you will be able to use it within 30 days to request the results of the task at any time (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreTaskGetAsync(String id, final ApiCallback<KeywordsDataGoogleTrendsExploreTaskGetResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleTrendsExploreTaskGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreTaskGetResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleTrendsExploreTaskPost
     * @param keywordsDataGoogleTrendsExploreTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreTaskPostCall(List<KeywordsDataGoogleTrendsExploreTaskPostRequestInfo> keywordsDataGoogleTrendsExploreTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataGoogleTrendsExploreTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/explore/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleTrendsExploreTaskPostValidateBeforeCall(List<KeywordsDataGoogleTrendsExploreTaskPostRequestInfo> keywordsDataGoogleTrendsExploreTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return googleTrendsExploreTaskPostCall(keywordsDataGoogleTrendsExploreTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with the keyword popularity data from the ‘Explore’ feature of Google Trends. You can check keyword trends for Google Search, Google News, Google Images, Google Shopping, and YouTube. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/task_post/?bash&#39;
     * @param keywordsDataGoogleTrendsExploreTaskPostRequestInfo  (optional)
     * @return KeywordsDataGoogleTrendsExploreTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsExploreTaskPostResponseInfo googleTrendsExploreTaskPost(List<KeywordsDataGoogleTrendsExploreTaskPostRequestInfo> keywordsDataGoogleTrendsExploreTaskPostRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsExploreTaskPostResponseInfo> localVarResp = googleTrendsExploreTaskPostWithHttpInfo(keywordsDataGoogleTrendsExploreTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with the keyword popularity data from the ‘Explore’ feature of Google Trends. You can check keyword trends for Google Search, Google News, Google Images, Google Shopping, and YouTube. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/task_post/?bash&#39;
     * @param keywordsDataGoogleTrendsExploreTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsExploreTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsExploreTaskPostResponseInfo> googleTrendsExploreTaskPostWithHttpInfo(List<KeywordsDataGoogleTrendsExploreTaskPostRequestInfo> keywordsDataGoogleTrendsExploreTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = googleTrendsExploreTaskPostValidateBeforeCall(keywordsDataGoogleTrendsExploreTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with the keyword popularity data from the ‘Explore’ feature of Google Trends. You can check keyword trends for Google Search, Google News, Google Images, Google Shopping, and YouTube. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/task_post/?bash&#39;
     * @param keywordsDataGoogleTrendsExploreTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreTaskPostAsync(List<KeywordsDataGoogleTrendsExploreTaskPostRequestInfo> keywordsDataGoogleTrendsExploreTaskPostRequestInfo, final ApiCallback<KeywordsDataGoogleTrendsExploreTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleTrendsExploreTaskPostValidateBeforeCall(keywordsDataGoogleTrendsExploreTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for googleTrendsExploreTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/explore/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call googleTrendsExploreTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return googleTrendsExploreTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/tasks_ready/?bash&#39;
     * @return KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo googleTrendsExploreTasksReady() throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo> localVarResp = googleTrendsExploreTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo> googleTrendsExploreTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = googleTrendsExploreTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to provide you with a list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/explore/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call googleTrendsExploreTasksReadyAsync(final ApiCallback<KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = googleTrendsExploreTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsExploreTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataBingKeywordPerformanceLocationsAndLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingKeywordPerformanceLocationsAndLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/keyword_performance/locations_and_languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataBingKeywordPerformanceLocationsAndLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataBingKeywordPerformanceLocationsAndLanguagesCall(_callback);

    }

    /**
     * 
     * ‌ Using this endpoint you can get the full list of locations and languages supported in Keyword Performance endpoints of Bing Keywords Data API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages/?bash&#39;
     * @return KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo keywordsDataBingKeywordPerformanceLocationsAndLanguages() throws ApiException {
        ApiResponse<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo> localVarResp = keywordsDataBingKeywordPerformanceLocationsAndLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Using this endpoint you can get the full list of locations and languages supported in Keyword Performance endpoints of Bing Keywords Data API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo> keywordsDataBingKeywordPerformanceLocationsAndLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataBingKeywordPerformanceLocationsAndLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Using this endpoint you can get the full list of locations and languages supported in Keyword Performance endpoints of Bing Keywords Data API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/keyword_performance/locations_and_languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingKeywordPerformanceLocationsAndLanguagesAsync(final ApiCallback<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataBingKeywordPerformanceLocationsAndLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataBingLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataBingLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataBingLanguagesCall(_callback);

    }

    /**
     * 
     * By calling this API you will receive the list of languages supported by Bing Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/languages/?bash&#39;
     * @return KeywordsDataBingLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingLanguagesResponseInfo keywordsDataBingLanguages() throws ApiException {
        ApiResponse<KeywordsDataBingLanguagesResponseInfo> localVarResp = keywordsDataBingLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this API you will receive the list of languages supported by Bing Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/languages/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingLanguagesResponseInfo> keywordsDataBingLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataBingLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this API you will receive the list of languages supported by Bing Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingLanguagesAsync(final ApiCallback<KeywordsDataBingLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataBingLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataBingLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataBingLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataBingLocationsCall(_callback);

    }

    /**
     * 
     * By calling this API you will receive the list of locations supported in Bing Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/locations/?bash&#39;
     * @return KeywordsDataBingLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingLocationsResponseInfo keywordsDataBingLocations() throws ApiException {
        ApiResponse<KeywordsDataBingLocationsResponseInfo> localVarResp = keywordsDataBingLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this API you will receive the list of locations supported in Bing Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/locations/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingLocationsResponseInfo> keywordsDataBingLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataBingLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this API you will receive the list of locations supported in Bing Ads API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingLocationsAsync(final ApiCallback<KeywordsDataBingLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataBingLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataBingSearchVolumeHistoryLocationsAndLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/bing/search_volume_history/locations_and_languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesCall(_callback);

    }

    /**
     * 
     * By calling this API you will receive the list of locations and languages supported by Bing ‘Search Volume History’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages/?bash&#39;
     * @return KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo keywordsDataBingSearchVolumeHistoryLocationsAndLanguages() throws ApiException {
        ApiResponse<KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo> localVarResp = keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this API you will receive the list of locations and languages supported by Bing ‘Search Volume History’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo> keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this API you will receive the list of locations and languages supported by Bing ‘Search Volume History’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/bing/search_volume_history/locations_and_languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesAsync(final ApiCallback<KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataBingSearchVolumeHistoryLocationsAndLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataBingSearchVolumeHistoryLocationsAndLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataClickstreamDataLocationsAndLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataClickstreamDataLocationsAndLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/clickstream_data/locations_and_languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataClickstreamDataLocationsAndLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataClickstreamDataLocationsAndLanguagesCall(_callback);

    }

    /**
     * 
     * ‌ Using this endpoint you can get the full list of locations and languages supported in DataForSEO Clickstream Data API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages/?bash&#39;
     * @return KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo keywordsDataClickstreamDataLocationsAndLanguages() throws ApiException {
        ApiResponse<KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo> localVarResp = keywordsDataClickstreamDataLocationsAndLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Using this endpoint you can get the full list of locations and languages supported in DataForSEO Clickstream Data API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo> keywordsDataClickstreamDataLocationsAndLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataClickstreamDataLocationsAndLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Using this endpoint you can get the full list of locations and languages supported in DataForSEO Clickstream Data API. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/clickstream_data/locations_and_languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataClickstreamDataLocationsAndLanguagesAsync(final ApiCallback<KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataClickstreamDataLocationsAndLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataClickstreamDataLocationsAndLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataDataforseoTrendsLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataDataforseoTrendsLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/dataforseo_trends/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataDataforseoTrendsLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataDataforseoTrendsLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of DataForSEO Trends locations by calling this API. You can filter the list of locations by country when setting a task. Please note that the minimum geographic scope supported for the DataForSEO Trends API is country level. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/locations/?bash&#39;
     * @return KeywordsDataDataforseoTrendsLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataDataforseoTrendsLocationsResponseInfo keywordsDataDataforseoTrendsLocations() throws ApiException {
        ApiResponse<KeywordsDataDataforseoTrendsLocationsResponseInfo> localVarResp = keywordsDataDataforseoTrendsLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of DataForSEO Trends locations by calling this API. You can filter the list of locations by country when setting a task. Please note that the minimum geographic scope supported for the DataForSEO Trends API is country level. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/locations/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataDataforseoTrendsLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataDataforseoTrendsLocationsResponseInfo> keywordsDataDataforseoTrendsLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataDataforseoTrendsLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of DataForSEO Trends locations by calling this API. You can filter the list of locations by country when setting a task. Please note that the minimum geographic scope supported for the DataForSEO Trends API is country level. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataDataforseoTrendsLocationsAsync(final ApiCallback<KeywordsDataDataforseoTrendsLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataDataforseoTrendsLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataDataforseoTrendsLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataDataforseoTrendsLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/dataforseo_trends/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataDataforseoTrendsLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling keywordsDataDataforseoTrendsLocationsCountry(Async)");
        }

        return keywordsDataDataforseoTrendsLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * You will receive the list of DataForSEO Trends locations by calling this API. You can filter the list of locations by country when setting a task. Please note that the minimum geographic scope supported for the DataForSEO Trends API is country level. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return KeywordsDataDataforseoTrendsLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataDataforseoTrendsLocationsCountryResponseInfo keywordsDataDataforseoTrendsLocationsCountry(String country) throws ApiException {
        ApiResponse<KeywordsDataDataforseoTrendsLocationsCountryResponseInfo> localVarResp = keywordsDataDataforseoTrendsLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of DataForSEO Trends locations by calling this API. You can filter the list of locations by country when setting a task. Please note that the minimum geographic scope supported for the DataForSEO Trends API is country level. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;KeywordsDataDataforseoTrendsLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataDataforseoTrendsLocationsCountryResponseInfo> keywordsDataDataforseoTrendsLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = keywordsDataDataforseoTrendsLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of DataForSEO Trends locations by calling this API. You can filter the list of locations by country when setting a task. Please note that the minimum geographic scope supported for the DataForSEO Trends API is country level. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/dataforseo_trends/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataDataforseoTrendsLocationsCountryAsync(String country, final ApiCallback<KeywordsDataDataforseoTrendsLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataDataforseoTrendsLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataDataforseoTrendsLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataErrors
     * @param keywordsDataErrorsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataErrorsCall(List<KeywordsDataErrorsRequestInfo> keywordsDataErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataErrorsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataErrorsValidateBeforeCall(List<KeywordsDataErrorsRequestInfo> keywordsDataErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        return keywordsDataErrorsCall(keywordsDataErrorsRequestInfo, _callback);

    }

    /**
     * 
     * By calling this endpoint you will receive information about the Keywords Data API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/errors/?bash&#39;
     * @param keywordsDataErrorsRequestInfo  (optional)
     * @return KeywordsDataErrorsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataErrorsResponseInfo keywordsDataErrors(List<KeywordsDataErrorsRequestInfo> keywordsDataErrorsRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataErrorsResponseInfo> localVarResp = keywordsDataErrorsWithHttpInfo(keywordsDataErrorsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this endpoint you will receive information about the Keywords Data API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/errors/?bash&#39;
     * @param keywordsDataErrorsRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataErrorsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataErrorsResponseInfo> keywordsDataErrorsWithHttpInfo(List<KeywordsDataErrorsRequestInfo> keywordsDataErrorsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = keywordsDataErrorsValidateBeforeCall(keywordsDataErrorsRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataErrorsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this endpoint you will receive information about the Keywords Data API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/errors/?bash&#39;
     * @param keywordsDataErrorsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataErrorsAsync(List<KeywordsDataErrorsRequestInfo> keywordsDataErrorsRequestInfo, final ApiCallback<KeywordsDataErrorsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataErrorsValidateBeforeCall(keywordsDataErrorsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataErrorsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataGoogleAdsLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleAdsLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataGoogleAdsLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataGoogleAdsLanguagesCall(_callback);

    }

    /**
     * 
     * By calling this API you will receive the list of languages supported by Keywords Data API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available languages. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/languages/?bash&#39;
     * @return KeywordsDataGoogleAdsLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsLanguagesResponseInfo keywordsDataGoogleAdsLanguages() throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsLanguagesResponseInfo> localVarResp = keywordsDataGoogleAdsLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this API you will receive the list of languages supported by Keywords Data API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available languages. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/languages/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleAdsLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsLanguagesResponseInfo> keywordsDataGoogleAdsLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataGoogleAdsLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this API you will receive the list of languages supported by Keywords Data API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available languages. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleAdsLanguagesAsync(final ApiCallback<KeywordsDataGoogleAdsLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataGoogleAdsLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataGoogleAdsLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleAdsLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataGoogleAdsLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataGoogleAdsLocationsCall(_callback);

    }

    /**
     * 
     * ‌ We use Google Geographical Targeting. You can refer to Google Ads Target Types page to review the full list of possible location types. With Keywords Data API, you can select any location type supported by Google, except for “Okrug”. Postal Codes can be used to set a task, albeit API response will not return data for such tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/locations/?bash&#39;
     * @return KeywordsDataGoogleAdsLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsLocationsResponseInfo keywordsDataGoogleAdsLocations() throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsLocationsResponseInfo> localVarResp = keywordsDataGoogleAdsLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ We use Google Geographical Targeting. You can refer to Google Ads Target Types page to review the full list of possible location types. With Keywords Data API, you can select any location type supported by Google, except for “Okrug”. Postal Codes can be used to set a task, albeit API response will not return data for such tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/locations/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleAdsLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsLocationsResponseInfo> keywordsDataGoogleAdsLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataGoogleAdsLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ We use Google Geographical Targeting. You can refer to Google Ads Target Types page to review the full list of possible location types. With Keywords Data API, you can select any location type supported by Google, except for “Okrug”. Postal Codes can be used to set a task, albeit API response will not return data for such tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleAdsLocationsAsync(final ApiCallback<KeywordsDataGoogleAdsLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataGoogleAdsLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataGoogleAdsLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleAdsLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_ads/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataGoogleAdsLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling keywordsDataGoogleAdsLocationsCountry(Async)");
        }

        return keywordsDataGoogleAdsLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * ‌ We use Google Geographical Targeting. You can refer to Google Ads Target Types page to review the full list of possible location types. With Keywords Data API, you can select any location type supported by Google, except for “Okrug”. Postal Codes can be used to set a task, albeit API response will not return data for such tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return KeywordsDataGoogleAdsLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleAdsLocationsCountryResponseInfo keywordsDataGoogleAdsLocationsCountry(String country) throws ApiException {
        ApiResponse<KeywordsDataGoogleAdsLocationsCountryResponseInfo> localVarResp = keywordsDataGoogleAdsLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ We use Google Geographical Targeting. You can refer to Google Ads Target Types page to review the full list of possible location types. With Keywords Data API, you can select any location type supported by Google, except for “Okrug”. Postal Codes can be used to set a task, albeit API response will not return data for such tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;KeywordsDataGoogleAdsLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleAdsLocationsCountryResponseInfo> keywordsDataGoogleAdsLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = keywordsDataGoogleAdsLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ We use Google Geographical Targeting. You can refer to Google Ads Target Types page to review the full list of possible location types. With Keywords Data API, you can select any location type supported by Google, except for “Okrug”. Postal Codes can be used to set a task, albeit API response will not return data for such tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_ads/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleAdsLocationsCountryAsync(String country, final ApiCallback<KeywordsDataGoogleAdsLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataGoogleAdsLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleAdsLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataGoogleTrendsLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleTrendsLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataGoogleTrendsLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataGoogleTrendsLanguagesCall(_callback);

    }

    /**
     * 
     * By calling this API you will receive the list of languages supported by Google Trends API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available languages. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/languages/?bash&#39;
     * @return KeywordsDataGoogleTrendsLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsLanguagesResponseInfo keywordsDataGoogleTrendsLanguages() throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsLanguagesResponseInfo> localVarResp = keywordsDataGoogleTrendsLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this API you will receive the list of languages supported by Google Trends API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available languages. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/languages/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsLanguagesResponseInfo> keywordsDataGoogleTrendsLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataGoogleTrendsLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this API you will receive the list of languages supported by Google Trends API. ‌ ‌‌As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information about available languages. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleTrendsLanguagesAsync(final ApiCallback<KeywordsDataGoogleTrendsLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataGoogleTrendsLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataGoogleTrendsLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleTrendsLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataGoogleTrendsLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return keywordsDataGoogleTrendsLocationsCall(_callback);

    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/locations/?bash&#39;
     * @return KeywordsDataGoogleTrendsLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsLocationsResponseInfo keywordsDataGoogleTrendsLocations() throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsLocationsResponseInfo> localVarResp = keywordsDataGoogleTrendsLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/locations/?bash&#39;
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsLocationsResponseInfo> keywordsDataGoogleTrendsLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = keywordsDataGoogleTrendsLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleTrendsLocationsAsync(final ApiCallback<KeywordsDataGoogleTrendsLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataGoogleTrendsLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataGoogleTrendsLocationsCountry
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleTrendsLocationsCountryCall(String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/google_trends/locations/{country}"
            .replace("{" + "country" + "}", localVarApiClient.escapeString(country.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataGoogleTrendsLocationsCountryValidateBeforeCall(String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling keywordsDataGoogleTrendsLocationsCountry(Async)");
        }

        return keywordsDataGoogleTrendsLocationsCountryCall(country, _callback);

    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return KeywordsDataGoogleTrendsLocationsCountryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataGoogleTrendsLocationsCountryResponseInfo keywordsDataGoogleTrendsLocationsCountry(String country) throws ApiException {
        ApiResponse<KeywordsDataGoogleTrendsLocationsCountryResponseInfo> localVarResp = keywordsDataGoogleTrendsLocationsCountryWithHttpInfo(country);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @return ApiResponse&lt;KeywordsDataGoogleTrendsLocationsCountryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataGoogleTrendsLocationsCountryResponseInfo> keywordsDataGoogleTrendsLocationsCountryWithHttpInfo(String country) throws ApiException {
        okhttp3.Call localVarCall = keywordsDataGoogleTrendsLocationsCountryValidateBeforeCall(country, null);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsLocationsCountryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/google_trends/locations/?bash&#39;
     * @param country country ISO code optional field specify the ISO code if you want to filter the list of locations by country example: us (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataGoogleTrendsLocationsCountryAsync(String country, final ApiCallback<KeywordsDataGoogleTrendsLocationsCountryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataGoogleTrendsLocationsCountryValidateBeforeCall(country, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataGoogleTrendsLocationsCountryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordsDataIdList
     * @param keywordsDataIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataIdListCall(List<KeywordsDataIdListRequestInfo> keywordsDataIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keywordsDataIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/keywords_data/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordsDataIdListValidateBeforeCall(List<KeywordsDataIdListRequestInfo> keywordsDataIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return keywordsDataIdListCall(keywordsDataIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Keywords Data tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/id_list/?bash&#39;
     * @param keywordsDataIdListRequestInfo  (optional)
     * @return KeywordsDataIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public KeywordsDataIdListResponseInfo keywordsDataIdList(List<KeywordsDataIdListRequestInfo> keywordsDataIdListRequestInfo) throws ApiException {
        ApiResponse<KeywordsDataIdListResponseInfo> localVarResp = keywordsDataIdListWithHttpInfo(keywordsDataIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Keywords Data tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/id_list/?bash&#39;
     * @param keywordsDataIdListRequestInfo  (optional)
     * @return ApiResponse&lt;KeywordsDataIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordsDataIdListResponseInfo> keywordsDataIdListWithHttpInfo(List<KeywordsDataIdListRequestInfo> keywordsDataIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = keywordsDataIdListValidateBeforeCall(keywordsDataIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<KeywordsDataIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Keywords Data tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/keywords_data/id_list/?bash&#39;
     * @param keywordsDataIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordsDataIdListAsync(List<KeywordsDataIdListRequestInfo> keywordsDataIdListRequestInfo, final ApiCallback<KeywordsDataIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordsDataIdListValidateBeforeCall(keywordsDataIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<KeywordsDataIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
