/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.dataforseo.client.model.ContentAnalysisCategoriesInfo;
import org.dataforseo.client.model.TopDomainInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * ContentAnalysisCategoryTrendsLiveResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-02T09:14:36.455142500+03:00[Europe/Kiev]")
public class ContentAnalysisCategoryTrendsLiveResultInfo {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private String date;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_TOP_DOMAINS = "top_domains";
  @SerializedName(SERIALIZED_NAME_TOP_DOMAINS)
  private List<TopDomainInfo> topDomains;

  public static final String SERIALIZED_NAME_SENTIMENT_CONNOTATIONS = "sentiment_connotations";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_CONNOTATIONS)
  private Map<String, Long> sentimentConnotations;

  public static final String SERIALIZED_NAME_CONNOTATION_TYPES = "connotation_types";
  @SerializedName(SERIALIZED_NAME_CONNOTATION_TYPES)
  private Map<String, Long> connotationTypes;

  public static final String SERIALIZED_NAME_TEXT_CATEGORIES = "text_categories";
  @SerializedName(SERIALIZED_NAME_TEXT_CATEGORIES)
  private List<ContentAnalysisCategoriesInfo> textCategories;

  public static final String SERIALIZED_NAME_PAGE_CATEGORIES = "page_categories";
  @SerializedName(SERIALIZED_NAME_PAGE_CATEGORIES)
  private List<ContentAnalysisCategoriesInfo> pageCategories;

  public static final String SERIALIZED_NAME_PAGE_TYPES = "page_types";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPES)
  private Map<String, Long> pageTypes;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private Map<String, Long> countries;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private Map<String, Long> languages;

  public ContentAnalysisCategoryTrendsLiveResultInfo() {
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo date(String date) {
    this.date = date;
    return this;
  }

   /**
   * date for which the data is provided
   * @return date
  **/
  @javax.annotation.Nullable
  public String getDate() {
    return date;
  }

  public void setDate(String date) {
    this.date = date;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * total number of results in our database relevant to your request
   * @return totalCount
  **/
  @javax.annotation.Nullable
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo rank(Integer rank) {
    this.rank = rank;
    return this;
  }

   /**
   * rank of all URLs citing the keyword normalized sum of ranks of all URLs citing the target keyword for the given date
   * @return rank
  **/
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo topDomains(List<TopDomainInfo> topDomains) {
    this.topDomains = topDomains;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo addTopDomainsItem(TopDomainInfo topDomainsItem) {
    if (this.topDomains == null) {
      this.topDomains = new ArrayList<>();
    }
    this.topDomains.add(topDomainsItem);
    return this;
  }

   /**
   * top domains citing the target keyword contains objects with top domains citing the target category and citation count per each domain
   * @return topDomains
  **/
  @javax.annotation.Nullable
  public List<TopDomainInfo> getTopDomains() {
    return topDomains;
  }

  public void setTopDomains(List<TopDomainInfo> topDomains) {
    this.topDomains = topDomains;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo sentimentConnotations(Map<String, Long> sentimentConnotations) {
    this.sentimentConnotations = sentimentConnotations;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo putSentimentConnotationsItem(String key, Long sentimentConnotationsItem) {
    if (this.sentimentConnotations == null) {
      this.sentimentConnotations = new HashMap<>();
    }
    this.sentimentConnotations.put(key, sentimentConnotationsItem);
    return this;
  }

   /**
   * sentiment connotations contains sentiments (emotional reactions) related to the target category citation and the number of citations per each sentiment possible connotations: \&quot;anger\&quot;, \&quot;fear\&quot;, \&quot;happiness\&quot;, \&quot;love\&quot;, \&quot;sadness\&quot;, \&quot;share\&quot;, \&quot;neutral\&quot;, \&quot;fun\&quot;
   * @return sentimentConnotations
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getSentimentConnotations() {
    return sentimentConnotations;
  }

  public void setSentimentConnotations(Map<String, Long> sentimentConnotations) {
    this.sentimentConnotations = sentimentConnotations;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo connotationTypes(Map<String, Long> connotationTypes) {
    this.connotationTypes = connotationTypes;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo putConnotationTypesItem(String key, Long connotationTypesItem) {
    if (this.connotationTypes == null) {
      this.connotationTypes = new HashMap<>();
    }
    this.connotationTypes.put(key, connotationTypesItem);
    return this;
  }

   /**
   * connotation types contains types of sentiments (sentiment polarity) related to the category citation and citation count per each sentiment type possible connotation types: \&quot;positive\&quot;, \&quot;negative\&quot;, \&quot;neutral\&quot;
   * @return connotationTypes
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getConnotationTypes() {
    return connotationTypes;
  }

  public void setConnotationTypes(Map<String, Long> connotationTypes) {
    this.connotationTypes = connotationTypes;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo textCategories(List<ContentAnalysisCategoriesInfo> textCategories) {
    this.textCategories = textCategories;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo addTextCategoriesItem(ContentAnalysisCategoriesInfo textCategoriesItem) {
    if (this.textCategories == null) {
      this.textCategories = new ArrayList<>();
    }
    this.textCategories.add(textCategoriesItem);
    return this;
  }

   /**
   * text categories contains objects with text categories and citation count in each text category to obtain a full list of available categories, refer to the Categories endpoint
   * @return textCategories
  **/
  @javax.annotation.Nullable
  public List<ContentAnalysisCategoriesInfo> getTextCategories() {
    return textCategories;
  }

  public void setTextCategories(List<ContentAnalysisCategoriesInfo> textCategories) {
    this.textCategories = textCategories;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo pageCategories(List<ContentAnalysisCategoriesInfo> pageCategories) {
    this.pageCategories = pageCategories;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo addPageCategoriesItem(ContentAnalysisCategoriesInfo pageCategoriesItem) {
    if (this.pageCategories == null) {
      this.pageCategories = new ArrayList<>();
    }
    this.pageCategories.add(pageCategoriesItem);
    return this;
  }

   /**
   * page categories contains objects with page categories and citation count in each page category to obtain a full list of available categories, refer to the Categories endpoint
   * @return pageCategories
  **/
  @javax.annotation.Nullable
  public List<ContentAnalysisCategoriesInfo> getPageCategories() {
    return pageCategories;
  }

  public void setPageCategories(List<ContentAnalysisCategoriesInfo> pageCategories) {
    this.pageCategories = pageCategories;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo pageTypes(Map<String, Long> pageTypes) {
    this.pageTypes = pageTypes;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo putPageTypesItem(String key, Long pageTypesItem) {
    if (this.pageTypes == null) {
      this.pageTypes = new HashMap<>();
    }
    this.pageTypes.put(key, pageTypesItem);
    return this;
  }

   /**
   * page types contains page types and citation count per each page type
   * @return pageTypes
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getPageTypes() {
    return pageTypes;
  }

  public void setPageTypes(Map<String, Long> pageTypes) {
    this.pageTypes = pageTypes;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo countries(Map<String, Long> countries) {
    this.countries = countries;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo putCountriesItem(String key, Long countriesItem) {
    if (this.countries == null) {
      this.countries = new HashMap<>();
    }
    this.countries.put(key, countriesItem);
    return this;
  }

   /**
   * countries contains countries and citation count in each country to obtain a full list of available countries, refer to the Locations endpoint
   * @return countries
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getCountries() {
    return countries;
  }

  public void setCountries(Map<String, Long> countries) {
    this.countries = countries;
  }


  public ContentAnalysisCategoryTrendsLiveResultInfo languages(Map<String, Long> languages) {
    this.languages = languages;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveResultInfo putLanguagesItem(String key, Long languagesItem) {
    if (this.languages == null) {
      this.languages = new HashMap<>();
    }
    this.languages.put(key, languagesItem);
    return this;
  }

   /**
   * languages contains languages and citation count in each language to obtain a full list of available languages, refer to the Languages endpoint
   * @return languages
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getLanguages() {
    return languages;
  }

  public void setLanguages(Map<String, Long> languages) {
    this.languages = languages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentAnalysisCategoryTrendsLiveResultInfo contentAnalysisCategoryTrendsLiveResultInfo = (ContentAnalysisCategoryTrendsLiveResultInfo) o;
    return Objects.equals(this.type, contentAnalysisCategoryTrendsLiveResultInfo.type) &&
        Objects.equals(this.date, contentAnalysisCategoryTrendsLiveResultInfo.date) &&
        Objects.equals(this.totalCount, contentAnalysisCategoryTrendsLiveResultInfo.totalCount) &&
        Objects.equals(this.rank, contentAnalysisCategoryTrendsLiveResultInfo.rank) &&
        Objects.equals(this.topDomains, contentAnalysisCategoryTrendsLiveResultInfo.topDomains) &&
        Objects.equals(this.sentimentConnotations, contentAnalysisCategoryTrendsLiveResultInfo.sentimentConnotations) &&
        Objects.equals(this.connotationTypes, contentAnalysisCategoryTrendsLiveResultInfo.connotationTypes) &&
        Objects.equals(this.textCategories, contentAnalysisCategoryTrendsLiveResultInfo.textCategories) &&
        Objects.equals(this.pageCategories, contentAnalysisCategoryTrendsLiveResultInfo.pageCategories) &&
        Objects.equals(this.pageTypes, contentAnalysisCategoryTrendsLiveResultInfo.pageTypes) &&
        Objects.equals(this.countries, contentAnalysisCategoryTrendsLiveResultInfo.countries) &&
        Objects.equals(this.languages, contentAnalysisCategoryTrendsLiveResultInfo.languages);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, date, totalCount, rank, topDomains, sentimentConnotations, connotationTypes, textCategories, pageCategories, pageTypes, countries, languages);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentAnalysisCategoryTrendsLiveResultInfo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    topDomains: ").append(toIndentedString(topDomains)).append("\n");
    sb.append("    sentimentConnotations: ").append(toIndentedString(sentimentConnotations)).append("\n");
    sb.append("    connotationTypes: ").append(toIndentedString(connotationTypes)).append("\n");
    sb.append("    textCategories: ").append(toIndentedString(textCategories)).append("\n");
    sb.append("    pageCategories: ").append(toIndentedString(pageCategories)).append("\n");
    sb.append("    pageTypes: ").append(toIndentedString(pageTypes)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("date");
    openapiFields.add("total_count");
    openapiFields.add("rank");
    openapiFields.add("top_domains");
    openapiFields.add("sentiment_connotations");
    openapiFields.add("connotation_types");
    openapiFields.add("text_categories");
    openapiFields.add("page_categories");
    openapiFields.add("page_types");
    openapiFields.add("countries");
    openapiFields.add("languages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentAnalysisCategoryTrendsLiveResultInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentAnalysisCategoryTrendsLiveResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentAnalysisCategoryTrendsLiveResultInfo is not found in the empty JSON string", ContentAnalysisCategoryTrendsLiveResultInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentAnalysisCategoryTrendsLiveResultInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentAnalysisCategoryTrendsLiveResultInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("date") != null && !jsonObj.get("date").isJsonNull()) && !jsonObj.get("date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date").toString()));
      }
      if (jsonObj.get("top_domains") != null && !jsonObj.get("top_domains").isJsonNull()) {
        JsonArray jsonArraytopDomains = jsonObj.getAsJsonArray("top_domains");
        if (jsonArraytopDomains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("top_domains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `top_domains` to be an array in the JSON string but got `%s`", jsonObj.get("top_domains").toString()));
          }

          // validate the optional field `top_domains` (array)
          for (int i = 0; i < jsonArraytopDomains.size(); i++) {
            TopDomainInfo.validateJsonElement(jsonArraytopDomains.get(i));
          };
        }
      }
      if (jsonObj.get("text_categories") != null && !jsonObj.get("text_categories").isJsonNull()) {
        JsonArray jsonArraytextCategories = jsonObj.getAsJsonArray("text_categories");
        if (jsonArraytextCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text_categories` to be an array in the JSON string but got `%s`", jsonObj.get("text_categories").toString()));
          }

          // validate the optional field `text_categories` (array)
          for (int i = 0; i < jsonArraytextCategories.size(); i++) {
            ContentAnalysisCategoriesInfo.validateJsonElement(jsonArraytextCategories.get(i));
          };
        }
      }
      if (jsonObj.get("page_categories") != null && !jsonObj.get("page_categories").isJsonNull()) {
        JsonArray jsonArraypageCategories = jsonObj.getAsJsonArray("page_categories");
        if (jsonArraypageCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("page_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `page_categories` to be an array in the JSON string but got `%s`", jsonObj.get("page_categories").toString()));
          }

          // validate the optional field `page_categories` (array)
          for (int i = 0; i < jsonArraypageCategories.size(); i++) {
            ContentAnalysisCategoriesInfo.validateJsonElement(jsonArraypageCategories.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentAnalysisCategoryTrendsLiveResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentAnalysisCategoryTrendsLiveResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentAnalysisCategoryTrendsLiveResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentAnalysisCategoryTrendsLiveResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentAnalysisCategoryTrendsLiveResultInfo>() {
           @Override
           public void write(JsonWriter out, ContentAnalysisCategoryTrendsLiveResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentAnalysisCategoryTrendsLiveResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentAnalysisCategoryTrendsLiveResultInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentAnalysisCategoryTrendsLiveResultInfo
  * @throws IOException if the JSON string is invalid with respect to ContentAnalysisCategoryTrendsLiveResultInfo
  */
  public static ContentAnalysisCategoryTrendsLiveResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentAnalysisCategoryTrendsLiveResultInfo.class);
  }

 /**
  * Convert an instance of ContentAnalysisCategoryTrendsLiveResultInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

