/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.KeywordsDataClickstreamDataDataforseoSearchVolumeLiveItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-28T19:49:11.515676700+03:00[Europe/Kiev]")
public class KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo {
  public static final String SERIALIZED_NAME_LOCATION_CODE = "location_code";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private String locationCode;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_USE_CLICKSTREAM = "use_clickstream";
  @SerializedName(SERIALIZED_NAME_USE_CLICKSTREAM)
  private Boolean useClickstream;

  public static final String SERIALIZED_NAME_ITEMS_COUNT = "items_count";
  @SerializedName(SERIALIZED_NAME_ITEMS_COUNT)
  private String itemsCount;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveItem> items;

  public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo() {
  }

  public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo locationCode(String locationCode) {
    this.locationCode = locationCode;
    return this;
  }

   /**
   * location code in a POST array if there is no data, then the value is null
   * @return locationCode
  **/
  @javax.annotation.Nullable
  public String getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(String locationCode) {
    this.locationCode = locationCode;
  }


  public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * language code in a POST array  Note:if the keyword in the POST array appears to be misspelled, data will be returned for the correctly spelled keyword; we use the functionality of Google Ads API to check and validate the spelling of keywords, learn more by this link
   * @return languageCode
  **/
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo useClickstream(Boolean useClickstream) {
    this.useClickstream = useClickstream;
    return this;
  }

   /**
   * indicates if the use_clickstream parameter is active possible values: true, false
   * @return useClickstream
  **/
  @javax.annotation.Nullable
  public Boolean getUseClickstream() {
    return useClickstream;
  }

  public void setUseClickstream(Boolean useClickstream) {
    this.useClickstream = useClickstream;
  }


  public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo itemsCount(String itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

   /**
   * ithe number of results returned in the items array
   * @return itemsCount
  **/
  @javax.annotation.Nullable
  public String getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(String itemsCount) {
    this.itemsCount = itemsCount;
  }


  public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo items(List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveItem> items) {
    this.items = items;
    return this;
  }

  public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo addItemsItem(KeywordsDataClickstreamDataDataforseoSearchVolumeLiveItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * array of keywords contains keywords and their search volume rates
   * @return items
  **/
  @javax.annotation.Nullable
  public List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveItem> getItems() {
    return items;
  }

  public void setItems(List<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveItem> items) {
    this.items = items;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo keywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo = (KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo) o;
    return Objects.equals(this.locationCode, keywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.locationCode) &&
        Objects.equals(this.languageCode, keywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.languageCode) &&
        Objects.equals(this.useClickstream, keywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.useClickstream) &&
        Objects.equals(this.itemsCount, keywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.itemsCount) &&
        Objects.equals(this.items, keywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.items);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationCode, languageCode, useClickstream, itemsCount, items);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo {\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    useClickstream: ").append(toIndentedString(useClickstream)).append("\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location_code");
    openapiFields.add("language_code");
    openapiFields.add("use_clickstream");
    openapiFields.add("items_count");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo is not found in the empty JSON string", KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("location_code") != null && !jsonObj.get("location_code").isJsonNull()) && !jsonObj.get("location_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_code").toString()));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      if ((jsonObj.get("items_count") != null && !jsonObj.get("items_count").isJsonNull()) && !jsonObj.get("items_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `items_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("items_count").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            KeywordsDataClickstreamDataDataforseoSearchVolumeLiveItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo>() {
           @Override
           public void write(JsonWriter out, KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo
  * @throws IOException if the JSON string is invalid with respect to KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo
  */
  public static KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo.class);
  }

 /**
  * Convert an instance of KeywordsDataClickstreamDataDataforseoSearchVolumeLiveResultInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

