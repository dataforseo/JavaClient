/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AppDataGooglePlaySearchOrganicSerpElementItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AppRankedSerpElementInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-28T19:49:11.515676700+03:00[Europe/Kiev]")
public class AppRankedSerpElementInfo {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_SERP_ITEM = "serp_item";
  @SerializedName(SERIALIZED_NAME_SERP_ITEM)
  private AppDataGooglePlaySearchOrganicSerpElementItem serpItem;

  public static final String SERIALIZED_NAME_CHECK_URL = "check_url";
  @SerializedName(SERIALIZED_NAME_CHECK_URL)
  private String checkUrl;

  public static final String SERIALIZED_NAME_SE_RESULTS_COUNT = "se_results_count";
  @SerializedName(SERIALIZED_NAME_SE_RESULTS_COUNT)
  private String seResultsCount;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "last_updated_time";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private String lastUpdatedTime;

  public static final String SERIALIZED_NAME_PREVIOUS_UPDATED_TIME = "previous_updated_time";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_UPDATED_TIME)
  private String previousUpdatedTime;

  public AppRankedSerpElementInfo() {
  }

  public AppRankedSerpElementInfo seType(String seType) {
    this.seType = seType;
    return this;
  }

   /**
   * search engine type
   * @return seType
  **/
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public AppRankedSerpElementInfo serpItem(AppDataGooglePlaySearchOrganicSerpElementItem serpItem) {
    this.serpItem = serpItem;
    return this;
  }

   /**
   * Get serpItem
   * @return serpItem
  **/
  @javax.annotation.Nullable
  public AppDataGooglePlaySearchOrganicSerpElementItem getSerpItem() {
    return serpItem;
  }

  public void setSerpItem(AppDataGooglePlaySearchOrganicSerpElementItem serpItem) {
    this.serpItem = serpItem;
  }


  public AppRankedSerpElementInfo checkUrl(String checkUrl) {
    this.checkUrl = checkUrl;
    return this;
  }

   /**
   * direct URL to search engine results you can use it to make sure that we provided accurate results
   * @return checkUrl
  **/
  @javax.annotation.Nullable
  public String getCheckUrl() {
    return checkUrl;
  }

  public void setCheckUrl(String checkUrl) {
    this.checkUrl = checkUrl;
  }


  public AppRankedSerpElementInfo seResultsCount(String seResultsCount) {
    this.seResultsCount = seResultsCount;
    return this;
  }

   /**
   * number of search results for the returned keyword
   * @return seResultsCount
  **/
  @javax.annotation.Nullable
  public String getSeResultsCount() {
    return seResultsCount;
  }

  public void setSeResultsCount(String seResultsCount) {
    this.seResultsCount = seResultsCount;
  }


  public AppRankedSerpElementInfo lastUpdatedTime(String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

   /**
   * date and time when SERP data was updated in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return lastUpdatedTime
  **/
  @javax.annotation.Nullable
  public String getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public AppRankedSerpElementInfo previousUpdatedTime(String previousUpdatedTime) {
    this.previousUpdatedTime = previousUpdatedTime;
    return this;
  }

   /**
   * previous to the most recent date and time when SERP data was updated in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-10-15 12:57:46 +00:00; in this case, will equal null
   * @return previousUpdatedTime
  **/
  @javax.annotation.Nullable
  public String getPreviousUpdatedTime() {
    return previousUpdatedTime;
  }

  public void setPreviousUpdatedTime(String previousUpdatedTime) {
    this.previousUpdatedTime = previousUpdatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppRankedSerpElementInfo appRankedSerpElementInfo = (AppRankedSerpElementInfo) o;
    return Objects.equals(this.seType, appRankedSerpElementInfo.seType) &&
        Objects.equals(this.serpItem, appRankedSerpElementInfo.serpItem) &&
        Objects.equals(this.checkUrl, appRankedSerpElementInfo.checkUrl) &&
        Objects.equals(this.seResultsCount, appRankedSerpElementInfo.seResultsCount) &&
        Objects.equals(this.lastUpdatedTime, appRankedSerpElementInfo.lastUpdatedTime) &&
        Objects.equals(this.previousUpdatedTime, appRankedSerpElementInfo.previousUpdatedTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, serpItem, checkUrl, seResultsCount, lastUpdatedTime, previousUpdatedTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppRankedSerpElementInfo {\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    serpItem: ").append(toIndentedString(serpItem)).append("\n");
    sb.append("    checkUrl: ").append(toIndentedString(checkUrl)).append("\n");
    sb.append("    seResultsCount: ").append(toIndentedString(seResultsCount)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    previousUpdatedTime: ").append(toIndentedString(previousUpdatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("se_type");
    openapiFields.add("serp_item");
    openapiFields.add("check_url");
    openapiFields.add("se_results_count");
    openapiFields.add("last_updated_time");
    openapiFields.add("previous_updated_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppRankedSerpElementInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppRankedSerpElementInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppRankedSerpElementInfo is not found in the empty JSON string", AppRankedSerpElementInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppRankedSerpElementInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppRankedSerpElementInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      // validate the optional field `serp_item`
      if (jsonObj.get("serp_item") != null && !jsonObj.get("serp_item").isJsonNull()) {
        AppDataGooglePlaySearchOrganicSerpElementItem.validateJsonElement(jsonObj.get("serp_item"));
      }
      if ((jsonObj.get("check_url") != null && !jsonObj.get("check_url").isJsonNull()) && !jsonObj.get("check_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_url").toString()));
      }
      if ((jsonObj.get("se_results_count") != null && !jsonObj.get("se_results_count").isJsonNull()) && !jsonObj.get("se_results_count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_results_count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_results_count").toString()));
      }
      if ((jsonObj.get("last_updated_time") != null && !jsonObj.get("last_updated_time").isJsonNull()) && !jsonObj.get("last_updated_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated_time").toString()));
      }
      if ((jsonObj.get("previous_updated_time") != null && !jsonObj.get("previous_updated_time").isJsonNull()) && !jsonObj.get("previous_updated_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_updated_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_updated_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppRankedSerpElementInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppRankedSerpElementInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppRankedSerpElementInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppRankedSerpElementInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppRankedSerpElementInfo>() {
           @Override
           public void write(JsonWriter out, AppRankedSerpElementInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppRankedSerpElementInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppRankedSerpElementInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppRankedSerpElementInfo
  * @throws IOException if the JSON string is invalid with respect to AppRankedSerpElementInfo
  */
  public static AppRankedSerpElementInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppRankedSerpElementInfo.class);
  }

 /**
  * Convert an instance of AppRankedSerpElementInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

