/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.ContentAnalysisSummaryInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * SentimentConnotationDistribution
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-04T16:50:38.263120800+03:00[Europe/Kiev]")
public class SentimentConnotationDistribution {
  public static final String SERIALIZED_NAME_ANGER = "anger";
  @SerializedName(SERIALIZED_NAME_ANGER)
  private ContentAnalysisSummaryInfo anger;

  public static final String SERIALIZED_NAME_HAPPINESS = "happiness";
  @SerializedName(SERIALIZED_NAME_HAPPINESS)
  private ContentAnalysisSummaryInfo happiness;

  public static final String SERIALIZED_NAME_LOVE = "love";
  @SerializedName(SERIALIZED_NAME_LOVE)
  private ContentAnalysisSummaryInfo love;

  public static final String SERIALIZED_NAME_SADNESS = "sadness";
  @SerializedName(SERIALIZED_NAME_SADNESS)
  private ContentAnalysisSummaryInfo sadness;

  public static final String SERIALIZED_NAME_SHARE = "share";
  @SerializedName(SERIALIZED_NAME_SHARE)
  private ContentAnalysisSummaryInfo share;

  public static final String SERIALIZED_NAME_FUN = "fun";
  @SerializedName(SERIALIZED_NAME_FUN)
  private ContentAnalysisSummaryInfo fun;

  public SentimentConnotationDistribution() {
  }

  public SentimentConnotationDistribution anger(ContentAnalysisSummaryInfo anger) {
    this.anger = anger;
    return this;
  }

   /**
   * Get anger
   * @return anger
  **/
  @javax.annotation.Nullable
  public ContentAnalysisSummaryInfo getAnger() {
    return anger;
  }

  public void setAnger(ContentAnalysisSummaryInfo anger) {
    this.anger = anger;
  }


  public SentimentConnotationDistribution happiness(ContentAnalysisSummaryInfo happiness) {
    this.happiness = happiness;
    return this;
  }

   /**
   * Get happiness
   * @return happiness
  **/
  @javax.annotation.Nullable
  public ContentAnalysisSummaryInfo getHappiness() {
    return happiness;
  }

  public void setHappiness(ContentAnalysisSummaryInfo happiness) {
    this.happiness = happiness;
  }


  public SentimentConnotationDistribution love(ContentAnalysisSummaryInfo love) {
    this.love = love;
    return this;
  }

   /**
   * Get love
   * @return love
  **/
  @javax.annotation.Nullable
  public ContentAnalysisSummaryInfo getLove() {
    return love;
  }

  public void setLove(ContentAnalysisSummaryInfo love) {
    this.love = love;
  }


  public SentimentConnotationDistribution sadness(ContentAnalysisSummaryInfo sadness) {
    this.sadness = sadness;
    return this;
  }

   /**
   * Get sadness
   * @return sadness
  **/
  @javax.annotation.Nullable
  public ContentAnalysisSummaryInfo getSadness() {
    return sadness;
  }

  public void setSadness(ContentAnalysisSummaryInfo sadness) {
    this.sadness = sadness;
  }


  public SentimentConnotationDistribution share(ContentAnalysisSummaryInfo share) {
    this.share = share;
    return this;
  }

   /**
   * Get share
   * @return share
  **/
  @javax.annotation.Nullable
  public ContentAnalysisSummaryInfo getShare() {
    return share;
  }

  public void setShare(ContentAnalysisSummaryInfo share) {
    this.share = share;
  }


  public SentimentConnotationDistribution fun(ContentAnalysisSummaryInfo fun) {
    this.fun = fun;
    return this;
  }

   /**
   * Get fun
   * @return fun
  **/
  @javax.annotation.Nullable
  public ContentAnalysisSummaryInfo getFun() {
    return fun;
  }

  public void setFun(ContentAnalysisSummaryInfo fun) {
    this.fun = fun;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentimentConnotationDistribution sentimentConnotationDistribution = (SentimentConnotationDistribution) o;
    return Objects.equals(this.anger, sentimentConnotationDistribution.anger) &&
        Objects.equals(this.happiness, sentimentConnotationDistribution.happiness) &&
        Objects.equals(this.love, sentimentConnotationDistribution.love) &&
        Objects.equals(this.sadness, sentimentConnotationDistribution.sadness) &&
        Objects.equals(this.share, sentimentConnotationDistribution.share) &&
        Objects.equals(this.fun, sentimentConnotationDistribution.fun);
  }

  @Override
  public int hashCode() {
    return Objects.hash(anger, happiness, love, sadness, share, fun);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentimentConnotationDistribution {\n");
    sb.append("    anger: ").append(toIndentedString(anger)).append("\n");
    sb.append("    happiness: ").append(toIndentedString(happiness)).append("\n");
    sb.append("    love: ").append(toIndentedString(love)).append("\n");
    sb.append("    sadness: ").append(toIndentedString(sadness)).append("\n");
    sb.append("    share: ").append(toIndentedString(share)).append("\n");
    sb.append("    fun: ").append(toIndentedString(fun)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("anger");
    openapiFields.add("happiness");
    openapiFields.add("love");
    openapiFields.add("sadness");
    openapiFields.add("share");
    openapiFields.add("fun");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SentimentConnotationDistribution
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SentimentConnotationDistribution.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentimentConnotationDistribution is not found in the empty JSON string", SentimentConnotationDistribution.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentimentConnotationDistribution.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentimentConnotationDistribution` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `anger`
      if (jsonObj.get("anger") != null && !jsonObj.get("anger").isJsonNull()) {
        ContentAnalysisSummaryInfo.validateJsonElement(jsonObj.get("anger"));
      }
      // validate the optional field `happiness`
      if (jsonObj.get("happiness") != null && !jsonObj.get("happiness").isJsonNull()) {
        ContentAnalysisSummaryInfo.validateJsonElement(jsonObj.get("happiness"));
      }
      // validate the optional field `love`
      if (jsonObj.get("love") != null && !jsonObj.get("love").isJsonNull()) {
        ContentAnalysisSummaryInfo.validateJsonElement(jsonObj.get("love"));
      }
      // validate the optional field `sadness`
      if (jsonObj.get("sadness") != null && !jsonObj.get("sadness").isJsonNull()) {
        ContentAnalysisSummaryInfo.validateJsonElement(jsonObj.get("sadness"));
      }
      // validate the optional field `share`
      if (jsonObj.get("share") != null && !jsonObj.get("share").isJsonNull()) {
        ContentAnalysisSummaryInfo.validateJsonElement(jsonObj.get("share"));
      }
      // validate the optional field `fun`
      if (jsonObj.get("fun") != null && !jsonObj.get("fun").isJsonNull()) {
        ContentAnalysisSummaryInfo.validateJsonElement(jsonObj.get("fun"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentimentConnotationDistribution.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentimentConnotationDistribution' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentimentConnotationDistribution> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentimentConnotationDistribution.class));

       return (TypeAdapter<T>) new TypeAdapter<SentimentConnotationDistribution>() {
           @Override
           public void write(JsonWriter out, SentimentConnotationDistribution value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentimentConnotationDistribution read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SentimentConnotationDistribution given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SentimentConnotationDistribution
  * @throws IOException if the JSON string is invalid with respect to SentimentConnotationDistribution
  */
  public static SentimentConnotationDistribution fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentimentConnotationDistribution.class);
  }

 /**
  * Convert an instance of SentimentConnotationDistribution to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

