/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.ContentItemInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * TopicInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T17:31:56.777561200+03:00[Europe/Kiev]")
public class TopicInfo {
  public static final String SERIALIZED_NAME_H_TITLE = "h_title";
  @SerializedName(SERIALIZED_NAME_H_TITLE)
  private String hTitle;

  public static final String SERIALIZED_NAME_MAIN_TITLE = "main_title";
  @SerializedName(SERIALIZED_NAME_MAIN_TITLE)
  private String mainTitle;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private String level;

  public static final String SERIALIZED_NAME_PRIMARY_CONTENT = "primary_content";
  @SerializedName(SERIALIZED_NAME_PRIMARY_CONTENT)
  private List<ContentItemInfo> primaryContent;

  public static final String SERIALIZED_NAME_SECONDARY_CONTENT = "secondary_content";
  @SerializedName(SERIALIZED_NAME_SECONDARY_CONTENT)
  private List<ContentItemInfo> secondaryContent;

  public TopicInfo() {
  }

  public TopicInfo hTitle(String hTitle) {
    this.hTitle = hTitle;
    return this;
  }

   /**
   * meta title
   * @return hTitle
  **/
  @javax.annotation.Nullable
  public String gethTitle() {
    return hTitle;
  }

  public void sethTitle(String hTitle) {
    this.hTitle = hTitle;
  }


  public TopicInfo mainTitle(String mainTitle) {
    this.mainTitle = mainTitle;
    return this;
  }

   /**
   * main title of the block
   * @return mainTitle
  **/
  @javax.annotation.Nullable
  public String getMainTitle() {
    return mainTitle;
  }

  public void setMainTitle(String mainTitle) {
    this.mainTitle = mainTitle;
  }


  public TopicInfo author(String author) {
    this.author = author;
    return this;
  }

   /**
   * content author name
   * @return author
  **/
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public TopicInfo language(String language) {
    this.language = language;
    return this;
  }

   /**
   * content language
   * @return language
  **/
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public TopicInfo level(String level) {
    this.level = level;
    return this;
  }

   /**
   * HTML level
   * @return level
  **/
  @javax.annotation.Nullable
  public String getLevel() {
    return level;
  }

  public void setLevel(String level) {
    this.level = level;
  }


  public TopicInfo primaryContent(List<ContentItemInfo> primaryContent) {
    this.primaryContent = primaryContent;
    return this;
  }

  public TopicInfo addPrimaryContentItem(ContentItemInfo primaryContentItem) {
    if (this.primaryContent == null) {
      this.primaryContent = new ArrayList<>();
    }
    this.primaryContent.add(primaryContentItem);
    return this;
  }

   /**
   * primary content on the page you can find more information about content priority calculation in this help center article
   * @return primaryContent
  **/
  @javax.annotation.Nullable
  public List<ContentItemInfo> getPrimaryContent() {
    return primaryContent;
  }

  public void setPrimaryContent(List<ContentItemInfo> primaryContent) {
    this.primaryContent = primaryContent;
  }


  public TopicInfo secondaryContent(List<ContentItemInfo> secondaryContent) {
    this.secondaryContent = secondaryContent;
    return this;
  }

  public TopicInfo addSecondaryContentItem(ContentItemInfo secondaryContentItem) {
    if (this.secondaryContent == null) {
      this.secondaryContent = new ArrayList<>();
    }
    this.secondaryContent.add(secondaryContentItem);
    return this;
  }

   /**
   * secondary content on the page you can find more information about content priority calculation in this help center article
   * @return secondaryContent
  **/
  @javax.annotation.Nullable
  public List<ContentItemInfo> getSecondaryContent() {
    return secondaryContent;
  }

  public void setSecondaryContent(List<ContentItemInfo> secondaryContent) {
    this.secondaryContent = secondaryContent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopicInfo topicInfo = (TopicInfo) o;
    return Objects.equals(this.hTitle, topicInfo.hTitle) &&
        Objects.equals(this.mainTitle, topicInfo.mainTitle) &&
        Objects.equals(this.author, topicInfo.author) &&
        Objects.equals(this.language, topicInfo.language) &&
        Objects.equals(this.level, topicInfo.level) &&
        Objects.equals(this.primaryContent, topicInfo.primaryContent) &&
        Objects.equals(this.secondaryContent, topicInfo.secondaryContent);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hTitle, mainTitle, author, language, level, primaryContent, secondaryContent);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopicInfo {\n");
    sb.append("    hTitle: ").append(toIndentedString(hTitle)).append("\n");
    sb.append("    mainTitle: ").append(toIndentedString(mainTitle)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    primaryContent: ").append(toIndentedString(primaryContent)).append("\n");
    sb.append("    secondaryContent: ").append(toIndentedString(secondaryContent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("h_title");
    openapiFields.add("main_title");
    openapiFields.add("author");
    openapiFields.add("language");
    openapiFields.add("level");
    openapiFields.add("primary_content");
    openapiFields.add("secondary_content");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TopicInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopicInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopicInfo is not found in the empty JSON string", TopicInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopicInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopicInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("h_title") != null && !jsonObj.get("h_title").isJsonNull()) && !jsonObj.get("h_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `h_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("h_title").toString()));
      }
      if ((jsonObj.get("main_title") != null && !jsonObj.get("main_title").isJsonNull()) && !jsonObj.get("main_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_title").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("level") != null && !jsonObj.get("level").isJsonNull()) && !jsonObj.get("level").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `level` to be a primitive type in the JSON string but got `%s`", jsonObj.get("level").toString()));
      }
      if (jsonObj.get("primary_content") != null && !jsonObj.get("primary_content").isJsonNull()) {
        JsonArray jsonArrayprimaryContent = jsonObj.getAsJsonArray("primary_content");
        if (jsonArrayprimaryContent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("primary_content").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `primary_content` to be an array in the JSON string but got `%s`", jsonObj.get("primary_content").toString()));
          }

          // validate the optional field `primary_content` (array)
          for (int i = 0; i < jsonArrayprimaryContent.size(); i++) {
            ContentItemInfo.validateJsonElement(jsonArrayprimaryContent.get(i));
          };
        }
      }
      if (jsonObj.get("secondary_content") != null && !jsonObj.get("secondary_content").isJsonNull()) {
        JsonArray jsonArraysecondaryContent = jsonObj.getAsJsonArray("secondary_content");
        if (jsonArraysecondaryContent != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secondary_content").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secondary_content` to be an array in the JSON string but got `%s`", jsonObj.get("secondary_content").toString()));
          }

          // validate the optional field `secondary_content` (array)
          for (int i = 0; i < jsonArraysecondaryContent.size(); i++) {
            ContentItemInfo.validateJsonElement(jsonArraysecondaryContent.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopicInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopicInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopicInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopicInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TopicInfo>() {
           @Override
           public void write(JsonWriter out, TopicInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopicInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TopicInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TopicInfo
  * @throws IOException if the JSON string is invalid with respect to TopicInfo
  */
  public static TopicInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopicInfo.class);
  }

 /**
  * Convert an instance of TopicInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

