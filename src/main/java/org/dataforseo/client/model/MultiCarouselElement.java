/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.CarouselElement;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * MultiCarouselElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T18:32:56.856102800+03:00[Europe/Kiev]")
public class MultiCarouselElement {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_MULTI_CAROUSEL_SNIPPETS = "multi_carousel_snippets";
  @SerializedName(SERIALIZED_NAME_MULTI_CAROUSEL_SNIPPETS)
  private List<CarouselElement> multiCarouselSnippets;

  public MultiCarouselElement() {
  }

  public MultiCarouselElement type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MultiCarouselElement title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title of a given link element
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MultiCarouselElement multiCarouselSnippets(List<CarouselElement> multiCarouselSnippets) {
    this.multiCarouselSnippets = multiCarouselSnippets;
    return this;
  }

  public MultiCarouselElement addMultiCarouselSnippetsItem(CarouselElement multiCarouselSnippetsItem) {
    if (this.multiCarouselSnippets == null) {
      this.multiCarouselSnippets = new ArrayList<>();
    }
    this.multiCarouselSnippets.add(multiCarouselSnippetsItem);
    return this;
  }

   /**
   * multi_carousel_snippet results
   * @return multiCarouselSnippets
  **/
  @javax.annotation.Nullable
  public List<CarouselElement> getMultiCarouselSnippets() {
    return multiCarouselSnippets;
  }

  public void setMultiCarouselSnippets(List<CarouselElement> multiCarouselSnippets) {
    this.multiCarouselSnippets = multiCarouselSnippets;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiCarouselElement multiCarouselElement = (MultiCarouselElement) o;
    return Objects.equals(this.type, multiCarouselElement.type) &&
        Objects.equals(this.title, multiCarouselElement.title) &&
        Objects.equals(this.multiCarouselSnippets, multiCarouselElement.multiCarouselSnippets);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, title, multiCarouselSnippets);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiCarouselElement {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    multiCarouselSnippets: ").append(toIndentedString(multiCarouselSnippets)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("title");
    openapiFields.add("multi_carousel_snippets");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MultiCarouselElement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MultiCarouselElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiCarouselElement is not found in the empty JSON string", MultiCarouselElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MultiCarouselElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiCarouselElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (jsonObj.get("multi_carousel_snippets") != null && !jsonObj.get("multi_carousel_snippets").isJsonNull()) {
        JsonArray jsonArraymultiCarouselSnippets = jsonObj.getAsJsonArray("multi_carousel_snippets");
        if (jsonArraymultiCarouselSnippets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("multi_carousel_snippets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `multi_carousel_snippets` to be an array in the JSON string but got `%s`", jsonObj.get("multi_carousel_snippets").toString()));
          }

          // validate the optional field `multi_carousel_snippets` (array)
          for (int i = 0; i < jsonArraymultiCarouselSnippets.size(); i++) {
            CarouselElement.validateJsonElement(jsonArraymultiCarouselSnippets.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiCarouselElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiCarouselElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiCarouselElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiCarouselElement.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiCarouselElement>() {
           @Override
           public void write(JsonWriter out, MultiCarouselElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiCarouselElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MultiCarouselElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MultiCarouselElement
  * @throws IOException if the JSON string is invalid with respect to MultiCarouselElement
  */
  public static MultiCarouselElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiCarouselElement.class);
  }

 /**
  * Convert an instance of MultiCarouselElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

