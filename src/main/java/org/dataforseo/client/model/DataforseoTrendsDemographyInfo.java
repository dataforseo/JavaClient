/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.Demography;
import org.dataforseo.client.model.DemographyComparison;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * DataforseoTrendsDemographyInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T20:18:33.613150200+03:00[Europe/Kiev]", comments = "Generator version: 7.4.0")
public class DataforseoTrendsDemographyInfo {
  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private Integer position;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords;

  public static final String SERIALIZED_NAME_DEMOGRAPHY = "demography";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHY)
  private Demography demography;

  public static final String SERIALIZED_NAME_DEMOGRAPHY_COMPARISON = "demography_comparison";
  @SerializedName(SERIALIZED_NAME_DEMOGRAPHY_COMPARISON)
  private DemographyComparison demographyComparison;

  public DataforseoTrendsDemographyInfo() {
  }

  public DataforseoTrendsDemographyInfo position(Integer position) {
    this.position = position;
    return this;
  }

   /**
   * the alignment of the element can take the following values: 1, 2, 3, 4, etc.
   * @return position
  **/
  @javax.annotation.Nullable
  public Integer getPosition() {
    return position;
  }

  public void setPosition(Integer position) {
    this.position = position;
  }


  public DataforseoTrendsDemographyInfo type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DataforseoTrendsDemographyInfo keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public DataforseoTrendsDemographyInfo addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

   /**
   * relevant keywords the data included in the demography and demography_comparison is based on the keywords listed in this array
   * @return keywords
  **/
  @javax.annotation.Nullable
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public DataforseoTrendsDemographyInfo demography(Demography demography) {
    this.demography = demography;
    return this;
  }

   /**
   * Get demography
   * @return demography
  **/
  @javax.annotation.Nullable
  public Demography getDemography() {
    return demography;
  }

  public void setDemography(Demography demography) {
    this.demography = demography;
  }


  public DataforseoTrendsDemographyInfo demographyComparison(DemographyComparison demographyComparison) {
    this.demographyComparison = demographyComparison;
    return this;
  }

   /**
   * Get demographyComparison
   * @return demographyComparison
  **/
  @javax.annotation.Nullable
  public DemographyComparison getDemographyComparison() {
    return demographyComparison;
  }

  public void setDemographyComparison(DemographyComparison demographyComparison) {
    this.demographyComparison = demographyComparison;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataforseoTrendsDemographyInfo dataforseoTrendsDemographyInfo = (DataforseoTrendsDemographyInfo) o;
    return Objects.equals(this.position, dataforseoTrendsDemographyInfo.position) &&
        Objects.equals(this.type, dataforseoTrendsDemographyInfo.type) &&
        Objects.equals(this.keywords, dataforseoTrendsDemographyInfo.keywords) &&
        Objects.equals(this.demography, dataforseoTrendsDemographyInfo.demography) &&
        Objects.equals(this.demographyComparison, dataforseoTrendsDemographyInfo.demographyComparison);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, type, keywords, demography, demographyComparison);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataforseoTrendsDemographyInfo {\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    demography: ").append(toIndentedString(demography)).append("\n");
    sb.append("    demographyComparison: ").append(toIndentedString(demographyComparison)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("position");
    openapiFields.add("type");
    openapiFields.add("keywords");
    openapiFields.add("demography");
    openapiFields.add("demography_comparison");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataforseoTrendsDemographyInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataforseoTrendsDemographyInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataforseoTrendsDemographyInfo is not found in the empty JSON string", DataforseoTrendsDemographyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataforseoTrendsDemographyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataforseoTrendsDemographyInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull() && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      // validate the optional field `demography`
      if (jsonObj.get("demography") != null && !jsonObj.get("demography").isJsonNull()) {
        Demography.validateJsonElement(jsonObj.get("demography"));
      }
      // validate the optional field `demography_comparison`
      if (jsonObj.get("demography_comparison") != null && !jsonObj.get("demography_comparison").isJsonNull()) {
        DemographyComparison.validateJsonElement(jsonObj.get("demography_comparison"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataforseoTrendsDemographyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataforseoTrendsDemographyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataforseoTrendsDemographyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataforseoTrendsDemographyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DataforseoTrendsDemographyInfo>() {
           @Override
           public void write(JsonWriter out, DataforseoTrendsDemographyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataforseoTrendsDemographyInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataforseoTrendsDemographyInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataforseoTrendsDemographyInfo
  * @throws IOException if the JSON string is invalid with respect to DataforseoTrendsDemographyInfo
  */
  public static DataforseoTrendsDemographyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataforseoTrendsDemographyInfo.class);
  }

 /**
  * Convert an instance of DataforseoTrendsDemographyInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

