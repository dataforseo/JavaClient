/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * TopicListDataItemInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-02T09:14:36.455142500+03:00[Europe/Kiev]")
public class TopicListDataItemInfo {
  public static final String SERIALIZED_NAME_TOPIC_ID = "topic_id";
  @SerializedName(SERIALIZED_NAME_TOPIC_ID)
  private String topicId;

  public static final String SERIALIZED_NAME_TOPIC_TITLE = "topic_title";
  @SerializedName(SERIALIZED_NAME_TOPIC_TITLE)
  private String topicTitle;

  public static final String SERIALIZED_NAME_TOPIC_TYPE = "topic_type";
  @SerializedName(SERIALIZED_NAME_TOPIC_TYPE)
  private String topicType;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public TopicListDataItemInfo() {
  }

  public TopicListDataItemInfo topicId(String topicId) {
    this.topicId = topicId;
    return this;
  }

   /**
   * unique topic identifier in Google Trends
   * @return topicId
  **/
  @javax.annotation.Nullable
  public String getTopicId() {
    return topicId;
  }

  public void setTopicId(String topicId) {
    this.topicId = topicId;
  }


  public TopicListDataItemInfo topicTitle(String topicTitle) {
    this.topicTitle = topicTitle;
    return this;
  }

   /**
   * title of the topic
   * @return topicTitle
  **/
  @javax.annotation.Nullable
  public String getTopicTitle() {
    return topicTitle;
  }

  public void setTopicTitle(String topicTitle) {
    this.topicTitle = topicTitle;
  }


  public TopicListDataItemInfo topicType(String topicType) {
    this.topicType = topicType;
    return this;
  }

   /**
   * type of the topic represents the general type of the topic
   * @return topicType
  **/
  @javax.annotation.Nullable
  public String getTopicType() {
    return topicType;
  }

  public void setTopicType(String topicType) {
    this.topicType = topicType;
  }


  public TopicListDataItemInfo value(String value) {
    this.value = value;
    return this;
  }

   /**
   * search term popularity represents the popularity of the topic. Scoring is on a relative scale where a value of 100 is the most commonly searched topic and a value of 50 is a topic searched half as often as the most popular term, and so on.
   * @return value
  **/
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TopicListDataItemInfo topicListDataItemInfo = (TopicListDataItemInfo) o;
    return Objects.equals(this.topicId, topicListDataItemInfo.topicId) &&
        Objects.equals(this.topicTitle, topicListDataItemInfo.topicTitle) &&
        Objects.equals(this.topicType, topicListDataItemInfo.topicType) &&
        Objects.equals(this.value, topicListDataItemInfo.value);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(topicId, topicTitle, topicType, value);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TopicListDataItemInfo {\n");
    sb.append("    topicId: ").append(toIndentedString(topicId)).append("\n");
    sb.append("    topicTitle: ").append(toIndentedString(topicTitle)).append("\n");
    sb.append("    topicType: ").append(toIndentedString(topicType)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("topic_id");
    openapiFields.add("topic_title");
    openapiFields.add("topic_type");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TopicListDataItemInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TopicListDataItemInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TopicListDataItemInfo is not found in the empty JSON string", TopicListDataItemInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TopicListDataItemInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TopicListDataItemInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("topic_id") != null && !jsonObj.get("topic_id").isJsonNull()) && !jsonObj.get("topic_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_id").toString()));
      }
      if ((jsonObj.get("topic_title") != null && !jsonObj.get("topic_title").isJsonNull()) && !jsonObj.get("topic_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_title").toString()));
      }
      if ((jsonObj.get("topic_type") != null && !jsonObj.get("topic_type").isJsonNull()) && !jsonObj.get("topic_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic_type").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TopicListDataItemInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TopicListDataItemInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TopicListDataItemInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TopicListDataItemInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TopicListDataItemInfo>() {
           @Override
           public void write(JsonWriter out, TopicListDataItemInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TopicListDataItemInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TopicListDataItemInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TopicListDataItemInfo
  * @throws IOException if the JSON string is invalid with respect to TopicListDataItemInfo
  */
  public static TopicListDataItemInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TopicListDataItemInfo.class);
  }

 /**
  * Convert an instance of TopicListDataItemInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

