/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * BacklinksBulkNewLostBacklinksLiveItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T10:30:03.431691300+03:00[Europe/Kiev]")
public class BacklinksBulkNewLostBacklinksLiveItem {
  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private String target;

  public static final String SERIALIZED_NAME_NEW_BACKLINKS = "new_backlinks";
  @SerializedName(SERIALIZED_NAME_NEW_BACKLINKS)
  private Long newBacklinks;

  public static final String SERIALIZED_NAME_LOST_BACKLINKS = "lost_backlinks";
  @SerializedName(SERIALIZED_NAME_LOST_BACKLINKS)
  private Long lostBacklinks;

  public BacklinksBulkNewLostBacklinksLiveItem() {
  }

  public BacklinksBulkNewLostBacklinksLiveItem target(String target) {
    this.target = target;
    return this;
  }

   /**
   * domain, subdomain or webpage from a POST array
   * @return target
  **/
  @javax.annotation.Nullable
  public String getTarget() {
    return target;
  }

  public void setTarget(String target) {
    this.target = target;
  }


  public BacklinksBulkNewLostBacklinksLiveItem newBacklinks(Long newBacklinks) {
    this.newBacklinks = newBacklinks;
    return this;
  }

   /**
   * number of new backlinks number of new backlinks pointing to the target
   * @return newBacklinks
  **/
  @javax.annotation.Nullable
  public Long getNewBacklinks() {
    return newBacklinks;
  }

  public void setNewBacklinks(Long newBacklinks) {
    this.newBacklinks = newBacklinks;
  }


  public BacklinksBulkNewLostBacklinksLiveItem lostBacklinks(Long lostBacklinks) {
    this.lostBacklinks = lostBacklinks;
    return this;
  }

   /**
   * number of lost backlinks number of lost backlinks of the target
   * @return lostBacklinks
  **/
  @javax.annotation.Nullable
  public Long getLostBacklinks() {
    return lostBacklinks;
  }

  public void setLostBacklinks(Long lostBacklinks) {
    this.lostBacklinks = lostBacklinks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BacklinksBulkNewLostBacklinksLiveItem backlinksBulkNewLostBacklinksLiveItem = (BacklinksBulkNewLostBacklinksLiveItem) o;
    return Objects.equals(this.target, backlinksBulkNewLostBacklinksLiveItem.target) &&
        Objects.equals(this.newBacklinks, backlinksBulkNewLostBacklinksLiveItem.newBacklinks) &&
        Objects.equals(this.lostBacklinks, backlinksBulkNewLostBacklinksLiveItem.lostBacklinks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(target, newBacklinks, lostBacklinks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BacklinksBulkNewLostBacklinksLiveItem {\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    newBacklinks: ").append(toIndentedString(newBacklinks)).append("\n");
    sb.append("    lostBacklinks: ").append(toIndentedString(lostBacklinks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("target");
    openapiFields.add("new_backlinks");
    openapiFields.add("lost_backlinks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BacklinksBulkNewLostBacklinksLiveItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BacklinksBulkNewLostBacklinksLiveItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BacklinksBulkNewLostBacklinksLiveItem is not found in the empty JSON string", BacklinksBulkNewLostBacklinksLiveItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BacklinksBulkNewLostBacklinksLiveItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BacklinksBulkNewLostBacklinksLiveItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("target") != null && !jsonObj.get("target").isJsonNull()) && !jsonObj.get("target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("target").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BacklinksBulkNewLostBacklinksLiveItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BacklinksBulkNewLostBacklinksLiveItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BacklinksBulkNewLostBacklinksLiveItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BacklinksBulkNewLostBacklinksLiveItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BacklinksBulkNewLostBacklinksLiveItem>() {
           @Override
           public void write(JsonWriter out, BacklinksBulkNewLostBacklinksLiveItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BacklinksBulkNewLostBacklinksLiveItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BacklinksBulkNewLostBacklinksLiveItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BacklinksBulkNewLostBacklinksLiveItem
  * @throws IOException if the JSON string is invalid with respect to BacklinksBulkNewLostBacklinksLiveItem
  */
  public static BacklinksBulkNewLostBacklinksLiveItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BacklinksBulkNewLostBacklinksLiveItem.class);
  }

 /**
  * Convert an instance of BacklinksBulkNewLostBacklinksLiveItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

