/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.HotelPriceItemInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * HotelPriceInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-19T23:45:33.338179400+03:00[Europe/Kiev]")
public class HotelPriceInfo {
  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Integer price;

  public static final String SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT = "price_without_discount";
  @SerializedName(SERIALIZED_NAME_PRICE_WITHOUT_DISCOUNT)
  private Long priceWithoutDiscount;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_DISCOUNT_TEXT = "discount_text";
  @SerializedName(SERIALIZED_NAME_DISCOUNT_TEXT)
  private String discountText;

  public static final String SERIALIZED_NAME_CHECK_IN = "check_in";
  @SerializedName(SERIALIZED_NAME_CHECK_IN)
  private String checkIn;

  public static final String SERIALIZED_NAME_CHECK_OUT = "check_out";
  @SerializedName(SERIALIZED_NAME_CHECK_OUT)
  private String checkOut;

  public static final String SERIALIZED_NAME_VISITORS = "visitors";
  @SerializedName(SERIALIZED_NAME_VISITORS)
  private Integer visitors;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<HotelPriceItemInfo> items;

  public HotelPriceInfo() {
  }

  public HotelPriceInfo price(Integer price) {
    this.price = price;
    return this;
  }

   /**
   * price per night
   * @return price
  **/
  @javax.annotation.Nullable
  public Integer getPrice() {
    return price;
  }

  public void setPrice(Integer price) {
    this.price = price;
  }


  public HotelPriceInfo priceWithoutDiscount(Long priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
    return this;
  }

   /**
   * full price per night without a discount applied
   * @return priceWithoutDiscount
  **/
  @javax.annotation.Nullable
  public Long getPriceWithoutDiscount() {
    return priceWithoutDiscount;
  }

  public void setPriceWithoutDiscount(Long priceWithoutDiscount) {
    this.priceWithoutDiscount = priceWithoutDiscount;
  }


  public HotelPriceInfo currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * price currency USD is applied by default, unless specified in the POST array
   * @return currency
  **/
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public HotelPriceInfo discountText(String discountText) {
    this.discountText = discountText;
    return this;
  }

   /**
   * text about a discount applied
   * @return discountText
  **/
  @javax.annotation.Nullable
  public String getDiscountText() {
    return discountText;
  }

  public void setDiscountText(String discountText) {
    this.discountText = discountText;
  }


  public HotelPriceInfo checkIn(String checkIn) {
    this.checkIn = checkIn;
    return this;
  }

   /**
   * check-in date and time in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return checkIn
  **/
  @javax.annotation.Nullable
  public String getCheckIn() {
    return checkIn;
  }

  public void setCheckIn(String checkIn) {
    this.checkIn = checkIn;
  }


  public HotelPriceInfo checkOut(String checkOut) {
    this.checkOut = checkOut;
    return this;
  }

   /**
   * check-out date and time in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return checkOut
  **/
  @javax.annotation.Nullable
  public String getCheckOut() {
    return checkOut;
  }

  public void setCheckOut(String checkOut) {
    this.checkOut = checkOut;
  }


  public HotelPriceInfo visitors(Integer visitors) {
    this.visitors = visitors;
    return this;
  }

   /**
   * number of hotel visitors for this price
   * @return visitors
  **/
  @javax.annotation.Nullable
  public Integer getVisitors() {
    return visitors;
  }

  public void setVisitors(Integer visitors) {
    this.visitors = visitors;
  }


  public HotelPriceInfo items(List<HotelPriceItemInfo> items) {
    this.items = items;
    return this;
  }

  public HotelPriceInfo addItemsItem(HotelPriceItemInfo itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * encountered item types types of search engine results encountered in the items array; possible item types: hotel_search_item
   * @return items
  **/
  @javax.annotation.Nullable
  public List<HotelPriceItemInfo> getItems() {
    return items;
  }

  public void setItems(List<HotelPriceItemInfo> items) {
    this.items = items;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelPriceInfo hotelPriceInfo = (HotelPriceInfo) o;
    return Objects.equals(this.price, hotelPriceInfo.price) &&
        Objects.equals(this.priceWithoutDiscount, hotelPriceInfo.priceWithoutDiscount) &&
        Objects.equals(this.currency, hotelPriceInfo.currency) &&
        Objects.equals(this.discountText, hotelPriceInfo.discountText) &&
        Objects.equals(this.checkIn, hotelPriceInfo.checkIn) &&
        Objects.equals(this.checkOut, hotelPriceInfo.checkOut) &&
        Objects.equals(this.visitors, hotelPriceInfo.visitors) &&
        Objects.equals(this.items, hotelPriceInfo.items);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(price, priceWithoutDiscount, currency, discountText, checkIn, checkOut, visitors, items);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelPriceInfo {\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    priceWithoutDiscount: ").append(toIndentedString(priceWithoutDiscount)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    discountText: ").append(toIndentedString(discountText)).append("\n");
    sb.append("    checkIn: ").append(toIndentedString(checkIn)).append("\n");
    sb.append("    checkOut: ").append(toIndentedString(checkOut)).append("\n");
    sb.append("    visitors: ").append(toIndentedString(visitors)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("price");
    openapiFields.add("price_without_discount");
    openapiFields.add("currency");
    openapiFields.add("discount_text");
    openapiFields.add("check_in");
    openapiFields.add("check_out");
    openapiFields.add("visitors");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HotelPriceInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelPriceInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelPriceInfo is not found in the empty JSON string", HotelPriceInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelPriceInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelPriceInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("discount_text") != null && !jsonObj.get("discount_text").isJsonNull()) && !jsonObj.get("discount_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discount_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discount_text").toString()));
      }
      if ((jsonObj.get("check_in") != null && !jsonObj.get("check_in").isJsonNull()) && !jsonObj.get("check_in").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_in` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_in").toString()));
      }
      if ((jsonObj.get("check_out") != null && !jsonObj.get("check_out").isJsonNull()) && !jsonObj.get("check_out").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `check_out` to be a primitive type in the JSON string but got `%s`", jsonObj.get("check_out").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            HotelPriceItemInfo.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelPriceInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelPriceInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelPriceInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelPriceInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelPriceInfo>() {
           @Override
           public void write(JsonWriter out, HotelPriceInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelPriceInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HotelPriceInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HotelPriceInfo
  * @throws IOException if the JSON string is invalid with respect to HotelPriceInfo
  */
  public static HotelPriceInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelPriceInfo.class);
  }

 /**
  * Convert an instance of HotelPriceInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

