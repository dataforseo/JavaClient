/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * ScoreByCategories
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T10:30:03.431691300+03:00[Europe/Kiev]")
public class ScoreByCategories {
  public static final String SERIALIZED_NAME_OVERALL = "overall";
  @SerializedName(SERIALIZED_NAME_OVERALL)
  private Float overall;

  public static final String SERIALIZED_NAME_THINGS_TO_DO = "things_to_do";
  @SerializedName(SERIALIZED_NAME_THINGS_TO_DO)
  private Float thingsToDo;

  public static final String SERIALIZED_NAME_RESTAURANTS = "restaurants";
  @SerializedName(SERIALIZED_NAME_RESTAURANTS)
  private Float restaurants;

  public static final String SERIALIZED_NAME_TRANSIT = "transit";
  @SerializedName(SERIALIZED_NAME_TRANSIT)
  private Float transit;

  public static final String SERIALIZED_NAME_AIRPORT_ACCESS = "airport_access";
  @SerializedName(SERIALIZED_NAME_AIRPORT_ACCESS)
  private Float airportAccess;

  public ScoreByCategories() {
  }

  public ScoreByCategories overall(Float overall) {
    this.overall = overall;
    return this;
  }

   /**
   * overall score of the hotel location indicates the overall score of the hotel’s location in the range from 1 to 5; calculated based on data from the hotel’s proximity to nearby things to do and restaurants, transportation, and airports; note that the criteria are not weighted equally in the overall score
   * @return overall
  **/
  @javax.annotation.Nullable
  public Float getOverall() {
    return overall;
  }

  public void setOverall(Float overall) {
    this.overall = overall;
  }


  public ScoreByCategories thingsToDo(Float thingsToDo) {
    this.thingsToDo = thingsToDo;
    return this;
  }

   /**
   * score relative to nearby things to do indicates the score of the hotel’s location in the range from 1 to 5; calculated based on data from the hotel’s proximity to nearby things to do
   * @return thingsToDo
  **/
  @javax.annotation.Nullable
  public Float getThingsToDo() {
    return thingsToDo;
  }

  public void setThingsToDo(Float thingsToDo) {
    this.thingsToDo = thingsToDo;
  }


  public ScoreByCategories restaurants(Float restaurants) {
    this.restaurants = restaurants;
    return this;
  }

   /**
   * score relative to nearby restaurants indicates the score of the hotel’s location in the range from 1 to 5; calculated based on data from the hotel’s proximity to nearby restaurants
   * @return restaurants
  **/
  @javax.annotation.Nullable
  public Float getRestaurants() {
    return restaurants;
  }

  public void setRestaurants(Float restaurants) {
    this.restaurants = restaurants;
  }


  public ScoreByCategories transit(Float transit) {
    this.transit = transit;
    return this;
  }

   /**
   * score relative to nearby transit options indicates the score of the hotel’s location in the range from 1 to 5; calculated based on data from the hotel’s proximity to nearby transit options
   * @return transit
  **/
  @javax.annotation.Nullable
  public Float getTransit() {
    return transit;
  }

  public void setTransit(Float transit) {
    this.transit = transit;
  }


  public ScoreByCategories airportAccess(Float airportAccess) {
    this.airportAccess = airportAccess;
    return this;
  }

   /**
   * score relative to nearby airports indicates the score of the hotel’s location in the range from 1 to 5; calculated based on data from the hotel’s proximity to nearby airports
   * @return airportAccess
  **/
  @javax.annotation.Nullable
  public Float getAirportAccess() {
    return airportAccess;
  }

  public void setAirportAccess(Float airportAccess) {
    this.airportAccess = airportAccess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScoreByCategories scoreByCategories = (ScoreByCategories) o;
    return Objects.equals(this.overall, scoreByCategories.overall) &&
        Objects.equals(this.thingsToDo, scoreByCategories.thingsToDo) &&
        Objects.equals(this.restaurants, scoreByCategories.restaurants) &&
        Objects.equals(this.transit, scoreByCategories.transit) &&
        Objects.equals(this.airportAccess, scoreByCategories.airportAccess);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(overall, thingsToDo, restaurants, transit, airportAccess);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScoreByCategories {\n");
    sb.append("    overall: ").append(toIndentedString(overall)).append("\n");
    sb.append("    thingsToDo: ").append(toIndentedString(thingsToDo)).append("\n");
    sb.append("    restaurants: ").append(toIndentedString(restaurants)).append("\n");
    sb.append("    transit: ").append(toIndentedString(transit)).append("\n");
    sb.append("    airportAccess: ").append(toIndentedString(airportAccess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("overall");
    openapiFields.add("things_to_do");
    openapiFields.add("restaurants");
    openapiFields.add("transit");
    openapiFields.add("airport_access");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ScoreByCategories
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScoreByCategories.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScoreByCategories is not found in the empty JSON string", ScoreByCategories.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScoreByCategories.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScoreByCategories` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScoreByCategories.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScoreByCategories' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScoreByCategories> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScoreByCategories.class));

       return (TypeAdapter<T>) new TypeAdapter<ScoreByCategories>() {
           @Override
           public void write(JsonWriter out, ScoreByCategories value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScoreByCategories read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ScoreByCategories given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ScoreByCategories
  * @throws IOException if the JSON string is invalid with respect to ScoreByCategories
  */
  public static ScoreByCategories fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScoreByCategories.class);
  }

 /**
  * Convert an instance of ScoreByCategories to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

