/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AmazonDeliveryInfo;
import org.dataforseo.client.model.BaseAmazonSerpElementItem;
import org.dataforseo.client.model.Price;
import org.dataforseo.client.model.RatingElement;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AmazonAmazonSellerItemSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-05T09:46:18.018897200+03:00[Europe/Kiev]")
public class AmazonAmazonSellerItemSerpElementItem extends BaseAmazonSerpElementItem {
  public static final String SERIALIZED_NAME_RANK_GROUP = "rank_group";
  @SerializedName(SERIALIZED_NAME_RANK_GROUP)
  private Integer rankGroup;

  public static final String SERIALIZED_NAME_RANK_ABSOLUTE = "rank_absolute";
  @SerializedName(SERIALIZED_NAME_RANK_ABSOLUTE)
  private Integer rankAbsolute;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_XPATH = "xpath";
  @SerializedName(SERIALIZED_NAME_XPATH)
  private String xpath;

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private String sellerName;

  public static final String SERIALIZED_NAME_SELLER_URL = "seller_url";
  @SerializedName(SERIALIZED_NAME_SELLER_URL)
  private String sellerUrl;

  public static final String SERIALIZED_NAME_SHIPS_FROM = "ships_from";
  @SerializedName(SERIALIZED_NAME_SHIPS_FROM)
  private String shipsFrom;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Price price;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingElement rating;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CONDITION_DESCRIPTION = "condition_description";
  @SerializedName(SERIALIZED_NAME_CONDITION_DESCRIPTION)
  private String conditionDescription;

  public static final String SERIALIZED_NAME_DELIVERY_INFO = "delivery_info";
  @SerializedName(SERIALIZED_NAME_DELIVERY_INFO)
  private AmazonDeliveryInfo deliveryInfo;

  public AmazonAmazonSellerItemSerpElementItem() {
    this.type = this.getClass().getSimpleName();
  }

  public AmazonAmazonSellerItemSerpElementItem rankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
    return this;
  }

   /**
   * position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group
   * @return rankGroup
  **/
  @javax.annotation.Nullable
  public Integer getRankGroup() {
    return rankGroup;
  }

  public void setRankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
  }


  public AmazonAmazonSellerItemSerpElementItem rankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
    return this;
  }

   /**
   * absolute rank in SERP absolute position among all the elements found in Amazon Sellers SERP
   * @return rankAbsolute
  **/
  @javax.annotation.Nullable
  public Integer getRankAbsolute() {
    return rankAbsolute;
  }

  public void setRankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
  }


  public AmazonAmazonSellerItemSerpElementItem position(String position) {
    this.position = position;
    return this;
  }

   /**
   * alignment of the element in SERP possible values: left, right
   * @return position
  **/
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public AmazonAmazonSellerItemSerpElementItem xpath(String xpath) {
    this.xpath = xpath;
    return this;
  }

   /**
   * XPath of the element
   * @return xpath
  **/
  @javax.annotation.Nullable
  public String getXpath() {
    return xpath;
  }

  public void setXpath(String xpath) {
    this.xpath = xpath;
  }


  public AmazonAmazonSellerItemSerpElementItem sellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

   /**
   * business name of the seller
   * @return sellerName
  **/
  @javax.annotation.Nullable
  public String getSellerName() {
    return sellerName;
  }

  public void setSellerName(String sellerName) {
    this.sellerName = sellerName;
  }


  public AmazonAmazonSellerItemSerpElementItem sellerUrl(String sellerUrl) {
    this.sellerUrl = sellerUrl;
    return this;
  }

   /**
   * url forwarding to the sellerâ€™s page on Amazon
   * @return sellerUrl
  **/
  @javax.annotation.Nullable
  public String getSellerUrl() {
    return sellerUrl;
  }

  public void setSellerUrl(String sellerUrl) {
    this.sellerUrl = sellerUrl;
  }


  public AmazonAmazonSellerItemSerpElementItem shipsFrom(String shipsFrom) {
    this.shipsFrom = shipsFrom;
    return this;
  }

   /**
   * sender company name
   * @return shipsFrom
  **/
  @javax.annotation.Nullable
  public String getShipsFrom() {
    return shipsFrom;
  }

  public void setShipsFrom(String shipsFrom) {
    this.shipsFrom = shipsFrom;
  }


  public AmazonAmazonSellerItemSerpElementItem price(Price price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public Price getPrice() {
    return price;
  }

  public void setPrice(Price price) {
    this.price = price;
  }


  public AmazonAmazonSellerItemSerpElementItem rating(RatingElement rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  public RatingElement getRating() {
    return rating;
  }

  public void setRating(RatingElement rating) {
    this.rating = rating;
  }


  public AmazonAmazonSellerItemSerpElementItem condition(String condition) {
    this.condition = condition;
    return this;
  }

   /**
   * product condition condition of the product offered by the seller
   * @return condition
  **/
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public AmazonAmazonSellerItemSerpElementItem conditionDescription(String conditionDescription) {
    this.conditionDescription = conditionDescription;
    return this;
  }

   /**
   * product condition details expanded details on the condition of the product offered by the seller
   * @return conditionDescription
  **/
  @javax.annotation.Nullable
  public String getConditionDescription() {
    return conditionDescription;
  }

  public void setConditionDescription(String conditionDescription) {
    this.conditionDescription = conditionDescription;
  }


  public AmazonAmazonSellerItemSerpElementItem deliveryInfo(AmazonDeliveryInfo deliveryInfo) {
    this.deliveryInfo = deliveryInfo;
    return this;
  }

   /**
   * Get deliveryInfo
   * @return deliveryInfo
  **/
  @javax.annotation.Nullable
  public AmazonDeliveryInfo getDeliveryInfo() {
    return deliveryInfo;
  }

  public void setDeliveryInfo(AmazonDeliveryInfo deliveryInfo) {
    this.deliveryInfo = deliveryInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmazonAmazonSellerItemSerpElementItem amazonAmazonSellerItemSerpElementItem = (AmazonAmazonSellerItemSerpElementItem) o;
    return Objects.equals(this.rankGroup, amazonAmazonSellerItemSerpElementItem.rankGroup) &&
        Objects.equals(this.rankAbsolute, amazonAmazonSellerItemSerpElementItem.rankAbsolute) &&
        Objects.equals(this.position, amazonAmazonSellerItemSerpElementItem.position) &&
        Objects.equals(this.xpath, amazonAmazonSellerItemSerpElementItem.xpath) &&
        Objects.equals(this.sellerName, amazonAmazonSellerItemSerpElementItem.sellerName) &&
        Objects.equals(this.sellerUrl, amazonAmazonSellerItemSerpElementItem.sellerUrl) &&
        Objects.equals(this.shipsFrom, amazonAmazonSellerItemSerpElementItem.shipsFrom) &&
        Objects.equals(this.price, amazonAmazonSellerItemSerpElementItem.price) &&
        Objects.equals(this.rating, amazonAmazonSellerItemSerpElementItem.rating) &&
        Objects.equals(this.condition, amazonAmazonSellerItemSerpElementItem.condition) &&
        Objects.equals(this.conditionDescription, amazonAmazonSellerItemSerpElementItem.conditionDescription) &&
        Objects.equals(this.deliveryInfo, amazonAmazonSellerItemSerpElementItem.deliveryInfo) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rankGroup, rankAbsolute, position, xpath, sellerName, sellerUrl, shipsFrom, price, rating, condition, conditionDescription, deliveryInfo, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmazonAmazonSellerItemSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    rankGroup: ").append(toIndentedString(rankGroup)).append("\n");
    sb.append("    rankAbsolute: ").append(toIndentedString(rankAbsolute)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    xpath: ").append(toIndentedString(xpath)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sellerUrl: ").append(toIndentedString(sellerUrl)).append("\n");
    sb.append("    shipsFrom: ").append(toIndentedString(shipsFrom)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    conditionDescription: ").append(toIndentedString(conditionDescription)).append("\n");
    sb.append("    deliveryInfo: ").append(toIndentedString(deliveryInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("position");
    openapiFields.add("xpath");
    openapiFields.add("seller_name");
    openapiFields.add("seller_url");
    openapiFields.add("ships_from");
    openapiFields.add("price");
    openapiFields.add("rating");
    openapiFields.add("condition");
    openapiFields.add("condition_description");
    openapiFields.add("delivery_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AmazonAmazonSellerItemSerpElementItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmazonAmazonSellerItemSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmazonAmazonSellerItemSerpElementItem is not found in the empty JSON string", AmazonAmazonSellerItemSerpElementItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AmazonAmazonSellerItemSerpElementItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AmazonAmazonSellerItemSerpElementItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmazonAmazonSellerItemSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmazonAmazonSellerItemSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmazonAmazonSellerItemSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmazonAmazonSellerItemSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AmazonAmazonSellerItemSerpElementItem>() {
           @Override
           public void write(JsonWriter out, AmazonAmazonSellerItemSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AmazonAmazonSellerItemSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AmazonAmazonSellerItemSerpElementItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AmazonAmazonSellerItemSerpElementItem
  * @throws IOException if the JSON string is invalid with respect to AmazonAmazonSellerItemSerpElementItem
  */
  public static AmazonAmazonSellerItemSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmazonAmazonSellerItemSerpElementItem.class);
  }

 /**
  * Convert an instance of AmazonAmazonSellerItemSerpElementItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

