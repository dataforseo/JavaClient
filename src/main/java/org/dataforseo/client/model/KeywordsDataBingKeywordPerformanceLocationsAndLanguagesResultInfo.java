/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.AvailableLocations;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-26T17:31:56.777561200+03:00[Europe/Kiev]")
public class KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo {
  public static final String SERIALIZED_NAME_LANGUAGE_NAME = "language_name";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_NAME)
  private Integer languageName;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_AVAILABLE_LOCATIONS = "available_locations";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LOCATIONS)
  private List<AvailableLocations> availableLocations;

  public KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo() {
  }

  public KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo languageName(Integer languageName) {
    this.languageName = languageName;
    return this;
  }

   /**
   * language name
   * @return languageName
  **/
  @javax.annotation.Nullable
  public Integer getLanguageName() {
    return languageName;
  }

  public void setLanguageName(Integer languageName) {
    this.languageName = languageName;
  }


  public KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * language code
   * @return languageCode
  **/
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo availableLocations(List<AvailableLocations> availableLocations) {
    this.availableLocations = availableLocations;
    return this;
  }

  public KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo addAvailableLocationsItem(AvailableLocations availableLocationsItem) {
    if (this.availableLocations == null) {
      this.availableLocations = new ArrayList<>();
    }
    this.availableLocations.add(availableLocationsItem);
    return this;
  }

   /**
   * supported locations contains locations supported in combination with a specific language
   * @return availableLocations
  **/
  @javax.annotation.Nullable
  public List<AvailableLocations> getAvailableLocations() {
    return availableLocations;
  }

  public void setAvailableLocations(List<AvailableLocations> availableLocations) {
    this.availableLocations = availableLocations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo keywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo = (KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo) o;
    return Objects.equals(this.languageName, keywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.languageName) &&
        Objects.equals(this.languageCode, keywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.languageCode) &&
        Objects.equals(this.availableLocations, keywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.availableLocations);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(languageName, languageCode, availableLocations);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo {\n");
    sb.append("    languageName: ").append(toIndentedString(languageName)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    availableLocations: ").append(toIndentedString(availableLocations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language_name");
    openapiFields.add("language_code");
    openapiFields.add("available_locations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo is not found in the empty JSON string", KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      if (jsonObj.get("available_locations") != null && !jsonObj.get("available_locations").isJsonNull()) {
        JsonArray jsonArrayavailableLocations = jsonObj.getAsJsonArray("available_locations");
        if (jsonArrayavailableLocations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("available_locations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `available_locations` to be an array in the JSON string but got `%s`", jsonObj.get("available_locations").toString()));
          }

          // validate the optional field `available_locations` (array)
          for (int i = 0; i < jsonArrayavailableLocations.size(); i++) {
            AvailableLocations.validateJsonElement(jsonArrayavailableLocations.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo>() {
           @Override
           public void write(JsonWriter out, KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo
  * @throws IOException if the JSON string is invalid with respect to KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo
  */
  public static KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo.class);
  }

 /**
  * Convert an instance of KeywordsDataBingKeywordPerformanceLocationsAndLanguagesResultInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

