/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.BaseMerchantSerpElementItem;
import org.dataforseo.client.model.ProductSeller;
import org.dataforseo.client.model.ProductVariation;
import org.dataforseo.client.model.RatingElement;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * ProductInfoElementMerchantSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-02T09:14:36.455142500+03:00[Europe/Kiev]")
public class ProductInfoElementMerchantSerpElementItem extends BaseMerchantSerpElementItem {
  public static final String SERIALIZED_NAME_RANK_GROUP = "rank_group";
  @SerializedName(SERIALIZED_NAME_RANK_GROUP)
  private Integer rankGroup;

  public static final String SERIALIZED_NAME_RANK_ABSOLUTE = "rank_absolute";
  @SerializedName(SERIALIZED_NAME_RANK_ABSOLUTE)
  private Integer rankAbsolute;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_PRODUCT_ID = "product_id";
  @SerializedName(SERIALIZED_NAME_PRODUCT_ID)
  private String productId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<String> images;

  public static final String SERIALIZED_NAME_FEATURES = "features";
  @SerializedName(SERIALIZED_NAME_FEATURES)
  private List<String> features;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingElement rating;

  public static final String SERIALIZED_NAME_SELLER_REVIEWS_COUNT = "seller_reviews_count";
  @SerializedName(SERIALIZED_NAME_SELLER_REVIEWS_COUNT)
  private Long sellerReviewsCount;

  public static final String SERIALIZED_NAME_SELLERS = "sellers";
  @SerializedName(SERIALIZED_NAME_SELLERS)
  private List<ProductSeller> sellers;

  public static final String SERIALIZED_NAME_VARIATIONS = "variations";
  @SerializedName(SERIALIZED_NAME_VARIATIONS)
  private List<ProductVariation> variations;

  public ProductInfoElementMerchantSerpElementItem() {
    this.type = this.getClass().getSimpleName();
  }

  public ProductInfoElementMerchantSerpElementItem rankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
    return this;
  }

   /**
   * position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group
   * @return rankGroup
  **/
  @javax.annotation.Nullable
  public Integer getRankGroup() {
    return rankGroup;
  }

  public void setRankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
  }


  public ProductInfoElementMerchantSerpElementItem rankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
    return this;
  }

   /**
   * absolute rank on the product specification page absolute position among all the elements found on the product specification page
   * @return rankAbsolute
  **/
  @javax.annotation.Nullable
  public Integer getRankAbsolute() {
    return rankAbsolute;
  }

  public void setRankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
  }


  public ProductInfoElementMerchantSerpElementItem position(String position) {
    this.position = position;
    return this;
  }

   /**
   * alignment of the element on the product specification page can take the following values: right, left
   * @return position
  **/
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public ProductInfoElementMerchantSerpElementItem productId(String productId) {
    this.productId = productId;
    return this;
  }

   /**
   * product_id received in a POST array ilearn more about the parameter in this help center guide
   * @return productId
  **/
  @javax.annotation.Nullable
  public String getProductId() {
    return productId;
  }

  public void setProductId(String productId) {
    this.productId = productId;
  }


  public ProductInfoElementMerchantSerpElementItem title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title of the product
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ProductInfoElementMerchantSerpElementItem description(String description) {
    this.description = description;
    return this;
  }

   /**
   * description of the product
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ProductInfoElementMerchantSerpElementItem url(String url) {
    this.url = url;
    return this;
  }

   /**
   * product url url of the product on Google Shopping
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ProductInfoElementMerchantSerpElementItem images(List<String> images) {
    this.images = images;
    return this;
  }

  public ProductInfoElementMerchantSerpElementItem addImagesItem(String imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * product images contains urls to product images
   * @return images
  **/
  @javax.annotation.Nullable
  public List<String> getImages() {
    return images;
  }

  public void setImages(List<String> images) {
    this.images = images;
  }


  public ProductInfoElementMerchantSerpElementItem features(List<String> features) {
    this.features = features;
    return this;
  }

  public ProductInfoElementMerchantSerpElementItem addFeaturesItem(String featuresItem) {
    if (this.features == null) {
      this.features = new ArrayList<>();
    }
    this.features.add(featuresItem);
    return this;
  }

   /**
   * product features contains snippets with the description of product features
   * @return features
  **/
  @javax.annotation.Nullable
  public List<String> getFeatures() {
    return features;
  }

  public void setFeatures(List<String> features) {
    this.features = features;
  }


  public ProductInfoElementMerchantSerpElementItem rating(RatingElement rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  public RatingElement getRating() {
    return rating;
  }

  public void setRating(RatingElement rating) {
    this.rating = rating;
  }


  public ProductInfoElementMerchantSerpElementItem sellerReviewsCount(Long sellerReviewsCount) {
    this.sellerReviewsCount = sellerReviewsCount;
    return this;
  }

   /**
   * number of seller reviews number of reviews on the product seller’s account
   * @return sellerReviewsCount
  **/
  @javax.annotation.Nullable
  public Long getSellerReviewsCount() {
    return sellerReviewsCount;
  }

  public void setSellerReviewsCount(Long sellerReviewsCount) {
    this.sellerReviewsCount = sellerReviewsCount;
  }


  public ProductInfoElementMerchantSerpElementItem sellers(List<ProductSeller> sellers) {
    this.sellers = sellers;
    return this;
  }

  public ProductInfoElementMerchantSerpElementItem addSellersItem(ProductSeller sellersItem) {
    if (this.sellers == null) {
      this.sellers = new ArrayList<>();
    }
    this.sellers.add(sellersItem);
    return this;
  }

   /**
   * sellers of the product number of reviews on the product seller’s account
   * @return sellers
  **/
  @javax.annotation.Nullable
  public List<ProductSeller> getSellers() {
    return sellers;
  }

  public void setSellers(List<ProductSeller> sellers) {
    this.sellers = sellers;
  }


  public ProductInfoElementMerchantSerpElementItem variations(List<ProductVariation> variations) {
    this.variations = variations;
    return this;
  }

  public ProductInfoElementMerchantSerpElementItem addVariationsItem(ProductVariation variationsItem) {
    if (this.variations == null) {
      this.variations = new ArrayList<>();
    }
    this.variations.add(variationsItem);
    return this;
  }

   /**
   * variations of the product contains brief information about different product variations
   * @return variations
  **/
  @javax.annotation.Nullable
  public List<ProductVariation> getVariations() {
    return variations;
  }

  public void setVariations(List<ProductVariation> variations) {
    this.variations = variations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductInfoElementMerchantSerpElementItem productInfoElementMerchantSerpElementItem = (ProductInfoElementMerchantSerpElementItem) o;
    return Objects.equals(this.rankGroup, productInfoElementMerchantSerpElementItem.rankGroup) &&
        Objects.equals(this.rankAbsolute, productInfoElementMerchantSerpElementItem.rankAbsolute) &&
        Objects.equals(this.position, productInfoElementMerchantSerpElementItem.position) &&
        Objects.equals(this.productId, productInfoElementMerchantSerpElementItem.productId) &&
        Objects.equals(this.title, productInfoElementMerchantSerpElementItem.title) &&
        Objects.equals(this.description, productInfoElementMerchantSerpElementItem.description) &&
        Objects.equals(this.url, productInfoElementMerchantSerpElementItem.url) &&
        Objects.equals(this.images, productInfoElementMerchantSerpElementItem.images) &&
        Objects.equals(this.features, productInfoElementMerchantSerpElementItem.features) &&
        Objects.equals(this.rating, productInfoElementMerchantSerpElementItem.rating) &&
        Objects.equals(this.sellerReviewsCount, productInfoElementMerchantSerpElementItem.sellerReviewsCount) &&
        Objects.equals(this.sellers, productInfoElementMerchantSerpElementItem.sellers) &&
        Objects.equals(this.variations, productInfoElementMerchantSerpElementItem.variations) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rankGroup, rankAbsolute, position, productId, title, description, url, images, features, rating, sellerReviewsCount, sellers, variations, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductInfoElementMerchantSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    rankGroup: ").append(toIndentedString(rankGroup)).append("\n");
    sb.append("    rankAbsolute: ").append(toIndentedString(rankAbsolute)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    productId: ").append(toIndentedString(productId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    features: ").append(toIndentedString(features)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    sellerReviewsCount: ").append(toIndentedString(sellerReviewsCount)).append("\n");
    sb.append("    sellers: ").append(toIndentedString(sellers)).append("\n");
    sb.append("    variations: ").append(toIndentedString(variations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("position");
    openapiFields.add("product_id");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("url");
    openapiFields.add("images");
    openapiFields.add("features");
    openapiFields.add("rating");
    openapiFields.add("seller_reviews_count");
    openapiFields.add("sellers");
    openapiFields.add("variations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ProductInfoElementMerchantSerpElementItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductInfoElementMerchantSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductInfoElementMerchantSerpElementItem is not found in the empty JSON string", ProductInfoElementMerchantSerpElementItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductInfoElementMerchantSerpElementItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductInfoElementMerchantSerpElementItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductInfoElementMerchantSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductInfoElementMerchantSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductInfoElementMerchantSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductInfoElementMerchantSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductInfoElementMerchantSerpElementItem>() {
           @Override
           public void write(JsonWriter out, ProductInfoElementMerchantSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductInfoElementMerchantSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ProductInfoElementMerchantSerpElementItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ProductInfoElementMerchantSerpElementItem
  * @throws IOException if the JSON string is invalid with respect to ProductInfoElementMerchantSerpElementItem
  */
  public static ProductInfoElementMerchantSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductInfoElementMerchantSerpElementItem.class);
  }

 /**
  * Convert an instance of ProductInfoElementMerchantSerpElementItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

