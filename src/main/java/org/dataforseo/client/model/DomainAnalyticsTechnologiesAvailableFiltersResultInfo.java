/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * DomainAnalyticsTechnologiesAvailableFiltersResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T18:32:56.856102800+03:00[Europe/Kiev]")
public class DomainAnalyticsTechnologiesAvailableFiltersResultInfo {
  public static final String SERIALIZED_NAME_DOMAINS_BY_TECHNOLOGY = "domains_by_technology";
  @SerializedName(SERIALIZED_NAME_DOMAINS_BY_TECHNOLOGY)
  private Map<String, String> domainsByTechnology;

  public static final String SERIALIZED_NAME_AGGREGATION_TECHNOLOGIES = "aggregation_technologies";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_TECHNOLOGIES)
  private Map<String, String> aggregationTechnologies;

  public static final String SERIALIZED_NAME_TECHNOLOGIES_SUMMARY = "technologies_summary";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGIES_SUMMARY)
  private Map<String, String> technologiesSummary;

  public static final String SERIALIZED_NAME_DOMAINS_BY_HTML_TERMS = "domains_by_html_terms";
  @SerializedName(SERIALIZED_NAME_DOMAINS_BY_HTML_TERMS)
  private Map<String, String> domainsByHtmlTerms;

  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo() {
  }

  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo domainsByTechnology(Map<String, String> domainsByTechnology) {
    this.domainsByTechnology = domainsByTechnology;
    return this;
  }

  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo putDomainsByTechnologyItem(String key, String domainsByTechnologyItem) {
    if (this.domainsByTechnology == null) {
      this.domainsByTechnology = new HashMap<>();
    }
    this.domainsByTechnology.put(key, domainsByTechnologyItem);
    return this;
  }

   /**
   * Get domainsByTechnology
   * @return domainsByTechnology
  **/
  @javax.annotation.Nullable
  public Map<String, String> getDomainsByTechnology() {
    return domainsByTechnology;
  }

  public void setDomainsByTechnology(Map<String, String> domainsByTechnology) {
    this.domainsByTechnology = domainsByTechnology;
  }


  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo aggregationTechnologies(Map<String, String> aggregationTechnologies) {
    this.aggregationTechnologies = aggregationTechnologies;
    return this;
  }

  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo putAggregationTechnologiesItem(String key, String aggregationTechnologiesItem) {
    if (this.aggregationTechnologies == null) {
      this.aggregationTechnologies = new HashMap<>();
    }
    this.aggregationTechnologies.put(key, aggregationTechnologiesItem);
    return this;
  }

   /**
   * Get aggregationTechnologies
   * @return aggregationTechnologies
  **/
  @javax.annotation.Nullable
  public Map<String, String> getAggregationTechnologies() {
    return aggregationTechnologies;
  }

  public void setAggregationTechnologies(Map<String, String> aggregationTechnologies) {
    this.aggregationTechnologies = aggregationTechnologies;
  }


  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo technologiesSummary(Map<String, String> technologiesSummary) {
    this.technologiesSummary = technologiesSummary;
    return this;
  }

  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo putTechnologiesSummaryItem(String key, String technologiesSummaryItem) {
    if (this.technologiesSummary == null) {
      this.technologiesSummary = new HashMap<>();
    }
    this.technologiesSummary.put(key, technologiesSummaryItem);
    return this;
  }

   /**
   * Get technologiesSummary
   * @return technologiesSummary
  **/
  @javax.annotation.Nullable
  public Map<String, String> getTechnologiesSummary() {
    return technologiesSummary;
  }

  public void setTechnologiesSummary(Map<String, String> technologiesSummary) {
    this.technologiesSummary = technologiesSummary;
  }


  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo domainsByHtmlTerms(Map<String, String> domainsByHtmlTerms) {
    this.domainsByHtmlTerms = domainsByHtmlTerms;
    return this;
  }

  public DomainAnalyticsTechnologiesAvailableFiltersResultInfo putDomainsByHtmlTermsItem(String key, String domainsByHtmlTermsItem) {
    if (this.domainsByHtmlTerms == null) {
      this.domainsByHtmlTerms = new HashMap<>();
    }
    this.domainsByHtmlTerms.put(key, domainsByHtmlTermsItem);
    return this;
  }

   /**
   * Get domainsByHtmlTerms
   * @return domainsByHtmlTerms
  **/
  @javax.annotation.Nullable
  public Map<String, String> getDomainsByHtmlTerms() {
    return domainsByHtmlTerms;
  }

  public void setDomainsByHtmlTerms(Map<String, String> domainsByHtmlTerms) {
    this.domainsByHtmlTerms = domainsByHtmlTerms;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainAnalyticsTechnologiesAvailableFiltersResultInfo domainAnalyticsTechnologiesAvailableFiltersResultInfo = (DomainAnalyticsTechnologiesAvailableFiltersResultInfo) o;
    return Objects.equals(this.domainsByTechnology, domainAnalyticsTechnologiesAvailableFiltersResultInfo.domainsByTechnology) &&
        Objects.equals(this.aggregationTechnologies, domainAnalyticsTechnologiesAvailableFiltersResultInfo.aggregationTechnologies) &&
        Objects.equals(this.technologiesSummary, domainAnalyticsTechnologiesAvailableFiltersResultInfo.technologiesSummary) &&
        Objects.equals(this.domainsByHtmlTerms, domainAnalyticsTechnologiesAvailableFiltersResultInfo.domainsByHtmlTerms);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(domainsByTechnology, aggregationTechnologies, technologiesSummary, domainsByHtmlTerms);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainAnalyticsTechnologiesAvailableFiltersResultInfo {\n");
    sb.append("    domainsByTechnology: ").append(toIndentedString(domainsByTechnology)).append("\n");
    sb.append("    aggregationTechnologies: ").append(toIndentedString(aggregationTechnologies)).append("\n");
    sb.append("    technologiesSummary: ").append(toIndentedString(technologiesSummary)).append("\n");
    sb.append("    domainsByHtmlTerms: ").append(toIndentedString(domainsByHtmlTerms)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domains_by_technology");
    openapiFields.add("aggregation_technologies");
    openapiFields.add("technologies_summary");
    openapiFields.add("domains_by_html_terms");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DomainAnalyticsTechnologiesAvailableFiltersResultInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainAnalyticsTechnologiesAvailableFiltersResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainAnalyticsTechnologiesAvailableFiltersResultInfo is not found in the empty JSON string", DomainAnalyticsTechnologiesAvailableFiltersResultInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainAnalyticsTechnologiesAvailableFiltersResultInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainAnalyticsTechnologiesAvailableFiltersResultInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainAnalyticsTechnologiesAvailableFiltersResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainAnalyticsTechnologiesAvailableFiltersResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainAnalyticsTechnologiesAvailableFiltersResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainAnalyticsTechnologiesAvailableFiltersResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainAnalyticsTechnologiesAvailableFiltersResultInfo>() {
           @Override
           public void write(JsonWriter out, DomainAnalyticsTechnologiesAvailableFiltersResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainAnalyticsTechnologiesAvailableFiltersResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainAnalyticsTechnologiesAvailableFiltersResultInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainAnalyticsTechnologiesAvailableFiltersResultInfo
  * @throws IOException if the JSON string is invalid with respect to DomainAnalyticsTechnologiesAvailableFiltersResultInfo
  */
  public static DomainAnalyticsTechnologiesAvailableFiltersResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainAnalyticsTechnologiesAvailableFiltersResultInfo.class);
  }

 /**
  * Convert an instance of DomainAnalyticsTechnologiesAvailableFiltersResultInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

