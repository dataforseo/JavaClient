/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * content rating rating related to content_info
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-15T10:15:18.753898100+03:00[Europe/Kiev]")
public class ContentAnalysisRatingInfo {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RATING_VALUE = "rating_value";
  @SerializedName(SERIALIZED_NAME_RATING_VALUE)
  private Double ratingValue;

  public static final String SERIALIZED_NAME_RATING_COUNT = "rating_count";
  @SerializedName(SERIALIZED_NAME_RATING_COUNT)
  private Long ratingCount;

  public static final String SERIALIZED_NAME_MAX_RATING_VALUE = "max_rating_value";
  @SerializedName(SERIALIZED_NAME_MAX_RATING_VALUE)
  private String maxRatingValue;

  public static final String SERIALIZED_NAME_RELATIVE_RATING = "relative_rating";
  @SerializedName(SERIALIZED_NAME_RELATIVE_RATING)
  private Double relativeRating;

  public ContentAnalysisRatingInfo() {
  }

  public ContentAnalysisRatingInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * rating name here you can find the following elements: Max5, Percents, CustomMax
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ContentAnalysisRatingInfo ratingValue(Double ratingValue) {
    this.ratingValue = ratingValue;
    return this;
  }

   /**
   * the value of the rating
   * @return ratingValue
  **/
  @javax.annotation.Nullable
  public Double getRatingValue() {
    return ratingValue;
  }

  public void setRatingValue(Double ratingValue) {
    this.ratingValue = ratingValue;
  }


  public ContentAnalysisRatingInfo ratingCount(Long ratingCount) {
    this.ratingCount = ratingCount;
    return this;
  }

   /**
   * number of votes
   * @return ratingCount
  **/
  @javax.annotation.Nullable
  public Long getRatingCount() {
    return ratingCount;
  }

  public void setRatingCount(Long ratingCount) {
    this.ratingCount = ratingCount;
  }


  public ContentAnalysisRatingInfo maxRatingValue(String maxRatingValue) {
    this.maxRatingValue = maxRatingValue;
    return this;
  }

   /**
   *  maximum value for the rating name
   * @return maxRatingValue
  **/
  @javax.annotation.Nullable
  public String getMaxRatingValue() {
    return maxRatingValue;
  }

  public void setMaxRatingValue(String maxRatingValue) {
    this.maxRatingValue = maxRatingValue;
  }


  public ContentAnalysisRatingInfo relativeRating(Double relativeRating) {
    this.relativeRating = relativeRating;
    return this;
  }

   /**
   * relative rating
   * @return relativeRating
  **/
  @javax.annotation.Nullable
  public Double getRelativeRating() {
    return relativeRating;
  }

  public void setRelativeRating(Double relativeRating) {
    this.relativeRating = relativeRating;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentAnalysisRatingInfo contentAnalysisRatingInfo = (ContentAnalysisRatingInfo) o;
    return Objects.equals(this.name, contentAnalysisRatingInfo.name) &&
        Objects.equals(this.ratingValue, contentAnalysisRatingInfo.ratingValue) &&
        Objects.equals(this.ratingCount, contentAnalysisRatingInfo.ratingCount) &&
        Objects.equals(this.maxRatingValue, contentAnalysisRatingInfo.maxRatingValue) &&
        Objects.equals(this.relativeRating, contentAnalysisRatingInfo.relativeRating);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, ratingValue, ratingCount, maxRatingValue, relativeRating);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentAnalysisRatingInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    ratingValue: ").append(toIndentedString(ratingValue)).append("\n");
    sb.append("    ratingCount: ").append(toIndentedString(ratingCount)).append("\n");
    sb.append("    maxRatingValue: ").append(toIndentedString(maxRatingValue)).append("\n");
    sb.append("    relativeRating: ").append(toIndentedString(relativeRating)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("rating_value");
    openapiFields.add("rating_count");
    openapiFields.add("max_rating_value");
    openapiFields.add("relative_rating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentAnalysisRatingInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentAnalysisRatingInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentAnalysisRatingInfo is not found in the empty JSON string", ContentAnalysisRatingInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentAnalysisRatingInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentAnalysisRatingInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("max_rating_value") != null && !jsonObj.get("max_rating_value").isJsonNull()) && !jsonObj.get("max_rating_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `max_rating_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("max_rating_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentAnalysisRatingInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentAnalysisRatingInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentAnalysisRatingInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentAnalysisRatingInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentAnalysisRatingInfo>() {
           @Override
           public void write(JsonWriter out, ContentAnalysisRatingInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentAnalysisRatingInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentAnalysisRatingInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentAnalysisRatingInfo
  * @throws IOException if the JSON string is invalid with respect to ContentAnalysisRatingInfo
  */
  public static ContentAnalysisRatingInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentAnalysisRatingInfo.class);
  }

 /**
  * Convert an instance of ContentAnalysisRatingInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

