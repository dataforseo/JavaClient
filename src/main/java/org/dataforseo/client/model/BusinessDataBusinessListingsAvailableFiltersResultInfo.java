/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * BusinessDataBusinessListingsAvailableFiltersResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T18:32:56.856102800+03:00[Europe/Kiev]")
public class BusinessDataBusinessListingsAvailableFiltersResultInfo {
  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private Map<String, String> search;

  public static final String SERIALIZED_NAME_CATEGORIES_AGGREGATION = "categories_aggregation";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_AGGREGATION)
  private Map<String, String> categoriesAggregation;

  public BusinessDataBusinessListingsAvailableFiltersResultInfo() {
  }

  public BusinessDataBusinessListingsAvailableFiltersResultInfo search(Map<String, String> search) {
    this.search = search;
    return this;
  }

  public BusinessDataBusinessListingsAvailableFiltersResultInfo putSearchItem(String key, String searchItem) {
    if (this.search == null) {
      this.search = new HashMap<>();
    }
    this.search.put(key, searchItem);
    return this;
  }

   /**
   * Get search
   * @return search
  **/
  @javax.annotation.Nullable
  public Map<String, String> getSearch() {
    return search;
  }

  public void setSearch(Map<String, String> search) {
    this.search = search;
  }


  public BusinessDataBusinessListingsAvailableFiltersResultInfo categoriesAggregation(Map<String, String> categoriesAggregation) {
    this.categoriesAggregation = categoriesAggregation;
    return this;
  }

  public BusinessDataBusinessListingsAvailableFiltersResultInfo putCategoriesAggregationItem(String key, String categoriesAggregationItem) {
    if (this.categoriesAggregation == null) {
      this.categoriesAggregation = new HashMap<>();
    }
    this.categoriesAggregation.put(key, categoriesAggregationItem);
    return this;
  }

   /**
   * Get categoriesAggregation
   * @return categoriesAggregation
  **/
  @javax.annotation.Nullable
  public Map<String, String> getCategoriesAggregation() {
    return categoriesAggregation;
  }

  public void setCategoriesAggregation(Map<String, String> categoriesAggregation) {
    this.categoriesAggregation = categoriesAggregation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDataBusinessListingsAvailableFiltersResultInfo businessDataBusinessListingsAvailableFiltersResultInfo = (BusinessDataBusinessListingsAvailableFiltersResultInfo) o;
    return Objects.equals(this.search, businessDataBusinessListingsAvailableFiltersResultInfo.search) &&
        Objects.equals(this.categoriesAggregation, businessDataBusinessListingsAvailableFiltersResultInfo.categoriesAggregation);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(search, categoriesAggregation);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDataBusinessListingsAvailableFiltersResultInfo {\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    categoriesAggregation: ").append(toIndentedString(categoriesAggregation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("search");
    openapiFields.add("categories_aggregation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BusinessDataBusinessListingsAvailableFiltersResultInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessDataBusinessListingsAvailableFiltersResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessDataBusinessListingsAvailableFiltersResultInfo is not found in the empty JSON string", BusinessDataBusinessListingsAvailableFiltersResultInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessDataBusinessListingsAvailableFiltersResultInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessDataBusinessListingsAvailableFiltersResultInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessDataBusinessListingsAvailableFiltersResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessDataBusinessListingsAvailableFiltersResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessDataBusinessListingsAvailableFiltersResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessDataBusinessListingsAvailableFiltersResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessDataBusinessListingsAvailableFiltersResultInfo>() {
           @Override
           public void write(JsonWriter out, BusinessDataBusinessListingsAvailableFiltersResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessDataBusinessListingsAvailableFiltersResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessDataBusinessListingsAvailableFiltersResultInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessDataBusinessListingsAvailableFiltersResultInfo
  * @throws IOException if the JSON string is invalid with respect to BusinessDataBusinessListingsAvailableFiltersResultInfo
  */
  public static BusinessDataBusinessListingsAvailableFiltersResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessDataBusinessListingsAvailableFiltersResultInfo.class);
  }

 /**
  * Convert an instance of BusinessDataBusinessListingsAvailableFiltersResultInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

