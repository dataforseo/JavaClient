/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * EventDates
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-21T10:44:48.237213300+03:00[Europe/Kiev]")
public class EventDates {
  public static final String SERIALIZED_NAME_START_DATETIME = "start_datetime";
  @SerializedName(SERIALIZED_NAME_START_DATETIME)
  private String startDatetime;

  public static final String SERIALIZED_NAME_END_DATETIME = "end_datetime";
  @SerializedName(SERIALIZED_NAME_END_DATETIME)
  private String endDatetime;

  public static final String SERIALIZED_NAME_DISPLAYED_DATES = "displayed_dates";
  @SerializedName(SERIALIZED_NAME_DISPLAYED_DATES)
  private String displayedDates;

  public EventDates() {
  }

  public EventDates startDatetime(String startDatetime) {
    this.startDatetime = startDatetime;
    return this;
  }

   /**
   * date and time when the event starts if time zone is specified in the event, value will be returned in the UTC format: “yyyy-mm-ddThh-mm-ss+00:00” example: 2019-11-15T12:57:46+00:00 if time zone is not specified in the event, unspecified local time will be returned in the following format: “yyyy-mm-ddThh-mm-ss” example: 2019-11-15T12:57:46
   * @return startDatetime
  **/
  @javax.annotation.Nullable
  public String getStartDatetime() {
    return startDatetime;
  }

  public void setStartDatetime(String startDatetime) {
    this.startDatetime = startDatetime;
  }


  public EventDates endDatetime(String endDatetime) {
    this.endDatetime = endDatetime;
    return this;
  }

   /**
   * date and time when the event ends if time zone is specified in the event, value will be returned in the UTC format: “yyyy-mm-ddThh-mm-ss+00:00” example: 2019-11-15T12:57:46+00:00 if time zone is not specified in the event, unspecified local time will be returned in the following format: “yyyy-mm-ddThh-mm-ss” example: 2019-11-15T12:57:46
   * @return endDatetime
  **/
  @javax.annotation.Nullable
  public String getEndDatetime() {
    return endDatetime;
  }

  public void setEndDatetime(String endDatetime) {
    this.endDatetime = endDatetime;
  }


  public EventDates displayedDates(String displayedDates) {
    this.displayedDates = displayedDates;
    return this;
  }

   /**
   * date or date range as it is displayed in SERP
   * @return displayedDates
  **/
  @javax.annotation.Nullable
  public String getDisplayedDates() {
    return displayedDates;
  }

  public void setDisplayedDates(String displayedDates) {
    this.displayedDates = displayedDates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventDates eventDates = (EventDates) o;
    return Objects.equals(this.startDatetime, eventDates.startDatetime) &&
        Objects.equals(this.endDatetime, eventDates.endDatetime) &&
        Objects.equals(this.displayedDates, eventDates.displayedDates);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(startDatetime, endDatetime, displayedDates);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventDates {\n");
    sb.append("    startDatetime: ").append(toIndentedString(startDatetime)).append("\n");
    sb.append("    endDatetime: ").append(toIndentedString(endDatetime)).append("\n");
    sb.append("    displayedDates: ").append(toIndentedString(displayedDates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("start_datetime");
    openapiFields.add("end_datetime");
    openapiFields.add("displayed_dates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EventDates
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventDates.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventDates is not found in the empty JSON string", EventDates.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventDates.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventDates` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("start_datetime") != null && !jsonObj.get("start_datetime").isJsonNull()) && !jsonObj.get("start_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_datetime").toString()));
      }
      if ((jsonObj.get("end_datetime") != null && !jsonObj.get("end_datetime").isJsonNull()) && !jsonObj.get("end_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_datetime").toString()));
      }
      if ((jsonObj.get("displayed_dates") != null && !jsonObj.get("displayed_dates").isJsonNull()) && !jsonObj.get("displayed_dates").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayed_dates` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayed_dates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventDates.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventDates' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventDates> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventDates.class));

       return (TypeAdapter<T>) new TypeAdapter<EventDates>() {
           @Override
           public void write(JsonWriter out, EventDates value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventDates read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EventDates given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EventDates
  * @throws IOException if the JSON string is invalid with respect to EventDates
  */
  public static EventDates fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventDates.class);
  }

 /**
  * Convert an instance of EventDates to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

