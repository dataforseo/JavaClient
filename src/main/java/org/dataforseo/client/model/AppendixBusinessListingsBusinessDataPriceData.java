/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AppendixKeywordBingKeywordsDataPriceDataInfo;
import org.dataforseo.client.model.AppendixTaskKeywordsDataPriceDataInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AppendixBusinessListingsBusinessDataPriceData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-15T10:15:18.753898100+03:00[Europe/Kiev]")
public class AppendixBusinessListingsBusinessDataPriceData {
  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private AppendixTaskKeywordsDataPriceDataInfo categories;

  public static final String SERIALIZED_NAME_CATEGORIES_AGGREGATION = "categories_aggregation";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_AGGREGATION)
  private AppendixKeywordBingKeywordsDataPriceDataInfo categoriesAggregation;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private AppendixTaskKeywordsDataPriceDataInfo locations;

  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private AppendixKeywordBingKeywordsDataPriceDataInfo search;

  public AppendixBusinessListingsBusinessDataPriceData() {
  }

  public AppendixBusinessListingsBusinessDataPriceData categories(AppendixTaskKeywordsDataPriceDataInfo categories) {
    this.categories = categories;
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  public AppendixTaskKeywordsDataPriceDataInfo getCategories() {
    return categories;
  }

  public void setCategories(AppendixTaskKeywordsDataPriceDataInfo categories) {
    this.categories = categories;
  }


  public AppendixBusinessListingsBusinessDataPriceData categoriesAggregation(AppendixKeywordBingKeywordsDataPriceDataInfo categoriesAggregation) {
    this.categoriesAggregation = categoriesAggregation;
    return this;
  }

   /**
   * Get categoriesAggregation
   * @return categoriesAggregation
  **/
  @javax.annotation.Nullable
  public AppendixKeywordBingKeywordsDataPriceDataInfo getCategoriesAggregation() {
    return categoriesAggregation;
  }

  public void setCategoriesAggregation(AppendixKeywordBingKeywordsDataPriceDataInfo categoriesAggregation) {
    this.categoriesAggregation = categoriesAggregation;
  }


  public AppendixBusinessListingsBusinessDataPriceData locations(AppendixTaskKeywordsDataPriceDataInfo locations) {
    this.locations = locations;
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  public AppendixTaskKeywordsDataPriceDataInfo getLocations() {
    return locations;
  }

  public void setLocations(AppendixTaskKeywordsDataPriceDataInfo locations) {
    this.locations = locations;
  }


  public AppendixBusinessListingsBusinessDataPriceData search(AppendixKeywordBingKeywordsDataPriceDataInfo search) {
    this.search = search;
    return this;
  }

   /**
   * Get search
   * @return search
  **/
  @javax.annotation.Nullable
  public AppendixKeywordBingKeywordsDataPriceDataInfo getSearch() {
    return search;
  }

  public void setSearch(AppendixKeywordBingKeywordsDataPriceDataInfo search) {
    this.search = search;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendixBusinessListingsBusinessDataPriceData appendixBusinessListingsBusinessDataPriceData = (AppendixBusinessListingsBusinessDataPriceData) o;
    return Objects.equals(this.categories, appendixBusinessListingsBusinessDataPriceData.categories) &&
        Objects.equals(this.categoriesAggregation, appendixBusinessListingsBusinessDataPriceData.categoriesAggregation) &&
        Objects.equals(this.locations, appendixBusinessListingsBusinessDataPriceData.locations) &&
        Objects.equals(this.search, appendixBusinessListingsBusinessDataPriceData.search);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categories, categoriesAggregation, locations, search);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendixBusinessListingsBusinessDataPriceData {\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    categoriesAggregation: ").append(toIndentedString(categoriesAggregation)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("categories");
    openapiFields.add("categories_aggregation");
    openapiFields.add("locations");
    openapiFields.add("search");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppendixBusinessListingsBusinessDataPriceData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendixBusinessListingsBusinessDataPriceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendixBusinessListingsBusinessDataPriceData is not found in the empty JSON string", AppendixBusinessListingsBusinessDataPriceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendixBusinessListingsBusinessDataPriceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendixBusinessListingsBusinessDataPriceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `categories`
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        AppendixTaskKeywordsDataPriceDataInfo.validateJsonElement(jsonObj.get("categories"));
      }
      // validate the optional field `categories_aggregation`
      if (jsonObj.get("categories_aggregation") != null && !jsonObj.get("categories_aggregation").isJsonNull()) {
        AppendixKeywordBingKeywordsDataPriceDataInfo.validateJsonElement(jsonObj.get("categories_aggregation"));
      }
      // validate the optional field `locations`
      if (jsonObj.get("locations") != null && !jsonObj.get("locations").isJsonNull()) {
        AppendixTaskKeywordsDataPriceDataInfo.validateJsonElement(jsonObj.get("locations"));
      }
      // validate the optional field `search`
      if (jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) {
        AppendixKeywordBingKeywordsDataPriceDataInfo.validateJsonElement(jsonObj.get("search"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendixBusinessListingsBusinessDataPriceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendixBusinessListingsBusinessDataPriceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendixBusinessListingsBusinessDataPriceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendixBusinessListingsBusinessDataPriceData.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendixBusinessListingsBusinessDataPriceData>() {
           @Override
           public void write(JsonWriter out, AppendixBusinessListingsBusinessDataPriceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendixBusinessListingsBusinessDataPriceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppendixBusinessListingsBusinessDataPriceData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppendixBusinessListingsBusinessDataPriceData
  * @throws IOException if the JSON string is invalid with respect to AppendixBusinessListingsBusinessDataPriceData
  */
  public static AppendixBusinessListingsBusinessDataPriceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendixBusinessListingsBusinessDataPriceData.class);
  }

 /**
  * Convert an instance of AppendixBusinessListingsBusinessDataPriceData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

