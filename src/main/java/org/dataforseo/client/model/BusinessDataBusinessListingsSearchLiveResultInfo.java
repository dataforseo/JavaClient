/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.BusinessDataBusinessListingsSearchLiveItem;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * BusinessDataBusinessListingsSearchLiveResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T18:32:56.856102800+03:00[Europe/Kiev]")
public class BusinessDataBusinessListingsSearchLiveResultInfo {
  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Long offset;

  public static final String SERIALIZED_NAME_OFFSET_TOKEN = "offset_token";
  @SerializedName(SERIALIZED_NAME_OFFSET_TOKEN)
  private String offsetToken;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<BusinessDataBusinessListingsSearchLiveItem> items;

  public BusinessDataBusinessListingsSearchLiveResultInfo() {
  }

  public BusinessDataBusinessListingsSearchLiveResultInfo totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

   /**
   * total number of results in our database relevant to your request
   * @return totalCount
  **/
  @javax.annotation.Nullable
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }


  public BusinessDataBusinessListingsSearchLiveResultInfo count(Long count) {
    this.count = count;
    return this;
  }

   /**
   * item types the number of items in the items array
   * @return count
  **/
  @javax.annotation.Nullable
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public BusinessDataBusinessListingsSearchLiveResultInfo offset(Long offset) {
    this.offset = offset;
    return this;
  }

   /**
   * offset in the results array of returned businesses
   * @return offset
  **/
  @javax.annotation.Nullable
  public Long getOffset() {
    return offset;
  }

  public void setOffset(Long offset) {
    this.offset = offset;
  }


  public BusinessDataBusinessListingsSearchLiveResultInfo offsetToken(String offsetToken) {
    this.offsetToken = offsetToken;
    return this;
  }

   /**
   * token for subsequent requests by specifying the unique offset_token when setting a new task, you will get the subsequent results of the initial task; offset_token values are unique for each subsequent task
   * @return offsetToken
  **/
  @javax.annotation.Nullable
  public String getOffsetToken() {
    return offsetToken;
  }

  public void setOffsetToken(String offsetToken) {
    this.offsetToken = offsetToken;
  }


  public BusinessDataBusinessListingsSearchLiveResultInfo items(List<BusinessDataBusinessListingsSearchLiveItem> items) {
    this.items = items;
    return this;
  }

  public BusinessDataBusinessListingsSearchLiveResultInfo addItemsItem(BusinessDataBusinessListingsSearchLiveItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * encountered item types types of search engine results encountered in the items array; possible item types: business_listing
   * @return items
  **/
  @javax.annotation.Nullable
  public List<BusinessDataBusinessListingsSearchLiveItem> getItems() {
    return items;
  }

  public void setItems(List<BusinessDataBusinessListingsSearchLiveItem> items) {
    this.items = items;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDataBusinessListingsSearchLiveResultInfo businessDataBusinessListingsSearchLiveResultInfo = (BusinessDataBusinessListingsSearchLiveResultInfo) o;
    return Objects.equals(this.totalCount, businessDataBusinessListingsSearchLiveResultInfo.totalCount) &&
        Objects.equals(this.count, businessDataBusinessListingsSearchLiveResultInfo.count) &&
        Objects.equals(this.offset, businessDataBusinessListingsSearchLiveResultInfo.offset) &&
        Objects.equals(this.offsetToken, businessDataBusinessListingsSearchLiveResultInfo.offsetToken) &&
        Objects.equals(this.items, businessDataBusinessListingsSearchLiveResultInfo.items);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(totalCount, count, offset, offsetToken, items);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDataBusinessListingsSearchLiveResultInfo {\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    offsetToken: ").append(toIndentedString(offsetToken)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("total_count");
    openapiFields.add("count");
    openapiFields.add("offset");
    openapiFields.add("offset_token");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BusinessDataBusinessListingsSearchLiveResultInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessDataBusinessListingsSearchLiveResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessDataBusinessListingsSearchLiveResultInfo is not found in the empty JSON string", BusinessDataBusinessListingsSearchLiveResultInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BusinessDataBusinessListingsSearchLiveResultInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BusinessDataBusinessListingsSearchLiveResultInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("offset_token") != null && !jsonObj.get("offset_token").isJsonNull()) && !jsonObj.get("offset_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offset_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offset_token").toString()));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            BusinessDataBusinessListingsSearchLiveItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessDataBusinessListingsSearchLiveResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessDataBusinessListingsSearchLiveResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessDataBusinessListingsSearchLiveResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessDataBusinessListingsSearchLiveResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessDataBusinessListingsSearchLiveResultInfo>() {
           @Override
           public void write(JsonWriter out, BusinessDataBusinessListingsSearchLiveResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessDataBusinessListingsSearchLiveResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BusinessDataBusinessListingsSearchLiveResultInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BusinessDataBusinessListingsSearchLiveResultInfo
  * @throws IOException if the JSON string is invalid with respect to BusinessDataBusinessListingsSearchLiveResultInfo
  */
  public static BusinessDataBusinessListingsSearchLiveResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessDataBusinessListingsSearchLiveResultInfo.class);
  }

 /**
  * Convert an instance of BusinessDataBusinessListingsSearchLiveResultInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

