/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.HistoricalMetricsInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * HistoricalMetricsBundleInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T15:18:23.103906100+03:00[Europe/Kiev]")
public class HistoricalMetricsBundleInfo {
  public static final String SERIALIZED_NAME_ORGANIC = "organic";
  @SerializedName(SERIALIZED_NAME_ORGANIC)
  private List<HistoricalMetricsInfo> organic;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private List<HistoricalMetricsInfo> paid;

  public static final String SERIALIZED_NAME_LOCAL_PACK = "local_pack";
  @SerializedName(SERIALIZED_NAME_LOCAL_PACK)
  private List<HistoricalMetricsInfo> localPack;

  public static final String SERIALIZED_NAME_FEATURED_SNIPPET = "featured_snippet";
  @SerializedName(SERIALIZED_NAME_FEATURED_SNIPPET)
  private List<HistoricalMetricsInfo> featuredSnippet;

  public HistoricalMetricsBundleInfo() {
  }

  public HistoricalMetricsBundleInfo organic(List<HistoricalMetricsInfo> organic) {
    this.organic = organic;
    return this;
  }

  public HistoricalMetricsBundleInfo addOrganicItem(HistoricalMetricsInfo organicItem) {
    if (this.organic == null) {
      this.organic = new ArrayList<>();
    }
    this.organic.add(organicItem);
    return this;
  }

   /**
   * traffic data from organic search
   * @return organic
  **/
  @javax.annotation.Nullable
  public List<HistoricalMetricsInfo> getOrganic() {
    return organic;
  }

  public void setOrganic(List<HistoricalMetricsInfo> organic) {
    this.organic = organic;
  }


  public HistoricalMetricsBundleInfo paid(List<HistoricalMetricsInfo> paid) {
    this.paid = paid;
    return this;
  }

  public HistoricalMetricsBundleInfo addPaidItem(HistoricalMetricsInfo paidItem) {
    if (this.paid == null) {
      this.paid = new ArrayList<>();
    }
    this.paid.add(paidItem);
    return this;
  }

   /**
   * traffic data from paid search
   * @return paid
  **/
  @javax.annotation.Nullable
  public List<HistoricalMetricsInfo> getPaid() {
    return paid;
  }

  public void setPaid(List<HistoricalMetricsInfo> paid) {
    this.paid = paid;
  }


  public HistoricalMetricsBundleInfo localPack(List<HistoricalMetricsInfo> localPack) {
    this.localPack = localPack;
    return this;
  }

  public HistoricalMetricsBundleInfo addLocalPackItem(HistoricalMetricsInfo localPackItem) {
    if (this.localPack == null) {
      this.localPack = new ArrayList<>();
    }
    this.localPack.add(localPackItem);
    return this;
  }

   /**
   * traffic data from the featured snippet results in Google SERP
   * @return localPack
  **/
  @javax.annotation.Nullable
  public List<HistoricalMetricsInfo> getLocalPack() {
    return localPack;
  }

  public void setLocalPack(List<HistoricalMetricsInfo> localPack) {
    this.localPack = localPack;
  }


  public HistoricalMetricsBundleInfo featuredSnippet(List<HistoricalMetricsInfo> featuredSnippet) {
    this.featuredSnippet = featuredSnippet;
    return this;
  }

  public HistoricalMetricsBundleInfo addFeaturedSnippetItem(HistoricalMetricsInfo featuredSnippetItem) {
    if (this.featuredSnippet == null) {
      this.featuredSnippet = new ArrayList<>();
    }
    this.featuredSnippet.add(featuredSnippetItem);
    return this;
  }

   /**
   * traffic data from the local pack results in SERP
   * @return featuredSnippet
  **/
  @javax.annotation.Nullable
  public List<HistoricalMetricsInfo> getFeaturedSnippet() {
    return featuredSnippet;
  }

  public void setFeaturedSnippet(List<HistoricalMetricsInfo> featuredSnippet) {
    this.featuredSnippet = featuredSnippet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoricalMetricsBundleInfo historicalMetricsBundleInfo = (HistoricalMetricsBundleInfo) o;
    return Objects.equals(this.organic, historicalMetricsBundleInfo.organic) &&
        Objects.equals(this.paid, historicalMetricsBundleInfo.paid) &&
        Objects.equals(this.localPack, historicalMetricsBundleInfo.localPack) &&
        Objects.equals(this.featuredSnippet, historicalMetricsBundleInfo.featuredSnippet);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(organic, paid, localPack, featuredSnippet);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoricalMetricsBundleInfo {\n");
    sb.append("    organic: ").append(toIndentedString(organic)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    localPack: ").append(toIndentedString(localPack)).append("\n");
    sb.append("    featuredSnippet: ").append(toIndentedString(featuredSnippet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organic");
    openapiFields.add("paid");
    openapiFields.add("local_pack");
    openapiFields.add("featured_snippet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HistoricalMetricsBundleInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HistoricalMetricsBundleInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HistoricalMetricsBundleInfo is not found in the empty JSON string", HistoricalMetricsBundleInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HistoricalMetricsBundleInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HistoricalMetricsBundleInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("organic") != null && !jsonObj.get("organic").isJsonNull()) {
        JsonArray jsonArrayorganic = jsonObj.getAsJsonArray("organic");
        if (jsonArrayorganic != null) {
          // ensure the json data is an array
          if (!jsonObj.get("organic").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `organic` to be an array in the JSON string but got `%s`", jsonObj.get("organic").toString()));
          }

          // validate the optional field `organic` (array)
          for (int i = 0; i < jsonArrayorganic.size(); i++) {
            HistoricalMetricsInfo.validateJsonElement(jsonArrayorganic.get(i));
          };
        }
      }
      if (jsonObj.get("paid") != null && !jsonObj.get("paid").isJsonNull()) {
        JsonArray jsonArraypaid = jsonObj.getAsJsonArray("paid");
        if (jsonArraypaid != null) {
          // ensure the json data is an array
          if (!jsonObj.get("paid").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `paid` to be an array in the JSON string but got `%s`", jsonObj.get("paid").toString()));
          }

          // validate the optional field `paid` (array)
          for (int i = 0; i < jsonArraypaid.size(); i++) {
            HistoricalMetricsInfo.validateJsonElement(jsonArraypaid.get(i));
          };
        }
      }
      if (jsonObj.get("local_pack") != null && !jsonObj.get("local_pack").isJsonNull()) {
        JsonArray jsonArraylocalPack = jsonObj.getAsJsonArray("local_pack");
        if (jsonArraylocalPack != null) {
          // ensure the json data is an array
          if (!jsonObj.get("local_pack").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `local_pack` to be an array in the JSON string but got `%s`", jsonObj.get("local_pack").toString()));
          }

          // validate the optional field `local_pack` (array)
          for (int i = 0; i < jsonArraylocalPack.size(); i++) {
            HistoricalMetricsInfo.validateJsonElement(jsonArraylocalPack.get(i));
          };
        }
      }
      if (jsonObj.get("featured_snippet") != null && !jsonObj.get("featured_snippet").isJsonNull()) {
        JsonArray jsonArrayfeaturedSnippet = jsonObj.getAsJsonArray("featured_snippet");
        if (jsonArrayfeaturedSnippet != null) {
          // ensure the json data is an array
          if (!jsonObj.get("featured_snippet").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `featured_snippet` to be an array in the JSON string but got `%s`", jsonObj.get("featured_snippet").toString()));
          }

          // validate the optional field `featured_snippet` (array)
          for (int i = 0; i < jsonArrayfeaturedSnippet.size(); i++) {
            HistoricalMetricsInfo.validateJsonElement(jsonArrayfeaturedSnippet.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HistoricalMetricsBundleInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HistoricalMetricsBundleInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HistoricalMetricsBundleInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HistoricalMetricsBundleInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HistoricalMetricsBundleInfo>() {
           @Override
           public void write(JsonWriter out, HistoricalMetricsBundleInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HistoricalMetricsBundleInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HistoricalMetricsBundleInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HistoricalMetricsBundleInfo
  * @throws IOException if the JSON string is invalid with respect to HistoricalMetricsBundleInfo
  */
  public static HistoricalMetricsBundleInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HistoricalMetricsBundleInfo.class);
  }

 /**
  * Convert an instance of HistoricalMetricsBundleInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

