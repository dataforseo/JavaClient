/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * ContentAnalysisCategoryTrendsLiveRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T15:18:23.103906100+03:00[Europe/Kiev]")
public class ContentAnalysisCategoryTrendsLiveRequestInfo {
  public static final String SERIALIZED_NAME_CATEGORY_CODE = "category_code";
  @SerializedName(SERIALIZED_NAME_CATEGORY_CODE)
  private String categoryCode;

  public static final String SERIALIZED_NAME_PAGE_TYPE = "page_type";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPE)
  private List<String> pageType;

  public static final String SERIALIZED_NAME_SEARCH_MODE = "search_mode";
  @SerializedName(SERIALIZED_NAME_SEARCH_MODE)
  private String searchMode;

  public static final String SERIALIZED_NAME_INTERNAL_LIST_LIMIT = "internal_list_limit";
  @SerializedName(SERIALIZED_NAME_INTERNAL_LIST_LIMIT)
  private Integer internalListLimit;

  public static final String SERIALIZED_NAME_DATE_FROM = "date_from";
  @SerializedName(SERIALIZED_NAME_DATE_FROM)
  private String dateFrom;

  public static final String SERIALIZED_NAME_DATE_TO = "date_to";
  @SerializedName(SERIALIZED_NAME_DATE_TO)
  private String dateTo;

  public static final String SERIALIZED_NAME_DATE_GROUP = "date_group";
  @SerializedName(SERIALIZED_NAME_DATE_GROUP)
  private String dateGroup;

  public static final String SERIALIZED_NAME_INITIAL_DATASET_FILTERS = "initial_dataset_filters";
  @SerializedName(SERIALIZED_NAME_INITIAL_DATASET_FILTERS)
  private List<Object> initialDatasetFilters;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public ContentAnalysisCategoryTrendsLiveRequestInfo() {
  }

  public ContentAnalysisCategoryTrendsLiveRequestInfo categoryCode(String categoryCode) {
    this.categoryCode = categoryCode;
    return this;
  }

   /**
   * target category code required field to obtain a full list of available categories, refer to the Categories endpoint
   * @return categoryCode
  **/
  @javax.annotation.Nullable
  public String getCategoryCode() {
    return categoryCode;
  }

  public void setCategoryCode(String categoryCode) {
    this.categoryCode = categoryCode;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo pageType(List<String> pageType) {
    this.pageType = pageType;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveRequestInfo addPageTypeItem(String pageTypeItem) {
    if (this.pageType == null) {
      this.pageType = new ArrayList<>();
    }
    this.pageType.add(pageTypeItem);
    return this;
  }

   /**
   * target page types optional field use this parameter to filter the dataset by page types possible values: \&quot;ecommerce\&quot;, \&quot;news\&quot;, \&quot;blogs\&quot;, \&quot;message-boards\&quot;, \&quot;organization\&quot;
   * @return pageType
  **/
  @javax.annotation.Nullable
  public List<String> getPageType() {
    return pageType;
  }

  public void setPageType(List<String> pageType) {
    this.pageType = pageType;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo searchMode(String searchMode) {
    this.searchMode = searchMode;
    return this;
  }

   /**
   * results grouping type optional field possible grouping types: as_is – returns data on all citations for the target category_code one_per_domain – returns data on one citation of the category_code per domain default value: as_is
   * @return searchMode
  **/
  @javax.annotation.Nullable
  public String getSearchMode() {
    return searchMode;
  }

  public void setSearchMode(String searchMode) {
    this.searchMode = searchMode;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo internalListLimit(Integer internalListLimit) {
    this.internalListLimit = internalListLimit;
    return this;
  }

   /**
   * maximum number of elements within internal arrays optional field you can use this field to limit the number of elements within the following arrays: top_domains text_categories page_categories countries languages default value: 1 maximum value: 20
   * @return internalListLimit
  **/
  @javax.annotation.Nullable
  public Integer getInternalListLimit() {
    return internalListLimit;
  }

  public void setInternalListLimit(Integer internalListLimit) {
    this.internalListLimit = internalListLimit;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo dateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
    return this;
  }

   /**
   * starting date of the time range required field date format: \&quot;yyyy-mm-dd\&quot; example: \&quot;2019-01-15\&quot;
   * @return dateFrom
  **/
  @javax.annotation.Nullable
  public String getDateFrom() {
    return dateFrom;
  }

  public void setDateFrom(String dateFrom) {
    this.dateFrom = dateFrom;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo dateTo(String dateTo) {
    this.dateTo = dateTo;
    return this;
  }

   /**
   * ending date of the time range optional field if you don’t specify this field, today’s date will be used by default date format: \&quot;yyyy-mm-dd\&quot; example: \&quot;2019-01-15\&quot;
   * @return dateTo
  **/
  @javax.annotation.Nullable
  public String getDateTo() {
    return dateTo;
  }

  public void setDateTo(String dateTo) {
    this.dateTo = dateTo;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo dateGroup(String dateGroup) {
    this.dateGroup = dateGroup;
    return this;
  }

   /**
   * time range which will be used to group the results optional field default value: month possible values: day, week, month
   * @return dateGroup
  **/
  @javax.annotation.Nullable
  public String getDateGroup() {
    return dateGroup;
  }

  public void setDateGroup(String dateGroup) {
    this.dateGroup = dateGroup;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo initialDatasetFilters(List<Object> initialDatasetFilters) {
    this.initialDatasetFilters = initialDatasetFilters;
    return this;
  }

  public ContentAnalysisCategoryTrendsLiveRequestInfo addInitialDatasetFiltersItem(Object initialDatasetFiltersItem) {
    if (this.initialDatasetFilters == null) {
      this.initialDatasetFilters = new ArrayList<>();
    }
    this.initialDatasetFilters.add(initialDatasetFiltersItem);
    return this;
  }

   /**
   * initial dataset filtering parameters optional field you can add several filters at once (8 filters maximum) you should set a logical operator and, or between the conditions the following operators are supported: regex, not_regex, &lt;, &lt;&#x3D;, &gt;, &gt;&#x3D;, &#x3D;, &lt;&gt;, in, not_in, like,not_like, has, has_not you can use the % operator with like and not_like to match any string of zero or more characters example: [\&quot;domain\&quot;,\&quot;&lt;&gt;\&quot;, \&quot;logitech.com\&quot;] [[\&quot;domain\&quot;,\&quot;&lt;&gt;\&quot;,\&quot;logitech.com\&quot;],\&quot;and\&quot;,[\&quot;content_info.connotation_types.negative\&quot;,\&quot;&gt;\&quot;,1000]] [[\&quot;domain\&quot;,\&quot;&lt;&gt;\&quot;,\&quot;logitech.com\&quot;]], \&quot;and\&quot;, [[\&quot;content_info.connotation_types.negative\&quot;,\&quot;&gt;\&quot;,1000], \&quot;or\&quot;, [\&quot;content_info.text_category\&quot;,\&quot;has\&quot;,10994]]] for more information about filters, please refer to Content Analysis API – Filters
   * @return initialDatasetFilters
  **/
  @javax.annotation.Nullable
  public List<Object> getInitialDatasetFilters() {
    return initialDatasetFilters;
  }

  public void setInitialDatasetFilters(List<Object> initialDatasetFilters) {
    this.initialDatasetFilters = initialDatasetFilters;
  }


  public ContentAnalysisCategoryTrendsLiveRequestInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * user-defined task identifier optional field the character limit is 255 you can use this parameter to identify the task and match it with the result you will find the specified tag value in the data object of the response
   * @return tag
  **/
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentAnalysisCategoryTrendsLiveRequestInfo contentAnalysisCategoryTrendsLiveRequestInfo = (ContentAnalysisCategoryTrendsLiveRequestInfo) o;
    return Objects.equals(this.categoryCode, contentAnalysisCategoryTrendsLiveRequestInfo.categoryCode) &&
        Objects.equals(this.pageType, contentAnalysisCategoryTrendsLiveRequestInfo.pageType) &&
        Objects.equals(this.searchMode, contentAnalysisCategoryTrendsLiveRequestInfo.searchMode) &&
        Objects.equals(this.internalListLimit, contentAnalysisCategoryTrendsLiveRequestInfo.internalListLimit) &&
        Objects.equals(this.dateFrom, contentAnalysisCategoryTrendsLiveRequestInfo.dateFrom) &&
        Objects.equals(this.dateTo, contentAnalysisCategoryTrendsLiveRequestInfo.dateTo) &&
        Objects.equals(this.dateGroup, contentAnalysisCategoryTrendsLiveRequestInfo.dateGroup) &&
        Objects.equals(this.initialDatasetFilters, contentAnalysisCategoryTrendsLiveRequestInfo.initialDatasetFilters) &&
        Objects.equals(this.tag, contentAnalysisCategoryTrendsLiveRequestInfo.tag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryCode, pageType, searchMode, internalListLimit, dateFrom, dateTo, dateGroup, initialDatasetFilters, tag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentAnalysisCategoryTrendsLiveRequestInfo {\n");
    sb.append("    categoryCode: ").append(toIndentedString(categoryCode)).append("\n");
    sb.append("    pageType: ").append(toIndentedString(pageType)).append("\n");
    sb.append("    searchMode: ").append(toIndentedString(searchMode)).append("\n");
    sb.append("    internalListLimit: ").append(toIndentedString(internalListLimit)).append("\n");
    sb.append("    dateFrom: ").append(toIndentedString(dateFrom)).append("\n");
    sb.append("    dateTo: ").append(toIndentedString(dateTo)).append("\n");
    sb.append("    dateGroup: ").append(toIndentedString(dateGroup)).append("\n");
    sb.append("    initialDatasetFilters: ").append(toIndentedString(initialDatasetFilters)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category_code");
    openapiFields.add("page_type");
    openapiFields.add("search_mode");
    openapiFields.add("internal_list_limit");
    openapiFields.add("date_from");
    openapiFields.add("date_to");
    openapiFields.add("date_group");
    openapiFields.add("initial_dataset_filters");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentAnalysisCategoryTrendsLiveRequestInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentAnalysisCategoryTrendsLiveRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentAnalysisCategoryTrendsLiveRequestInfo is not found in the empty JSON string", ContentAnalysisCategoryTrendsLiveRequestInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentAnalysisCategoryTrendsLiveRequestInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentAnalysisCategoryTrendsLiveRequestInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("category_code") != null && !jsonObj.get("category_code").isJsonNull()) && !jsonObj.get("category_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("page_type") != null && !jsonObj.get("page_type").isJsonNull() && !jsonObj.get("page_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_type` to be an array in the JSON string but got `%s`", jsonObj.get("page_type").toString()));
      }
      if ((jsonObj.get("search_mode") != null && !jsonObj.get("search_mode").isJsonNull()) && !jsonObj.get("search_mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_mode").toString()));
      }
      if ((jsonObj.get("date_from") != null && !jsonObj.get("date_from").isJsonNull()) && !jsonObj.get("date_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_from").toString()));
      }
      if ((jsonObj.get("date_to") != null && !jsonObj.get("date_to").isJsonNull()) && !jsonObj.get("date_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_to").toString()));
      }
      if ((jsonObj.get("date_group") != null && !jsonObj.get("date_group").isJsonNull()) && !jsonObj.get("date_group").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_group` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_group").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("initial_dataset_filters") != null && !jsonObj.get("initial_dataset_filters").isJsonNull() && !jsonObj.get("initial_dataset_filters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `initial_dataset_filters` to be an array in the JSON string but got `%s`", jsonObj.get("initial_dataset_filters").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentAnalysisCategoryTrendsLiveRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentAnalysisCategoryTrendsLiveRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentAnalysisCategoryTrendsLiveRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentAnalysisCategoryTrendsLiveRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentAnalysisCategoryTrendsLiveRequestInfo>() {
           @Override
           public void write(JsonWriter out, ContentAnalysisCategoryTrendsLiveRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentAnalysisCategoryTrendsLiveRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentAnalysisCategoryTrendsLiveRequestInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentAnalysisCategoryTrendsLiveRequestInfo
  * @throws IOException if the JSON string is invalid with respect to ContentAnalysisCategoryTrendsLiveRequestInfo
  */
  public static ContentAnalysisCategoryTrendsLiveRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentAnalysisCategoryTrendsLiveRequestInfo.class);
  }

 /**
  * Convert an instance of ContentAnalysisCategoryTrendsLiveRequestInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

