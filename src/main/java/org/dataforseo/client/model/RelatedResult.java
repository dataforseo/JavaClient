/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.AboutThisResultElement;
import org.dataforseo.client.model.ImagesElement;
import org.dataforseo.client.model.PriceInfo;
import org.dataforseo.client.model.RatingInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * RelatedResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-15T10:15:18.753898100+03:00[Europe/Kiev]")
public class RelatedResult {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_XPATH = "xpath";
  @SerializedName(SERIALIZED_NAME_XPATH)
  private String xpath;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CACHE_URL = "cache_url";
  @SerializedName(SERIALIZED_NAME_CACHE_URL)
  private String cacheUrl;

  public static final String SERIALIZED_NAME_RELATED_SEARCH_URL = "related_search_url";
  @SerializedName(SERIALIZED_NAME_RELATED_SEARCH_URL)
  private String relatedSearchUrl;

  public static final String SERIALIZED_NAME_BREADCRUMB = "breadcrumb";
  @SerializedName(SERIALIZED_NAME_BREADCRUMB)
  private String breadcrumb;

  public static final String SERIALIZED_NAME_WEBSITE_NAME = "website_name";
  @SerializedName(SERIALIZED_NAME_WEBSITE_NAME)
  private String websiteName;

  public static final String SERIALIZED_NAME_IS_IMAGE = "is_image";
  @SerializedName(SERIALIZED_NAME_IS_IMAGE)
  private Boolean isImage;

  public static final String SERIALIZED_NAME_IS_VIDEO = "is_video";
  @SerializedName(SERIALIZED_NAME_IS_VIDEO)
  private Boolean isVideo;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRE_SNIPPET = "pre_snippet";
  @SerializedName(SERIALIZED_NAME_PRE_SNIPPET)
  private String preSnippet;

  public static final String SERIALIZED_NAME_EXTENDED_SNIPPET = "extended_snippet";
  @SerializedName(SERIALIZED_NAME_EXTENDED_SNIPPET)
  private String extendedSnippet;

  public static final String SERIALIZED_NAME_IMAGES = "images";
  @SerializedName(SERIALIZED_NAME_IMAGES)
  private List<ImagesElement> images;

  public static final String SERIALIZED_NAME_AMP_VERSION = "amp_version";
  @SerializedName(SERIALIZED_NAME_AMP_VERSION)
  private Boolean ampVersion;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingInfo rating;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private PriceInfo price;

  public static final String SERIALIZED_NAME_HIGHLIGHTED = "highlighted";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTED)
  private List<String> highlighted;

  public static final String SERIALIZED_NAME_ABOUT_THIS_RESULT = "about_this_result";
  @SerializedName(SERIALIZED_NAME_ABOUT_THIS_RESULT)
  private AboutThisResultElement aboutThisResult;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public RelatedResult() {
  }

  public RelatedResult type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public RelatedResult xpath(String xpath) {
    this.xpath = xpath;
    return this;
  }

   /**
   * the XPath of the element
   * @return xpath
  **/
  @javax.annotation.Nullable
  public String getXpath() {
    return xpath;
  }

  public void setXpath(String xpath) {
    this.xpath = xpath;
  }


  public RelatedResult domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * domain where a link points
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public RelatedResult title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title of a given link element
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public RelatedResult url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL of element
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public RelatedResult cacheUrl(String cacheUrl) {
    this.cacheUrl = cacheUrl;
    return this;
  }

   /**
   * cached version of the page
   * @return cacheUrl
  **/
  @javax.annotation.Nullable
  public String getCacheUrl() {
    return cacheUrl;
  }

  public void setCacheUrl(String cacheUrl) {
    this.cacheUrl = cacheUrl;
  }


  public RelatedResult relatedSearchUrl(String relatedSearchUrl) {
    this.relatedSearchUrl = relatedSearchUrl;
    return this;
  }

   /**
   * URL to a similar search URL to a new search for the same keyword(s) on related sites
   * @return relatedSearchUrl
  **/
  @javax.annotation.Nullable
  public String getRelatedSearchUrl() {
    return relatedSearchUrl;
  }

  public void setRelatedSearchUrl(String relatedSearchUrl) {
    this.relatedSearchUrl = relatedSearchUrl;
  }


  public RelatedResult breadcrumb(String breadcrumb) {
    this.breadcrumb = breadcrumb;
    return this;
  }

   /**
   * breadcrumb in SERP
   * @return breadcrumb
  **/
  @javax.annotation.Nullable
  public String getBreadcrumb() {
    return breadcrumb;
  }

  public void setBreadcrumb(String breadcrumb) {
    this.breadcrumb = breadcrumb;
  }


  public RelatedResult websiteName(String websiteName) {
    this.websiteName = websiteName;
    return this;
  }

   /**
   * name of the website in SERP
   * @return websiteName
  **/
  @javax.annotation.Nullable
  public String getWebsiteName() {
    return websiteName;
  }

  public void setWebsiteName(String websiteName) {
    this.websiteName = websiteName;
  }


  public RelatedResult isImage(Boolean isImage) {
    this.isImage = isImage;
    return this;
  }

   /**
   * indicates whether the element contains anÂ image
   * @return isImage
  **/
  @javax.annotation.Nullable
  public Boolean getIsImage() {
    return isImage;
  }

  public void setIsImage(Boolean isImage) {
    this.isImage = isImage;
  }


  public RelatedResult isVideo(Boolean isVideo) {
    this.isVideo = isVideo;
    return this;
  }

   /**
   * indicates whether the element contains a video
   * @return isVideo
  **/
  @javax.annotation.Nullable
  public Boolean getIsVideo() {
    return isVideo;
  }

  public void setIsVideo(Boolean isVideo) {
    this.isVideo = isVideo;
  }


  public RelatedResult description(String description) {
    this.description = description;
    return this;
  }

   /**
   * description of the hotel booking element
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RelatedResult preSnippet(String preSnippet) {
    this.preSnippet = preSnippet;
    return this;
  }

   /**
   * includes additional information appended before the result description in SERP
   * @return preSnippet
  **/
  @javax.annotation.Nullable
  public String getPreSnippet() {
    return preSnippet;
  }

  public void setPreSnippet(String preSnippet) {
    this.preSnippet = preSnippet;
  }


  public RelatedResult extendedSnippet(String extendedSnippet) {
    this.extendedSnippet = extendedSnippet;
    return this;
  }

   /**
   * includes additional information appended after the result description in SERP
   * @return extendedSnippet
  **/
  @javax.annotation.Nullable
  public String getExtendedSnippet() {
    return extendedSnippet;
  }

  public void setExtendedSnippet(String extendedSnippet) {
    this.extendedSnippet = extendedSnippet;
  }


  public RelatedResult images(List<ImagesElement> images) {
    this.images = images;
    return this;
  }

  public RelatedResult addImagesItem(ImagesElement imagesItem) {
    if (this.images == null) {
      this.images = new ArrayList<>();
    }
    this.images.add(imagesItem);
    return this;
  }

   /**
   * images of the element
   * @return images
  **/
  @javax.annotation.Nullable
  public List<ImagesElement> getImages() {
    return images;
  }

  public void setImages(List<ImagesElement> images) {
    this.images = images;
  }


  public RelatedResult ampVersion(Boolean ampVersion) {
    this.ampVersion = ampVersion;
    return this;
  }

   /**
   * Accelerated Mobile Pages indicates whether an item has the Accelerated Mobile Page (AMP) version
   * @return ampVersion
  **/
  @javax.annotation.Nullable
  public Boolean getAmpVersion() {
    return ampVersion;
  }

  public void setAmpVersion(Boolean ampVersion) {
    this.ampVersion = ampVersion;
  }


  public RelatedResult rating(RatingInfo rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  public RatingInfo getRating() {
    return rating;
  }

  public void setRating(RatingInfo rating) {
    this.rating = rating;
  }


  public RelatedResult price(PriceInfo price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public PriceInfo getPrice() {
    return price;
  }

  public void setPrice(PriceInfo price) {
    this.price = price;
  }


  public RelatedResult highlighted(List<String> highlighted) {
    this.highlighted = highlighted;
    return this;
  }

  public RelatedResult addHighlightedItem(String highlightedItem) {
    if (this.highlighted == null) {
      this.highlighted = new ArrayList<>();
    }
    this.highlighted.add(highlightedItem);
    return this;
  }

   /**
   * words highlighted in bold within the results description
   * @return highlighted
  **/
  @javax.annotation.Nullable
  public List<String> getHighlighted() {
    return highlighted;
  }

  public void setHighlighted(List<String> highlighted) {
    this.highlighted = highlighted;
  }


  public RelatedResult aboutThisResult(AboutThisResultElement aboutThisResult) {
    this.aboutThisResult = aboutThisResult;
    return this;
  }

   /**
   * Get aboutThisResult
   * @return aboutThisResult
  **/
  @javax.annotation.Nullable
  public AboutThisResultElement getAboutThisResult() {
    return aboutThisResult;
  }

  public void setAboutThisResult(AboutThisResultElement aboutThisResult) {
    this.aboutThisResult = aboutThisResult;
  }


  public RelatedResult timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * date and time when the result was published in the UTC format: âyyyy-mm-dd hh-mm-ss +00:00â example: 2019-11-15 12:57:46 +00:00
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RelatedResult relatedResult = (RelatedResult) o;
    return Objects.equals(this.type, relatedResult.type) &&
        Objects.equals(this.xpath, relatedResult.xpath) &&
        Objects.equals(this.domain, relatedResult.domain) &&
        Objects.equals(this.title, relatedResult.title) &&
        Objects.equals(this.url, relatedResult.url) &&
        Objects.equals(this.cacheUrl, relatedResult.cacheUrl) &&
        Objects.equals(this.relatedSearchUrl, relatedResult.relatedSearchUrl) &&
        Objects.equals(this.breadcrumb, relatedResult.breadcrumb) &&
        Objects.equals(this.websiteName, relatedResult.websiteName) &&
        Objects.equals(this.isImage, relatedResult.isImage) &&
        Objects.equals(this.isVideo, relatedResult.isVideo) &&
        Objects.equals(this.description, relatedResult.description) &&
        Objects.equals(this.preSnippet, relatedResult.preSnippet) &&
        Objects.equals(this.extendedSnippet, relatedResult.extendedSnippet) &&
        Objects.equals(this.images, relatedResult.images) &&
        Objects.equals(this.ampVersion, relatedResult.ampVersion) &&
        Objects.equals(this.rating, relatedResult.rating) &&
        Objects.equals(this.price, relatedResult.price) &&
        Objects.equals(this.highlighted, relatedResult.highlighted) &&
        Objects.equals(this.aboutThisResult, relatedResult.aboutThisResult) &&
        Objects.equals(this.timestamp, relatedResult.timestamp);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, xpath, domain, title, url, cacheUrl, relatedSearchUrl, breadcrumb, websiteName, isImage, isVideo, description, preSnippet, extendedSnippet, images, ampVersion, rating, price, highlighted, aboutThisResult, timestamp);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RelatedResult {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xpath: ").append(toIndentedString(xpath)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    cacheUrl: ").append(toIndentedString(cacheUrl)).append("\n");
    sb.append("    relatedSearchUrl: ").append(toIndentedString(relatedSearchUrl)).append("\n");
    sb.append("    breadcrumb: ").append(toIndentedString(breadcrumb)).append("\n");
    sb.append("    websiteName: ").append(toIndentedString(websiteName)).append("\n");
    sb.append("    isImage: ").append(toIndentedString(isImage)).append("\n");
    sb.append("    isVideo: ").append(toIndentedString(isVideo)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    preSnippet: ").append(toIndentedString(preSnippet)).append("\n");
    sb.append("    extendedSnippet: ").append(toIndentedString(extendedSnippet)).append("\n");
    sb.append("    images: ").append(toIndentedString(images)).append("\n");
    sb.append("    ampVersion: ").append(toIndentedString(ampVersion)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    highlighted: ").append(toIndentedString(highlighted)).append("\n");
    sb.append("    aboutThisResult: ").append(toIndentedString(aboutThisResult)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("xpath");
    openapiFields.add("domain");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("cache_url");
    openapiFields.add("related_search_url");
    openapiFields.add("breadcrumb");
    openapiFields.add("website_name");
    openapiFields.add("is_image");
    openapiFields.add("is_video");
    openapiFields.add("description");
    openapiFields.add("pre_snippet");
    openapiFields.add("extended_snippet");
    openapiFields.add("images");
    openapiFields.add("amp_version");
    openapiFields.add("rating");
    openapiFields.add("price");
    openapiFields.add("highlighted");
    openapiFields.add("about_this_result");
    openapiFields.add("timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to RelatedResult
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RelatedResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RelatedResult is not found in the empty JSON string", RelatedResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RelatedResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RelatedResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("xpath") != null && !jsonObj.get("xpath").isJsonNull()) && !jsonObj.get("xpath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xpath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xpath").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("cache_url") != null && !jsonObj.get("cache_url").isJsonNull()) && !jsonObj.get("cache_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cache_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cache_url").toString()));
      }
      if ((jsonObj.get("related_search_url") != null && !jsonObj.get("related_search_url").isJsonNull()) && !jsonObj.get("related_search_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `related_search_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("related_search_url").toString()));
      }
      if ((jsonObj.get("breadcrumb") != null && !jsonObj.get("breadcrumb").isJsonNull()) && !jsonObj.get("breadcrumb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breadcrumb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breadcrumb").toString()));
      }
      if ((jsonObj.get("website_name") != null && !jsonObj.get("website_name").isJsonNull()) && !jsonObj.get("website_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website_name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("pre_snippet") != null && !jsonObj.get("pre_snippet").isJsonNull()) && !jsonObj.get("pre_snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_snippet").toString()));
      }
      if ((jsonObj.get("extended_snippet") != null && !jsonObj.get("extended_snippet").isJsonNull()) && !jsonObj.get("extended_snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extended_snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extended_snippet").toString()));
      }
      if (jsonObj.get("images") != null && !jsonObj.get("images").isJsonNull()) {
        JsonArray jsonArrayimages = jsonObj.getAsJsonArray("images");
        if (jsonArrayimages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `images` to be an array in the JSON string but got `%s`", jsonObj.get("images").toString()));
          }

          // validate the optional field `images` (array)
          for (int i = 0; i < jsonArrayimages.size(); i++) {
            ImagesElement.validateJsonElement(jsonArrayimages.get(i));
          };
        }
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        RatingInfo.validateJsonElement(jsonObj.get("rating"));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        PriceInfo.validateJsonElement(jsonObj.get("price"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("highlighted") != null && !jsonObj.get("highlighted").isJsonNull() && !jsonObj.get("highlighted").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlighted` to be an array in the JSON string but got `%s`", jsonObj.get("highlighted").toString()));
      }
      // validate the optional field `about_this_result`
      if (jsonObj.get("about_this_result") != null && !jsonObj.get("about_this_result").isJsonNull()) {
        AboutThisResultElement.validateJsonElement(jsonObj.get("about_this_result"));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RelatedResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RelatedResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RelatedResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RelatedResult.class));

       return (TypeAdapter<T>) new TypeAdapter<RelatedResult>() {
           @Override
           public void write(JsonWriter out, RelatedResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RelatedResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of RelatedResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of RelatedResult
  * @throws IOException if the JSON string is invalid with respect to RelatedResult
  */
  public static RelatedResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RelatedResult.class);
  }

 /**
  * Convert an instance of RelatedResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

