/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.Redirect;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * BacklinksPageIntersectionInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-15T10:15:18.753898100+03:00[Europe/Kiev]")
public class BacklinksPageIntersectionInfo {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DOMAIN_FROM = "domain_from";
  @SerializedName(SERIALIZED_NAME_DOMAIN_FROM)
  private String domainFrom;

  public static final String SERIALIZED_NAME_URL_FROM = "url_from";
  @SerializedName(SERIALIZED_NAME_URL_FROM)
  private String urlFrom;

  public static final String SERIALIZED_NAME_URL_FROM_HTTPS = "url_from_https";
  @SerializedName(SERIALIZED_NAME_URL_FROM_HTTPS)
  private Boolean urlFromHttps;

  public static final String SERIALIZED_NAME_DOMAIN_TO = "domain_to";
  @SerializedName(SERIALIZED_NAME_DOMAIN_TO)
  private String domainTo;

  public static final String SERIALIZED_NAME_URL_TO = "url_to";
  @SerializedName(SERIALIZED_NAME_URL_TO)
  private String urlTo;

  public static final String SERIALIZED_NAME_URL_TO_HTTPS = "url_to_https";
  @SerializedName(SERIALIZED_NAME_URL_TO_HTTPS)
  private Boolean urlToHttps;

  public static final String SERIALIZED_NAME_TLD_FROM = "tld_from";
  @SerializedName(SERIALIZED_NAME_TLD_FROM)
  private String tldFrom;

  public static final String SERIALIZED_NAME_IS_NEW = "is_new";
  @SerializedName(SERIALIZED_NAME_IS_NEW)
  private Boolean isNew;

  public static final String SERIALIZED_NAME_IS_LOST = "is_lost";
  @SerializedName(SERIALIZED_NAME_IS_LOST)
  private Boolean isLost;

  public static final String SERIALIZED_NAME_BACKLINK_SPAM_SCORE = "backlink_spam_score";
  @SerializedName(SERIALIZED_NAME_BACKLINK_SPAM_SCORE)
  private Integer backlinkSpamScore;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_PAGE_FROM_RANK = "page_from_rank";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_RANK)
  private Integer pageFromRank;

  public static final String SERIALIZED_NAME_DOMAIN_FROM_RANK = "domain_from_rank";
  @SerializedName(SERIALIZED_NAME_DOMAIN_FROM_RANK)
  private Integer domainFromRank;

  public static final String SERIALIZED_NAME_DOMAIN_FROM_PLATFORM_TYPE = "domain_from_platform_type";
  @SerializedName(SERIALIZED_NAME_DOMAIN_FROM_PLATFORM_TYPE)
  private List<String> domainFromPlatformType;

  public static final String SERIALIZED_NAME_DOMAIN_FROM_IS_IP = "domain_from_is_ip";
  @SerializedName(SERIALIZED_NAME_DOMAIN_FROM_IS_IP)
  private Boolean domainFromIsIp;

  public static final String SERIALIZED_NAME_DOMAIN_FROM_IP = "domain_from_ip";
  @SerializedName(SERIALIZED_NAME_DOMAIN_FROM_IP)
  private String domainFromIp;

  public static final String SERIALIZED_NAME_DOMAIN_FROM_COUNTRY = "domain_from_country";
  @SerializedName(SERIALIZED_NAME_DOMAIN_FROM_COUNTRY)
  private String domainFromCountry;

  public static final String SERIALIZED_NAME_PAGE_FROM_EXTERNAL_LINKS = "page_from_external_links";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_EXTERNAL_LINKS)
  private Integer pageFromExternalLinks;

  public static final String SERIALIZED_NAME_PAGE_FROM_INTERNAL_LINKS = "page_from_internal_links";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_INTERNAL_LINKS)
  private Integer pageFromInternalLinks;

  public static final String SERIALIZED_NAME_PAGE_FROM_SIZE = "page_from_size";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_SIZE)
  private Integer pageFromSize;

  public static final String SERIALIZED_NAME_PAGE_FROM_ENCODING = "page_from_encoding";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_ENCODING)
  private String pageFromEncoding;

  public static final String SERIALIZED_NAME_PAGE_FROM_LANGUAGE = "page_from_language";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_LANGUAGE)
  private String pageFromLanguage;

  public static final String SERIALIZED_NAME_PAGE_FROM_TITLE = "page_from_title";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_TITLE)
  private String pageFromTitle;

  public static final String SERIALIZED_NAME_PAGE_FROM_STATUS_CODE = "page_from_status_code";
  @SerializedName(SERIALIZED_NAME_PAGE_FROM_STATUS_CODE)
  private Integer pageFromStatusCode;

  public static final String SERIALIZED_NAME_FIRST_SEEN = "first_seen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private String firstSeen;

  public static final String SERIALIZED_NAME_PREV_SEEN = "prev_seen";
  @SerializedName(SERIALIZED_NAME_PREV_SEEN)
  private String prevSeen;

  public static final String SERIALIZED_NAME_LAST_SEEN = "last_seen";
  @SerializedName(SERIALIZED_NAME_LAST_SEEN)
  private String lastSeen;

  public static final String SERIALIZED_NAME_ITEM_TYPE = "item_type";
  @SerializedName(SERIALIZED_NAME_ITEM_TYPE)
  private String itemType;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<String> attributes;

  public static final String SERIALIZED_NAME_DOFOLLOW = "dofollow";
  @SerializedName(SERIALIZED_NAME_DOFOLLOW)
  private Boolean dofollow;

  public static final String SERIALIZED_NAME_ORIGINAL = "original";
  @SerializedName(SERIALIZED_NAME_ORIGINAL)
  private Boolean original;

  public static final String SERIALIZED_NAME_ALT = "alt";
  @SerializedName(SERIALIZED_NAME_ALT)
  private String alt;

  public static final String SERIALIZED_NAME_ANCHOR = "anchor";
  @SerializedName(SERIALIZED_NAME_ANCHOR)
  private String anchor;

  public static final String SERIALIZED_NAME_TEXT_PRE = "text_pre";
  @SerializedName(SERIALIZED_NAME_TEXT_PRE)
  private String textPre;

  public static final String SERIALIZED_NAME_TEXT_POST = "text_post";
  @SerializedName(SERIALIZED_NAME_TEXT_POST)
  private String textPost;

  public static final String SERIALIZED_NAME_SEMANTIC_LOCATION = "semantic_location";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_LOCATION)
  private String semanticLocation;

  public static final String SERIALIZED_NAME_LINKS_COUNT = "links_count";
  @SerializedName(SERIALIZED_NAME_LINKS_COUNT)
  private Long linksCount;

  public static final String SERIALIZED_NAME_GROUP_COUNT = "group_count";
  @SerializedName(SERIALIZED_NAME_GROUP_COUNT)
  private Long groupCount;

  public static final String SERIALIZED_NAME_IS_BROKEN = "is_broken";
  @SerializedName(SERIALIZED_NAME_IS_BROKEN)
  private Boolean isBroken;

  public static final String SERIALIZED_NAME_URL_TO_STATUS_CODE = "url_to_status_code";
  @SerializedName(SERIALIZED_NAME_URL_TO_STATUS_CODE)
  private Integer urlToStatusCode;

  public static final String SERIALIZED_NAME_URL_TO_SPAM_SCORE = "url_to_spam_score";
  @SerializedName(SERIALIZED_NAME_URL_TO_SPAM_SCORE)
  private Integer urlToSpamScore;

  public static final String SERIALIZED_NAME_URL_TO_REDIRECT_TARGET = "url_to_redirect_target";
  @SerializedName(SERIALIZED_NAME_URL_TO_REDIRECT_TARGET)
  private String urlToRedirectTarget;

  public static final String SERIALIZED_NAME_IS_INDIRECT_LINK = "is_indirect_link";
  @SerializedName(SERIALIZED_NAME_IS_INDIRECT_LINK)
  private Boolean isIndirectLink;

  public static final String SERIALIZED_NAME_INDIRECT_LINK_PATH = "indirect_link_path";
  @SerializedName(SERIALIZED_NAME_INDIRECT_LINK_PATH)
  private List<Redirect> indirectLinkPath;

  public BacklinksPageIntersectionInfo() {
  }

  public BacklinksPageIntersectionInfo type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public BacklinksPageIntersectionInfo domainFrom(String domainFrom) {
    this.domainFrom = domainFrom;
    return this;
  }

   /**
   * domain referring to the target domain or webpage
   * @return domainFrom
  **/
  @javax.annotation.Nullable
  public String getDomainFrom() {
    return domainFrom;
  }

  public void setDomainFrom(String domainFrom) {
    this.domainFrom = domainFrom;
  }


  public BacklinksPageIntersectionInfo urlFrom(String urlFrom) {
    this.urlFrom = urlFrom;
    return this;
  }

   /**
   * URL of the page where the backlink is found
   * @return urlFrom
  **/
  @javax.annotation.Nullable
  public String getUrlFrom() {
    return urlFrom;
  }

  public void setUrlFrom(String urlFrom) {
    this.urlFrom = urlFrom;
  }


  public BacklinksPageIntersectionInfo urlFromHttps(Boolean urlFromHttps) {
    this.urlFromHttps = urlFromHttps;
    return this;
  }

   /**
   * indicates whether the referring URL is secured with HTTPS if true, the referring URL is secured with HTTPS
   * @return urlFromHttps
  **/
  @javax.annotation.Nullable
  public Boolean getUrlFromHttps() {
    return urlFromHttps;
  }

  public void setUrlFromHttps(Boolean urlFromHttps) {
    this.urlFromHttps = urlFromHttps;
  }


  public BacklinksPageIntersectionInfo domainTo(String domainTo) {
    this.domainTo = domainTo;
    return this;
  }

   /**
   * domain the backlink is pointing to
   * @return domainTo
  **/
  @javax.annotation.Nullable
  public String getDomainTo() {
    return domainTo;
  }

  public void setDomainTo(String domainTo) {
    this.domainTo = domainTo;
  }


  public BacklinksPageIntersectionInfo urlTo(String urlTo) {
    this.urlTo = urlTo;
    return this;
  }

   /**
   * URL the backlink is pointing to
   * @return urlTo
  **/
  @javax.annotation.Nullable
  public String getUrlTo() {
    return urlTo;
  }

  public void setUrlTo(String urlTo) {
    this.urlTo = urlTo;
  }


  public BacklinksPageIntersectionInfo urlToHttps(Boolean urlToHttps) {
    this.urlToHttps = urlToHttps;
    return this;
  }

   /**
   * indicates if the URL the backlink is pointing to is secured with HTTPS if true, the URL is secured with HTTPS
   * @return urlToHttps
  **/
  @javax.annotation.Nullable
  public Boolean getUrlToHttps() {
    return urlToHttps;
  }

  public void setUrlToHttps(Boolean urlToHttps) {
    this.urlToHttps = urlToHttps;
  }


  public BacklinksPageIntersectionInfo tldFrom(String tldFrom) {
    this.tldFrom = tldFrom;
    return this;
  }

   /**
   * top-level domain of the referring URL
   * @return tldFrom
  **/
  @javax.annotation.Nullable
  public String getTldFrom() {
    return tldFrom;
  }

  public void setTldFrom(String tldFrom) {
    this.tldFrom = tldFrom;
  }


  public BacklinksPageIntersectionInfo isNew(Boolean isNew) {
    this.isNew = isNew;
    return this;
  }

   /**
   * indicates whether the backlink is new if true, the backlink was found on the page last time our crawler visited it
   * @return isNew
  **/
  @javax.annotation.Nullable
  public Boolean getIsNew() {
    return isNew;
  }

  public void setIsNew(Boolean isNew) {
    this.isNew = isNew;
  }


  public BacklinksPageIntersectionInfo isLost(Boolean isLost) {
    this.isLost = isLost;
    return this;
  }

   /**
   * indicates whether the backlink was removed if true, the backlink or the entire page was removed
   * @return isLost
  **/
  @javax.annotation.Nullable
  public Boolean getIsLost() {
    return isLost;
  }

  public void setIsLost(Boolean isLost) {
    this.isLost = isLost;
  }


  public BacklinksPageIntersectionInfo backlinkSpamScore(Integer backlinkSpamScore) {
    this.backlinkSpamScore = backlinkSpamScore;
    return this;
  }

   /**
   * spam score of the backlink learn more about how the metric is calculated on this help center page
   * @return backlinkSpamScore
  **/
  @javax.annotation.Nullable
  public Integer getBacklinkSpamScore() {
    return backlinkSpamScore;
  }

  public void setBacklinkSpamScore(Integer backlinkSpamScore) {
    this.backlinkSpamScore = backlinkSpamScore;
  }


  public BacklinksPageIntersectionInfo rank(Integer rank) {
    this.rank = rank;
    return this;
  }

   /**
   * backlink rank rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm learn more about the metric and how it is calculated in this help center article
   * @return rank
  **/
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public BacklinksPageIntersectionInfo pageFromRank(Integer pageFromRank) {
    this.pageFromRank = pageFromRank;
    return this;
  }

   /**
   * page rank of the referring page page_from_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm learn more about the metric and how it is calculated in this help center article
   * @return pageFromRank
  **/
  @javax.annotation.Nullable
  public Integer getPageFromRank() {
    return pageFromRank;
  }

  public void setPageFromRank(Integer pageFromRank) {
    this.pageFromRank = pageFromRank;
  }


  public BacklinksPageIntersectionInfo domainFromRank(Integer domainFromRank) {
    this.domainFromRank = domainFromRank;
    return this;
  }

   /**
   * domain rank of the referring domain domain_from_rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm learn more about the metric and how it is calculated in this help center article
   * @return domainFromRank
  **/
  @javax.annotation.Nullable
  public Integer getDomainFromRank() {
    return domainFromRank;
  }

  public void setDomainFromRank(Integer domainFromRank) {
    this.domainFromRank = domainFromRank;
  }


  public BacklinksPageIntersectionInfo domainFromPlatformType(List<String> domainFromPlatformType) {
    this.domainFromPlatformType = domainFromPlatformType;
    return this;
  }

  public BacklinksPageIntersectionInfo addDomainFromPlatformTypeItem(String domainFromPlatformTypeItem) {
    if (this.domainFromPlatformType == null) {
      this.domainFromPlatformType = new ArrayList<>();
    }
    this.domainFromPlatformType.add(domainFromPlatformTypeItem);
    return this;
  }

   /**
   * platform types of the referring domain example: \&quot;cms\&quot;, \&quot;blogs\&quot;
   * @return domainFromPlatformType
  **/
  @javax.annotation.Nullable
  public List<String> getDomainFromPlatformType() {
    return domainFromPlatformType;
  }

  public void setDomainFromPlatformType(List<String> domainFromPlatformType) {
    this.domainFromPlatformType = domainFromPlatformType;
  }


  public BacklinksPageIntersectionInfo domainFromIsIp(Boolean domainFromIsIp) {
    this.domainFromIsIp = domainFromIsIp;
    return this;
  }

   /**
   * indicates if the domain is IP if true, the domain functions as an IP address and does not have a domain name
   * @return domainFromIsIp
  **/
  @javax.annotation.Nullable
  public Boolean getDomainFromIsIp() {
    return domainFromIsIp;
  }

  public void setDomainFromIsIp(Boolean domainFromIsIp) {
    this.domainFromIsIp = domainFromIsIp;
  }


  public BacklinksPageIntersectionInfo domainFromIp(String domainFromIp) {
    this.domainFromIp = domainFromIp;
    return this;
  }

   /**
   * IP address of the referring domain
   * @return domainFromIp
  **/
  @javax.annotation.Nullable
  public String getDomainFromIp() {
    return domainFromIp;
  }

  public void setDomainFromIp(String domainFromIp) {
    this.domainFromIp = domainFromIp;
  }


  public BacklinksPageIntersectionInfo domainFromCountry(String domainFromCountry) {
    this.domainFromCountry = domainFromCountry;
    return this;
  }

   /**
   * ISO country code of the referring domain
   * @return domainFromCountry
  **/
  @javax.annotation.Nullable
  public String getDomainFromCountry() {
    return domainFromCountry;
  }

  public void setDomainFromCountry(String domainFromCountry) {
    this.domainFromCountry = domainFromCountry;
  }


  public BacklinksPageIntersectionInfo pageFromExternalLinks(Integer pageFromExternalLinks) {
    this.pageFromExternalLinks = pageFromExternalLinks;
    return this;
  }

   /**
   * number of external links found on the referring page
   * @return pageFromExternalLinks
  **/
  @javax.annotation.Nullable
  public Integer getPageFromExternalLinks() {
    return pageFromExternalLinks;
  }

  public void setPageFromExternalLinks(Integer pageFromExternalLinks) {
    this.pageFromExternalLinks = pageFromExternalLinks;
  }


  public BacklinksPageIntersectionInfo pageFromInternalLinks(Integer pageFromInternalLinks) {
    this.pageFromInternalLinks = pageFromInternalLinks;
    return this;
  }

   /**
   * number of internal links found on the referring page
   * @return pageFromInternalLinks
  **/
  @javax.annotation.Nullable
  public Integer getPageFromInternalLinks() {
    return pageFromInternalLinks;
  }

  public void setPageFromInternalLinks(Integer pageFromInternalLinks) {
    this.pageFromInternalLinks = pageFromInternalLinks;
  }


  public BacklinksPageIntersectionInfo pageFromSize(Integer pageFromSize) {
    this.pageFromSize = pageFromSize;
    return this;
  }

   /**
   * size of the referring page, in bytes example: 63357
   * @return pageFromSize
  **/
  @javax.annotation.Nullable
  public Integer getPageFromSize() {
    return pageFromSize;
  }

  public void setPageFromSize(Integer pageFromSize) {
    this.pageFromSize = pageFromSize;
  }


  public BacklinksPageIntersectionInfo pageFromEncoding(String pageFromEncoding) {
    this.pageFromEncoding = pageFromEncoding;
    return this;
  }

   /**
   * character encoding of the referring page example: utf-8
   * @return pageFromEncoding
  **/
  @javax.annotation.Nullable
  public String getPageFromEncoding() {
    return pageFromEncoding;
  }

  public void setPageFromEncoding(String pageFromEncoding) {
    this.pageFromEncoding = pageFromEncoding;
  }


  public BacklinksPageIntersectionInfo pageFromLanguage(String pageFromLanguage) {
    this.pageFromLanguage = pageFromLanguage;
    return this;
  }

   /**
   * language of the referring page in ISO 639-1 format example: en
   * @return pageFromLanguage
  **/
  @javax.annotation.Nullable
  public String getPageFromLanguage() {
    return pageFromLanguage;
  }

  public void setPageFromLanguage(String pageFromLanguage) {
    this.pageFromLanguage = pageFromLanguage;
  }


  public BacklinksPageIntersectionInfo pageFromTitle(String pageFromTitle) {
    this.pageFromTitle = pageFromTitle;
    return this;
  }

   /**
   * title of the referring page
   * @return pageFromTitle
  **/
  @javax.annotation.Nullable
  public String getPageFromTitle() {
    return pageFromTitle;
  }

  public void setPageFromTitle(String pageFromTitle) {
    this.pageFromTitle = pageFromTitle;
  }


  public BacklinksPageIntersectionInfo pageFromStatusCode(Integer pageFromStatusCode) {
    this.pageFromStatusCode = pageFromStatusCode;
    return this;
  }

   /**
   * HTTP status code returned by the referring page example: 200
   * @return pageFromStatusCode
  **/
  @javax.annotation.Nullable
  public Integer getPageFromStatusCode() {
    return pageFromStatusCode;
  }

  public void setPageFromStatusCode(Integer pageFromStatusCode) {
    this.pageFromStatusCode = pageFromStatusCode;
  }


  public BacklinksPageIntersectionInfo firstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
    return this;
  }

   /**
   * date and time when our crawler found the backlink for the first time in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return firstSeen
  **/
  @javax.annotation.Nullable
  public String getFirstSeen() {
    return firstSeen;
  }

  public void setFirstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
  }


  public BacklinksPageIntersectionInfo prevSeen(String prevSeen) {
    this.prevSeen = prevSeen;
    return this;
  }

   /**
   * previous to the most recent date when our crawler visited the backlink in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return prevSeen
  **/
  @javax.annotation.Nullable
  public String getPrevSeen() {
    return prevSeen;
  }

  public void setPrevSeen(String prevSeen) {
    this.prevSeen = prevSeen;
  }


  public BacklinksPageIntersectionInfo lastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
    return this;
  }

   /**
   * most recent date when our crawler visited the backlink in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return lastSeen
  **/
  @javax.annotation.Nullable
  public String getLastSeen() {
    return lastSeen;
  }

  public void setLastSeen(String lastSeen) {
    this.lastSeen = lastSeen;
  }


  public BacklinksPageIntersectionInfo itemType(String itemType) {
    this.itemType = itemType;
    return this;
  }

   /**
   * link type possible values: anchor, image, link, meta, canonical, alternate, redirect
   * @return itemType
  **/
  @javax.annotation.Nullable
  public String getItemType() {
    return itemType;
  }

  public void setItemType(String itemType) {
    this.itemType = itemType;
  }


  public BacklinksPageIntersectionInfo attributes(List<String> attributes) {
    this.attributes = attributes;
    return this;
  }

  public BacklinksPageIntersectionInfo addAttributesItem(String attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * link attributes of the referring links example: nofollow
   * @return attributes
  **/
  @javax.annotation.Nullable
  public List<String> getAttributes() {
    return attributes;
  }

  public void setAttributes(List<String> attributes) {
    this.attributes = attributes;
  }


  public BacklinksPageIntersectionInfo dofollow(Boolean dofollow) {
    this.dofollow = dofollow;
    return this;
  }

   /**
   * indicates whether the backlink is dofollow if false, the backlink is nofollow
   * @return dofollow
  **/
  @javax.annotation.Nullable
  public Boolean getDofollow() {
    return dofollow;
  }

  public void setDofollow(Boolean dofollow) {
    this.dofollow = dofollow;
  }


  public BacklinksPageIntersectionInfo original(Boolean original) {
    this.original = original;
    return this;
  }

   /**
   * indicates whether the backlink was present on the referring page when our crawler first visited it
   * @return original
  **/
  @javax.annotation.Nullable
  public Boolean getOriginal() {
    return original;
  }

  public void setOriginal(Boolean original) {
    this.original = original;
  }


  public BacklinksPageIntersectionInfo alt(String alt) {
    this.alt = alt;
    return this;
  }

   /**
   * alternative text of the image this field will be null if backlink type is not image
   * @return alt
  **/
  @javax.annotation.Nullable
  public String getAlt() {
    return alt;
  }

  public void setAlt(String alt) {
    this.alt = alt;
  }


  public BacklinksPageIntersectionInfo anchor(String anchor) {
    this.anchor = anchor;
    return this;
  }

   /**
   * anchor text of the backlink
   * @return anchor
  **/
  @javax.annotation.Nullable
  public String getAnchor() {
    return anchor;
  }

  public void setAnchor(String anchor) {
    this.anchor = anchor;
  }


  public BacklinksPageIntersectionInfo textPre(String textPre) {
    this.textPre = textPre;
    return this;
  }

   /**
   * text snippet before the anchor text
   * @return textPre
  **/
  @javax.annotation.Nullable
  public String getTextPre() {
    return textPre;
  }

  public void setTextPre(String textPre) {
    this.textPre = textPre;
  }


  public BacklinksPageIntersectionInfo textPost(String textPost) {
    this.textPost = textPost;
    return this;
  }

   /**
   * snippet after the anchor text
   * @return textPost
  **/
  @javax.annotation.Nullable
  public String getTextPost() {
    return textPost;
  }

  public void setTextPost(String textPost) {
    this.textPost = textPost;
  }


  public BacklinksPageIntersectionInfo semanticLocation(String semanticLocation) {
    this.semanticLocation = semanticLocation;
    return this;
  }

   /**
   * indicates semantic element in HTML where the backlink is found you can get the full list of semantic elements here examples: article, section, summary
   * @return semanticLocation
  **/
  @javax.annotation.Nullable
  public String getSemanticLocation() {
    return semanticLocation;
  }

  public void setSemanticLocation(String semanticLocation) {
    this.semanticLocation = semanticLocation;
  }


  public BacklinksPageIntersectionInfo linksCount(Long linksCount) {
    this.linksCount = linksCount;
    return this;
  }

   /**
   * number of identical backlinks found on the referring page
   * @return linksCount
  **/
  @javax.annotation.Nullable
  public Long getLinksCount() {
    return linksCount;
  }

  public void setLinksCount(Long linksCount) {
    this.linksCount = linksCount;
  }


  public BacklinksPageIntersectionInfo groupCount(Long groupCount) {
    this.groupCount = groupCount;
    return this;
  }

   /**
   * indicates total number of backlinks from this domain for example, if mode is set to one_per_domain, this field will indicate the total number of backlinks coming from this domain
   * @return groupCount
  **/
  @javax.annotation.Nullable
  public Long getGroupCount() {
    return groupCount;
  }

  public void setGroupCount(Long groupCount) {
    this.groupCount = groupCount;
  }


  public BacklinksPageIntersectionInfo isBroken(Boolean isBroken) {
    this.isBroken = isBroken;
    return this;
  }

   /**
   * indicates whether the backlink is broken if true, the backlink is pointing to a page responding with a 4xx or 5xx status code
   * @return isBroken
  **/
  @javax.annotation.Nullable
  public Boolean getIsBroken() {
    return isBroken;
  }

  public void setIsBroken(Boolean isBroken) {
    this.isBroken = isBroken;
  }


  public BacklinksPageIntersectionInfo urlToStatusCode(Integer urlToStatusCode) {
    this.urlToStatusCode = urlToStatusCode;
    return this;
  }

   /**
   * status code of the referenced page if the value is null, our crawler hasn’t yet visited the webpage the link is pointing to example: 200
   * @return urlToStatusCode
  **/
  @javax.annotation.Nullable
  public Integer getUrlToStatusCode() {
    return urlToStatusCode;
  }

  public void setUrlToStatusCode(Integer urlToStatusCode) {
    this.urlToStatusCode = urlToStatusCode;
  }


  public BacklinksPageIntersectionInfo urlToSpamScore(Integer urlToSpamScore) {
    this.urlToSpamScore = urlToSpamScore;
    return this;
  }

   /**
   * spam score of the referenced page if the value is null, our crawler hasn’t yet visited the webpage the link is pointing to learn more about how the metric is calculated on this help center page
   * @return urlToSpamScore
  **/
  @javax.annotation.Nullable
  public Integer getUrlToSpamScore() {
    return urlToSpamScore;
  }

  public void setUrlToSpamScore(Integer urlToSpamScore) {
    this.urlToSpamScore = urlToSpamScore;
  }


  public BacklinksPageIntersectionInfo urlToRedirectTarget(String urlToRedirectTarget) {
    this.urlToRedirectTarget = urlToRedirectTarget;
    return this;
  }

   /**
   * target url of the redirect target page the redirect is pointing to
   * @return urlToRedirectTarget
  **/
  @javax.annotation.Nullable
  public String getUrlToRedirectTarget() {
    return urlToRedirectTarget;
  }

  public void setUrlToRedirectTarget(String urlToRedirectTarget) {
    this.urlToRedirectTarget = urlToRedirectTarget;
  }


  public BacklinksPageIntersectionInfo isIndirectLink(Boolean isIndirectLink) {
    this.isIndirectLink = isIndirectLink;
    return this;
  }

   /**
   * indicates whether the backlink is an indirect link if true, the backlink is an indirect link pointing to a page that either redirects to url_to, or points to a canonical page
   * @return isIndirectLink
  **/
  @javax.annotation.Nullable
  public Boolean getIsIndirectLink() {
    return isIndirectLink;
  }

  public void setIsIndirectLink(Boolean isIndirectLink) {
    this.isIndirectLink = isIndirectLink;
  }


  public BacklinksPageIntersectionInfo indirectLinkPath(List<Redirect> indirectLinkPath) {
    this.indirectLinkPath = indirectLinkPath;
    return this;
  }

  public BacklinksPageIntersectionInfo addIndirectLinkPathItem(Redirect indirectLinkPathItem) {
    if (this.indirectLinkPath == null) {
      this.indirectLinkPath = new ArrayList<>();
    }
    this.indirectLinkPath.add(indirectLinkPathItem);
    return this;
  }

   /**
   * indirect link path indicates a URL or a sequence of URLs that lead to url_to
   * @return indirectLinkPath
  **/
  @javax.annotation.Nullable
  public List<Redirect> getIndirectLinkPath() {
    return indirectLinkPath;
  }

  public void setIndirectLinkPath(List<Redirect> indirectLinkPath) {
    this.indirectLinkPath = indirectLinkPath;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BacklinksPageIntersectionInfo backlinksPageIntersectionInfo = (BacklinksPageIntersectionInfo) o;
    return Objects.equals(this.type, backlinksPageIntersectionInfo.type) &&
        Objects.equals(this.domainFrom, backlinksPageIntersectionInfo.domainFrom) &&
        Objects.equals(this.urlFrom, backlinksPageIntersectionInfo.urlFrom) &&
        Objects.equals(this.urlFromHttps, backlinksPageIntersectionInfo.urlFromHttps) &&
        Objects.equals(this.domainTo, backlinksPageIntersectionInfo.domainTo) &&
        Objects.equals(this.urlTo, backlinksPageIntersectionInfo.urlTo) &&
        Objects.equals(this.urlToHttps, backlinksPageIntersectionInfo.urlToHttps) &&
        Objects.equals(this.tldFrom, backlinksPageIntersectionInfo.tldFrom) &&
        Objects.equals(this.isNew, backlinksPageIntersectionInfo.isNew) &&
        Objects.equals(this.isLost, backlinksPageIntersectionInfo.isLost) &&
        Objects.equals(this.backlinkSpamScore, backlinksPageIntersectionInfo.backlinkSpamScore) &&
        Objects.equals(this.rank, backlinksPageIntersectionInfo.rank) &&
        Objects.equals(this.pageFromRank, backlinksPageIntersectionInfo.pageFromRank) &&
        Objects.equals(this.domainFromRank, backlinksPageIntersectionInfo.domainFromRank) &&
        Objects.equals(this.domainFromPlatformType, backlinksPageIntersectionInfo.domainFromPlatformType) &&
        Objects.equals(this.domainFromIsIp, backlinksPageIntersectionInfo.domainFromIsIp) &&
        Objects.equals(this.domainFromIp, backlinksPageIntersectionInfo.domainFromIp) &&
        Objects.equals(this.domainFromCountry, backlinksPageIntersectionInfo.domainFromCountry) &&
        Objects.equals(this.pageFromExternalLinks, backlinksPageIntersectionInfo.pageFromExternalLinks) &&
        Objects.equals(this.pageFromInternalLinks, backlinksPageIntersectionInfo.pageFromInternalLinks) &&
        Objects.equals(this.pageFromSize, backlinksPageIntersectionInfo.pageFromSize) &&
        Objects.equals(this.pageFromEncoding, backlinksPageIntersectionInfo.pageFromEncoding) &&
        Objects.equals(this.pageFromLanguage, backlinksPageIntersectionInfo.pageFromLanguage) &&
        Objects.equals(this.pageFromTitle, backlinksPageIntersectionInfo.pageFromTitle) &&
        Objects.equals(this.pageFromStatusCode, backlinksPageIntersectionInfo.pageFromStatusCode) &&
        Objects.equals(this.firstSeen, backlinksPageIntersectionInfo.firstSeen) &&
        Objects.equals(this.prevSeen, backlinksPageIntersectionInfo.prevSeen) &&
        Objects.equals(this.lastSeen, backlinksPageIntersectionInfo.lastSeen) &&
        Objects.equals(this.itemType, backlinksPageIntersectionInfo.itemType) &&
        Objects.equals(this.attributes, backlinksPageIntersectionInfo.attributes) &&
        Objects.equals(this.dofollow, backlinksPageIntersectionInfo.dofollow) &&
        Objects.equals(this.original, backlinksPageIntersectionInfo.original) &&
        Objects.equals(this.alt, backlinksPageIntersectionInfo.alt) &&
        Objects.equals(this.anchor, backlinksPageIntersectionInfo.anchor) &&
        Objects.equals(this.textPre, backlinksPageIntersectionInfo.textPre) &&
        Objects.equals(this.textPost, backlinksPageIntersectionInfo.textPost) &&
        Objects.equals(this.semanticLocation, backlinksPageIntersectionInfo.semanticLocation) &&
        Objects.equals(this.linksCount, backlinksPageIntersectionInfo.linksCount) &&
        Objects.equals(this.groupCount, backlinksPageIntersectionInfo.groupCount) &&
        Objects.equals(this.isBroken, backlinksPageIntersectionInfo.isBroken) &&
        Objects.equals(this.urlToStatusCode, backlinksPageIntersectionInfo.urlToStatusCode) &&
        Objects.equals(this.urlToSpamScore, backlinksPageIntersectionInfo.urlToSpamScore) &&
        Objects.equals(this.urlToRedirectTarget, backlinksPageIntersectionInfo.urlToRedirectTarget) &&
        Objects.equals(this.isIndirectLink, backlinksPageIntersectionInfo.isIndirectLink) &&
        Objects.equals(this.indirectLinkPath, backlinksPageIntersectionInfo.indirectLinkPath);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, domainFrom, urlFrom, urlFromHttps, domainTo, urlTo, urlToHttps, tldFrom, isNew, isLost, backlinkSpamScore, rank, pageFromRank, domainFromRank, domainFromPlatformType, domainFromIsIp, domainFromIp, domainFromCountry, pageFromExternalLinks, pageFromInternalLinks, pageFromSize, pageFromEncoding, pageFromLanguage, pageFromTitle, pageFromStatusCode, firstSeen, prevSeen, lastSeen, itemType, attributes, dofollow, original, alt, anchor, textPre, textPost, semanticLocation, linksCount, groupCount, isBroken, urlToStatusCode, urlToSpamScore, urlToRedirectTarget, isIndirectLink, indirectLinkPath);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BacklinksPageIntersectionInfo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    domainFrom: ").append(toIndentedString(domainFrom)).append("\n");
    sb.append("    urlFrom: ").append(toIndentedString(urlFrom)).append("\n");
    sb.append("    urlFromHttps: ").append(toIndentedString(urlFromHttps)).append("\n");
    sb.append("    domainTo: ").append(toIndentedString(domainTo)).append("\n");
    sb.append("    urlTo: ").append(toIndentedString(urlTo)).append("\n");
    sb.append("    urlToHttps: ").append(toIndentedString(urlToHttps)).append("\n");
    sb.append("    tldFrom: ").append(toIndentedString(tldFrom)).append("\n");
    sb.append("    isNew: ").append(toIndentedString(isNew)).append("\n");
    sb.append("    isLost: ").append(toIndentedString(isLost)).append("\n");
    sb.append("    backlinkSpamScore: ").append(toIndentedString(backlinkSpamScore)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    pageFromRank: ").append(toIndentedString(pageFromRank)).append("\n");
    sb.append("    domainFromRank: ").append(toIndentedString(domainFromRank)).append("\n");
    sb.append("    domainFromPlatformType: ").append(toIndentedString(domainFromPlatformType)).append("\n");
    sb.append("    domainFromIsIp: ").append(toIndentedString(domainFromIsIp)).append("\n");
    sb.append("    domainFromIp: ").append(toIndentedString(domainFromIp)).append("\n");
    sb.append("    domainFromCountry: ").append(toIndentedString(domainFromCountry)).append("\n");
    sb.append("    pageFromExternalLinks: ").append(toIndentedString(pageFromExternalLinks)).append("\n");
    sb.append("    pageFromInternalLinks: ").append(toIndentedString(pageFromInternalLinks)).append("\n");
    sb.append("    pageFromSize: ").append(toIndentedString(pageFromSize)).append("\n");
    sb.append("    pageFromEncoding: ").append(toIndentedString(pageFromEncoding)).append("\n");
    sb.append("    pageFromLanguage: ").append(toIndentedString(pageFromLanguage)).append("\n");
    sb.append("    pageFromTitle: ").append(toIndentedString(pageFromTitle)).append("\n");
    sb.append("    pageFromStatusCode: ").append(toIndentedString(pageFromStatusCode)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    prevSeen: ").append(toIndentedString(prevSeen)).append("\n");
    sb.append("    lastSeen: ").append(toIndentedString(lastSeen)).append("\n");
    sb.append("    itemType: ").append(toIndentedString(itemType)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    dofollow: ").append(toIndentedString(dofollow)).append("\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("    alt: ").append(toIndentedString(alt)).append("\n");
    sb.append("    anchor: ").append(toIndentedString(anchor)).append("\n");
    sb.append("    textPre: ").append(toIndentedString(textPre)).append("\n");
    sb.append("    textPost: ").append(toIndentedString(textPost)).append("\n");
    sb.append("    semanticLocation: ").append(toIndentedString(semanticLocation)).append("\n");
    sb.append("    linksCount: ").append(toIndentedString(linksCount)).append("\n");
    sb.append("    groupCount: ").append(toIndentedString(groupCount)).append("\n");
    sb.append("    isBroken: ").append(toIndentedString(isBroken)).append("\n");
    sb.append("    urlToStatusCode: ").append(toIndentedString(urlToStatusCode)).append("\n");
    sb.append("    urlToSpamScore: ").append(toIndentedString(urlToSpamScore)).append("\n");
    sb.append("    urlToRedirectTarget: ").append(toIndentedString(urlToRedirectTarget)).append("\n");
    sb.append("    isIndirectLink: ").append(toIndentedString(isIndirectLink)).append("\n");
    sb.append("    indirectLinkPath: ").append(toIndentedString(indirectLinkPath)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("domain_from");
    openapiFields.add("url_from");
    openapiFields.add("url_from_https");
    openapiFields.add("domain_to");
    openapiFields.add("url_to");
    openapiFields.add("url_to_https");
    openapiFields.add("tld_from");
    openapiFields.add("is_new");
    openapiFields.add("is_lost");
    openapiFields.add("backlink_spam_score");
    openapiFields.add("rank");
    openapiFields.add("page_from_rank");
    openapiFields.add("domain_from_rank");
    openapiFields.add("domain_from_platform_type");
    openapiFields.add("domain_from_is_ip");
    openapiFields.add("domain_from_ip");
    openapiFields.add("domain_from_country");
    openapiFields.add("page_from_external_links");
    openapiFields.add("page_from_internal_links");
    openapiFields.add("page_from_size");
    openapiFields.add("page_from_encoding");
    openapiFields.add("page_from_language");
    openapiFields.add("page_from_title");
    openapiFields.add("page_from_status_code");
    openapiFields.add("first_seen");
    openapiFields.add("prev_seen");
    openapiFields.add("last_seen");
    openapiFields.add("item_type");
    openapiFields.add("attributes");
    openapiFields.add("dofollow");
    openapiFields.add("original");
    openapiFields.add("alt");
    openapiFields.add("anchor");
    openapiFields.add("text_pre");
    openapiFields.add("text_post");
    openapiFields.add("semantic_location");
    openapiFields.add("links_count");
    openapiFields.add("group_count");
    openapiFields.add("is_broken");
    openapiFields.add("url_to_status_code");
    openapiFields.add("url_to_spam_score");
    openapiFields.add("url_to_redirect_target");
    openapiFields.add("is_indirect_link");
    openapiFields.add("indirect_link_path");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BacklinksPageIntersectionInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BacklinksPageIntersectionInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BacklinksPageIntersectionInfo is not found in the empty JSON string", BacklinksPageIntersectionInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BacklinksPageIntersectionInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BacklinksPageIntersectionInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("domain_from") != null && !jsonObj.get("domain_from").isJsonNull()) && !jsonObj.get("domain_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_from").toString()));
      }
      if ((jsonObj.get("url_from") != null && !jsonObj.get("url_from").isJsonNull()) && !jsonObj.get("url_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_from").toString()));
      }
      if ((jsonObj.get("domain_to") != null && !jsonObj.get("domain_to").isJsonNull()) && !jsonObj.get("domain_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_to").toString()));
      }
      if ((jsonObj.get("url_to") != null && !jsonObj.get("url_to").isJsonNull()) && !jsonObj.get("url_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_to").toString()));
      }
      if ((jsonObj.get("tld_from") != null && !jsonObj.get("tld_from").isJsonNull()) && !jsonObj.get("tld_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tld_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tld_from").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("domain_from_platform_type") != null && !jsonObj.get("domain_from_platform_type").isJsonNull() && !jsonObj.get("domain_from_platform_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_from_platform_type` to be an array in the JSON string but got `%s`", jsonObj.get("domain_from_platform_type").toString()));
      }
      if ((jsonObj.get("domain_from_ip") != null && !jsonObj.get("domain_from_ip").isJsonNull()) && !jsonObj.get("domain_from_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_from_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_from_ip").toString()));
      }
      if ((jsonObj.get("domain_from_country") != null && !jsonObj.get("domain_from_country").isJsonNull()) && !jsonObj.get("domain_from_country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_from_country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_from_country").toString()));
      }
      if ((jsonObj.get("page_from_encoding") != null && !jsonObj.get("page_from_encoding").isJsonNull()) && !jsonObj.get("page_from_encoding").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_from_encoding` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_from_encoding").toString()));
      }
      if ((jsonObj.get("page_from_language") != null && !jsonObj.get("page_from_language").isJsonNull()) && !jsonObj.get("page_from_language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_from_language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_from_language").toString()));
      }
      if ((jsonObj.get("page_from_title") != null && !jsonObj.get("page_from_title").isJsonNull()) && !jsonObj.get("page_from_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_from_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_from_title").toString()));
      }
      if ((jsonObj.get("first_seen") != null && !jsonObj.get("first_seen").isJsonNull()) && !jsonObj.get("first_seen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_seen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_seen").toString()));
      }
      if ((jsonObj.get("prev_seen") != null && !jsonObj.get("prev_seen").isJsonNull()) && !jsonObj.get("prev_seen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `prev_seen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("prev_seen").toString()));
      }
      if ((jsonObj.get("last_seen") != null && !jsonObj.get("last_seen").isJsonNull()) && !jsonObj.get("last_seen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_seen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_seen").toString()));
      }
      if ((jsonObj.get("item_type") != null && !jsonObj.get("item_type").isJsonNull()) && !jsonObj.get("item_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `item_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("item_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attributes") != null && !jsonObj.get("attributes").isJsonNull() && !jsonObj.get("attributes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attributes` to be an array in the JSON string but got `%s`", jsonObj.get("attributes").toString()));
      }
      if ((jsonObj.get("alt") != null && !jsonObj.get("alt").isJsonNull()) && !jsonObj.get("alt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alt").toString()));
      }
      if ((jsonObj.get("anchor") != null && !jsonObj.get("anchor").isJsonNull()) && !jsonObj.get("anchor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `anchor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("anchor").toString()));
      }
      if ((jsonObj.get("text_pre") != null && !jsonObj.get("text_pre").isJsonNull()) && !jsonObj.get("text_pre").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_pre` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_pre").toString()));
      }
      if ((jsonObj.get("text_post") != null && !jsonObj.get("text_post").isJsonNull()) && !jsonObj.get("text_post").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_post` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text_post").toString()));
      }
      if ((jsonObj.get("semantic_location") != null && !jsonObj.get("semantic_location").isJsonNull()) && !jsonObj.get("semantic_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `semantic_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("semantic_location").toString()));
      }
      if ((jsonObj.get("url_to_redirect_target") != null && !jsonObj.get("url_to_redirect_target").isJsonNull()) && !jsonObj.get("url_to_redirect_target").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_to_redirect_target` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_to_redirect_target").toString()));
      }
      if (jsonObj.get("indirect_link_path") != null && !jsonObj.get("indirect_link_path").isJsonNull()) {
        JsonArray jsonArrayindirectLinkPath = jsonObj.getAsJsonArray("indirect_link_path");
        if (jsonArrayindirectLinkPath != null) {
          // ensure the json data is an array
          if (!jsonObj.get("indirect_link_path").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `indirect_link_path` to be an array in the JSON string but got `%s`", jsonObj.get("indirect_link_path").toString()));
          }

          // validate the optional field `indirect_link_path` (array)
          for (int i = 0; i < jsonArrayindirectLinkPath.size(); i++) {
            Redirect.validateJsonElement(jsonArrayindirectLinkPath.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BacklinksPageIntersectionInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BacklinksPageIntersectionInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BacklinksPageIntersectionInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BacklinksPageIntersectionInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BacklinksPageIntersectionInfo>() {
           @Override
           public void write(JsonWriter out, BacklinksPageIntersectionInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BacklinksPageIntersectionInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BacklinksPageIntersectionInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BacklinksPageIntersectionInfo
  * @throws IOException if the JSON string is invalid with respect to BacklinksPageIntersectionInfo
  */
  public static BacklinksPageIntersectionInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BacklinksPageIntersectionInfo.class);
  }

 /**
  * Convert an instance of BacklinksPageIntersectionInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

