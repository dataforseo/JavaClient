/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * SerpGoogleDatasetSearchLiveAdvancedRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-04-01T20:18:33.613150200+03:00[Europe/Kiev]", comments = "Generator version: 7.4.0")
public class SerpGoogleDatasetSearchLiveAdvancedRequestInfo {
  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_LANGUAGE_NAME = "language_name";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_NAME)
  private String languageName;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_DEVICE = "device";
  @SerializedName(SERIALIZED_NAME_DEVICE)
  private String device;

  public static final String SERIALIZED_NAME_OS = "os";
  @SerializedName(SERIALIZED_NAME_OS)
  private String os;

  public static final String SERIALIZED_NAME_DEPTH = "depth";
  @SerializedName(SERIALIZED_NAME_DEPTH)
  private Integer depth;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "last_updated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private String lastUpdated;

  public static final String SERIALIZED_NAME_FILE_FORMATS = "file_formats";
  @SerializedName(SERIALIZED_NAME_FILE_FORMATS)
  private List<String> fileFormats;

  public static final String SERIALIZED_NAME_USAGE_RIGHTS = "usage_rights";
  @SerializedName(SERIALIZED_NAME_USAGE_RIGHTS)
  private String usageRights;

  public static final String SERIALIZED_NAME_IS_FREE = "is_free";
  @SerializedName(SERIALIZED_NAME_IS_FREE)
  private Boolean isFree;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<String> topics;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo() {
  }

  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

   /**
   * keyword required field you can specify up to 700 symbols in the keyword field all %## will be decoded (plus symbol ‘+’ will be decoded to a space character) if you need to use the “%” symbol for your keyword, please specify it as “%25”; if you need to use the “+” symbol for your keyword, please specify it as “%2B”;
   * @return keyword
  **/
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo languageName(String languageName) {
    this.languageName = languageName;
    return this;
  }

   /**
   * full name of search engine language optional field if you use this field, you don’t need to specify language_code possible value: English
   * @return languageName
  **/
  @javax.annotation.Nullable
  public String getLanguageName() {
    return languageName;
  }

  public void setLanguageName(String languageName) {
    this.languageName = languageName;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * search engine language code optional field if you don’t specify language_name if you use this field, you don’t need to specify language_name possible value: en
   * @return languageCode
  **/
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo device(String device) {
    this.device = device;
    return this;
  }

   /**
   * device type optional field possible value: desktop
   * @return device
  **/
  @javax.annotation.Nullable
  public String getDevice() {
    return device;
  }

  public void setDevice(String device) {
    this.device = device;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo os(String os) {
    this.os = os;
    return this;
  }

   /**
   * device operating system optional field choose from the following values: windows, macos default value: windows
   * @return os
  **/
  @javax.annotation.Nullable
  public String getOs() {
    return os;
  }

  public void setOs(String os) {
    this.os = os;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo depth(Integer depth) {
    this.depth = depth;
    return this;
  }

   /**
   * parsing depth optional field number of results in SERP default value: 20 max value: 700 Note: your account will be billed per each SERP containing up to 20 results; thus, setting a depth above 20 may result in additional charges if the search engine returns more than 20 results; if the specified depth is higher than the number of results in the response, the difference will be refunded automatically to your account balance
   * @return depth
  **/
  @javax.annotation.Nullable
  public Integer getDepth() {
    return depth;
  }

  public void setDepth(Integer depth) {
    this.depth = depth;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo lastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

   /**
   * last time the dataset was updated optional field possible values: 1m, 1y, 3y
   * @return lastUpdated
  **/
  @javax.annotation.Nullable
  public String getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(String lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo fileFormats(List<String> fileFormats) {
    this.fileFormats = fileFormats;
    return this;
  }

  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo addFileFormatsItem(String fileFormatsItem) {
    if (this.fileFormats == null) {
      this.fileFormats = new ArrayList<>();
    }
    this.fileFormats.add(fileFormatsItem);
    return this;
  }

   /**
   * file formats of the dataset optional field possible values: other, archive, text, image, document, tabular
   * @return fileFormats
  **/
  @javax.annotation.Nullable
  public List<String> getFileFormats() {
    return fileFormats;
  }

  public void setFileFormats(List<String> fileFormats) {
    this.fileFormats = fileFormats;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo usageRights(String usageRights) {
    this.usageRights = usageRights;
    return this;
  }

   /**
   * usage rights of the dataset optional field possible values: commercial, noncommercial
   * @return usageRights
  **/
  @javax.annotation.Nullable
  public String getUsageRights() {
    return usageRights;
  }

  public void setUsageRights(String usageRights) {
    this.usageRights = usageRights;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo isFree(Boolean isFree) {
    this.isFree = isFree;
    return this;
  }

   /**
   * indicates whether displayed datasets are free optional field possible values: true, false
   * @return isFree
  **/
  @javax.annotation.Nullable
  public Boolean getIsFree() {
    return isFree;
  }

  public void setIsFree(Boolean isFree) {
    this.isFree = isFree;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo topics(List<String> topics) {
    this.topics = topics;
    return this;
  }

  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * dataset topics optional field possible values: humanities, social_sciences, life_sciences, agriculture, natural_sciences, geo, computer, architecture_and_urban_planning, engineering
   * @return topics
  **/
  @javax.annotation.Nullable
  public List<String> getTopics() {
    return topics;
  }

  public void setTopics(List<String> topics) {
    this.topics = topics;
  }


  public SerpGoogleDatasetSearchLiveAdvancedRequestInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * user-defined task identifier optional field the character limit is 255 you can use this parameter to identify the task and match it with the result you will find the specified tag value in the data object of the response
   * @return tag
  **/
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SerpGoogleDatasetSearchLiveAdvancedRequestInfo serpGoogleDatasetSearchLiveAdvancedRequestInfo = (SerpGoogleDatasetSearchLiveAdvancedRequestInfo) o;
    return Objects.equals(this.keyword, serpGoogleDatasetSearchLiveAdvancedRequestInfo.keyword) &&
        Objects.equals(this.languageName, serpGoogleDatasetSearchLiveAdvancedRequestInfo.languageName) &&
        Objects.equals(this.languageCode, serpGoogleDatasetSearchLiveAdvancedRequestInfo.languageCode) &&
        Objects.equals(this.device, serpGoogleDatasetSearchLiveAdvancedRequestInfo.device) &&
        Objects.equals(this.os, serpGoogleDatasetSearchLiveAdvancedRequestInfo.os) &&
        Objects.equals(this.depth, serpGoogleDatasetSearchLiveAdvancedRequestInfo.depth) &&
        Objects.equals(this.lastUpdated, serpGoogleDatasetSearchLiveAdvancedRequestInfo.lastUpdated) &&
        Objects.equals(this.fileFormats, serpGoogleDatasetSearchLiveAdvancedRequestInfo.fileFormats) &&
        Objects.equals(this.usageRights, serpGoogleDatasetSearchLiveAdvancedRequestInfo.usageRights) &&
        Objects.equals(this.isFree, serpGoogleDatasetSearchLiveAdvancedRequestInfo.isFree) &&
        Objects.equals(this.topics, serpGoogleDatasetSearchLiveAdvancedRequestInfo.topics) &&
        Objects.equals(this.tag, serpGoogleDatasetSearchLiveAdvancedRequestInfo.tag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(keyword, languageName, languageCode, device, os, depth, lastUpdated, fileFormats, usageRights, isFree, topics, tag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SerpGoogleDatasetSearchLiveAdvancedRequestInfo {\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    languageName: ").append(toIndentedString(languageName)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    device: ").append(toIndentedString(device)).append("\n");
    sb.append("    os: ").append(toIndentedString(os)).append("\n");
    sb.append("    depth: ").append(toIndentedString(depth)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    fileFormats: ").append(toIndentedString(fileFormats)).append("\n");
    sb.append("    usageRights: ").append(toIndentedString(usageRights)).append("\n");
    sb.append("    isFree: ").append(toIndentedString(isFree)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keyword");
    openapiFields.add("language_name");
    openapiFields.add("language_code");
    openapiFields.add("device");
    openapiFields.add("os");
    openapiFields.add("depth");
    openapiFields.add("last_updated");
    openapiFields.add("file_formats");
    openapiFields.add("usage_rights");
    openapiFields.add("is_free");
    openapiFields.add("topics");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SerpGoogleDatasetSearchLiveAdvancedRequestInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SerpGoogleDatasetSearchLiveAdvancedRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SerpGoogleDatasetSearchLiveAdvancedRequestInfo is not found in the empty JSON string", SerpGoogleDatasetSearchLiveAdvancedRequestInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SerpGoogleDatasetSearchLiveAdvancedRequestInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SerpGoogleDatasetSearchLiveAdvancedRequestInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("language_name") != null && !jsonObj.get("language_name").isJsonNull()) && !jsonObj.get("language_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_name").toString()));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      if ((jsonObj.get("device") != null && !jsonObj.get("device").isJsonNull()) && !jsonObj.get("device").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `device` to be a primitive type in the JSON string but got `%s`", jsonObj.get("device").toString()));
      }
      if ((jsonObj.get("os") != null && !jsonObj.get("os").isJsonNull()) && !jsonObj.get("os").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `os` to be a primitive type in the JSON string but got `%s`", jsonObj.get("os").toString()));
      }
      if ((jsonObj.get("last_updated") != null && !jsonObj.get("last_updated").isJsonNull()) && !jsonObj.get("last_updated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("file_formats") != null && !jsonObj.get("file_formats").isJsonNull() && !jsonObj.get("file_formats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_formats` to be an array in the JSON string but got `%s`", jsonObj.get("file_formats").toString()));
      }
      if ((jsonObj.get("usage_rights") != null && !jsonObj.get("usage_rights").isJsonNull()) && !jsonObj.get("usage_rights").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `usage_rights` to be a primitive type in the JSON string but got `%s`", jsonObj.get("usage_rights").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonNull() && !jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SerpGoogleDatasetSearchLiveAdvancedRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SerpGoogleDatasetSearchLiveAdvancedRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SerpGoogleDatasetSearchLiveAdvancedRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SerpGoogleDatasetSearchLiveAdvancedRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SerpGoogleDatasetSearchLiveAdvancedRequestInfo>() {
           @Override
           public void write(JsonWriter out, SerpGoogleDatasetSearchLiveAdvancedRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SerpGoogleDatasetSearchLiveAdvancedRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SerpGoogleDatasetSearchLiveAdvancedRequestInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SerpGoogleDatasetSearchLiveAdvancedRequestInfo
  * @throws IOException if the JSON string is invalid with respect to SerpGoogleDatasetSearchLiveAdvancedRequestInfo
  */
  public static SerpGoogleDatasetSearchLiveAdvancedRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SerpGoogleDatasetSearchLiveAdvancedRequestInfo.class);
  }

 /**
  * Convert an instance of SerpGoogleDatasetSearchLiveAdvancedRequestInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

