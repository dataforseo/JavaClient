/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo;
import org.dataforseo.client.model.AppendixWhoisDomainAnalyticsLimitsRatesDataInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AppendixDomainAnalyticsDayStatisticsRatesData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-28T19:49:11.515676700+03:00[Europe/Kiev]")
public class AppendixDomainAnalyticsDayStatisticsRatesData {
  public static final String SERIALIZED_NAME_TASKS_READY = "tasks_ready";
  @SerializedName(SERIALIZED_NAME_TASKS_READY)
  private Double tasksReady;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Double errors;

  public static final String SERIALIZED_NAME_WHOIS = "whois";
  @SerializedName(SERIALIZED_NAME_WHOIS)
  private AppendixWhoisDomainAnalyticsLimitsRatesDataInfo whois;

  public static final String SERIALIZED_NAME_TECHNOLOGIES = "technologies";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGIES)
  private AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo technologies;

  public static final String SERIALIZED_NAME_ID_LIST = "id_list";
  @SerializedName(SERIALIZED_NAME_ID_LIST)
  private Double idList;

  public static final String SERIALIZED_NAME_AVAILABLE_FILTERS = "available_filters";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_FILTERS)
  private Double availableFilters;

  public AppendixDomainAnalyticsDayStatisticsRatesData() {
  }

  public AppendixDomainAnalyticsDayStatisticsRatesData tasksReady(Double tasksReady) {
    this.tasksReady = tasksReady;
    return this;
  }

   /**
   * Get tasksReady
   * @return tasksReady
  **/
  @javax.annotation.Nullable
  public Double getTasksReady() {
    return tasksReady;
  }

  public void setTasksReady(Double tasksReady) {
    this.tasksReady = tasksReady;
  }


  public AppendixDomainAnalyticsDayStatisticsRatesData errors(Double errors) {
    this.errors = errors;
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nullable
  public Double getErrors() {
    return errors;
  }

  public void setErrors(Double errors) {
    this.errors = errors;
  }


  public AppendixDomainAnalyticsDayStatisticsRatesData whois(AppendixWhoisDomainAnalyticsLimitsRatesDataInfo whois) {
    this.whois = whois;
    return this;
  }

   /**
   * Get whois
   * @return whois
  **/
  @javax.annotation.Nullable
  public AppendixWhoisDomainAnalyticsLimitsRatesDataInfo getWhois() {
    return whois;
  }

  public void setWhois(AppendixWhoisDomainAnalyticsLimitsRatesDataInfo whois) {
    this.whois = whois;
  }


  public AppendixDomainAnalyticsDayStatisticsRatesData technologies(AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo technologies) {
    this.technologies = technologies;
    return this;
  }

   /**
   * Get technologies
   * @return technologies
  **/
  @javax.annotation.Nullable
  public AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo getTechnologies() {
    return technologies;
  }

  public void setTechnologies(AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo technologies) {
    this.technologies = technologies;
  }


  public AppendixDomainAnalyticsDayStatisticsRatesData idList(Double idList) {
    this.idList = idList;
    return this;
  }

   /**
   * Get idList
   * @return idList
  **/
  @javax.annotation.Nullable
  public Double getIdList() {
    return idList;
  }

  public void setIdList(Double idList) {
    this.idList = idList;
  }


  public AppendixDomainAnalyticsDayStatisticsRatesData availableFilters(Double availableFilters) {
    this.availableFilters = availableFilters;
    return this;
  }

   /**
   * Get availableFilters
   * @return availableFilters
  **/
  @javax.annotation.Nullable
  public Double getAvailableFilters() {
    return availableFilters;
  }

  public void setAvailableFilters(Double availableFilters) {
    this.availableFilters = availableFilters;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendixDomainAnalyticsDayStatisticsRatesData appendixDomainAnalyticsDayStatisticsRatesData = (AppendixDomainAnalyticsDayStatisticsRatesData) o;
    return Objects.equals(this.tasksReady, appendixDomainAnalyticsDayStatisticsRatesData.tasksReady) &&
        Objects.equals(this.errors, appendixDomainAnalyticsDayStatisticsRatesData.errors) &&
        Objects.equals(this.whois, appendixDomainAnalyticsDayStatisticsRatesData.whois) &&
        Objects.equals(this.technologies, appendixDomainAnalyticsDayStatisticsRatesData.technologies) &&
        Objects.equals(this.idList, appendixDomainAnalyticsDayStatisticsRatesData.idList) &&
        Objects.equals(this.availableFilters, appendixDomainAnalyticsDayStatisticsRatesData.availableFilters);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(tasksReady, errors, whois, technologies, idList, availableFilters);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendixDomainAnalyticsDayStatisticsRatesData {\n");
    sb.append("    tasksReady: ").append(toIndentedString(tasksReady)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    whois: ").append(toIndentedString(whois)).append("\n");
    sb.append("    technologies: ").append(toIndentedString(technologies)).append("\n");
    sb.append("    idList: ").append(toIndentedString(idList)).append("\n");
    sb.append("    availableFilters: ").append(toIndentedString(availableFilters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tasks_ready");
    openapiFields.add("errors");
    openapiFields.add("whois");
    openapiFields.add("technologies");
    openapiFields.add("id_list");
    openapiFields.add("available_filters");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppendixDomainAnalyticsDayStatisticsRatesData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendixDomainAnalyticsDayStatisticsRatesData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendixDomainAnalyticsDayStatisticsRatesData is not found in the empty JSON string", AppendixDomainAnalyticsDayStatisticsRatesData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendixDomainAnalyticsDayStatisticsRatesData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendixDomainAnalyticsDayStatisticsRatesData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `whois`
      if (jsonObj.get("whois") != null && !jsonObj.get("whois").isJsonNull()) {
        AppendixWhoisDomainAnalyticsLimitsRatesDataInfo.validateJsonElement(jsonObj.get("whois"));
      }
      // validate the optional field `technologies`
      if (jsonObj.get("technologies") != null && !jsonObj.get("technologies").isJsonNull()) {
        AppendixTechnologiesDomainAnalyticsLimitsRatesDataInfo.validateJsonElement(jsonObj.get("technologies"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendixDomainAnalyticsDayStatisticsRatesData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendixDomainAnalyticsDayStatisticsRatesData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendixDomainAnalyticsDayStatisticsRatesData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendixDomainAnalyticsDayStatisticsRatesData.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendixDomainAnalyticsDayStatisticsRatesData>() {
           @Override
           public void write(JsonWriter out, AppendixDomainAnalyticsDayStatisticsRatesData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendixDomainAnalyticsDayStatisticsRatesData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppendixDomainAnalyticsDayStatisticsRatesData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppendixDomainAnalyticsDayStatisticsRatesData
  * @throws IOException if the JSON string is invalid with respect to AppendixDomainAnalyticsDayStatisticsRatesData
  */
  public static AppendixDomainAnalyticsDayStatisticsRatesData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendixDomainAnalyticsDayStatisticsRatesData.class);
  }

 /**
  * Convert an instance of AppendixDomainAnalyticsDayStatisticsRatesData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

