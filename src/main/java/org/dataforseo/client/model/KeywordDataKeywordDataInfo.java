/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AvgBacklinksInfo;
import org.dataforseo.client.model.KeywordInfo;
import org.dataforseo.client.model.KeywordProperties;
import org.dataforseo.client.model.SerpInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * KeywordDataKeywordDataInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T20:51:42.343286900+03:00[Europe/Kiev]")
public class KeywordDataKeywordDataInfo {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "location_code";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private Integer locationCode;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_KEYWORD_INFO = "keyword_info";
  @SerializedName(SERIALIZED_NAME_KEYWORD_INFO)
  private KeywordInfo keywordInfo;

  public static final String SERIALIZED_NAME_KEYWORD_PROPERTIES = "keyword_properties";
  @SerializedName(SERIALIZED_NAME_KEYWORD_PROPERTIES)
  private KeywordProperties keywordProperties;

  public static final String SERIALIZED_NAME_SERP_INFO = "serp_info";
  @SerializedName(SERIALIZED_NAME_SERP_INFO)
  private SerpInfo serpInfo;

  public static final String SERIALIZED_NAME_AVG_BACKLINKS_INFO = "avg_backlinks_info";
  @SerializedName(SERIALIZED_NAME_AVG_BACKLINKS_INFO)
  private AvgBacklinksInfo avgBacklinksInfo;

  public KeywordDataKeywordDataInfo() {
  }

  public KeywordDataKeywordDataInfo seType(String seType) {
    this.seType = seType;
    return this;
  }

   /**
   * search engine type search engine type specified in a POST request; for this endpoint, the field equals bing
   * @return seType
  **/
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public KeywordDataKeywordDataInfo keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

   /**
   * returned keyword
   * @return keyword
  **/
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public KeywordDataKeywordDataInfo locationCode(Integer locationCode) {
    this.locationCode = locationCode;
    return this;
  }

   /**
   * location code in a POST array
   * @return locationCode
  **/
  @javax.annotation.Nullable
  public Integer getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(Integer locationCode) {
    this.locationCode = locationCode;
  }


  public KeywordDataKeywordDataInfo languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * language code in a POST array
   * @return languageCode
  **/
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public KeywordDataKeywordDataInfo keywordInfo(KeywordInfo keywordInfo) {
    this.keywordInfo = keywordInfo;
    return this;
  }

   /**
   * Get keywordInfo
   * @return keywordInfo
  **/
  @javax.annotation.Nullable
  public KeywordInfo getKeywordInfo() {
    return keywordInfo;
  }

  public void setKeywordInfo(KeywordInfo keywordInfo) {
    this.keywordInfo = keywordInfo;
  }


  public KeywordDataKeywordDataInfo keywordProperties(KeywordProperties keywordProperties) {
    this.keywordProperties = keywordProperties;
    return this;
  }

   /**
   * Get keywordProperties
   * @return keywordProperties
  **/
  @javax.annotation.Nullable
  public KeywordProperties getKeywordProperties() {
    return keywordProperties;
  }

  public void setKeywordProperties(KeywordProperties keywordProperties) {
    this.keywordProperties = keywordProperties;
  }


  public KeywordDataKeywordDataInfo serpInfo(SerpInfo serpInfo) {
    this.serpInfo = serpInfo;
    return this;
  }

   /**
   * Get serpInfo
   * @return serpInfo
  **/
  @javax.annotation.Nullable
  public SerpInfo getSerpInfo() {
    return serpInfo;
  }

  public void setSerpInfo(SerpInfo serpInfo) {
    this.serpInfo = serpInfo;
  }


  public KeywordDataKeywordDataInfo avgBacklinksInfo(AvgBacklinksInfo avgBacklinksInfo) {
    this.avgBacklinksInfo = avgBacklinksInfo;
    return this;
  }

   /**
   * Get avgBacklinksInfo
   * @return avgBacklinksInfo
  **/
  @javax.annotation.Nullable
  public AvgBacklinksInfo getAvgBacklinksInfo() {
    return avgBacklinksInfo;
  }

  public void setAvgBacklinksInfo(AvgBacklinksInfo avgBacklinksInfo) {
    this.avgBacklinksInfo = avgBacklinksInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordDataKeywordDataInfo keywordDataKeywordDataInfo = (KeywordDataKeywordDataInfo) o;
    return Objects.equals(this.seType, keywordDataKeywordDataInfo.seType) &&
        Objects.equals(this.keyword, keywordDataKeywordDataInfo.keyword) &&
        Objects.equals(this.locationCode, keywordDataKeywordDataInfo.locationCode) &&
        Objects.equals(this.languageCode, keywordDataKeywordDataInfo.languageCode) &&
        Objects.equals(this.keywordInfo, keywordDataKeywordDataInfo.keywordInfo) &&
        Objects.equals(this.keywordProperties, keywordDataKeywordDataInfo.keywordProperties) &&
        Objects.equals(this.serpInfo, keywordDataKeywordDataInfo.serpInfo) &&
        Objects.equals(this.avgBacklinksInfo, keywordDataKeywordDataInfo.avgBacklinksInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, keyword, locationCode, languageCode, keywordInfo, keywordProperties, serpInfo, avgBacklinksInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordDataKeywordDataInfo {\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    keywordInfo: ").append(toIndentedString(keywordInfo)).append("\n");
    sb.append("    keywordProperties: ").append(toIndentedString(keywordProperties)).append("\n");
    sb.append("    serpInfo: ").append(toIndentedString(serpInfo)).append("\n");
    sb.append("    avgBacklinksInfo: ").append(toIndentedString(avgBacklinksInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("se_type");
    openapiFields.add("keyword");
    openapiFields.add("location_code");
    openapiFields.add("language_code");
    openapiFields.add("keyword_info");
    openapiFields.add("keyword_properties");
    openapiFields.add("serp_info");
    openapiFields.add("avg_backlinks_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to KeywordDataKeywordDataInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordDataKeywordDataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordDataKeywordDataInfo is not found in the empty JSON string", KeywordDataKeywordDataInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!KeywordDataKeywordDataInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `KeywordDataKeywordDataInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      // validate the optional field `keyword_info`
      if (jsonObj.get("keyword_info") != null && !jsonObj.get("keyword_info").isJsonNull()) {
        KeywordInfo.validateJsonElement(jsonObj.get("keyword_info"));
      }
      // validate the optional field `keyword_properties`
      if (jsonObj.get("keyword_properties") != null && !jsonObj.get("keyword_properties").isJsonNull()) {
        KeywordProperties.validateJsonElement(jsonObj.get("keyword_properties"));
      }
      // validate the optional field `serp_info`
      if (jsonObj.get("serp_info") != null && !jsonObj.get("serp_info").isJsonNull()) {
        SerpInfo.validateJsonElement(jsonObj.get("serp_info"));
      }
      // validate the optional field `avg_backlinks_info`
      if (jsonObj.get("avg_backlinks_info") != null && !jsonObj.get("avg_backlinks_info").isJsonNull()) {
        AvgBacklinksInfo.validateJsonElement(jsonObj.get("avg_backlinks_info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordDataKeywordDataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordDataKeywordDataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordDataKeywordDataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordDataKeywordDataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordDataKeywordDataInfo>() {
           @Override
           public void write(JsonWriter out, KeywordDataKeywordDataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordDataKeywordDataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of KeywordDataKeywordDataInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of KeywordDataKeywordDataInfo
  * @throws IOException if the JSON string is invalid with respect to KeywordDataKeywordDataInfo
  */
  public static KeywordDataKeywordDataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordDataKeywordDataInfo.class);
  }

 /**
  * Convert an instance of KeywordDataKeywordDataInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

