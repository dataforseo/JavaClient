/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.AuthorsElement;
import org.dataforseo.client.model.BaseSerpElementItem;
import org.dataforseo.client.model.DatasetDescription;
import org.dataforseo.client.model.FormatsElement;
import org.dataforseo.client.model.LicensesElement;
import org.dataforseo.client.model.LinkElement;
import org.dataforseo.client.model.PeriodCovered;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * DatasetSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T15:18:23.103906100+03:00[Europe/Kiev]")
public class DatasetSerpElementItem extends BaseSerpElementItem {
  public static final String SERIALIZED_NAME_RANK_GROUP = "rank_group";
  @SerializedName(SERIALIZED_NAME_RANK_GROUP)
  private Integer rankGroup;

  public static final String SERIALIZED_NAME_RANK_ABSOLUTE = "rank_absolute";
  @SerializedName(SERIALIZED_NAME_RANK_ABSOLUTE)
  private Integer rankAbsolute;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_XPATH = "xpath";
  @SerializedName(SERIALIZED_NAME_XPATH)
  private String xpath;

  public static final String SERIALIZED_NAME_DATASET_ID = "dataset_id";
  @SerializedName(SERIALIZED_NAME_DATASET_ID)
  private String datasetId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_IMAGE_URL = "image_url";
  @SerializedName(SERIALIZED_NAME_IMAGE_URL)
  private String imageUrl;

  public static final String SERIALIZED_NAME_SCHOLARLY_CITATIONS_COUNT = "scholarly_citations_count";
  @SerializedName(SERIALIZED_NAME_SCHOLARLY_CITATIONS_COUNT)
  private Long scholarlyCitationsCount;

  public static final String SERIALIZED_NAME_SCHOLARLY_ARTICLES_URL = "scholarly_articles_url";
  @SerializedName(SERIALIZED_NAME_SCHOLARLY_ARTICLES_URL)
  private String scholarlyArticlesUrl;

  public static final String SERIALIZED_NAME_UNIQUE_IDENTIFIER = "unique_identifier";
  @SerializedName(SERIALIZED_NAME_UNIQUE_IDENTIFIER)
  private String uniqueIdentifier;

  public static final String SERIALIZED_NAME_RELATED_ARTICLE = "related_article";
  @SerializedName(SERIALIZED_NAME_RELATED_ARTICLE)
  private String relatedArticle;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<LinkElement> links;

  public static final String SERIALIZED_NAME_DATASET_PROVIDERS = "dataset_providers";
  @SerializedName(SERIALIZED_NAME_DATASET_PROVIDERS)
  private List<LicensesElement> datasetProviders;

  public static final String SERIALIZED_NAME_FORMATS = "formats";
  @SerializedName(SERIALIZED_NAME_FORMATS)
  private List<FormatsElement> formats;

  public static final String SERIALIZED_NAME_AUTHORS = "authors";
  @SerializedName(SERIALIZED_NAME_AUTHORS)
  private List<AuthorsElement> authors;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<LicensesElement> licenses;

  public static final String SERIALIZED_NAME_UPDATED_DATE = "updated_date";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATE)
  private String updatedDate;

  public static final String SERIALIZED_NAME_AREA_COVERED = "area_covered";
  @SerializedName(SERIALIZED_NAME_AREA_COVERED)
  private List<String> areaCovered;

  public static final String SERIALIZED_NAME_PERIOD_COVERED = "period_covered";
  @SerializedName(SERIALIZED_NAME_PERIOD_COVERED)
  private PeriodCovered periodCovered;

  public static final String SERIALIZED_NAME_DATASET_DESCRIPTION = "dataset_description";
  @SerializedName(SERIALIZED_NAME_DATASET_DESCRIPTION)
  private DatasetDescription datasetDescription;

  public DatasetSerpElementItem() {
    this.type = this.getClass().getSimpleName();
  }

  public DatasetSerpElementItem rankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
    return this;
  }

   /**
   * group rank in SERP position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group
   * @return rankGroup
  **/
  @javax.annotation.Nullable
  public Integer getRankGroup() {
    return rankGroup;
  }

  public void setRankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
  }


  public DatasetSerpElementItem rankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
    return this;
  }

   /**
   * absolute rank in SERP absolute position among all the elements in SERP
   * @return rankAbsolute
  **/
  @javax.annotation.Nullable
  public Integer getRankAbsolute() {
    return rankAbsolute;
  }

  public void setRankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
  }


  public DatasetSerpElementItem position(String position) {
    this.position = position;
    return this;
  }

   /**
   * the alignment of the element in SERP can take the following values: left, right
   * @return position
  **/
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public DatasetSerpElementItem xpath(String xpath) {
    this.xpath = xpath;
    return this;
  }

   /**
   * the XPath of the element
   * @return xpath
  **/
  @javax.annotation.Nullable
  public String getXpath() {
    return xpath;
  }

  public void setXpath(String xpath) {
    this.xpath = xpath;
  }


  public DatasetSerpElementItem datasetId(String datasetId) {
    this.datasetId = datasetId;
    return this;
  }

   /**
   * ID of the dataset
   * @return datasetId
  **/
  @javax.annotation.Nullable
  public String getDatasetId() {
    return datasetId;
  }

  public void setDatasetId(String datasetId) {
    this.datasetId = datasetId;
  }


  public DatasetSerpElementItem title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title of the result in SERP
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DatasetSerpElementItem imageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
    return this;
  }

   /**
   * URL of the image the URL leading to the image on the original resource or DataForSEO storage (in case the original source is not available)
   * @return imageUrl
  **/
  @javax.annotation.Nullable
  public String getImageUrl() {
    return imageUrl;
  }

  public void setImageUrl(String imageUrl) {
    this.imageUrl = imageUrl;
  }


  public DatasetSerpElementItem scholarlyCitationsCount(Long scholarlyCitationsCount) {
    this.scholarlyCitationsCount = scholarlyCitationsCount;
    return this;
  }

   /**
   * count of articles that refer to the dataset
   * @return scholarlyCitationsCount
  **/
  @javax.annotation.Nullable
  public Long getScholarlyCitationsCount() {
    return scholarlyCitationsCount;
  }

  public void setScholarlyCitationsCount(Long scholarlyCitationsCount) {
    this.scholarlyCitationsCount = scholarlyCitationsCount;
  }


  public DatasetSerpElementItem scholarlyArticlesUrl(String scholarlyArticlesUrl) {
    this.scholarlyArticlesUrl = scholarlyArticlesUrl;
    return this;
  }

   /**
   * url of scholarly articles link to the list of scholarly articles on Google Scholar example: https://scholar.google.com/scholar?q&#x3D;%2210.6084%20m9%20figshare%207427933%20v1%22
   * @return scholarlyArticlesUrl
  **/
  @javax.annotation.Nullable
  public String getScholarlyArticlesUrl() {
    return scholarlyArticlesUrl;
  }

  public void setScholarlyArticlesUrl(String scholarlyArticlesUrl) {
    this.scholarlyArticlesUrl = scholarlyArticlesUrl;
  }


  public DatasetSerpElementItem uniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
    return this;
  }

   /**
   * digital identifier of an object unique digital identifier of the dataset example: https://doi.org/10.5061/dryad.hmgqnk9m3
   * @return uniqueIdentifier
  **/
  @javax.annotation.Nullable
  public String getUniqueIdentifier() {
    return uniqueIdentifier;
  }

  public void setUniqueIdentifier(String uniqueIdentifier) {
    this.uniqueIdentifier = uniqueIdentifier;
  }


  public DatasetSerpElementItem relatedArticle(String relatedArticle) {
    this.relatedArticle = relatedArticle;
    return this;
  }

   /**
   * link to related article link to the published article that is related to the dataset
   * @return relatedArticle
  **/
  @javax.annotation.Nullable
  public String getRelatedArticle() {
    return relatedArticle;
  }

  public void setRelatedArticle(String relatedArticle) {
    this.relatedArticle = relatedArticle;
  }


  public DatasetSerpElementItem links(List<LinkElement> links) {
    this.links = links;
    return this;
  }

  public DatasetSerpElementItem addLinksItem(LinkElement linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * sitelinks the links shown below some of Google Dataset’s search results if there are none, equals null
   * @return links
  **/
  @javax.annotation.Nullable
  public List<LinkElement> getLinks() {
    return links;
  }

  public void setLinks(List<LinkElement> links) {
    this.links = links;
  }


  public DatasetSerpElementItem datasetProviders(List<LicensesElement> datasetProviders) {
    this.datasetProviders = datasetProviders;
    return this;
  }

  public DatasetSerpElementItem addDatasetProvidersItem(LicensesElement datasetProvidersItem) {
    if (this.datasetProviders == null) {
      this.datasetProviders = new ArrayList<>();
    }
    this.datasetProviders.add(datasetProvidersItem);
    return this;
  }

   /**
   * the list of institutions that provided the dataset
   * @return datasetProviders
  **/
  @javax.annotation.Nullable
  public List<LicensesElement> getDatasetProviders() {
    return datasetProviders;
  }

  public void setDatasetProviders(List<LicensesElement> datasetProviders) {
    this.datasetProviders = datasetProviders;
  }


  public DatasetSerpElementItem formats(List<FormatsElement> formats) {
    this.formats = formats;
    return this;
  }

  public DatasetSerpElementItem addFormatsItem(FormatsElement formatsItem) {
    if (this.formats == null) {
      this.formats = new ArrayList<>();
    }
    this.formats.add(formatsItem);
    return this;
  }

   /**
   * the list of file formats of the dataset
   * @return formats
  **/
  @javax.annotation.Nullable
  public List<FormatsElement> getFormats() {
    return formats;
  }

  public void setFormats(List<FormatsElement> formats) {
    this.formats = formats;
  }


  public DatasetSerpElementItem authors(List<AuthorsElement> authors) {
    this.authors = authors;
    return this;
  }

  public DatasetSerpElementItem addAuthorsItem(AuthorsElement authorsItem) {
    if (this.authors == null) {
      this.authors = new ArrayList<>();
    }
    this.authors.add(authorsItem);
    return this;
  }

   /**
   * the list of authors of the dataset
   * @return authors
  **/
  @javax.annotation.Nullable
  public List<AuthorsElement> getAuthors() {
    return authors;
  }

  public void setAuthors(List<AuthorsElement> authors) {
    this.authors = authors;
  }


  public DatasetSerpElementItem licenses(List<LicensesElement> licenses) {
    this.licenses = licenses;
    return this;
  }

  public DatasetSerpElementItem addLicensesItem(LicensesElement licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

   /**
   * the list of licenses issued to the dataset
   * @return licenses
  **/
  @javax.annotation.Nullable
  public List<LicensesElement> getLicenses() {
    return licenses;
  }

  public void setLicenses(List<LicensesElement> licenses) {
    this.licenses = licenses;
  }


  public DatasetSerpElementItem updatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
    return this;
  }

   /**
   * date and time when the result was last updated in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2022-11-27 02:00:00 +00:00
   * @return updatedDate
  **/
  @javax.annotation.Nullable
  public String getUpdatedDate() {
    return updatedDate;
  }

  public void setUpdatedDate(String updatedDate) {
    this.updatedDate = updatedDate;
  }


  public DatasetSerpElementItem areaCovered(List<String> areaCovered) {
    this.areaCovered = areaCovered;
    return this;
  }

  public DatasetSerpElementItem addAreaCoveredItem(String areaCoveredItem) {
    if (this.areaCovered == null) {
      this.areaCovered = new ArrayList<>();
    }
    this.areaCovered.add(areaCoveredItem);
    return this;
  }

   /**
   * the list of areas covered in the dataset for example: Africa, Global
   * @return areaCovered
  **/
  @javax.annotation.Nullable
  public List<String> getAreaCovered() {
    return areaCovered;
  }

  public void setAreaCovered(List<String> areaCovered) {
    this.areaCovered = areaCovered;
  }


  public DatasetSerpElementItem periodCovered(PeriodCovered periodCovered) {
    this.periodCovered = periodCovered;
    return this;
  }

   /**
   * Get periodCovered
   * @return periodCovered
  **/
  @javax.annotation.Nullable
  public PeriodCovered getPeriodCovered() {
    return periodCovered;
  }

  public void setPeriodCovered(PeriodCovered periodCovered) {
    this.periodCovered = periodCovered;
  }


  public DatasetSerpElementItem datasetDescription(DatasetDescription datasetDescription) {
    this.datasetDescription = datasetDescription;
    return this;
  }

   /**
   * Get datasetDescription
   * @return datasetDescription
  **/
  @javax.annotation.Nullable
  public DatasetDescription getDatasetDescription() {
    return datasetDescription;
  }

  public void setDatasetDescription(DatasetDescription datasetDescription) {
    this.datasetDescription = datasetDescription;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DatasetSerpElementItem datasetSerpElementItem = (DatasetSerpElementItem) o;
    return Objects.equals(this.rankGroup, datasetSerpElementItem.rankGroup) &&
        Objects.equals(this.rankAbsolute, datasetSerpElementItem.rankAbsolute) &&
        Objects.equals(this.position, datasetSerpElementItem.position) &&
        Objects.equals(this.xpath, datasetSerpElementItem.xpath) &&
        Objects.equals(this.datasetId, datasetSerpElementItem.datasetId) &&
        Objects.equals(this.title, datasetSerpElementItem.title) &&
        Objects.equals(this.imageUrl, datasetSerpElementItem.imageUrl) &&
        Objects.equals(this.scholarlyCitationsCount, datasetSerpElementItem.scholarlyCitationsCount) &&
        Objects.equals(this.scholarlyArticlesUrl, datasetSerpElementItem.scholarlyArticlesUrl) &&
        Objects.equals(this.uniqueIdentifier, datasetSerpElementItem.uniqueIdentifier) &&
        Objects.equals(this.relatedArticle, datasetSerpElementItem.relatedArticle) &&
        Objects.equals(this.links, datasetSerpElementItem.links) &&
        Objects.equals(this.datasetProviders, datasetSerpElementItem.datasetProviders) &&
        Objects.equals(this.formats, datasetSerpElementItem.formats) &&
        Objects.equals(this.authors, datasetSerpElementItem.authors) &&
        Objects.equals(this.licenses, datasetSerpElementItem.licenses) &&
        Objects.equals(this.updatedDate, datasetSerpElementItem.updatedDate) &&
        Objects.equals(this.areaCovered, datasetSerpElementItem.areaCovered) &&
        Objects.equals(this.periodCovered, datasetSerpElementItem.periodCovered) &&
        Objects.equals(this.datasetDescription, datasetSerpElementItem.datasetDescription) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rankGroup, rankAbsolute, position, xpath, datasetId, title, imageUrl, scholarlyCitationsCount, scholarlyArticlesUrl, uniqueIdentifier, relatedArticle, links, datasetProviders, formats, authors, licenses, updatedDate, areaCovered, periodCovered, datasetDescription, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DatasetSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    rankGroup: ").append(toIndentedString(rankGroup)).append("\n");
    sb.append("    rankAbsolute: ").append(toIndentedString(rankAbsolute)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    xpath: ").append(toIndentedString(xpath)).append("\n");
    sb.append("    datasetId: ").append(toIndentedString(datasetId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    imageUrl: ").append(toIndentedString(imageUrl)).append("\n");
    sb.append("    scholarlyCitationsCount: ").append(toIndentedString(scholarlyCitationsCount)).append("\n");
    sb.append("    scholarlyArticlesUrl: ").append(toIndentedString(scholarlyArticlesUrl)).append("\n");
    sb.append("    uniqueIdentifier: ").append(toIndentedString(uniqueIdentifier)).append("\n");
    sb.append("    relatedArticle: ").append(toIndentedString(relatedArticle)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    datasetProviders: ").append(toIndentedString(datasetProviders)).append("\n");
    sb.append("    formats: ").append(toIndentedString(formats)).append("\n");
    sb.append("    authors: ").append(toIndentedString(authors)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    updatedDate: ").append(toIndentedString(updatedDate)).append("\n");
    sb.append("    areaCovered: ").append(toIndentedString(areaCovered)).append("\n");
    sb.append("    periodCovered: ").append(toIndentedString(periodCovered)).append("\n");
    sb.append("    datasetDescription: ").append(toIndentedString(datasetDescription)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("position");
    openapiFields.add("xpath");
    openapiFields.add("dataset_id");
    openapiFields.add("title");
    openapiFields.add("image_url");
    openapiFields.add("scholarly_citations_count");
    openapiFields.add("scholarly_articles_url");
    openapiFields.add("unique_identifier");
    openapiFields.add("related_article");
    openapiFields.add("links");
    openapiFields.add("dataset_providers");
    openapiFields.add("formats");
    openapiFields.add("authors");
    openapiFields.add("licenses");
    openapiFields.add("updated_date");
    openapiFields.add("area_covered");
    openapiFields.add("period_covered");
    openapiFields.add("dataset_description");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DatasetSerpElementItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DatasetSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DatasetSerpElementItem is not found in the empty JSON string", DatasetSerpElementItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DatasetSerpElementItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DatasetSerpElementItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DatasetSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DatasetSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DatasetSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DatasetSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DatasetSerpElementItem>() {
           @Override
           public void write(JsonWriter out, DatasetSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DatasetSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DatasetSerpElementItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DatasetSerpElementItem
  * @throws IOException if the JSON string is invalid with respect to DatasetSerpElementItem
  */
  public static DatasetSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DatasetSerpElementItem.class);
  }

 /**
  * Convert an instance of DatasetSerpElementItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

