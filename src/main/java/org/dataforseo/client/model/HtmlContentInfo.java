/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * HtmlContentInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T20:51:42.343286900+03:00[Europe/Kiev]")
public class HtmlContentInfo {
  public static final String SERIALIZED_NAME_PLAIN_TEXT_SIZE = "plain_text_size";
  @SerializedName(SERIALIZED_NAME_PLAIN_TEXT_SIZE)
  private Integer plainTextSize;

  public static final String SERIALIZED_NAME_PLAIN_TEXT_RATE = "plain_text_rate";
  @SerializedName(SERIALIZED_NAME_PLAIN_TEXT_RATE)
  private Double plainTextRate;

  public static final String SERIALIZED_NAME_PLAIN_TEXT_WORD_COUNT = "plain_text_word_count";
  @SerializedName(SERIALIZED_NAME_PLAIN_TEXT_WORD_COUNT)
  private Float plainTextWordCount;

  public static final String SERIALIZED_NAME_AUTOMATED_READABILITY_INDEX = "automated_readability_index";
  @SerializedName(SERIALIZED_NAME_AUTOMATED_READABILITY_INDEX)
  private Float automatedReadabilityIndex;

  public static final String SERIALIZED_NAME_COLEMAN_LIAU_READABILITY_INDEX = "coleman_liau_readability_index";
  @SerializedName(SERIALIZED_NAME_COLEMAN_LIAU_READABILITY_INDEX)
  private Float colemanLiauReadabilityIndex;

  public static final String SERIALIZED_NAME_DALE_CHALL_READABILITY_INDEX = "dale_chall_readability_index";
  @SerializedName(SERIALIZED_NAME_DALE_CHALL_READABILITY_INDEX)
  private Float daleChallReadabilityIndex;

  public static final String SERIALIZED_NAME_FLESCH_KINCAID_READABILITY_INDEX = "flesch_kincaid_readability_index";
  @SerializedName(SERIALIZED_NAME_FLESCH_KINCAID_READABILITY_INDEX)
  private Float fleschKincaidReadabilityIndex;

  public static final String SERIALIZED_NAME_SMOG_READABILITY_INDEX = "smog_readability_index";
  @SerializedName(SERIALIZED_NAME_SMOG_READABILITY_INDEX)
  private Float smogReadabilityIndex;

  public static final String SERIALIZED_NAME_DESCRIPTION_TO_CONTENT_CONSISTENCY = "description_to_content_consistency";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_TO_CONTENT_CONSISTENCY)
  private Float descriptionToContentConsistency;

  public static final String SERIALIZED_NAME_TITLE_TO_CONTENT_CONSISTENCY = "title_to_content_consistency";
  @SerializedName(SERIALIZED_NAME_TITLE_TO_CONTENT_CONSISTENCY)
  private Float titleToContentConsistency;

  public static final String SERIALIZED_NAME_META_KEYWORDS_TO_CONTENT_CONSISTENCY = "meta_keywords_to_content_consistency";
  @SerializedName(SERIALIZED_NAME_META_KEYWORDS_TO_CONTENT_CONSISTENCY)
  private Float metaKeywordsToContentConsistency;

  public HtmlContentInfo() {
  }

  public HtmlContentInfo plainTextSize(Integer plainTextSize) {
    this.plainTextSize = plainTextSize;
    return this;
  }

   /**
   * total size of the text on the page measured in bytes
   * @return plainTextSize
  **/
  @javax.annotation.Nullable
  public Integer getPlainTextSize() {
    return plainTextSize;
  }

  public void setPlainTextSize(Integer plainTextSize) {
    this.plainTextSize = plainTextSize;
  }


  public HtmlContentInfo plainTextRate(Double plainTextRate) {
    this.plainTextRate = plainTextRate;
    return this;
  }

   /**
   * plaintext rate value plain_text_size to size ratio
   * @return plainTextRate
  **/
  @javax.annotation.Nullable
  public Double getPlainTextRate() {
    return plainTextRate;
  }

  public void setPlainTextRate(Double plainTextRate) {
    this.plainTextRate = plainTextRate;
  }


  public HtmlContentInfo plainTextWordCount(Float plainTextWordCount) {
    this.plainTextWordCount = plainTextWordCount;
    return this;
  }

   /**
   * number of words on the page
   * @return plainTextWordCount
  **/
  @javax.annotation.Nullable
  public Float getPlainTextWordCount() {
    return plainTextWordCount;
  }

  public void setPlainTextWordCount(Float plainTextWordCount) {
    this.plainTextWordCount = plainTextWordCount;
  }


  public HtmlContentInfo automatedReadabilityIndex(Float automatedReadabilityIndex) {
    this.automatedReadabilityIndex = automatedReadabilityIndex;
    return this;
  }

   /**
   * Automated Readability Index
   * @return automatedReadabilityIndex
  **/
  @javax.annotation.Nullable
  public Float getAutomatedReadabilityIndex() {
    return automatedReadabilityIndex;
  }

  public void setAutomatedReadabilityIndex(Float automatedReadabilityIndex) {
    this.automatedReadabilityIndex = automatedReadabilityIndex;
  }


  public HtmlContentInfo colemanLiauReadabilityIndex(Float colemanLiauReadabilityIndex) {
    this.colemanLiauReadabilityIndex = colemanLiauReadabilityIndex;
    return this;
  }

   /**
   * Coleman–Liau Index
   * @return colemanLiauReadabilityIndex
  **/
  @javax.annotation.Nullable
  public Float getColemanLiauReadabilityIndex() {
    return colemanLiauReadabilityIndex;
  }

  public void setColemanLiauReadabilityIndex(Float colemanLiauReadabilityIndex) {
    this.colemanLiauReadabilityIndex = colemanLiauReadabilityIndex;
  }


  public HtmlContentInfo daleChallReadabilityIndex(Float daleChallReadabilityIndex) {
    this.daleChallReadabilityIndex = daleChallReadabilityIndex;
    return this;
  }

   /**
   * Dale–Chall Readability Index
   * @return daleChallReadabilityIndex
  **/
  @javax.annotation.Nullable
  public Float getDaleChallReadabilityIndex() {
    return daleChallReadabilityIndex;
  }

  public void setDaleChallReadabilityIndex(Float daleChallReadabilityIndex) {
    this.daleChallReadabilityIndex = daleChallReadabilityIndex;
  }


  public HtmlContentInfo fleschKincaidReadabilityIndex(Float fleschKincaidReadabilityIndex) {
    this.fleschKincaidReadabilityIndex = fleschKincaidReadabilityIndex;
    return this;
  }

   /**
   * Flesch–Kincaid Readability Index
   * @return fleschKincaidReadabilityIndex
  **/
  @javax.annotation.Nullable
  public Float getFleschKincaidReadabilityIndex() {
    return fleschKincaidReadabilityIndex;
  }

  public void setFleschKincaidReadabilityIndex(Float fleschKincaidReadabilityIndex) {
    this.fleschKincaidReadabilityIndex = fleschKincaidReadabilityIndex;
  }


  public HtmlContentInfo smogReadabilityIndex(Float smogReadabilityIndex) {
    this.smogReadabilityIndex = smogReadabilityIndex;
    return this;
  }

   /**
   * SMOG Readability Index
   * @return smogReadabilityIndex
  **/
  @javax.annotation.Nullable
  public Float getSmogReadabilityIndex() {
    return smogReadabilityIndex;
  }

  public void setSmogReadabilityIndex(Float smogReadabilityIndex) {
    this.smogReadabilityIndex = smogReadabilityIndex;
  }


  public HtmlContentInfo descriptionToContentConsistency(Float descriptionToContentConsistency) {
    this.descriptionToContentConsistency = descriptionToContentConsistency;
    return this;
  }

   /**
   * consistency of the meta description tag with the page content measured from 0 to 1
   * @return descriptionToContentConsistency
  **/
  @javax.annotation.Nullable
  public Float getDescriptionToContentConsistency() {
    return descriptionToContentConsistency;
  }

  public void setDescriptionToContentConsistency(Float descriptionToContentConsistency) {
    this.descriptionToContentConsistency = descriptionToContentConsistency;
  }


  public HtmlContentInfo titleToContentConsistency(Float titleToContentConsistency) {
    this.titleToContentConsistency = titleToContentConsistency;
    return this;
  }

   /**
   * consistency of the meta title tag with the page content measured from 0 to 1
   * @return titleToContentConsistency
  **/
  @javax.annotation.Nullable
  public Float getTitleToContentConsistency() {
    return titleToContentConsistency;
  }

  public void setTitleToContentConsistency(Float titleToContentConsistency) {
    this.titleToContentConsistency = titleToContentConsistency;
  }


  public HtmlContentInfo metaKeywordsToContentConsistency(Float metaKeywordsToContentConsistency) {
    this.metaKeywordsToContentConsistency = metaKeywordsToContentConsistency;
    return this;
  }

   /**
   * consistency of meta keywordstag with the page content measured from 0 to 1
   * @return metaKeywordsToContentConsistency
  **/
  @javax.annotation.Nullable
  public Float getMetaKeywordsToContentConsistency() {
    return metaKeywordsToContentConsistency;
  }

  public void setMetaKeywordsToContentConsistency(Float metaKeywordsToContentConsistency) {
    this.metaKeywordsToContentConsistency = metaKeywordsToContentConsistency;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HtmlContentInfo htmlContentInfo = (HtmlContentInfo) o;
    return Objects.equals(this.plainTextSize, htmlContentInfo.plainTextSize) &&
        Objects.equals(this.plainTextRate, htmlContentInfo.plainTextRate) &&
        Objects.equals(this.plainTextWordCount, htmlContentInfo.plainTextWordCount) &&
        Objects.equals(this.automatedReadabilityIndex, htmlContentInfo.automatedReadabilityIndex) &&
        Objects.equals(this.colemanLiauReadabilityIndex, htmlContentInfo.colemanLiauReadabilityIndex) &&
        Objects.equals(this.daleChallReadabilityIndex, htmlContentInfo.daleChallReadabilityIndex) &&
        Objects.equals(this.fleschKincaidReadabilityIndex, htmlContentInfo.fleschKincaidReadabilityIndex) &&
        Objects.equals(this.smogReadabilityIndex, htmlContentInfo.smogReadabilityIndex) &&
        Objects.equals(this.descriptionToContentConsistency, htmlContentInfo.descriptionToContentConsistency) &&
        Objects.equals(this.titleToContentConsistency, htmlContentInfo.titleToContentConsistency) &&
        Objects.equals(this.metaKeywordsToContentConsistency, htmlContentInfo.metaKeywordsToContentConsistency);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(plainTextSize, plainTextRate, plainTextWordCount, automatedReadabilityIndex, colemanLiauReadabilityIndex, daleChallReadabilityIndex, fleschKincaidReadabilityIndex, smogReadabilityIndex, descriptionToContentConsistency, titleToContentConsistency, metaKeywordsToContentConsistency);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HtmlContentInfo {\n");
    sb.append("    plainTextSize: ").append(toIndentedString(plainTextSize)).append("\n");
    sb.append("    plainTextRate: ").append(toIndentedString(plainTextRate)).append("\n");
    sb.append("    plainTextWordCount: ").append(toIndentedString(plainTextWordCount)).append("\n");
    sb.append("    automatedReadabilityIndex: ").append(toIndentedString(automatedReadabilityIndex)).append("\n");
    sb.append("    colemanLiauReadabilityIndex: ").append(toIndentedString(colemanLiauReadabilityIndex)).append("\n");
    sb.append("    daleChallReadabilityIndex: ").append(toIndentedString(daleChallReadabilityIndex)).append("\n");
    sb.append("    fleschKincaidReadabilityIndex: ").append(toIndentedString(fleschKincaidReadabilityIndex)).append("\n");
    sb.append("    smogReadabilityIndex: ").append(toIndentedString(smogReadabilityIndex)).append("\n");
    sb.append("    descriptionToContentConsistency: ").append(toIndentedString(descriptionToContentConsistency)).append("\n");
    sb.append("    titleToContentConsistency: ").append(toIndentedString(titleToContentConsistency)).append("\n");
    sb.append("    metaKeywordsToContentConsistency: ").append(toIndentedString(metaKeywordsToContentConsistency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("plain_text_size");
    openapiFields.add("plain_text_rate");
    openapiFields.add("plain_text_word_count");
    openapiFields.add("automated_readability_index");
    openapiFields.add("coleman_liau_readability_index");
    openapiFields.add("dale_chall_readability_index");
    openapiFields.add("flesch_kincaid_readability_index");
    openapiFields.add("smog_readability_index");
    openapiFields.add("description_to_content_consistency");
    openapiFields.add("title_to_content_consistency");
    openapiFields.add("meta_keywords_to_content_consistency");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HtmlContentInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HtmlContentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HtmlContentInfo is not found in the empty JSON string", HtmlContentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HtmlContentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HtmlContentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HtmlContentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HtmlContentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HtmlContentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HtmlContentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HtmlContentInfo>() {
           @Override
           public void write(JsonWriter out, HtmlContentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HtmlContentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HtmlContentInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HtmlContentInfo
  * @throws IOException if the JSON string is invalid with respect to HtmlContentInfo
  */
  public static HtmlContentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HtmlContentInfo.class);
  }

 /**
  * Convert an instance of HtmlContentInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

