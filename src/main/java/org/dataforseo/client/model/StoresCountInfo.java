/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * StoresCountInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T20:51:42.343286900+03:00[Europe/Kiev]")
public class StoresCountInfo {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private String count;

  public static final String SERIALIZED_NAME_DISPLAYED_TEXT = "displayed_text";
  @SerializedName(SERIALIZED_NAME_DISPLAYED_TEXT)
  private String displayedText;

  public static final String SERIALIZED_NAME_COUNT_FROM_TEXT = "count_from_text";
  @SerializedName(SERIALIZED_NAME_COUNT_FROM_TEXT)
  private Boolean countFromText;

  public StoresCountInfo() {
  }

  public StoresCountInfo count(String count) {
    this.count = count;
    return this;
  }

   /**
   * number of stores that offer the product
   * @return count
  **/
  @javax.annotation.Nullable
  public String getCount() {
    return count;
  }

  public void setCount(String count) {
    this.count = count;
  }


  public StoresCountInfo displayedText(String displayedText) {
    this.displayedText = displayedText;
    return this;
  }

   /**
   * text displayed on the Google Shopping page
   * @return displayedText
  **/
  @javax.annotation.Nullable
  public String getDisplayedText() {
    return displayedText;
  }

  public void setDisplayedText(String displayedText) {
    this.displayedText = displayedText;
  }


  public StoresCountInfo countFromText(Boolean countFromText) {
    this.countFromText = countFromText;
    return this;
  }

   /**
   * whether the number of stores is taken from text indicates whether the number of stores is taken from displayed_text; if the API finds the exact number of stores in the HTML code of the Google Shopping page, this parameter is false; if the API cannot find the number of stores in the HTML code of the page, it takes the number from the displayed_text; in this case, the parameter is true
   * @return countFromText
  **/
  @javax.annotation.Nullable
  public Boolean getCountFromText() {
    return countFromText;
  }

  public void setCountFromText(Boolean countFromText) {
    this.countFromText = countFromText;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StoresCountInfo storesCountInfo = (StoresCountInfo) o;
    return Objects.equals(this.count, storesCountInfo.count) &&
        Objects.equals(this.displayedText, storesCountInfo.displayedText) &&
        Objects.equals(this.countFromText, storesCountInfo.countFromText);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, displayedText, countFromText);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StoresCountInfo {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    displayedText: ").append(toIndentedString(displayedText)).append("\n");
    sb.append("    countFromText: ").append(toIndentedString(countFromText)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("displayed_text");
    openapiFields.add("count_from_text");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StoresCountInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StoresCountInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StoresCountInfo is not found in the empty JSON string", StoresCountInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StoresCountInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StoresCountInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("count") != null && !jsonObj.get("count").isJsonNull()) && !jsonObj.get("count").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `count` to be a primitive type in the JSON string but got `%s`", jsonObj.get("count").toString()));
      }
      if ((jsonObj.get("displayed_text") != null && !jsonObj.get("displayed_text").isJsonNull()) && !jsonObj.get("displayed_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayed_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayed_text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StoresCountInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StoresCountInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StoresCountInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StoresCountInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<StoresCountInfo>() {
           @Override
           public void write(JsonWriter out, StoresCountInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StoresCountInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StoresCountInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StoresCountInfo
  * @throws IOException if the JSON string is invalid with respect to StoresCountInfo
  */
  public static StoresCountInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StoresCountInfo.class);
  }

 /**
  * Convert an instance of StoresCountInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

