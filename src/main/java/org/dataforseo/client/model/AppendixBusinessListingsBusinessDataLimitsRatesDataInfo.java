/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AppendixInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AppendixBusinessListingsBusinessDataLimitsRatesDataInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-05T09:46:18.018897200+03:00[Europe/Kiev]")
public class AppendixBusinessListingsBusinessDataLimitsRatesDataInfo {
  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private AppendixInfo search;

  public static final String SERIALIZED_NAME_CATEGORIES_AGGREGATION = "categories_aggregation";
  @SerializedName(SERIALIZED_NAME_CATEGORIES_AGGREGATION)
  private AppendixInfo categoriesAggregation;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private Double categories;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private Double locations;

  public AppendixBusinessListingsBusinessDataLimitsRatesDataInfo() {
  }

  public AppendixBusinessListingsBusinessDataLimitsRatesDataInfo search(AppendixInfo search) {
    this.search = search;
    return this;
  }

   /**
   * Get search
   * @return search
  **/
  @javax.annotation.Nullable
  public AppendixInfo getSearch() {
    return search;
  }

  public void setSearch(AppendixInfo search) {
    this.search = search;
  }


  public AppendixBusinessListingsBusinessDataLimitsRatesDataInfo categoriesAggregation(AppendixInfo categoriesAggregation) {
    this.categoriesAggregation = categoriesAggregation;
    return this;
  }

   /**
   * Get categoriesAggregation
   * @return categoriesAggregation
  **/
  @javax.annotation.Nullable
  public AppendixInfo getCategoriesAggregation() {
    return categoriesAggregation;
  }

  public void setCategoriesAggregation(AppendixInfo categoriesAggregation) {
    this.categoriesAggregation = categoriesAggregation;
  }


  public AppendixBusinessListingsBusinessDataLimitsRatesDataInfo categories(Double categories) {
    this.categories = categories;
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  public Double getCategories() {
    return categories;
  }

  public void setCategories(Double categories) {
    this.categories = categories;
  }


  public AppendixBusinessListingsBusinessDataLimitsRatesDataInfo locations(Double locations) {
    this.locations = locations;
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  public Double getLocations() {
    return locations;
  }

  public void setLocations(Double locations) {
    this.locations = locations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendixBusinessListingsBusinessDataLimitsRatesDataInfo appendixBusinessListingsBusinessDataLimitsRatesDataInfo = (AppendixBusinessListingsBusinessDataLimitsRatesDataInfo) o;
    return Objects.equals(this.search, appendixBusinessListingsBusinessDataLimitsRatesDataInfo.search) &&
        Objects.equals(this.categoriesAggregation, appendixBusinessListingsBusinessDataLimitsRatesDataInfo.categoriesAggregation) &&
        Objects.equals(this.categories, appendixBusinessListingsBusinessDataLimitsRatesDataInfo.categories) &&
        Objects.equals(this.locations, appendixBusinessListingsBusinessDataLimitsRatesDataInfo.locations);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(search, categoriesAggregation, categories, locations);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendixBusinessListingsBusinessDataLimitsRatesDataInfo {\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    categoriesAggregation: ").append(toIndentedString(categoriesAggregation)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("search");
    openapiFields.add("categories_aggregation");
    openapiFields.add("categories");
    openapiFields.add("locations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppendixBusinessListingsBusinessDataLimitsRatesDataInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendixBusinessListingsBusinessDataLimitsRatesDataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendixBusinessListingsBusinessDataLimitsRatesDataInfo is not found in the empty JSON string", AppendixBusinessListingsBusinessDataLimitsRatesDataInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendixBusinessListingsBusinessDataLimitsRatesDataInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendixBusinessListingsBusinessDataLimitsRatesDataInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `search`
      if (jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) {
        AppendixInfo.validateJsonElement(jsonObj.get("search"));
      }
      // validate the optional field `categories_aggregation`
      if (jsonObj.get("categories_aggregation") != null && !jsonObj.get("categories_aggregation").isJsonNull()) {
        AppendixInfo.validateJsonElement(jsonObj.get("categories_aggregation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendixBusinessListingsBusinessDataLimitsRatesDataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendixBusinessListingsBusinessDataLimitsRatesDataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendixBusinessListingsBusinessDataLimitsRatesDataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendixBusinessListingsBusinessDataLimitsRatesDataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendixBusinessListingsBusinessDataLimitsRatesDataInfo>() {
           @Override
           public void write(JsonWriter out, AppendixBusinessListingsBusinessDataLimitsRatesDataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendixBusinessListingsBusinessDataLimitsRatesDataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppendixBusinessListingsBusinessDataLimitsRatesDataInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppendixBusinessListingsBusinessDataLimitsRatesDataInfo
  * @throws IOException if the JSON string is invalid with respect to AppendixBusinessListingsBusinessDataLimitsRatesDataInfo
  */
  public static AppendixBusinessListingsBusinessDataLimitsRatesDataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendixBusinessListingsBusinessDataLimitsRatesDataInfo.class);
  }

 /**
  * Convert an instance of AppendixBusinessListingsBusinessDataLimitsRatesDataInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

