/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * ContentGenerationGenerateLiveRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-28T19:49:11.515676700+03:00[Europe/Kiev]")
public class ContentGenerationGenerateLiveRequestInfo {
  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_MAX_NEW_TOKENS = "max_new_tokens";
  @SerializedName(SERIALIZED_NAME_MAX_NEW_TOKENS)
  private Integer maxNewTokens;

  public static final String SERIALIZED_NAME_MAX_TOKENS = "max_tokens";
  @SerializedName(SERIALIZED_NAME_MAX_TOKENS)
  private Integer maxTokens;

  public static final String SERIALIZED_NAME_CREATIVITY_INDEX = "creativity_index";
  @SerializedName(SERIALIZED_NAME_CREATIVITY_INDEX)
  private Float creativityIndex;

  public static final String SERIALIZED_NAME_TOKEN_REPETITION_PENALTY = "token_repetition_penalty";
  @SerializedName(SERIALIZED_NAME_TOKEN_REPETITION_PENALTY)
  private Float tokenRepetitionPenalty;

  public static final String SERIALIZED_NAME_TOP_K = "top_k";
  @SerializedName(SERIALIZED_NAME_TOP_K)
  private Integer topK;

  public static final String SERIALIZED_NAME_TOP_P = "top_p";
  @SerializedName(SERIALIZED_NAME_TOP_P)
  private Float topP;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Float temperature;

  public static final String SERIALIZED_NAME_AVOID_WORDS = "avoid_words";
  @SerializedName(SERIALIZED_NAME_AVOID_WORDS)
  private List<String> avoidWords;

  public static final String SERIALIZED_NAME_AVOID_STARTING_WORDS = "avoid_starting_words";
  @SerializedName(SERIALIZED_NAME_AVOID_STARTING_WORDS)
  private List<String> avoidStartingWords;

  public static final String SERIALIZED_NAME_STOP_WORDS = "stop_words";
  @SerializedName(SERIALIZED_NAME_STOP_WORDS)
  private List<String> stopWords;

  public static final String SERIALIZED_NAME_SUPPLEMENT_TOKEN = "supplement_token";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENT_TOKEN)
  private String supplementToken;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public ContentGenerationGenerateLiveRequestInfo() {
  }

  public ContentGenerationGenerateLiveRequestInfo text(String text) {
    this.text = text;
    return this;
  }

   /**
   * initial target text required field text input for content generation; can contain from 1 to 500 tokens learn more about tokens on our help center
   * @return text
  **/
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public ContentGenerationGenerateLiveRequestInfo maxNewTokens(Integer maxNewTokens) {
    this.maxNewTokens = maxNewTokens;
    return this;
  }

   /**
   * generation limit for new tokens required field if max_tokens is not specified the maximum number of new tokens for generated content; maximum value: 300; Note: the number does not include tokens specified in the text field; learn more about this parameter on our help center
   * @return maxNewTokens
  **/
  @javax.annotation.Nullable
  public Integer getMaxNewTokens() {
    return maxNewTokens;
  }

  public void setMaxNewTokens(Integer maxNewTokens) {
    this.maxNewTokens = maxNewTokens;
  }


  public ContentGenerationGenerateLiveRequestInfo maxTokens(Integer maxTokens) {
    this.maxTokens = maxTokens;
    return this;
  }

   /**
   * generation limit for all tokens required field if max_new_tokens is not specified the maximum total number of tokens for generated content; maximum value: 1024; Note: the number includes tokens specified in the text field learn more about this parameter on our help center
   * @return maxTokens
  **/
  @javax.annotation.Nullable
  public Integer getMaxTokens() {
    return maxTokens;
  }

  public void setMaxTokens(Integer maxTokens) {
    this.maxTokens = maxTokens;
  }


  public ContentGenerationGenerateLiveRequestInfo creativityIndex(Float creativityIndex) {
    this.creativityIndex = creativityIndex;
    return this;
  }

   /**
   * creativity of content generation optional field if you use this field, you donâ€™t need to use top_k / top_p / temperature the randomness of the selection of equally probable subsequent tokens; can take values from 0 to 1 default value: 0.8 learn more about this parameter on our help center
   * @return creativityIndex
  **/
  @javax.annotation.Nullable
  public Float getCreativityIndex() {
    return creativityIndex;
  }

  public void setCreativityIndex(Float creativityIndex) {
    this.creativityIndex = creativityIndex;
  }


  public ContentGenerationGenerateLiveRequestInfo tokenRepetitionPenalty(Float tokenRepetitionPenalty) {
    this.tokenRepetitionPenalty = tokenRepetitionPenalty;
    return this;
  }

   /**
   * token repetition optional field limits the repetition of the same tokens in the generated content; can take values from 0.5 to 2; default value: 1
   * @return tokenRepetitionPenalty
  **/
  @javax.annotation.Nullable
  public Float getTokenRepetitionPenalty() {
    return tokenRepetitionPenalty;
  }

  public void setTokenRepetitionPenalty(Float tokenRepetitionPenalty) {
    this.tokenRepetitionPenalty = tokenRepetitionPenalty;
  }


  public ContentGenerationGenerateLiveRequestInfo topK(Integer topK) {
    this.topK = topK;
    return this;
  }

   /**
   * the number of initial tokens in each iteration for choosing a subsequent word optional field if you use creativity_index, this field will be ignored the higher the number, the more high-probability tokens will be shortlisted for generation; can take values from 1 to 100; default value: 40 learn more about this parameter on our help center
   * @return topK
  **/
  @javax.annotation.Nullable
  public Integer getTopK() {
    return topK;
  }

  public void setTopK(Integer topK) {
    this.topK = topK;
  }


  public ContentGenerationGenerateLiveRequestInfo topP(Float topP) {
    this.topP = topP;
    return this;
  }

   /**
   * excludes initial tokens with probability lower than one optional field if you use creativity_index, this field will be ignored the higher the value, the less low-probability tokens may be shortlisted for generation; can take values from 0 to 1 default value: 0.9 Note:if both top_k and top_p are used, top_k acts first; learn more about this parameter on our help center
   * @return topP
  **/
  @javax.annotation.Nullable
  public Float getTopP() {
    return topP;
  }

  public void setTopP(Float topP) {
    this.topP = topP;
  }


  public ContentGenerationGenerateLiveRequestInfo temperature(Float temperature) {
    this.temperature = temperature;
    return this;
  }

   /**
   * controls the randomness in the output optional field if you use creativity_index, this field will be ignored the lower the temperature, the more likely the model will choose words with a higher probability of occurrence; can take values from 0 to 1; default value: 0.7 learn more about this parameter on our help center
   * @return temperature
  **/
  @javax.annotation.Nullable
  public Float getTemperature() {
    return temperature;
  }

  public void setTemperature(Float temperature) {
    this.temperature = temperature;
  }


  public ContentGenerationGenerateLiveRequestInfo avoidWords(List<String> avoidWords) {
    this.avoidWords = avoidWords;
    return this;
  }

  public ContentGenerationGenerateLiveRequestInfo addAvoidWordsItem(String avoidWordsItem) {
    if (this.avoidWords == null) {
      this.avoidWords = new ArrayList<>();
    }
    this.avoidWords.add(avoidWordsItem);
    return this;
  }

   /**
   * words or phrases to avoid when generating a text optional field you can specify up to 50 terms; example: [\&quot;term\&quot;, \&quot;optimization\&quot;]
   * @return avoidWords
  **/
  @javax.annotation.Nullable
  public List<String> getAvoidWords() {
    return avoidWords;
  }

  public void setAvoidWords(List<String> avoidWords) {
    this.avoidWords = avoidWords;
  }


  public ContentGenerationGenerateLiveRequestInfo avoidStartingWords(List<String> avoidStartingWords) {
    this.avoidStartingWords = avoidStartingWords;
    return this;
  }

  public ContentGenerationGenerateLiveRequestInfo addAvoidStartingWordsItem(String avoidStartingWordsItem) {
    if (this.avoidStartingWords == null) {
      this.avoidStartingWords = new ArrayList<>();
    }
    this.avoidStartingWords.add(avoidStartingWordsItem);
    return this;
  }

   /**
   * words or phrases to avoid in the beginning of the generated text optional field you can specify up to 50 terms; example: [\&quot;SEO\&quot;, \&quot;search engine optimization\&quot;]
   * @return avoidStartingWords
  **/
  @javax.annotation.Nullable
  public List<String> getAvoidStartingWords() {
    return avoidStartingWords;
  }

  public void setAvoidStartingWords(List<String> avoidStartingWords) {
    this.avoidStartingWords = avoidStartingWords;
  }


  public ContentGenerationGenerateLiveRequestInfo stopWords(List<String> stopWords) {
    this.stopWords = stopWords;
    return this;
  }

  public ContentGenerationGenerateLiveRequestInfo addStopWordsItem(String stopWordsItem) {
    if (this.stopWords == null) {
      this.stopWords = new ArrayList<>();
    }
    this.stopWords.add(stopWordsItem);
    return this;
  }

   /**
   * words or phrases to end the text optional field you can specify up to 50 terms; example: [\&quot;now\&quot;,\&quot;subscribe\&quot;]
   * @return stopWords
  **/
  @javax.annotation.Nullable
  public List<String> getStopWords() {
    return stopWords;
  }

  public void setStopWords(List<String> stopWords) {
    this.stopWords = stopWords;
  }


  public ContentGenerationGenerateLiveRequestInfo supplementToken(String supplementToken) {
    this.supplementToken = supplementToken;
    return this;
  }

   /**
   * token for generating subsequent results optional field provided in the identical filed of the response to each request; you can use this parameter to continue the generation of text from the initial response supplement_token values are unique for each subsequent task
   * @return supplementToken
  **/
  @javax.annotation.Nullable
  public String getSupplementToken() {
    return supplementToken;
  }

  public void setSupplementToken(String supplementToken) {
    this.supplementToken = supplementToken;
  }


  public ContentGenerationGenerateLiveRequestInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

   /**
   * user-defined task identifier optional field the character limit is 255 you can use this parameter to identify the task and match it with the result you will find the specified tag value in the data object of the response
   * @return tag
  **/
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentGenerationGenerateLiveRequestInfo contentGenerationGenerateLiveRequestInfo = (ContentGenerationGenerateLiveRequestInfo) o;
    return Objects.equals(this.text, contentGenerationGenerateLiveRequestInfo.text) &&
        Objects.equals(this.maxNewTokens, contentGenerationGenerateLiveRequestInfo.maxNewTokens) &&
        Objects.equals(this.maxTokens, contentGenerationGenerateLiveRequestInfo.maxTokens) &&
        Objects.equals(this.creativityIndex, contentGenerationGenerateLiveRequestInfo.creativityIndex) &&
        Objects.equals(this.tokenRepetitionPenalty, contentGenerationGenerateLiveRequestInfo.tokenRepetitionPenalty) &&
        Objects.equals(this.topK, contentGenerationGenerateLiveRequestInfo.topK) &&
        Objects.equals(this.topP, contentGenerationGenerateLiveRequestInfo.topP) &&
        Objects.equals(this.temperature, contentGenerationGenerateLiveRequestInfo.temperature) &&
        Objects.equals(this.avoidWords, contentGenerationGenerateLiveRequestInfo.avoidWords) &&
        Objects.equals(this.avoidStartingWords, contentGenerationGenerateLiveRequestInfo.avoidStartingWords) &&
        Objects.equals(this.stopWords, contentGenerationGenerateLiveRequestInfo.stopWords) &&
        Objects.equals(this.supplementToken, contentGenerationGenerateLiveRequestInfo.supplementToken) &&
        Objects.equals(this.tag, contentGenerationGenerateLiveRequestInfo.tag);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(text, maxNewTokens, maxTokens, creativityIndex, tokenRepetitionPenalty, topK, topP, temperature, avoidWords, avoidStartingWords, stopWords, supplementToken, tag);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentGenerationGenerateLiveRequestInfo {\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    maxNewTokens: ").append(toIndentedString(maxNewTokens)).append("\n");
    sb.append("    maxTokens: ").append(toIndentedString(maxTokens)).append("\n");
    sb.append("    creativityIndex: ").append(toIndentedString(creativityIndex)).append("\n");
    sb.append("    tokenRepetitionPenalty: ").append(toIndentedString(tokenRepetitionPenalty)).append("\n");
    sb.append("    topK: ").append(toIndentedString(topK)).append("\n");
    sb.append("    topP: ").append(toIndentedString(topP)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    avoidWords: ").append(toIndentedString(avoidWords)).append("\n");
    sb.append("    avoidStartingWords: ").append(toIndentedString(avoidStartingWords)).append("\n");
    sb.append("    stopWords: ").append(toIndentedString(stopWords)).append("\n");
    sb.append("    supplementToken: ").append(toIndentedString(supplementToken)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("text");
    openapiFields.add("max_new_tokens");
    openapiFields.add("max_tokens");
    openapiFields.add("creativity_index");
    openapiFields.add("token_repetition_penalty");
    openapiFields.add("top_k");
    openapiFields.add("top_p");
    openapiFields.add("temperature");
    openapiFields.add("avoid_words");
    openapiFields.add("avoid_starting_words");
    openapiFields.add("stop_words");
    openapiFields.add("supplement_token");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ContentGenerationGenerateLiveRequestInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentGenerationGenerateLiveRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentGenerationGenerateLiveRequestInfo is not found in the empty JSON string", ContentGenerationGenerateLiveRequestInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContentGenerationGenerateLiveRequestInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContentGenerationGenerateLiveRequestInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("avoid_words") != null && !jsonObj.get("avoid_words").isJsonNull() && !jsonObj.get("avoid_words").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avoid_words` to be an array in the JSON string but got `%s`", jsonObj.get("avoid_words").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("avoid_starting_words") != null && !jsonObj.get("avoid_starting_words").isJsonNull() && !jsonObj.get("avoid_starting_words").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avoid_starting_words` to be an array in the JSON string but got `%s`", jsonObj.get("avoid_starting_words").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stop_words") != null && !jsonObj.get("stop_words").isJsonNull() && !jsonObj.get("stop_words").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stop_words` to be an array in the JSON string but got `%s`", jsonObj.get("stop_words").toString()));
      }
      if ((jsonObj.get("supplement_token") != null && !jsonObj.get("supplement_token").isJsonNull()) && !jsonObj.get("supplement_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplement_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplement_token").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentGenerationGenerateLiveRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentGenerationGenerateLiveRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentGenerationGenerateLiveRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentGenerationGenerateLiveRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentGenerationGenerateLiveRequestInfo>() {
           @Override
           public void write(JsonWriter out, ContentGenerationGenerateLiveRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentGenerationGenerateLiveRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ContentGenerationGenerateLiveRequestInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ContentGenerationGenerateLiveRequestInfo
  * @throws IOException if the JSON string is invalid with respect to ContentGenerationGenerateLiveRequestInfo
  */
  public static ContentGenerationGenerateLiveRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentGenerationGenerateLiveRequestInfo.class);
  }

 /**
  * Convert an instance of ContentGenerationGenerateLiveRequestInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

