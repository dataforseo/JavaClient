/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.dataforseo.client.model.ContentAnalysisRatingInfo;
import org.dataforseo.client.model.SocialMetricsInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AnalysisContentInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-06T20:38:17.939082300+03:00[Europe/Kiev]")
public class AnalysisContentInfo {
  public static final String SERIALIZED_NAME_CONTENT_TYPE = "content_type";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_MAIN_TITLE = "main_title";
  @SerializedName(SERIALIZED_NAME_MAIN_TITLE)
  private String mainTitle;

  public static final String SERIALIZED_NAME_PREVIOUS_TITLE = "previous_title";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_TITLE)
  private String previousTitle;

  public static final String SERIALIZED_NAME_LEVEL = "level";
  @SerializedName(SERIALIZED_NAME_LEVEL)
  private Integer level;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private String author;

  public static final String SERIALIZED_NAME_SNIPPET = "snippet";
  @SerializedName(SERIALIZED_NAME_SNIPPET)
  private String snippet;

  public static final String SERIALIZED_NAME_SNIPPET_LENGTH = "snippet_length";
  @SerializedName(SERIALIZED_NAME_SNIPPET_LENGTH)
  private Integer snippetLength;

  public static final String SERIALIZED_NAME_SOCIAL_METRICS = "social_metrics";
  @SerializedName(SERIALIZED_NAME_SOCIAL_METRICS)
  private List<SocialMetricsInfo> socialMetrics;

  public static final String SERIALIZED_NAME_HIGHLIGHTED_TEXT = "highlighted_text";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTED_TEXT)
  private String highlightedText;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_SENTIMENT_CONNOTATIONS = "sentiment_connotations";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_CONNOTATIONS)
  private Map<String, Long> sentimentConnotations;

  public static final String SERIALIZED_NAME_CONNOTATION_TYPES = "connotation_types";
  @SerializedName(SERIALIZED_NAME_CONNOTATION_TYPES)
  private Map<String, Long> connotationTypes;

  public static final String SERIALIZED_NAME_TEXT_CATEGORY = "text_category";
  @SerializedName(SERIALIZED_NAME_TEXT_CATEGORY)
  private List<Integer> textCategory;

  public static final String SERIALIZED_NAME_DATE_PUBLISHED = "date_published";
  @SerializedName(SERIALIZED_NAME_DATE_PUBLISHED)
  private String datePublished;

  public static final String SERIALIZED_NAME_CONTENT_QUALITY_SCORE = "content_quality_score";
  @SerializedName(SERIALIZED_NAME_CONTENT_QUALITY_SCORE)
  private Integer contentQualityScore;

  public static final String SERIALIZED_NAME_SEMANTIC_LOCATION = "semantic_location";
  @SerializedName(SERIALIZED_NAME_SEMANTIC_LOCATION)
  private String semanticLocation;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private ContentAnalysisRatingInfo rating;

  public static final String SERIALIZED_NAME_GROUP_DATE = "group_date";
  @SerializedName(SERIALIZED_NAME_GROUP_DATE)
  private String groupDate;

  public AnalysisContentInfo() {
  }

  public AnalysisContentInfo contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

   /**
   * type of content example: page_content, comment
   * @return contentType
  **/
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public AnalysisContentInfo title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title of the result
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public AnalysisContentInfo mainTitle(String mainTitle) {
    this.mainTitle = mainTitle;
    return this;
  }

   /**
   * page title
   * @return mainTitle
  **/
  @javax.annotation.Nullable
  public String getMainTitle() {
    return mainTitle;
  }

  public void setMainTitle(String mainTitle) {
    this.mainTitle = mainTitle;
  }


  public AnalysisContentInfo previousTitle(String previousTitle) {
    this.previousTitle = previousTitle;
    return this;
  }

   /**
   * title of the previous content block
   * @return previousTitle
  **/
  @javax.annotation.Nullable
  public String getPreviousTitle() {
    return previousTitle;
  }

  public void setPreviousTitle(String previousTitle) {
    this.previousTitle = previousTitle;
  }


  public AnalysisContentInfo level(Integer level) {
    this.level = level;
    return this;
  }

   /**
   * title heading level indicates h-tag level from 1 (top) to 6 (bottom)
   * @return level
  **/
  @javax.annotation.Nullable
  public Integer getLevel() {
    return level;
  }

  public void setLevel(Integer level) {
    this.level = level;
  }


  public AnalysisContentInfo author(String author) {
    this.author = author;
    return this;
  }

   /**
   * author of the content
   * @return author
  **/
  @javax.annotation.Nullable
  public String getAuthor() {
    return author;
  }

  public void setAuthor(String author) {
    this.author = author;
  }


  public AnalysisContentInfo snippet(String snippet) {
    this.snippet = snippet;
    return this;
  }

   /**
   * content snippet
   * @return snippet
  **/
  @javax.annotation.Nullable
  public String getSnippet() {
    return snippet;
  }

  public void setSnippet(String snippet) {
    this.snippet = snippet;
  }


  public AnalysisContentInfo snippetLength(Integer snippetLength) {
    this.snippetLength = snippetLength;
    return this;
  }

   /**
   * character length of the snippet
   * @return snippetLength
  **/
  @javax.annotation.Nullable
  public Integer getSnippetLength() {
    return snippetLength;
  }

  public void setSnippetLength(Integer snippetLength) {
    this.snippetLength = snippetLength;
  }


  public AnalysisContentInfo socialMetrics(List<SocialMetricsInfo> socialMetrics) {
    this.socialMetrics = socialMetrics;
    return this;
  }

  public AnalysisContentInfo addSocialMetricsItem(SocialMetricsInfo socialMetricsItem) {
    if (this.socialMetrics == null) {
      this.socialMetrics = new ArrayList<>();
    }
    this.socialMetrics.add(socialMetricsItem);
    return this;
  }

   /**
   * social media engagement metrics data on social media interactions associated with the content based on website embeds developed and supported by social media platforms
   * @return socialMetrics
  **/
  @javax.annotation.Nullable
  public List<SocialMetricsInfo> getSocialMetrics() {
    return socialMetrics;
  }

  public void setSocialMetrics(List<SocialMetricsInfo> socialMetrics) {
    this.socialMetrics = socialMetrics;
  }


  public AnalysisContentInfo highlightedText(String highlightedText) {
    this.highlightedText = highlightedText;
    return this;
  }

   /**
   * highlighted text from the snippet
   * @return highlightedText
  **/
  @javax.annotation.Nullable
  public String getHighlightedText() {
    return highlightedText;
  }

  public void setHighlightedText(String highlightedText) {
    this.highlightedText = highlightedText;
  }


  public AnalysisContentInfo language(String language) {
    this.language = language;
    return this;
  }

   /**
   * content language to obtain a full list of available languages, refer to the Languages endpoint
   * @return language
  **/
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public AnalysisContentInfo sentimentConnotations(Map<String, Long> sentimentConnotations) {
    this.sentimentConnotations = sentimentConnotations;
    return this;
  }

  public AnalysisContentInfo putSentimentConnotationsItem(String key, Long sentimentConnotationsItem) {
    if (this.sentimentConnotations == null) {
      this.sentimentConnotations = new HashMap<>();
    }
    this.sentimentConnotations.put(key, sentimentConnotationsItem);
    return this;
  }

   /**
   * sentiment connotations contains sentiments (emotional reactions) related to the given citation and probability index per each sentiment possible sentiment connotations: anger, happiness, love, sadness, share, fun
   * @return sentimentConnotations
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getSentimentConnotations() {
    return sentimentConnotations;
  }

  public void setSentimentConnotations(Map<String, Long> sentimentConnotations) {
    this.sentimentConnotations = sentimentConnotations;
  }


  public AnalysisContentInfo connotationTypes(Map<String, Long> connotationTypes) {
    this.connotationTypes = connotationTypes;
    return this;
  }

  public AnalysisContentInfo putConnotationTypesItem(String key, Long connotationTypesItem) {
    if (this.connotationTypes == null) {
      this.connotationTypes = new HashMap<>();
    }
    this.connotationTypes.put(key, connotationTypesItem);
    return this;
  }

   /**
   * connotation types contains types of sentiments (sentiment polarity) related to the given citation and probability index per each sentiment type possible sentiment connotation types: positive, negative, neutral
   * @return connotationTypes
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getConnotationTypes() {
    return connotationTypes;
  }

  public void setConnotationTypes(Map<String, Long> connotationTypes) {
    this.connotationTypes = connotationTypes;
  }


  public AnalysisContentInfo textCategory(List<Integer> textCategory) {
    this.textCategory = textCategory;
    return this;
  }

  public AnalysisContentInfo addTextCategoryItem(Integer textCategoryItem) {
    if (this.textCategory == null) {
      this.textCategory = new ArrayList<>();
    }
    this.textCategory.add(textCategoryItem);
    return this;
  }

   /**
   * text category to obtain a full list of available categories, refer to the Categories endpoint
   * @return textCategory
  **/
  @javax.annotation.Nullable
  public List<Integer> getTextCategory() {
    return textCategory;
  }

  public void setTextCategory(List<Integer> textCategory) {
    this.textCategory = textCategory;
  }


  public AnalysisContentInfo datePublished(String datePublished) {
    this.datePublished = datePublished;
    return this;
  }

   /**
   * date and time when the content was published in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2017-01-24 13:20:59 +00:00
   * @return datePublished
  **/
  @javax.annotation.Nullable
  public String getDatePublished() {
    return datePublished;
  }

  public void setDatePublished(String datePublished) {
    this.datePublished = datePublished;
  }


  public AnalysisContentInfo contentQualityScore(Integer contentQualityScore) {
    this.contentQualityScore = contentQualityScore;
    return this;
  }

   /**
   * content quality score this value is calculated based on the number of words, sentences and characters the content contains
   * @return contentQualityScore
  **/
  @javax.annotation.Nullable
  public Integer getContentQualityScore() {
    return contentQualityScore;
  }

  public void setContentQualityScore(Integer contentQualityScore) {
    this.contentQualityScore = contentQualityScore;
  }


  public AnalysisContentInfo semanticLocation(String semanticLocation) {
    this.semanticLocation = semanticLocation;
    return this;
  }

   /**
   * semantic location indicates semantic element in HTML where the target keyword citation is located example: article, header
   * @return semanticLocation
  **/
  @javax.annotation.Nullable
  public String getSemanticLocation() {
    return semanticLocation;
  }

  public void setSemanticLocation(String semanticLocation) {
    this.semanticLocation = semanticLocation;
  }


  public AnalysisContentInfo rating(ContentAnalysisRatingInfo rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  public ContentAnalysisRatingInfo getRating() {
    return rating;
  }

  public void setRating(ContentAnalysisRatingInfo rating) {
    this.rating = rating;
  }


  public AnalysisContentInfo groupDate(String groupDate) {
    this.groupDate = groupDate;
    return this;
  }

   /**
   * citation group date and time indicates content publication date or date and time when our crawler visited the page for the first time; this field can be used to group citations by date and display citation trends; date and time are provided in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2017-01-24 13:20:59 +00:00
   * @return groupDate
  **/
  @javax.annotation.Nullable
  public String getGroupDate() {
    return groupDate;
  }

  public void setGroupDate(String groupDate) {
    this.groupDate = groupDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnalysisContentInfo analysisContentInfo = (AnalysisContentInfo) o;
    return Objects.equals(this.contentType, analysisContentInfo.contentType) &&
        Objects.equals(this.title, analysisContentInfo.title) &&
        Objects.equals(this.mainTitle, analysisContentInfo.mainTitle) &&
        Objects.equals(this.previousTitle, analysisContentInfo.previousTitle) &&
        Objects.equals(this.level, analysisContentInfo.level) &&
        Objects.equals(this.author, analysisContentInfo.author) &&
        Objects.equals(this.snippet, analysisContentInfo.snippet) &&
        Objects.equals(this.snippetLength, analysisContentInfo.snippetLength) &&
        Objects.equals(this.socialMetrics, analysisContentInfo.socialMetrics) &&
        Objects.equals(this.highlightedText, analysisContentInfo.highlightedText) &&
        Objects.equals(this.language, analysisContentInfo.language) &&
        Objects.equals(this.sentimentConnotations, analysisContentInfo.sentimentConnotations) &&
        Objects.equals(this.connotationTypes, analysisContentInfo.connotationTypes) &&
        Objects.equals(this.textCategory, analysisContentInfo.textCategory) &&
        Objects.equals(this.datePublished, analysisContentInfo.datePublished) &&
        Objects.equals(this.contentQualityScore, analysisContentInfo.contentQualityScore) &&
        Objects.equals(this.semanticLocation, analysisContentInfo.semanticLocation) &&
        Objects.equals(this.rating, analysisContentInfo.rating) &&
        Objects.equals(this.groupDate, analysisContentInfo.groupDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentType, title, mainTitle, previousTitle, level, author, snippet, snippetLength, socialMetrics, highlightedText, language, sentimentConnotations, connotationTypes, textCategory, datePublished, contentQualityScore, semanticLocation, rating, groupDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnalysisContentInfo {\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    mainTitle: ").append(toIndentedString(mainTitle)).append("\n");
    sb.append("    previousTitle: ").append(toIndentedString(previousTitle)).append("\n");
    sb.append("    level: ").append(toIndentedString(level)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    snippet: ").append(toIndentedString(snippet)).append("\n");
    sb.append("    snippetLength: ").append(toIndentedString(snippetLength)).append("\n");
    sb.append("    socialMetrics: ").append(toIndentedString(socialMetrics)).append("\n");
    sb.append("    highlightedText: ").append(toIndentedString(highlightedText)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    sentimentConnotations: ").append(toIndentedString(sentimentConnotations)).append("\n");
    sb.append("    connotationTypes: ").append(toIndentedString(connotationTypes)).append("\n");
    sb.append("    textCategory: ").append(toIndentedString(textCategory)).append("\n");
    sb.append("    datePublished: ").append(toIndentedString(datePublished)).append("\n");
    sb.append("    contentQualityScore: ").append(toIndentedString(contentQualityScore)).append("\n");
    sb.append("    semanticLocation: ").append(toIndentedString(semanticLocation)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    groupDate: ").append(toIndentedString(groupDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content_type");
    openapiFields.add("title");
    openapiFields.add("main_title");
    openapiFields.add("previous_title");
    openapiFields.add("level");
    openapiFields.add("author");
    openapiFields.add("snippet");
    openapiFields.add("snippet_length");
    openapiFields.add("social_metrics");
    openapiFields.add("highlighted_text");
    openapiFields.add("language");
    openapiFields.add("sentiment_connotations");
    openapiFields.add("connotation_types");
    openapiFields.add("text_category");
    openapiFields.add("date_published");
    openapiFields.add("content_quality_score");
    openapiFields.add("semantic_location");
    openapiFields.add("rating");
    openapiFields.add("group_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AnalysisContentInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnalysisContentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnalysisContentInfo is not found in the empty JSON string", AnalysisContentInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AnalysisContentInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AnalysisContentInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content_type") != null && !jsonObj.get("content_type").isJsonNull()) && !jsonObj.get("content_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_type").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("main_title") != null && !jsonObj.get("main_title").isJsonNull()) && !jsonObj.get("main_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_title").toString()));
      }
      if ((jsonObj.get("previous_title") != null && !jsonObj.get("previous_title").isJsonNull()) && !jsonObj.get("previous_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previous_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previous_title").toString()));
      }
      if ((jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) && !jsonObj.get("author").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `author` to be a primitive type in the JSON string but got `%s`", jsonObj.get("author").toString()));
      }
      if ((jsonObj.get("snippet") != null && !jsonObj.get("snippet").isJsonNull()) && !jsonObj.get("snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("snippet").toString()));
      }
      if (jsonObj.get("social_metrics") != null && !jsonObj.get("social_metrics").isJsonNull()) {
        JsonArray jsonArraysocialMetrics = jsonObj.getAsJsonArray("social_metrics");
        if (jsonArraysocialMetrics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("social_metrics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `social_metrics` to be an array in the JSON string but got `%s`", jsonObj.get("social_metrics").toString()));
          }

          // validate the optional field `social_metrics` (array)
          for (int i = 0; i < jsonArraysocialMetrics.size(); i++) {
            SocialMetricsInfo.validateJsonElement(jsonArraysocialMetrics.get(i));
          };
        }
      }
      if ((jsonObj.get("highlighted_text") != null && !jsonObj.get("highlighted_text").isJsonNull()) && !jsonObj.get("highlighted_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlighted_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("highlighted_text").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("text_category") != null && !jsonObj.get("text_category").isJsonNull() && !jsonObj.get("text_category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `text_category` to be an array in the JSON string but got `%s`", jsonObj.get("text_category").toString()));
      }
      if ((jsonObj.get("date_published") != null && !jsonObj.get("date_published").isJsonNull()) && !jsonObj.get("date_published").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_published` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_published").toString()));
      }
      if ((jsonObj.get("semantic_location") != null && !jsonObj.get("semantic_location").isJsonNull()) && !jsonObj.get("semantic_location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `semantic_location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("semantic_location").toString()));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        ContentAnalysisRatingInfo.validateJsonElement(jsonObj.get("rating"));
      }
      if ((jsonObj.get("group_date") != null && !jsonObj.get("group_date").isJsonNull()) && !jsonObj.get("group_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `group_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("group_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnalysisContentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnalysisContentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnalysisContentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnalysisContentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AnalysisContentInfo>() {
           @Override
           public void write(JsonWriter out, AnalysisContentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AnalysisContentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AnalysisContentInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AnalysisContentInfo
  * @throws IOException if the JSON string is invalid with respect to AnalysisContentInfo
  */
  public static AnalysisContentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnalysisContentInfo.class);
  }

 /**
  * Convert an instance of AnalysisContentInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

