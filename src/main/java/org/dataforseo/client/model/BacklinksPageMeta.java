/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * BacklinksPageMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T10:30:03.431691300+03:00[Europe/Kiev]")
public class BacklinksPageMeta {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_CANONICAL = "canonical";
  @SerializedName(SERIALIZED_NAME_CANONICAL)
  private String canonical;

  public static final String SERIALIZED_NAME_INTERNAL_LINKS_COUNT = "internal_links_count";
  @SerializedName(SERIALIZED_NAME_INTERNAL_LINKS_COUNT)
  private Long internalLinksCount;

  public static final String SERIALIZED_NAME_EXTERNAL_LINKS_COUNT = "external_links_count";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_LINKS_COUNT)
  private Long externalLinksCount;

  public static final String SERIALIZED_NAME_IMAGES_COUNT = "images_count";
  @SerializedName(SERIALIZED_NAME_IMAGES_COUNT)
  private Long imagesCount;

  public static final String SERIALIZED_NAME_WORDS_COUNT = "words_count";
  @SerializedName(SERIALIZED_NAME_WORDS_COUNT)
  private Long wordsCount;

  public static final String SERIALIZED_NAME_PAGE_SPAM_SCORE = "page_spam_score";
  @SerializedName(SERIALIZED_NAME_PAGE_SPAM_SCORE)
  private Integer pageSpamScore;

  public static final String SERIALIZED_NAME_SOCIAL_MEDIA_TAGS = "social_media_tags";
  @SerializedName(SERIALIZED_NAME_SOCIAL_MEDIA_TAGS)
  private Map<String, String> socialMediaTags;

  public static final String SERIALIZED_NAME_H1 = "h1";
  @SerializedName(SERIALIZED_NAME_H1)
  private List<String> h1;

  public static final String SERIALIZED_NAME_H2 = "h2";
  @SerializedName(SERIALIZED_NAME_H2)
  private List<String> h2;

  public static final String SERIALIZED_NAME_H3 = "h3";
  @SerializedName(SERIALIZED_NAME_H3)
  private List<String> h3;

  public static final String SERIALIZED_NAME_IMAGES_ALT = "images_alt";
  @SerializedName(SERIALIZED_NAME_IMAGES_ALT)
  private List<String> imagesAlt;

  public static final String SERIALIZED_NAME_POWERED_BY = "powered_by";
  @SerializedName(SERIALIZED_NAME_POWERED_BY)
  private List<String> poweredBy;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_CHARSET = "charset";
  @SerializedName(SERIALIZED_NAME_CHARSET)
  private String charset;

  public static final String SERIALIZED_NAME_PLATFORM_TYPE = "platform_type";
  @SerializedName(SERIALIZED_NAME_PLATFORM_TYPE)
  private List<String> platformType;

  public static final String SERIALIZED_NAME_TECHNOLOGIES = "technologies";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGIES)
  private Map<String, String> technologies;

  public BacklinksPageMeta() {
  }

  public BacklinksPageMeta title(String title) {
    this.title = title;
    return this;
  }

   /**
   * page title
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public BacklinksPageMeta canonical(String canonical) {
    this.canonical = canonical;
    return this;
  }

   /**
   * canonical page
   * @return canonical
  **/
  @javax.annotation.Nullable
  public String getCanonical() {
    return canonical;
  }

  public void setCanonical(String canonical) {
    this.canonical = canonical;
  }


  public BacklinksPageMeta internalLinksCount(Long internalLinksCount) {
    this.internalLinksCount = internalLinksCount;
    return this;
  }

   /**
   * number of internal links on the page
   * @return internalLinksCount
  **/
  @javax.annotation.Nullable
  public Long getInternalLinksCount() {
    return internalLinksCount;
  }

  public void setInternalLinksCount(Long internalLinksCount) {
    this.internalLinksCount = internalLinksCount;
  }


  public BacklinksPageMeta externalLinksCount(Long externalLinksCount) {
    this.externalLinksCount = externalLinksCount;
    return this;
  }

   /**
   * number of external links on the page
   * @return externalLinksCount
  **/
  @javax.annotation.Nullable
  public Long getExternalLinksCount() {
    return externalLinksCount;
  }

  public void setExternalLinksCount(Long externalLinksCount) {
    this.externalLinksCount = externalLinksCount;
  }


  public BacklinksPageMeta imagesCount(Long imagesCount) {
    this.imagesCount = imagesCount;
    return this;
  }

   /**
   * number of images on the page
   * @return imagesCount
  **/
  @javax.annotation.Nullable
  public Long getImagesCount() {
    return imagesCount;
  }

  public void setImagesCount(Long imagesCount) {
    this.imagesCount = imagesCount;
  }


  public BacklinksPageMeta wordsCount(Long wordsCount) {
    this.wordsCount = wordsCount;
    return this;
  }

   /**
   * number of words on the page
   * @return wordsCount
  **/
  @javax.annotation.Nullable
  public Long getWordsCount() {
    return wordsCount;
  }

  public void setWordsCount(Long wordsCount) {
    this.wordsCount = wordsCount;
  }


  public BacklinksPageMeta pageSpamScore(Integer pageSpamScore) {
    this.pageSpamScore = pageSpamScore;
    return this;
  }

   /**
   * spam score of the page learn more about how the metric is calculated on this help center page
   * @return pageSpamScore
  **/
  @javax.annotation.Nullable
  public Integer getPageSpamScore() {
    return pageSpamScore;
  }

  public void setPageSpamScore(Integer pageSpamScore) {
    this.pageSpamScore = pageSpamScore;
  }


  public BacklinksPageMeta socialMediaTags(Map<String, String> socialMediaTags) {
    this.socialMediaTags = socialMediaTags;
    return this;
  }

  public BacklinksPageMeta putSocialMediaTagsItem(String key, String socialMediaTagsItem) {
    if (this.socialMediaTags == null) {
      this.socialMediaTags = new HashMap<>();
    }
    this.socialMediaTags.put(key, socialMediaTagsItem);
    return this;
  }

   /**
   * array of social media tags found on the page contains social media tags and their content supported tags include but are not limited to Open Graph and Twitter card
   * @return socialMediaTags
  **/
  @javax.annotation.Nullable
  public Map<String, String> getSocialMediaTags() {
    return socialMediaTags;
  }

  public void setSocialMediaTags(Map<String, String> socialMediaTags) {
    this.socialMediaTags = socialMediaTags;
  }


  public BacklinksPageMeta h1(List<String> h1) {
    this.h1 = h1;
    return this;
  }

  public BacklinksPageMeta addH1Item(String h1Item) {
    if (this.h1 == null) {
      this.h1 = new ArrayList<>();
    }
    this.h1.add(h1Item);
    return this;
  }

   /**
   * h1 tag content of h1 tags
   * @return h1
  **/
  @javax.annotation.Nullable
  public List<String> getH1() {
    return h1;
  }

  public void setH1(List<String> h1) {
    this.h1 = h1;
  }


  public BacklinksPageMeta h2(List<String> h2) {
    this.h2 = h2;
    return this;
  }

  public BacklinksPageMeta addH2Item(String h2Item) {
    if (this.h2 == null) {
      this.h2 = new ArrayList<>();
    }
    this.h2.add(h2Item);
    return this;
  }

   /**
   * h2 tag content of h2 tags
   * @return h2
  **/
  @javax.annotation.Nullable
  public List<String> getH2() {
    return h2;
  }

  public void setH2(List<String> h2) {
    this.h2 = h2;
  }


  public BacklinksPageMeta h3(List<String> h3) {
    this.h3 = h3;
    return this;
  }

  public BacklinksPageMeta addH3Item(String h3Item) {
    if (this.h3 == null) {
      this.h3 = new ArrayList<>();
    }
    this.h3.add(h3Item);
    return this;
  }

   /**
   * h3 tag content of h3 tags
   * @return h3
  **/
  @javax.annotation.Nullable
  public List<String> getH3() {
    return h3;
  }

  public void setH3(List<String> h3) {
    this.h3 = h3;
  }


  public BacklinksPageMeta imagesAlt(List<String> imagesAlt) {
    this.imagesAlt = imagesAlt;
    return this;
  }

  public BacklinksPageMeta addImagesAltItem(String imagesAltItem) {
    if (this.imagesAlt == null) {
      this.imagesAlt = new ArrayList<>();
    }
    this.imagesAlt.add(imagesAltItem);
    return this;
  }

   /**
   * content of alt tags
   * @return imagesAlt
  **/
  @javax.annotation.Nullable
  public List<String> getImagesAlt() {
    return imagesAlt;
  }

  public void setImagesAlt(List<String> imagesAlt) {
    this.imagesAlt = imagesAlt;
  }


  public BacklinksPageMeta poweredBy(List<String> poweredBy) {
    this.poweredBy = poweredBy;
    return this;
  }

  public BacklinksPageMeta addPoweredByItem(String poweredByItem) {
    if (this.poweredBy == null) {
      this.poweredBy = new ArrayList<>();
    }
    this.poweredBy.add(poweredByItem);
    return this;
  }

   /**
   * CMS details
   * @return poweredBy
  **/
  @javax.annotation.Nullable
  public List<String> getPoweredBy() {
    return poweredBy;
  }

  public void setPoweredBy(List<String> poweredBy) {
    this.poweredBy = poweredBy;
  }


  public BacklinksPageMeta language(String language) {
    this.language = language;
    return this;
  }

   /**
   * page content language example: en
   * @return language
  **/
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public BacklinksPageMeta charset(String charset) {
    this.charset = charset;
    return this;
  }

   /**
   * character encoding examples: utf-8
   * @return charset
  **/
  @javax.annotation.Nullable
  public String getCharset() {
    return charset;
  }

  public void setCharset(String charset) {
    this.charset = charset;
  }


  public BacklinksPageMeta platformType(List<String> platformType) {
    this.platformType = platformType;
    return this;
  }

  public BacklinksPageMeta addPlatformTypeItem(String platformTypeItem) {
    if (this.platformType == null) {
      this.platformType = new ArrayList<>();
    }
    this.platformType.add(platformTypeItem);
    return this;
  }

   /**
   * type of a platform
   * @return platformType
  **/
  @javax.annotation.Nullable
  public List<String> getPlatformType() {
    return platformType;
  }

  public void setPlatformType(List<String> platformType) {
    this.platformType = platformType;
  }


  public BacklinksPageMeta technologies(Map<String, String> technologies) {
    this.technologies = technologies;
    return this;
  }

  public BacklinksPageMeta putTechnologiesItem(String key, String technologiesItem) {
    if (this.technologies == null) {
      this.technologies = new HashMap<>();
    }
    this.technologies.put(key, technologiesItem);
    return this;
  }

   /**
   * website technologies
   * @return technologies
  **/
  @javax.annotation.Nullable
  public Map<String, String> getTechnologies() {
    return technologies;
  }

  public void setTechnologies(Map<String, String> technologies) {
    this.technologies = technologies;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BacklinksPageMeta backlinksPageMeta = (BacklinksPageMeta) o;
    return Objects.equals(this.title, backlinksPageMeta.title) &&
        Objects.equals(this.canonical, backlinksPageMeta.canonical) &&
        Objects.equals(this.internalLinksCount, backlinksPageMeta.internalLinksCount) &&
        Objects.equals(this.externalLinksCount, backlinksPageMeta.externalLinksCount) &&
        Objects.equals(this.imagesCount, backlinksPageMeta.imagesCount) &&
        Objects.equals(this.wordsCount, backlinksPageMeta.wordsCount) &&
        Objects.equals(this.pageSpamScore, backlinksPageMeta.pageSpamScore) &&
        Objects.equals(this.socialMediaTags, backlinksPageMeta.socialMediaTags) &&
        Objects.equals(this.h1, backlinksPageMeta.h1) &&
        Objects.equals(this.h2, backlinksPageMeta.h2) &&
        Objects.equals(this.h3, backlinksPageMeta.h3) &&
        Objects.equals(this.imagesAlt, backlinksPageMeta.imagesAlt) &&
        Objects.equals(this.poweredBy, backlinksPageMeta.poweredBy) &&
        Objects.equals(this.language, backlinksPageMeta.language) &&
        Objects.equals(this.charset, backlinksPageMeta.charset) &&
        Objects.equals(this.platformType, backlinksPageMeta.platformType) &&
        Objects.equals(this.technologies, backlinksPageMeta.technologies);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, canonical, internalLinksCount, externalLinksCount, imagesCount, wordsCount, pageSpamScore, socialMediaTags, h1, h2, h3, imagesAlt, poweredBy, language, charset, platformType, technologies);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BacklinksPageMeta {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    canonical: ").append(toIndentedString(canonical)).append("\n");
    sb.append("    internalLinksCount: ").append(toIndentedString(internalLinksCount)).append("\n");
    sb.append("    externalLinksCount: ").append(toIndentedString(externalLinksCount)).append("\n");
    sb.append("    imagesCount: ").append(toIndentedString(imagesCount)).append("\n");
    sb.append("    wordsCount: ").append(toIndentedString(wordsCount)).append("\n");
    sb.append("    pageSpamScore: ").append(toIndentedString(pageSpamScore)).append("\n");
    sb.append("    socialMediaTags: ").append(toIndentedString(socialMediaTags)).append("\n");
    sb.append("    h1: ").append(toIndentedString(h1)).append("\n");
    sb.append("    h2: ").append(toIndentedString(h2)).append("\n");
    sb.append("    h3: ").append(toIndentedString(h3)).append("\n");
    sb.append("    imagesAlt: ").append(toIndentedString(imagesAlt)).append("\n");
    sb.append("    poweredBy: ").append(toIndentedString(poweredBy)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    platformType: ").append(toIndentedString(platformType)).append("\n");
    sb.append("    technologies: ").append(toIndentedString(technologies)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("title");
    openapiFields.add("canonical");
    openapiFields.add("internal_links_count");
    openapiFields.add("external_links_count");
    openapiFields.add("images_count");
    openapiFields.add("words_count");
    openapiFields.add("page_spam_score");
    openapiFields.add("social_media_tags");
    openapiFields.add("h1");
    openapiFields.add("h2");
    openapiFields.add("h3");
    openapiFields.add("images_alt");
    openapiFields.add("powered_by");
    openapiFields.add("language");
    openapiFields.add("charset");
    openapiFields.add("platform_type");
    openapiFields.add("technologies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BacklinksPageMeta
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BacklinksPageMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BacklinksPageMeta is not found in the empty JSON string", BacklinksPageMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BacklinksPageMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BacklinksPageMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("canonical") != null && !jsonObj.get("canonical").isJsonNull()) && !jsonObj.get("canonical").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `canonical` to be a primitive type in the JSON string but got `%s`", jsonObj.get("canonical").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("h1") != null && !jsonObj.get("h1").isJsonNull() && !jsonObj.get("h1").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `h1` to be an array in the JSON string but got `%s`", jsonObj.get("h1").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("h2") != null && !jsonObj.get("h2").isJsonNull() && !jsonObj.get("h2").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `h2` to be an array in the JSON string but got `%s`", jsonObj.get("h2").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("h3") != null && !jsonObj.get("h3").isJsonNull() && !jsonObj.get("h3").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `h3` to be an array in the JSON string but got `%s`", jsonObj.get("h3").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("images_alt") != null && !jsonObj.get("images_alt").isJsonNull() && !jsonObj.get("images_alt").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `images_alt` to be an array in the JSON string but got `%s`", jsonObj.get("images_alt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("powered_by") != null && !jsonObj.get("powered_by").isJsonNull() && !jsonObj.get("powered_by").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `powered_by` to be an array in the JSON string but got `%s`", jsonObj.get("powered_by").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("charset") != null && !jsonObj.get("charset").isJsonNull()) && !jsonObj.get("charset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charset").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("platform_type") != null && !jsonObj.get("platform_type").isJsonNull() && !jsonObj.get("platform_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `platform_type` to be an array in the JSON string but got `%s`", jsonObj.get("platform_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BacklinksPageMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BacklinksPageMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BacklinksPageMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BacklinksPageMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<BacklinksPageMeta>() {
           @Override
           public void write(JsonWriter out, BacklinksPageMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BacklinksPageMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BacklinksPageMeta given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BacklinksPageMeta
  * @throws IOException if the JSON string is invalid with respect to BacklinksPageMeta
  */
  public static BacklinksPageMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BacklinksPageMeta.class);
  }

 /**
  * Convert an instance of BacklinksPageMeta to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

