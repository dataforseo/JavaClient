/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.GoogleBusinessAnswerElement;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * ItemsWithoutAnswers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T18:32:56.856102800+03:00[Europe/Kiev]")
public class ItemsWithoutAnswers {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_RANK_GROUP = "rank_group";
  @SerializedName(SERIALIZED_NAME_RANK_GROUP)
  private Integer rankGroup;

  public static final String SERIALIZED_NAME_RANK_ABSOLUTE = "rank_absolute";
  @SerializedName(SERIALIZED_NAME_RANK_ABSOLUTE)
  private Integer rankAbsolute;

  public static final String SERIALIZED_NAME_QUESTION_ID = "question_id";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  private String questionId;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_PROFILE_IMAGE_URL = "profile_image_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_IMAGE_URL)
  private String profileImageUrl;

  public static final String SERIALIZED_NAME_PROFILE_URL = "profile_url";
  @SerializedName(SERIALIZED_NAME_PROFILE_URL)
  private String profileUrl;

  public static final String SERIALIZED_NAME_PROFILE_NAME = "profile_name";
  @SerializedName(SERIALIZED_NAME_PROFILE_NAME)
  private String profileName;

  public static final String SERIALIZED_NAME_QUESTION_TEXT = "question_text";
  @SerializedName(SERIALIZED_NAME_QUESTION_TEXT)
  private String questionText;

  public static final String SERIALIZED_NAME_ORIGINAL_QUESTION_TEXT = "original_question_text";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_QUESTION_TEXT)
  private String originalQuestionText;

  public static final String SERIALIZED_NAME_TIME_AGO = "time_ago";
  @SerializedName(SERIALIZED_NAME_TIME_AGO)
  private String timeAgo;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private GoogleBusinessAnswerElement items;

  public ItemsWithoutAnswers() {
  }

  public ItemsWithoutAnswers type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ItemsWithoutAnswers rankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
    return this;
  }

   /**
   * position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group
   * @return rankGroup
  **/
  @javax.annotation.Nullable
  public Integer getRankGroup() {
    return rankGroup;
  }

  public void setRankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
  }


  public ItemsWithoutAnswers rankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
    return this;
  }

   /**
   * absolute rank among all the elements
   * @return rankAbsolute
  **/
  @javax.annotation.Nullable
  public Integer getRankAbsolute() {
    return rankAbsolute;
  }

  public void setRankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
  }


  public ItemsWithoutAnswers questionId(String questionId) {
    this.questionId = questionId;
    return this;
  }

   /**
   * ID of the question
   * @return questionId
  **/
  @javax.annotation.Nullable
  public String getQuestionId() {
    return questionId;
  }

  public void setQuestionId(String questionId) {
    this.questionId = questionId;
  }


  public ItemsWithoutAnswers url(String url) {
    this.url = url;
    return this;
  }

   /**
   * URL of the question
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public ItemsWithoutAnswers profileImageUrl(String profileImageUrl) {
    this.profileImageUrl = profileImageUrl;
    return this;
  }

   /**
   * URL of the user’s profile image
   * @return profileImageUrl
  **/
  @javax.annotation.Nullable
  public String getProfileImageUrl() {
    return profileImageUrl;
  }

  public void setProfileImageUrl(String profileImageUrl) {
    this.profileImageUrl = profileImageUrl;
  }


  public ItemsWithoutAnswers profileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
    return this;
  }

   /**
   * URL of the user’s profile
   * @return profileUrl
  **/
  @javax.annotation.Nullable
  public String getProfileUrl() {
    return profileUrl;
  }

  public void setProfileUrl(String profileUrl) {
    this.profileUrl = profileUrl;
  }


  public ItemsWithoutAnswers profileName(String profileName) {
    this.profileName = profileName;
    return this;
  }

   /**
   * displayed name of the user
   * @return profileName
  **/
  @javax.annotation.Nullable
  public String getProfileName() {
    return profileName;
  }

  public void setProfileName(String profileName) {
    this.profileName = profileName;
  }


  public ItemsWithoutAnswers questionText(String questionText) {
    this.questionText = questionText;
    return this;
  }

   /**
   * current text of the question
   * @return questionText
  **/
  @javax.annotation.Nullable
  public String getQuestionText() {
    return questionText;
  }

  public void setQuestionText(String questionText) {
    this.questionText = questionText;
  }


  public ItemsWithoutAnswers originalQuestionText(String originalQuestionText) {
    this.originalQuestionText = originalQuestionText;
    return this;
  }

   /**
   * original text of the question
   * @return originalQuestionText
  **/
  @javax.annotation.Nullable
  public String getOriginalQuestionText() {
    return originalQuestionText;
  }

  public void setOriginalQuestionText(String originalQuestionText) {
    this.originalQuestionText = originalQuestionText;
  }


  public ItemsWithoutAnswers timeAgo(String timeAgo) {
    this.timeAgo = timeAgo;
    return this;
  }

   /**
   * estimated time when the question was posted
   * @return timeAgo
  **/
  @javax.annotation.Nullable
  public String getTimeAgo() {
    return timeAgo;
  }

  public void setTimeAgo(String timeAgo) {
    this.timeAgo = timeAgo;
  }


  public ItemsWithoutAnswers timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

   /**
   * exact time when the question was posted
   * @return timestamp
  **/
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public ItemsWithoutAnswers items(GoogleBusinessAnswerElement items) {
    this.items = items;
    return this;
  }

   /**
   * Get items
   * @return items
  **/
  @javax.annotation.Nullable
  public GoogleBusinessAnswerElement getItems() {
    return items;
  }

  public void setItems(GoogleBusinessAnswerElement items) {
    this.items = items;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ItemsWithoutAnswers itemsWithoutAnswers = (ItemsWithoutAnswers) o;
    return Objects.equals(this.type, itemsWithoutAnswers.type) &&
        Objects.equals(this.rankGroup, itemsWithoutAnswers.rankGroup) &&
        Objects.equals(this.rankAbsolute, itemsWithoutAnswers.rankAbsolute) &&
        Objects.equals(this.questionId, itemsWithoutAnswers.questionId) &&
        Objects.equals(this.url, itemsWithoutAnswers.url) &&
        Objects.equals(this.profileImageUrl, itemsWithoutAnswers.profileImageUrl) &&
        Objects.equals(this.profileUrl, itemsWithoutAnswers.profileUrl) &&
        Objects.equals(this.profileName, itemsWithoutAnswers.profileName) &&
        Objects.equals(this.questionText, itemsWithoutAnswers.questionText) &&
        Objects.equals(this.originalQuestionText, itemsWithoutAnswers.originalQuestionText) &&
        Objects.equals(this.timeAgo, itemsWithoutAnswers.timeAgo) &&
        Objects.equals(this.timestamp, itemsWithoutAnswers.timestamp) &&
        Objects.equals(this.items, itemsWithoutAnswers.items);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, rankGroup, rankAbsolute, questionId, url, profileImageUrl, profileUrl, profileName, questionText, originalQuestionText, timeAgo, timestamp, items);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ItemsWithoutAnswers {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    rankGroup: ").append(toIndentedString(rankGroup)).append("\n");
    sb.append("    rankAbsolute: ").append(toIndentedString(rankAbsolute)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    profileImageUrl: ").append(toIndentedString(profileImageUrl)).append("\n");
    sb.append("    profileUrl: ").append(toIndentedString(profileUrl)).append("\n");
    sb.append("    profileName: ").append(toIndentedString(profileName)).append("\n");
    sb.append("    questionText: ").append(toIndentedString(questionText)).append("\n");
    sb.append("    originalQuestionText: ").append(toIndentedString(originalQuestionText)).append("\n");
    sb.append("    timeAgo: ").append(toIndentedString(timeAgo)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("question_id");
    openapiFields.add("url");
    openapiFields.add("profile_image_url");
    openapiFields.add("profile_url");
    openapiFields.add("profile_name");
    openapiFields.add("question_text");
    openapiFields.add("original_question_text");
    openapiFields.add("time_ago");
    openapiFields.add("timestamp");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to ItemsWithoutAnswers
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ItemsWithoutAnswers.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ItemsWithoutAnswers is not found in the empty JSON string", ItemsWithoutAnswers.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ItemsWithoutAnswers.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ItemsWithoutAnswers` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("question_id") != null && !jsonObj.get("question_id").isJsonNull()) && !jsonObj.get("question_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question_id").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("profile_image_url") != null && !jsonObj.get("profile_image_url").isJsonNull()) && !jsonObj.get("profile_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_image_url").toString()));
      }
      if ((jsonObj.get("profile_url") != null && !jsonObj.get("profile_url").isJsonNull()) && !jsonObj.get("profile_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_url").toString()));
      }
      if ((jsonObj.get("profile_name") != null && !jsonObj.get("profile_name").isJsonNull()) && !jsonObj.get("profile_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `profile_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("profile_name").toString()));
      }
      if ((jsonObj.get("question_text") != null && !jsonObj.get("question_text").isJsonNull()) && !jsonObj.get("question_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question_text").toString()));
      }
      if ((jsonObj.get("original_question_text") != null && !jsonObj.get("original_question_text").isJsonNull()) && !jsonObj.get("original_question_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_question_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_question_text").toString()));
      }
      if ((jsonObj.get("time_ago") != null && !jsonObj.get("time_ago").isJsonNull()) && !jsonObj.get("time_ago").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_ago` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_ago").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        GoogleBusinessAnswerElement.validateJsonElement(jsonObj.get("items"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ItemsWithoutAnswers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ItemsWithoutAnswers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ItemsWithoutAnswers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ItemsWithoutAnswers.class));

       return (TypeAdapter<T>) new TypeAdapter<ItemsWithoutAnswers>() {
           @Override
           public void write(JsonWriter out, ItemsWithoutAnswers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ItemsWithoutAnswers read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ItemsWithoutAnswers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ItemsWithoutAnswers
  * @throws IOException if the JSON string is invalid with respect to ItemsWithoutAnswers
  */
  public static ItemsWithoutAnswers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ItemsWithoutAnswers.class);
  }

 /**
  * Convert an instance of ItemsWithoutAnswers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

