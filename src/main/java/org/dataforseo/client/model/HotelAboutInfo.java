/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.HotelAmenityInfo;
import org.dataforseo.client.model.HotelAmenityItemInfo;
import org.dataforseo.client.model.WorkTimeInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * HotelAboutInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T15:18:23.103906100+03:00[Europe/Kiev]")
public class HotelAboutInfo {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_SUB_DESCRIPTIONS = "sub_descriptions";
  @SerializedName(SERIALIZED_NAME_SUB_DESCRIPTIONS)
  private List<String> subDescriptions;

  public static final String SERIALIZED_NAME_CHECK_IN_TIME = "check_in_time";
  @SerializedName(SERIALIZED_NAME_CHECK_IN_TIME)
  private WorkTimeInfo checkInTime;

  public static final String SERIALIZED_NAME_CHECK_OUT_TIME = "check_out_time";
  @SerializedName(SERIALIZED_NAME_CHECK_OUT_TIME)
  private WorkTimeInfo checkOutTime;

  public static final String SERIALIZED_NAME_FULL_ADDRESS = "full_address";
  @SerializedName(SERIALIZED_NAME_FULL_ADDRESS)
  private String fullAddress;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_AMENITIES = "amenities";
  @SerializedName(SERIALIZED_NAME_AMENITIES)
  private List<HotelAmenityInfo> amenities;

  public static final String SERIALIZED_NAME_POPULAR_AMENITIES = "popular_amenities";
  @SerializedName(SERIALIZED_NAME_POPULAR_AMENITIES)
  private List<HotelAmenityItemInfo> popularAmenities;

  public HotelAboutInfo() {
  }

  public HotelAboutInfo description(String description) {
    this.description = description;
    return this;
  }

   /**
   * description of the hotel the description of the hotel entity for which the results are collected
   * @return description
  **/
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public HotelAboutInfo subDescriptions(List<String> subDescriptions) {
    this.subDescriptions = subDescriptions;
    return this;
  }

  public HotelAboutInfo addSubDescriptionsItem(String subDescriptionsItem) {
    if (this.subDescriptions == null) {
      this.subDescriptions = new ArrayList<>();
    }
    this.subDescriptions.add(subDescriptionsItem);
    return this;
  }

   /**
   * additional description of the hotel details about the hotel provided in addition to the description
   * @return subDescriptions
  **/
  @javax.annotation.Nullable
  public List<String> getSubDescriptions() {
    return subDescriptions;
  }

  public void setSubDescriptions(List<String> subDescriptions) {
    this.subDescriptions = subDescriptions;
  }


  public HotelAboutInfo checkInTime(WorkTimeInfo checkInTime) {
    this.checkInTime = checkInTime;
    return this;
  }

   /**
   * Get checkInTime
   * @return checkInTime
  **/
  @javax.annotation.Nullable
  public WorkTimeInfo getCheckInTime() {
    return checkInTime;
  }

  public void setCheckInTime(WorkTimeInfo checkInTime) {
    this.checkInTime = checkInTime;
  }


  public HotelAboutInfo checkOutTime(WorkTimeInfo checkOutTime) {
    this.checkOutTime = checkOutTime;
    return this;
  }

   /**
   * Get checkOutTime
   * @return checkOutTime
  **/
  @javax.annotation.Nullable
  public WorkTimeInfo getCheckOutTime() {
    return checkOutTime;
  }

  public void setCheckOutTime(WorkTimeInfo checkOutTime) {
    this.checkOutTime = checkOutTime;
  }


  public HotelAboutInfo fullAddress(String fullAddress) {
    this.fullAddress = fullAddress;
    return this;
  }

   /**
   * full address of the hotel address of the hotel indicated in the standardised format
   * @return fullAddress
  **/
  @javax.annotation.Nullable
  public String getFullAddress() {
    return fullAddress;
  }

  public void setFullAddress(String fullAddress) {
    this.fullAddress = fullAddress;
  }


  public HotelAboutInfo domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * hotel domain domain of the hotel’s website
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public HotelAboutInfo url(String url) {
    this.url = url;
    return this;
  }

   /**
   * hotel url URL to the hotel’s website indicated in the listing
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public HotelAboutInfo amenities(List<HotelAmenityInfo> amenities) {
    this.amenities = amenities;
    return this;
  }

  public HotelAboutInfo addAmenitiesItem(HotelAmenityInfo amenitiesItem) {
    if (this.amenities == null) {
      this.amenities = new ArrayList<>();
    }
    this.amenities.add(amenitiesItem);
    return this;
  }

   /**
   * hotel amenities information about hotel amenities
   * @return amenities
  **/
  @javax.annotation.Nullable
  public List<HotelAmenityInfo> getAmenities() {
    return amenities;
  }

  public void setAmenities(List<HotelAmenityInfo> amenities) {
    this.amenities = amenities;
  }


  public HotelAboutInfo popularAmenities(List<HotelAmenityItemInfo> popularAmenities) {
    this.popularAmenities = popularAmenities;
    return this;
  }

  public HotelAboutInfo addPopularAmenitiesItem(HotelAmenityItemInfo popularAmenitiesItem) {
    if (this.popularAmenities == null) {
      this.popularAmenities = new ArrayList<>();
    }
    this.popularAmenities.add(popularAmenitiesItem);
    return this;
  }

   /**
   * hotel amenities information about hotel amenities labelled as “popular”
   * @return popularAmenities
  **/
  @javax.annotation.Nullable
  public List<HotelAmenityItemInfo> getPopularAmenities() {
    return popularAmenities;
  }

  public void setPopularAmenities(List<HotelAmenityItemInfo> popularAmenities) {
    this.popularAmenities = popularAmenities;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelAboutInfo hotelAboutInfo = (HotelAboutInfo) o;
    return Objects.equals(this.description, hotelAboutInfo.description) &&
        Objects.equals(this.subDescriptions, hotelAboutInfo.subDescriptions) &&
        Objects.equals(this.checkInTime, hotelAboutInfo.checkInTime) &&
        Objects.equals(this.checkOutTime, hotelAboutInfo.checkOutTime) &&
        Objects.equals(this.fullAddress, hotelAboutInfo.fullAddress) &&
        Objects.equals(this.domain, hotelAboutInfo.domain) &&
        Objects.equals(this.url, hotelAboutInfo.url) &&
        Objects.equals(this.amenities, hotelAboutInfo.amenities) &&
        Objects.equals(this.popularAmenities, hotelAboutInfo.popularAmenities);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, subDescriptions, checkInTime, checkOutTime, fullAddress, domain, url, amenities, popularAmenities);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelAboutInfo {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    subDescriptions: ").append(toIndentedString(subDescriptions)).append("\n");
    sb.append("    checkInTime: ").append(toIndentedString(checkInTime)).append("\n");
    sb.append("    checkOutTime: ").append(toIndentedString(checkOutTime)).append("\n");
    sb.append("    fullAddress: ").append(toIndentedString(fullAddress)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    amenities: ").append(toIndentedString(amenities)).append("\n");
    sb.append("    popularAmenities: ").append(toIndentedString(popularAmenities)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("sub_descriptions");
    openapiFields.add("check_in_time");
    openapiFields.add("check_out_time");
    openapiFields.add("full_address");
    openapiFields.add("domain");
    openapiFields.add("url");
    openapiFields.add("amenities");
    openapiFields.add("popular_amenities");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HotelAboutInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelAboutInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelAboutInfo is not found in the empty JSON string", HotelAboutInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelAboutInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelAboutInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sub_descriptions") != null && !jsonObj.get("sub_descriptions").isJsonNull() && !jsonObj.get("sub_descriptions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_descriptions` to be an array in the JSON string but got `%s`", jsonObj.get("sub_descriptions").toString()));
      }
      // validate the optional field `check_in_time`
      if (jsonObj.get("check_in_time") != null && !jsonObj.get("check_in_time").isJsonNull()) {
        WorkTimeInfo.validateJsonElement(jsonObj.get("check_in_time"));
      }
      // validate the optional field `check_out_time`
      if (jsonObj.get("check_out_time") != null && !jsonObj.get("check_out_time").isJsonNull()) {
        WorkTimeInfo.validateJsonElement(jsonObj.get("check_out_time"));
      }
      if ((jsonObj.get("full_address") != null && !jsonObj.get("full_address").isJsonNull()) && !jsonObj.get("full_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_address").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("amenities") != null && !jsonObj.get("amenities").isJsonNull()) {
        JsonArray jsonArrayamenities = jsonObj.getAsJsonArray("amenities");
        if (jsonArrayamenities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("amenities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `amenities` to be an array in the JSON string but got `%s`", jsonObj.get("amenities").toString()));
          }

          // validate the optional field `amenities` (array)
          for (int i = 0; i < jsonArrayamenities.size(); i++) {
            HotelAmenityInfo.validateJsonElement(jsonArrayamenities.get(i));
          };
        }
      }
      if (jsonObj.get("popular_amenities") != null && !jsonObj.get("popular_amenities").isJsonNull()) {
        JsonArray jsonArraypopularAmenities = jsonObj.getAsJsonArray("popular_amenities");
        if (jsonArraypopularAmenities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("popular_amenities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `popular_amenities` to be an array in the JSON string but got `%s`", jsonObj.get("popular_amenities").toString()));
          }

          // validate the optional field `popular_amenities` (array)
          for (int i = 0; i < jsonArraypopularAmenities.size(); i++) {
            HotelAmenityItemInfo.validateJsonElement(jsonArraypopularAmenities.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelAboutInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelAboutInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelAboutInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelAboutInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelAboutInfo>() {
           @Override
           public void write(JsonWriter out, HotelAboutInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelAboutInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HotelAboutInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HotelAboutInfo
  * @throws IOException if the JSON string is invalid with respect to HotelAboutInfo
  */
  public static HotelAboutInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelAboutInfo.class);
  }

 /**
  * Convert an instance of HotelAboutInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

