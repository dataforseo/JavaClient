/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AppendixFunctionInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AppendixContentAnalysisLimitsRatesDataInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-19T23:45:33.338179400+03:00[Europe/Kiev]")
public class AppendixContentAnalysisLimitsRatesDataInfo {
  public static final String SERIALIZED_NAME_SEARCH = "search";
  @SerializedName(SERIALIZED_NAME_SEARCH)
  private AppendixFunctionInfo search;

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private AppendixFunctionInfo summary;

  public static final String SERIALIZED_NAME_SENTIMENT_ANALYSIS = "sentiment_analysis";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_ANALYSIS)
  private AppendixFunctionInfo sentimentAnalysis;

  public static final String SERIALIZED_NAME_RATING_DISTRIBUTION = "rating_distribution";
  @SerializedName(SERIALIZED_NAME_RATING_DISTRIBUTION)
  private AppendixFunctionInfo ratingDistribution;

  public static final String SERIALIZED_NAME_PHRASE_TRENDS = "phrase_trends";
  @SerializedName(SERIALIZED_NAME_PHRASE_TRENDS)
  private AppendixFunctionInfo phraseTrends;

  public static final String SERIALIZED_NAME_CATEGORY_TRENDS = "category_trends";
  @SerializedName(SERIALIZED_NAME_CATEGORY_TRENDS)
  private AppendixFunctionInfo categoryTrends;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private Double locations;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private Double languages;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private Double categories;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Double errors;

  public AppendixContentAnalysisLimitsRatesDataInfo() {
  }

  public AppendixContentAnalysisLimitsRatesDataInfo search(AppendixFunctionInfo search) {
    this.search = search;
    return this;
  }

   /**
   * Get search
   * @return search
  **/
  @javax.annotation.Nullable
  public AppendixFunctionInfo getSearch() {
    return search;
  }

  public void setSearch(AppendixFunctionInfo search) {
    this.search = search;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo summary(AppendixFunctionInfo summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nullable
  public AppendixFunctionInfo getSummary() {
    return summary;
  }

  public void setSummary(AppendixFunctionInfo summary) {
    this.summary = summary;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo sentimentAnalysis(AppendixFunctionInfo sentimentAnalysis) {
    this.sentimentAnalysis = sentimentAnalysis;
    return this;
  }

   /**
   * Get sentimentAnalysis
   * @return sentimentAnalysis
  **/
  @javax.annotation.Nullable
  public AppendixFunctionInfo getSentimentAnalysis() {
    return sentimentAnalysis;
  }

  public void setSentimentAnalysis(AppendixFunctionInfo sentimentAnalysis) {
    this.sentimentAnalysis = sentimentAnalysis;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo ratingDistribution(AppendixFunctionInfo ratingDistribution) {
    this.ratingDistribution = ratingDistribution;
    return this;
  }

   /**
   * Get ratingDistribution
   * @return ratingDistribution
  **/
  @javax.annotation.Nullable
  public AppendixFunctionInfo getRatingDistribution() {
    return ratingDistribution;
  }

  public void setRatingDistribution(AppendixFunctionInfo ratingDistribution) {
    this.ratingDistribution = ratingDistribution;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo phraseTrends(AppendixFunctionInfo phraseTrends) {
    this.phraseTrends = phraseTrends;
    return this;
  }

   /**
   * Get phraseTrends
   * @return phraseTrends
  **/
  @javax.annotation.Nullable
  public AppendixFunctionInfo getPhraseTrends() {
    return phraseTrends;
  }

  public void setPhraseTrends(AppendixFunctionInfo phraseTrends) {
    this.phraseTrends = phraseTrends;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo categoryTrends(AppendixFunctionInfo categoryTrends) {
    this.categoryTrends = categoryTrends;
    return this;
  }

   /**
   * Get categoryTrends
   * @return categoryTrends
  **/
  @javax.annotation.Nullable
  public AppendixFunctionInfo getCategoryTrends() {
    return categoryTrends;
  }

  public void setCategoryTrends(AppendixFunctionInfo categoryTrends) {
    this.categoryTrends = categoryTrends;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo locations(Double locations) {
    this.locations = locations;
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  public Double getLocations() {
    return locations;
  }

  public void setLocations(Double locations) {
    this.locations = locations;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo languages(Double languages) {
    this.languages = languages;
    return this;
  }

   /**
   * Get languages
   * @return languages
  **/
  @javax.annotation.Nullable
  public Double getLanguages() {
    return languages;
  }

  public void setLanguages(Double languages) {
    this.languages = languages;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo categories(Double categories) {
    this.categories = categories;
    return this;
  }

   /**
   * Get categories
   * @return categories
  **/
  @javax.annotation.Nullable
  public Double getCategories() {
    return categories;
  }

  public void setCategories(Double categories) {
    this.categories = categories;
  }


  public AppendixContentAnalysisLimitsRatesDataInfo errors(Double errors) {
    this.errors = errors;
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nullable
  public Double getErrors() {
    return errors;
  }

  public void setErrors(Double errors) {
    this.errors = errors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendixContentAnalysisLimitsRatesDataInfo appendixContentAnalysisLimitsRatesDataInfo = (AppendixContentAnalysisLimitsRatesDataInfo) o;
    return Objects.equals(this.search, appendixContentAnalysisLimitsRatesDataInfo.search) &&
        Objects.equals(this.summary, appendixContentAnalysisLimitsRatesDataInfo.summary) &&
        Objects.equals(this.sentimentAnalysis, appendixContentAnalysisLimitsRatesDataInfo.sentimentAnalysis) &&
        Objects.equals(this.ratingDistribution, appendixContentAnalysisLimitsRatesDataInfo.ratingDistribution) &&
        Objects.equals(this.phraseTrends, appendixContentAnalysisLimitsRatesDataInfo.phraseTrends) &&
        Objects.equals(this.categoryTrends, appendixContentAnalysisLimitsRatesDataInfo.categoryTrends) &&
        Objects.equals(this.locations, appendixContentAnalysisLimitsRatesDataInfo.locations) &&
        Objects.equals(this.languages, appendixContentAnalysisLimitsRatesDataInfo.languages) &&
        Objects.equals(this.categories, appendixContentAnalysisLimitsRatesDataInfo.categories) &&
        Objects.equals(this.errors, appendixContentAnalysisLimitsRatesDataInfo.errors);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(search, summary, sentimentAnalysis, ratingDistribution, phraseTrends, categoryTrends, locations, languages, categories, errors);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendixContentAnalysisLimitsRatesDataInfo {\n");
    sb.append("    search: ").append(toIndentedString(search)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    sentimentAnalysis: ").append(toIndentedString(sentimentAnalysis)).append("\n");
    sb.append("    ratingDistribution: ").append(toIndentedString(ratingDistribution)).append("\n");
    sb.append("    phraseTrends: ").append(toIndentedString(phraseTrends)).append("\n");
    sb.append("    categoryTrends: ").append(toIndentedString(categoryTrends)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("search");
    openapiFields.add("summary");
    openapiFields.add("sentiment_analysis");
    openapiFields.add("rating_distribution");
    openapiFields.add("phrase_trends");
    openapiFields.add("category_trends");
    openapiFields.add("locations");
    openapiFields.add("languages");
    openapiFields.add("categories");
    openapiFields.add("errors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppendixContentAnalysisLimitsRatesDataInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendixContentAnalysisLimitsRatesDataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendixContentAnalysisLimitsRatesDataInfo is not found in the empty JSON string", AppendixContentAnalysisLimitsRatesDataInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendixContentAnalysisLimitsRatesDataInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendixContentAnalysisLimitsRatesDataInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `search`
      if (jsonObj.get("search") != null && !jsonObj.get("search").isJsonNull()) {
        AppendixFunctionInfo.validateJsonElement(jsonObj.get("search"));
      }
      // validate the optional field `summary`
      if (jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) {
        AppendixFunctionInfo.validateJsonElement(jsonObj.get("summary"));
      }
      // validate the optional field `sentiment_analysis`
      if (jsonObj.get("sentiment_analysis") != null && !jsonObj.get("sentiment_analysis").isJsonNull()) {
        AppendixFunctionInfo.validateJsonElement(jsonObj.get("sentiment_analysis"));
      }
      // validate the optional field `rating_distribution`
      if (jsonObj.get("rating_distribution") != null && !jsonObj.get("rating_distribution").isJsonNull()) {
        AppendixFunctionInfo.validateJsonElement(jsonObj.get("rating_distribution"));
      }
      // validate the optional field `phrase_trends`
      if (jsonObj.get("phrase_trends") != null && !jsonObj.get("phrase_trends").isJsonNull()) {
        AppendixFunctionInfo.validateJsonElement(jsonObj.get("phrase_trends"));
      }
      // validate the optional field `category_trends`
      if (jsonObj.get("category_trends") != null && !jsonObj.get("category_trends").isJsonNull()) {
        AppendixFunctionInfo.validateJsonElement(jsonObj.get("category_trends"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendixContentAnalysisLimitsRatesDataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendixContentAnalysisLimitsRatesDataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendixContentAnalysisLimitsRatesDataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendixContentAnalysisLimitsRatesDataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendixContentAnalysisLimitsRatesDataInfo>() {
           @Override
           public void write(JsonWriter out, AppendixContentAnalysisLimitsRatesDataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendixContentAnalysisLimitsRatesDataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppendixContentAnalysisLimitsRatesDataInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppendixContentAnalysisLimitsRatesDataInfo
  * @throws IOException if the JSON string is invalid with respect to AppendixContentAnalysisLimitsRatesDataInfo
  */
  public static AppendixContentAnalysisLimitsRatesDataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendixContentAnalysisLimitsRatesDataInfo.class);
  }

 /**
  * Convert an instance of AppendixContentAnalysisLimitsRatesDataInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

