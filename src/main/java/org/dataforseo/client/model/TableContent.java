/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.TableContentItemInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * TableContent
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-28T19:49:11.515676700+03:00[Europe/Kiev]")
public class TableContent {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private List<TableContentItemInfo> header;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private List<TableContentItemInfo> body;

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private List<TableContentItemInfo> footer;

  public TableContent() {
  }

  public TableContent header(List<TableContentItemInfo> header) {
    this.header = header;
    return this;
  }

  public TableContent addHeaderItem(TableContentItemInfo headerItem) {
    if (this.header == null) {
      this.header = new ArrayList<>();
    }
    this.header.add(headerItem);
    return this;
  }

   /**
   * parsed content of the header
   * @return header
  **/
  @javax.annotation.Nullable
  public List<TableContentItemInfo> getHeader() {
    return header;
  }

  public void setHeader(List<TableContentItemInfo> header) {
    this.header = header;
  }


  public TableContent body(List<TableContentItemInfo> body) {
    this.body = body;
    return this;
  }

  public TableContent addBodyItem(TableContentItemInfo bodyItem) {
    if (this.body == null) {
      this.body = new ArrayList<>();
    }
    this.body.add(bodyItem);
    return this;
  }

   /**
   * content of the body of the table
   * @return body
  **/
  @javax.annotation.Nullable
  public List<TableContentItemInfo> getBody() {
    return body;
  }

  public void setBody(List<TableContentItemInfo> body) {
    this.body = body;
  }


  public TableContent footer(List<TableContentItemInfo> footer) {
    this.footer = footer;
    return this;
  }

  public TableContent addFooterItem(TableContentItemInfo footerItem) {
    if (this.footer == null) {
      this.footer = new ArrayList<>();
    }
    this.footer.add(footerItem);
    return this;
  }

   /**
   * content of the footer of the table
   * @return footer
  **/
  @javax.annotation.Nullable
  public List<TableContentItemInfo> getFooter() {
    return footer;
  }

  public void setFooter(List<TableContentItemInfo> footer) {
    this.footer = footer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TableContent tableContent = (TableContent) o;
    return Objects.equals(this.header, tableContent.header) &&
        Objects.equals(this.body, tableContent.body) &&
        Objects.equals(this.footer, tableContent.footer);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, body, footer);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TableContent {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("body");
    openapiFields.add("footer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TableContent
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TableContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TableContent is not found in the empty JSON string", TableContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TableContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TableContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        JsonArray jsonArrayheader = jsonObj.getAsJsonArray("header");
        if (jsonArrayheader != null) {
          // ensure the json data is an array
          if (!jsonObj.get("header").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `header` to be an array in the JSON string but got `%s`", jsonObj.get("header").toString()));
          }

          // validate the optional field `header` (array)
          for (int i = 0; i < jsonArrayheader.size(); i++) {
            TableContentItemInfo.validateJsonElement(jsonArrayheader.get(i));
          };
        }
      }
      if (jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) {
        JsonArray jsonArraybody = jsonObj.getAsJsonArray("body");
        if (jsonArraybody != null) {
          // ensure the json data is an array
          if (!jsonObj.get("body").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `body` to be an array in the JSON string but got `%s`", jsonObj.get("body").toString()));
          }

          // validate the optional field `body` (array)
          for (int i = 0; i < jsonArraybody.size(); i++) {
            TableContentItemInfo.validateJsonElement(jsonArraybody.get(i));
          };
        }
      }
      if (jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) {
        JsonArray jsonArrayfooter = jsonObj.getAsJsonArray("footer");
        if (jsonArrayfooter != null) {
          // ensure the json data is an array
          if (!jsonObj.get("footer").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `footer` to be an array in the JSON string but got `%s`", jsonObj.get("footer").toString()));
          }

          // validate the optional field `footer` (array)
          for (int i = 0; i < jsonArrayfooter.size(); i++) {
            TableContentItemInfo.validateJsonElement(jsonArrayfooter.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TableContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TableContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TableContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TableContent.class));

       return (TypeAdapter<T>) new TypeAdapter<TableContent>() {
           @Override
           public void write(JsonWriter out, TableContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TableContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TableContent given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TableContent
  * @throws IOException if the JSON string is invalid with respect to TableContent
  */
  public static TableContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TableContent.class);
  }

 /**
  * Convert an instance of TableContent to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

