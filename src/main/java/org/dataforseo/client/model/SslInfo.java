/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * SslInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T10:30:03.431691300+03:00[Europe/Kiev]")
public class SslInfo {
  public static final String SERIALIZED_NAME_VALID_CERTIFICATE = "valid_certificate";
  @SerializedName(SERIALIZED_NAME_VALID_CERTIFICATE)
  private Boolean validCertificate;

  public static final String SERIALIZED_NAME_CERTIFICATE_ISSUER = "certificate_issuer";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_ISSUER)
  private String certificateIssuer;

  public static final String SERIALIZED_NAME_CERTIFICATE_SUBJECT = "certificate_subject";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_SUBJECT)
  private String certificateSubject;

  public static final String SERIALIZED_NAME_CERTIFICATE_VERSION = "certificate_version";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_VERSION)
  private String certificateVersion;

  public static final String SERIALIZED_NAME_CERTIFICATE_HASH = "certificate_hash";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_HASH)
  private String certificateHash;

  public static final String SERIALIZED_NAME_CERTIFICATE_EXPIRATION_DATE = "certificate_expiration_date";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_EXPIRATION_DATE)
  private String certificateExpirationDate;

  public SslInfo() {
  }

  public SslInfo validCertificate(Boolean validCertificate) {
    this.validCertificate = validCertificate;
    return this;
  }

   /**
   * ssl certificate validity indicates whether the ssl certificate detected on a website is not expired, suspended, revoked or invalid
   * @return validCertificate
  **/
  @javax.annotation.Nullable
  public Boolean getValidCertificate() {
    return validCertificate;
  }

  public void setValidCertificate(Boolean validCertificate) {
    this.validCertificate = validCertificate;
  }


  public SslInfo certificateIssuer(String certificateIssuer) {
    this.certificateIssuer = certificateIssuer;
    return this;
  }

   /**
   * ssl certificate authority the entity that issued the detected ssl certificate
   * @return certificateIssuer
  **/
  @javax.annotation.Nullable
  public String getCertificateIssuer() {
    return certificateIssuer;
  }

  public void setCertificateIssuer(String certificateIssuer) {
    this.certificateIssuer = certificateIssuer;
  }


  public SslInfo certificateSubject(String certificateSubject) {
    this.certificateSubject = certificateSubject;
    return this;
  }

   /**
   * ssl certificate subject the entity associated with the public key
   * @return certificateSubject
  **/
  @javax.annotation.Nullable
  public String getCertificateSubject() {
    return certificateSubject;
  }

  public void setCertificateSubject(String certificateSubject) {
    this.certificateSubject = certificateSubject;
  }


  public SslInfo certificateVersion(String certificateVersion) {
    this.certificateVersion = certificateVersion;
    return this;
  }

   /**
   * ssl certificate version indicates the version of X.509 used by an ssl certificate
   * @return certificateVersion
  **/
  @javax.annotation.Nullable
  public String getCertificateVersion() {
    return certificateVersion;
  }

  public void setCertificateVersion(String certificateVersion) {
    this.certificateVersion = certificateVersion;
  }


  public SslInfo certificateHash(String certificateHash) {
    this.certificateHash = certificateHash;
    return this;
  }

   /**
   * ssl certificate hash the version of the ssl certificate’s hash function
   * @return certificateHash
  **/
  @javax.annotation.Nullable
  public String getCertificateHash() {
    return certificateHash;
  }

  public void setCertificateHash(String certificateHash) {
    this.certificateHash = certificateHash;
  }


  public SslInfo certificateExpirationDate(String certificateExpirationDate) {
    this.certificateExpirationDate = certificateExpirationDate;
    return this;
  }

   /**
   * ssl certificate expiration date the date and time when the ssl certificate expires in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return certificateExpirationDate
  **/
  @javax.annotation.Nullable
  public String getCertificateExpirationDate() {
    return certificateExpirationDate;
  }

  public void setCertificateExpirationDate(String certificateExpirationDate) {
    this.certificateExpirationDate = certificateExpirationDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SslInfo sslInfo = (SslInfo) o;
    return Objects.equals(this.validCertificate, sslInfo.validCertificate) &&
        Objects.equals(this.certificateIssuer, sslInfo.certificateIssuer) &&
        Objects.equals(this.certificateSubject, sslInfo.certificateSubject) &&
        Objects.equals(this.certificateVersion, sslInfo.certificateVersion) &&
        Objects.equals(this.certificateHash, sslInfo.certificateHash) &&
        Objects.equals(this.certificateExpirationDate, sslInfo.certificateExpirationDate);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(validCertificate, certificateIssuer, certificateSubject, certificateVersion, certificateHash, certificateExpirationDate);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SslInfo {\n");
    sb.append("    validCertificate: ").append(toIndentedString(validCertificate)).append("\n");
    sb.append("    certificateIssuer: ").append(toIndentedString(certificateIssuer)).append("\n");
    sb.append("    certificateSubject: ").append(toIndentedString(certificateSubject)).append("\n");
    sb.append("    certificateVersion: ").append(toIndentedString(certificateVersion)).append("\n");
    sb.append("    certificateHash: ").append(toIndentedString(certificateHash)).append("\n");
    sb.append("    certificateExpirationDate: ").append(toIndentedString(certificateExpirationDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("valid_certificate");
    openapiFields.add("certificate_issuer");
    openapiFields.add("certificate_subject");
    openapiFields.add("certificate_version");
    openapiFields.add("certificate_hash");
    openapiFields.add("certificate_expiration_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to SslInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SslInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SslInfo is not found in the empty JSON string", SslInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SslInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SslInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("certificate_issuer") != null && !jsonObj.get("certificate_issuer").isJsonNull()) && !jsonObj.get("certificate_issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_issuer").toString()));
      }
      if ((jsonObj.get("certificate_subject") != null && !jsonObj.get("certificate_subject").isJsonNull()) && !jsonObj.get("certificate_subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_subject").toString()));
      }
      if ((jsonObj.get("certificate_version") != null && !jsonObj.get("certificate_version").isJsonNull()) && !jsonObj.get("certificate_version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_version").toString()));
      }
      if ((jsonObj.get("certificate_hash") != null && !jsonObj.get("certificate_hash").isJsonNull()) && !jsonObj.get("certificate_hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_hash").toString()));
      }
      if ((jsonObj.get("certificate_expiration_date") != null && !jsonObj.get("certificate_expiration_date").isJsonNull()) && !jsonObj.get("certificate_expiration_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_expiration_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificate_expiration_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SslInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SslInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SslInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SslInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<SslInfo>() {
           @Override
           public void write(JsonWriter out, SslInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SslInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of SslInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of SslInfo
  * @throws IOException if the JSON string is invalid with respect to SslInfo
  */
  public static SslInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SslInfo.class);
  }

 /**
  * Convert an instance of SslInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

