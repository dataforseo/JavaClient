/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.dataforseo.client.model.BaseOnPageResourceItemInfo;
import org.dataforseo.client.model.CacheControl;
import org.dataforseo.client.model.LastModified;
import org.dataforseo.client.model.OnPageResourceIssueInfo;
import org.dataforseo.client.model.PageMetaInfo;
import org.dataforseo.client.model.PageTiming;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * HtmlResourceElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T18:32:56.856102800+03:00[Europe/Kiev]")
public class HtmlResourceElementItem extends BaseOnPageResourceItemInfo {
  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private PageMetaInfo meta;

  public static final String SERIALIZED_NAME_PAGE_TIMING = "page_timing";
  @SerializedName(SERIALIZED_NAME_PAGE_TIMING)
  private PageTiming pageTiming;

  public static final String SERIALIZED_NAME_ONPAGE_SCORE = "onpage_score";
  @SerializedName(SERIALIZED_NAME_ONPAGE_SCORE)
  private Float onpageScore;

  public static final String SERIALIZED_NAME_TOTAL_DOM_SIZE = "total_dom_size";
  @SerializedName(SERIALIZED_NAME_TOTAL_DOM_SIZE)
  private Long totalDomSize;

  public static final String SERIALIZED_NAME_CUSTOM_JS_RESPONSE = "custom_js_response";
  @SerializedName(SERIALIZED_NAME_CUSTOM_JS_RESPONSE)
  private Object customJsResponse;

  public static final String SERIALIZED_NAME_RESOURCE_ERRORS = "resource_errors";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ERRORS)
  private OnPageResourceIssueInfo resourceErrors;

  public static final String SERIALIZED_NAME_BROKEN_RESOURCES = "broken_resources";
  @SerializedName(SERIALIZED_NAME_BROKEN_RESOURCES)
  private Boolean brokenResources;

  public static final String SERIALIZED_NAME_BROKEN_LINKS = "broken_links";
  @SerializedName(SERIALIZED_NAME_BROKEN_LINKS)
  private Boolean brokenLinks;

  public static final String SERIALIZED_NAME_DUPLICATE_TITLE = "duplicate_title";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_TITLE)
  private Boolean duplicateTitle;

  public static final String SERIALIZED_NAME_DUPLICATE_DESCRIPTION = "duplicate_description";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_DESCRIPTION)
  private Boolean duplicateDescription;

  public static final String SERIALIZED_NAME_DUPLICATE_CONTENT = "duplicate_content";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_CONTENT)
  private Boolean duplicateContent;

  public static final String SERIALIZED_NAME_CLICK_DEPTH = "click_depth";
  @SerializedName(SERIALIZED_NAME_CLICK_DEPTH)
  private Integer clickDepth;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_ENCODED_SIZE = "encoded_size";
  @SerializedName(SERIALIZED_NAME_ENCODED_SIZE)
  private Integer encodedSize;

  public static final String SERIALIZED_NAME_TOTAL_TRANSFER_SIZE = "total_transfer_size";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRANSFER_SIZE)
  private Long totalTransferSize;

  public static final String SERIALIZED_NAME_FETCH_TIME = "fetch_time";
  @SerializedName(SERIALIZED_NAME_FETCH_TIME)
  private String fetchTime;

  public static final String SERIALIZED_NAME_CACHE_CONTROL = "cache_control";
  @SerializedName(SERIALIZED_NAME_CACHE_CONTROL)
  private CacheControl cacheControl;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private Map<String, Boolean> checks;

  public static final String SERIALIZED_NAME_CONTENT_ENCODING = "content_encoding";
  @SerializedName(SERIALIZED_NAME_CONTENT_ENCODING)
  private String contentEncoding;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_IS_RESOURCE = "is_resource";
  @SerializedName(SERIALIZED_NAME_IS_RESOURCE)
  private Boolean isResource;

  public static final String SERIALIZED_NAME_URL_LENGTH = "url_length";
  @SerializedName(SERIALIZED_NAME_URL_LENGTH)
  private Integer urlLength;

  public static final String SERIALIZED_NAME_RELATIVE_URL_LENGTH = "relative_url_length";
  @SerializedName(SERIALIZED_NAME_RELATIVE_URL_LENGTH)
  private Integer relativeUrlLength;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private LastModified lastModified;

  public HtmlResourceElementItem() {
    this.resourceType = this.getClass().getSimpleName();
  }

  public HtmlResourceElementItem statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * status code of the page
   * @return statusCode
  **/
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public HtmlResourceElementItem location(String location) {
    this.location = location;
    return this;
  }

   /**
   * location header indicates the URL to redirect a page to
   * @return location
  **/
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public HtmlResourceElementItem url(String url) {
    this.url = url;
    return this;
  }

   /**
   * page URL
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public HtmlResourceElementItem meta(PageMetaInfo meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  public PageMetaInfo getMeta() {
    return meta;
  }

  public void setMeta(PageMetaInfo meta) {
    this.meta = meta;
  }


  public HtmlResourceElementItem pageTiming(PageTiming pageTiming) {
    this.pageTiming = pageTiming;
    return this;
  }

   /**
   * Get pageTiming
   * @return pageTiming
  **/
  @javax.annotation.Nullable
  public PageTiming getPageTiming() {
    return pageTiming;
  }

  public void setPageTiming(PageTiming pageTiming) {
    this.pageTiming = pageTiming;
  }


  public HtmlResourceElementItem onpageScore(Float onpageScore) {
    this.onpageScore = onpageScore;
    return this;
  }

   /**
   * shows how page is optimized on a 100-point scale this field shows how page is optimized considering critical on-page issues and warnings detected; 100 is the highest possible score that means the page does not have any critical on-page issues and important warnings; learn more about how the metric is calculated in this help center article
   * @return onpageScore
  **/
  @javax.annotation.Nullable
  public Float getOnpageScore() {
    return onpageScore;
  }

  public void setOnpageScore(Float onpageScore) {
    this.onpageScore = onpageScore;
  }


  public HtmlResourceElementItem totalDomSize(Long totalDomSize) {
    this.totalDomSize = totalDomSize;
    return this;
  }

   /**
   * total DOM size of a page
   * @return totalDomSize
  **/
  @javax.annotation.Nullable
  public Long getTotalDomSize() {
    return totalDomSize;
  }

  public void setTotalDomSize(Long totalDomSize) {
    this.totalDomSize = totalDomSize;
  }


  public HtmlResourceElementItem customJsResponse(Object customJsResponse) {
    this.customJsResponse = customJsResponse;
    return this;
  }

   /**
   * the result of executing a specified JS script note that you should specify a custom_js field when setting a task to receive this data and the field type and its value will totally depend on the script you specified;you can also filter the results by this value specifying filters in the following way: [\&quot;custom_js_response.url\&quot;, \&quot;like\&quot;, \&quot;pixel\&quot;]
   * @return customJsResponse
  **/
  @javax.annotation.Nullable
  public Object getCustomJsResponse() {
    return customJsResponse;
  }

  public void setCustomJsResponse(Object customJsResponse) {
    this.customJsResponse = customJsResponse;
  }


  public HtmlResourceElementItem resourceErrors(OnPageResourceIssueInfo resourceErrors) {
    this.resourceErrors = resourceErrors;
    return this;
  }

   /**
   * Get resourceErrors
   * @return resourceErrors
  **/
  @javax.annotation.Nullable
  public OnPageResourceIssueInfo getResourceErrors() {
    return resourceErrors;
  }

  public void setResourceErrors(OnPageResourceIssueInfo resourceErrors) {
    this.resourceErrors = resourceErrors;
  }


  public HtmlResourceElementItem brokenResources(Boolean brokenResources) {
    this.brokenResources = brokenResources;
    return this;
  }

   /**
   * indicates whether a page contains broken resources
   * @return brokenResources
  **/
  @javax.annotation.Nullable
  public Boolean getBrokenResources() {
    return brokenResources;
  }

  public void setBrokenResources(Boolean brokenResources) {
    this.brokenResources = brokenResources;
  }


  public HtmlResourceElementItem brokenLinks(Boolean brokenLinks) {
    this.brokenLinks = brokenLinks;
    return this;
  }

   /**
   * indicates whether a page contains broken links
   * @return brokenLinks
  **/
  @javax.annotation.Nullable
  public Boolean getBrokenLinks() {
    return brokenLinks;
  }

  public void setBrokenLinks(Boolean brokenLinks) {
    this.brokenLinks = brokenLinks;
  }


  public HtmlResourceElementItem duplicateTitle(Boolean duplicateTitle) {
    this.duplicateTitle = duplicateTitle;
    return this;
  }

   /**
   * indicates whether a page has duplicate title tags
   * @return duplicateTitle
  **/
  @javax.annotation.Nullable
  public Boolean getDuplicateTitle() {
    return duplicateTitle;
  }

  public void setDuplicateTitle(Boolean duplicateTitle) {
    this.duplicateTitle = duplicateTitle;
  }


  public HtmlResourceElementItem duplicateDescription(Boolean duplicateDescription) {
    this.duplicateDescription = duplicateDescription;
    return this;
  }

   /**
   * indicates whether a page has a duplicate description
   * @return duplicateDescription
  **/
  @javax.annotation.Nullable
  public Boolean getDuplicateDescription() {
    return duplicateDescription;
  }

  public void setDuplicateDescription(Boolean duplicateDescription) {
    this.duplicateDescription = duplicateDescription;
  }


  public HtmlResourceElementItem duplicateContent(Boolean duplicateContent) {
    this.duplicateContent = duplicateContent;
    return this;
  }

   /**
   * indicates whether a page has duplicate content
   * @return duplicateContent
  **/
  @javax.annotation.Nullable
  public Boolean getDuplicateContent() {
    return duplicateContent;
  }

  public void setDuplicateContent(Boolean duplicateContent) {
    this.duplicateContent = duplicateContent;
  }


  public HtmlResourceElementItem clickDepth(Integer clickDepth) {
    this.clickDepth = clickDepth;
    return this;
  }

   /**
   * number of clicks it takes to get to the page indicates the number of clicks from the homepage needed before landing at the target page
   * @return clickDepth
  **/
  @javax.annotation.Nullable
  public Integer getClickDepth() {
    return clickDepth;
  }

  public void setClickDepth(Integer clickDepth) {
    this.clickDepth = clickDepth;
  }


  public HtmlResourceElementItem size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * resource size indicates the size of a given page measured in bytes
   * @return size
  **/
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public HtmlResourceElementItem encodedSize(Integer encodedSize) {
    this.encodedSize = encodedSize;
    return this;
  }

   /**
   * page size after encoding indicates the size of the encoded page measured in bytes
   * @return encodedSize
  **/
  @javax.annotation.Nullable
  public Integer getEncodedSize() {
    return encodedSize;
  }

  public void setEncodedSize(Integer encodedSize) {
    this.encodedSize = encodedSize;
  }


  public HtmlResourceElementItem totalTransferSize(Long totalTransferSize) {
    this.totalTransferSize = totalTransferSize;
    return this;
  }

   /**
   * compressed page size indicates the compressed size of a given page
   * @return totalTransferSize
  **/
  @javax.annotation.Nullable
  public Long getTotalTransferSize() {
    return totalTransferSize;
  }

  public void setTotalTransferSize(Long totalTransferSize) {
    this.totalTransferSize = totalTransferSize;
  }


  public HtmlResourceElementItem fetchTime(String fetchTime) {
    this.fetchTime = fetchTime;
    return this;
  }

   /**
   * date and time when a resource was fetched in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return fetchTime
  **/
  @javax.annotation.Nullable
  public String getFetchTime() {
    return fetchTime;
  }

  public void setFetchTime(String fetchTime) {
    this.fetchTime = fetchTime;
  }


  public HtmlResourceElementItem cacheControl(CacheControl cacheControl) {
    this.cacheControl = cacheControl;
    return this;
  }

   /**
   * Get cacheControl
   * @return cacheControl
  **/
  @javax.annotation.Nullable
  public CacheControl getCacheControl() {
    return cacheControl;
  }

  public void setCacheControl(CacheControl cacheControl) {
    this.cacheControl = cacheControl;
  }


  public HtmlResourceElementItem checks(Map<String, Boolean> checks) {
    this.checks = checks;
    return this;
  }

  public HtmlResourceElementItem putChecksItem(String key, Boolean checksItem) {
    if (this.checks == null) {
      this.checks = new HashMap<>();
    }
    this.checks.put(key, checksItem);
    return this;
  }

   /**
   * website checks on-page check-ups related to the page
   * @return checks
  **/
  @javax.annotation.Nullable
  public Map<String, Boolean> getChecks() {
    return checks;
  }

  public void setChecks(Map<String, Boolean> checks) {
    this.checks = checks;
  }


  public HtmlResourceElementItem contentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

   /**
   * type of encoding
   * @return contentEncoding
  **/
  @javax.annotation.Nullable
  public String getContentEncoding() {
    return contentEncoding;
  }

  public void setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
  }


  public HtmlResourceElementItem mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

   /**
   * types of media used to display a page
   * @return mediaType
  **/
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public HtmlResourceElementItem server(String server) {
    this.server = server;
    return this;
  }

   /**
   * server version
   * @return server
  **/
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public HtmlResourceElementItem isResource(Boolean isResource) {
    this.isResource = isResource;
    return this;
  }

   /**
   * indicates whether a page is a single resource
   * @return isResource
  **/
  @javax.annotation.Nullable
  public Boolean getIsResource() {
    return isResource;
  }

  public void setIsResource(Boolean isResource) {
    this.isResource = isResource;
  }


  public HtmlResourceElementItem urlLength(Integer urlLength) {
    this.urlLength = urlLength;
    return this;
  }

   /**
   * page URL length in characters
   * @return urlLength
  **/
  @javax.annotation.Nullable
  public Integer getUrlLength() {
    return urlLength;
  }

  public void setUrlLength(Integer urlLength) {
    this.urlLength = urlLength;
  }


  public HtmlResourceElementItem relativeUrlLength(Integer relativeUrlLength) {
    this.relativeUrlLength = relativeUrlLength;
    return this;
  }

   /**
   * relative URL length in characters
   * @return relativeUrlLength
  **/
  @javax.annotation.Nullable
  public Integer getRelativeUrlLength() {
    return relativeUrlLength;
  }

  public void setRelativeUrlLength(Integer relativeUrlLength) {
    this.relativeUrlLength = relativeUrlLength;
  }


  public HtmlResourceElementItem lastModified(LastModified lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nullable
  public LastModified getLastModified() {
    return lastModified;
  }

  public void setLastModified(LastModified lastModified) {
    this.lastModified = lastModified;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HtmlResourceElementItem htmlResourceElementItem = (HtmlResourceElementItem) o;
    return Objects.equals(this.statusCode, htmlResourceElementItem.statusCode) &&
        Objects.equals(this.location, htmlResourceElementItem.location) &&
        Objects.equals(this.url, htmlResourceElementItem.url) &&
        Objects.equals(this.meta, htmlResourceElementItem.meta) &&
        Objects.equals(this.pageTiming, htmlResourceElementItem.pageTiming) &&
        Objects.equals(this.onpageScore, htmlResourceElementItem.onpageScore) &&
        Objects.equals(this.totalDomSize, htmlResourceElementItem.totalDomSize) &&
        Objects.equals(this.customJsResponse, htmlResourceElementItem.customJsResponse) &&
        Objects.equals(this.resourceErrors, htmlResourceElementItem.resourceErrors) &&
        Objects.equals(this.brokenResources, htmlResourceElementItem.brokenResources) &&
        Objects.equals(this.brokenLinks, htmlResourceElementItem.brokenLinks) &&
        Objects.equals(this.duplicateTitle, htmlResourceElementItem.duplicateTitle) &&
        Objects.equals(this.duplicateDescription, htmlResourceElementItem.duplicateDescription) &&
        Objects.equals(this.duplicateContent, htmlResourceElementItem.duplicateContent) &&
        Objects.equals(this.clickDepth, htmlResourceElementItem.clickDepth) &&
        Objects.equals(this.size, htmlResourceElementItem.size) &&
        Objects.equals(this.encodedSize, htmlResourceElementItem.encodedSize) &&
        Objects.equals(this.totalTransferSize, htmlResourceElementItem.totalTransferSize) &&
        Objects.equals(this.fetchTime, htmlResourceElementItem.fetchTime) &&
        Objects.equals(this.cacheControl, htmlResourceElementItem.cacheControl) &&
        Objects.equals(this.checks, htmlResourceElementItem.checks) &&
        Objects.equals(this.contentEncoding, htmlResourceElementItem.contentEncoding) &&
        Objects.equals(this.mediaType, htmlResourceElementItem.mediaType) &&
        Objects.equals(this.server, htmlResourceElementItem.server) &&
        Objects.equals(this.isResource, htmlResourceElementItem.isResource) &&
        Objects.equals(this.urlLength, htmlResourceElementItem.urlLength) &&
        Objects.equals(this.relativeUrlLength, htmlResourceElementItem.relativeUrlLength) &&
        Objects.equals(this.lastModified, htmlResourceElementItem.lastModified) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(statusCode, location, url, meta, pageTiming, onpageScore, totalDomSize, customJsResponse, resourceErrors, brokenResources, brokenLinks, duplicateTitle, duplicateDescription, duplicateContent, clickDepth, size, encodedSize, totalTransferSize, fetchTime, cacheControl, checks, contentEncoding, mediaType, server, isResource, urlLength, relativeUrlLength, lastModified, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HtmlResourceElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    pageTiming: ").append(toIndentedString(pageTiming)).append("\n");
    sb.append("    onpageScore: ").append(toIndentedString(onpageScore)).append("\n");
    sb.append("    totalDomSize: ").append(toIndentedString(totalDomSize)).append("\n");
    sb.append("    customJsResponse: ").append(toIndentedString(customJsResponse)).append("\n");
    sb.append("    resourceErrors: ").append(toIndentedString(resourceErrors)).append("\n");
    sb.append("    brokenResources: ").append(toIndentedString(brokenResources)).append("\n");
    sb.append("    brokenLinks: ").append(toIndentedString(brokenLinks)).append("\n");
    sb.append("    duplicateTitle: ").append(toIndentedString(duplicateTitle)).append("\n");
    sb.append("    duplicateDescription: ").append(toIndentedString(duplicateDescription)).append("\n");
    sb.append("    duplicateContent: ").append(toIndentedString(duplicateContent)).append("\n");
    sb.append("    clickDepth: ").append(toIndentedString(clickDepth)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    encodedSize: ").append(toIndentedString(encodedSize)).append("\n");
    sb.append("    totalTransferSize: ").append(toIndentedString(totalTransferSize)).append("\n");
    sb.append("    fetchTime: ").append(toIndentedString(fetchTime)).append("\n");
    sb.append("    cacheControl: ").append(toIndentedString(cacheControl)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    contentEncoding: ").append(toIndentedString(contentEncoding)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    isResource: ").append(toIndentedString(isResource)).append("\n");
    sb.append("    urlLength: ").append(toIndentedString(urlLength)).append("\n");
    sb.append("    relativeUrlLength: ").append(toIndentedString(relativeUrlLength)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resource_type");
    openapiFields.add("status_code");
    openapiFields.add("location");
    openapiFields.add("url");
    openapiFields.add("meta");
    openapiFields.add("page_timing");
    openapiFields.add("onpage_score");
    openapiFields.add("total_dom_size");
    openapiFields.add("custom_js_response");
    openapiFields.add("resource_errors");
    openapiFields.add("broken_resources");
    openapiFields.add("broken_links");
    openapiFields.add("duplicate_title");
    openapiFields.add("duplicate_description");
    openapiFields.add("duplicate_content");
    openapiFields.add("click_depth");
    openapiFields.add("size");
    openapiFields.add("encoded_size");
    openapiFields.add("total_transfer_size");
    openapiFields.add("fetch_time");
    openapiFields.add("cache_control");
    openapiFields.add("checks");
    openapiFields.add("content_encoding");
    openapiFields.add("media_type");
    openapiFields.add("server");
    openapiFields.add("is_resource");
    openapiFields.add("url_length");
    openapiFields.add("relative_url_length");
    openapiFields.add("last_modified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HtmlResourceElementItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HtmlResourceElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HtmlResourceElementItem is not found in the empty JSON string", HtmlResourceElementItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HtmlResourceElementItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HtmlResourceElementItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HtmlResourceElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HtmlResourceElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HtmlResourceElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HtmlResourceElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<HtmlResourceElementItem>() {
           @Override
           public void write(JsonWriter out, HtmlResourceElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HtmlResourceElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HtmlResourceElementItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HtmlResourceElementItem
  * @throws IOException if the JSON string is invalid with respect to HtmlResourceElementItem
  */
  public static HtmlResourceElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HtmlResourceElementItem.class);
  }

 /**
  * Convert an instance of HtmlResourceElementItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

