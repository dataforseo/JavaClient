/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AppendixFunctionTypeInfo;
import org.dataforseo.client.model.AppendixJobsSerpLimitsRatesDataInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AppendixSerpLimitsRatesDataInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-21T10:44:48.237213300+03:00[Europe/Kiev]")
public class AppendixSerpLimitsRatesDataInfo {
  public static final String SERIALIZED_NAME_TASK_POST = "task_post";
  @SerializedName(SERIALIZED_NAME_TASK_POST)
  private Double taskPost;

  public static final String SERIALIZED_NAME_TASK_GET = "task_get";
  @SerializedName(SERIALIZED_NAME_TASK_GET)
  private AppendixFunctionTypeInfo taskGet;

  public static final String SERIALIZED_NAME_TASKS_READY = "tasks_ready";
  @SerializedName(SERIALIZED_NAME_TASKS_READY)
  private Double tasksReady;

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private Double locations;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private Double languages;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  private AppendixFunctionTypeInfo live;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private Double errors;

  public static final String SERIALIZED_NAME_TASKS_FIXED = "tasks_fixed";
  @SerializedName(SERIALIZED_NAME_TASKS_FIXED)
  private Double tasksFixed;

  public static final String SERIALIZED_NAME_JOBS = "jobs";
  @SerializedName(SERIALIZED_NAME_JOBS)
  private AppendixJobsSerpLimitsRatesDataInfo jobs;

  public static final String SERIALIZED_NAME_SCREENSHOT = "screenshot";
  @SerializedName(SERIALIZED_NAME_SCREENSHOT)
  private Double screenshot;

  public AppendixSerpLimitsRatesDataInfo() {
  }

  public AppendixSerpLimitsRatesDataInfo taskPost(Double taskPost) {
    this.taskPost = taskPost;
    return this;
  }

   /**
   * Get taskPost
   * @return taskPost
  **/
  @javax.annotation.Nullable
  public Double getTaskPost() {
    return taskPost;
  }

  public void setTaskPost(Double taskPost) {
    this.taskPost = taskPost;
  }


  public AppendixSerpLimitsRatesDataInfo taskGet(AppendixFunctionTypeInfo taskGet) {
    this.taskGet = taskGet;
    return this;
  }

   /**
   * Get taskGet
   * @return taskGet
  **/
  @javax.annotation.Nullable
  public AppendixFunctionTypeInfo getTaskGet() {
    return taskGet;
  }

  public void setTaskGet(AppendixFunctionTypeInfo taskGet) {
    this.taskGet = taskGet;
  }


  public AppendixSerpLimitsRatesDataInfo tasksReady(Double tasksReady) {
    this.tasksReady = tasksReady;
    return this;
  }

   /**
   * Get tasksReady
   * @return tasksReady
  **/
  @javax.annotation.Nullable
  public Double getTasksReady() {
    return tasksReady;
  }

  public void setTasksReady(Double tasksReady) {
    this.tasksReady = tasksReady;
  }


  public AppendixSerpLimitsRatesDataInfo locations(Double locations) {
    this.locations = locations;
    return this;
  }

   /**
   * Get locations
   * @return locations
  **/
  @javax.annotation.Nullable
  public Double getLocations() {
    return locations;
  }

  public void setLocations(Double locations) {
    this.locations = locations;
  }


  public AppendixSerpLimitsRatesDataInfo languages(Double languages) {
    this.languages = languages;
    return this;
  }

   /**
   * Get languages
   * @return languages
  **/
  @javax.annotation.Nullable
  public Double getLanguages() {
    return languages;
  }

  public void setLanguages(Double languages) {
    this.languages = languages;
  }


  public AppendixSerpLimitsRatesDataInfo live(AppendixFunctionTypeInfo live) {
    this.live = live;
    return this;
  }

   /**
   * Get live
   * @return live
  **/
  @javax.annotation.Nullable
  public AppendixFunctionTypeInfo getLive() {
    return live;
  }

  public void setLive(AppendixFunctionTypeInfo live) {
    this.live = live;
  }


  public AppendixSerpLimitsRatesDataInfo errors(Double errors) {
    this.errors = errors;
    return this;
  }

   /**
   * Get errors
   * @return errors
  **/
  @javax.annotation.Nullable
  public Double getErrors() {
    return errors;
  }

  public void setErrors(Double errors) {
    this.errors = errors;
  }


  public AppendixSerpLimitsRatesDataInfo tasksFixed(Double tasksFixed) {
    this.tasksFixed = tasksFixed;
    return this;
  }

   /**
   * Get tasksFixed
   * @return tasksFixed
  **/
  @javax.annotation.Nullable
  public Double getTasksFixed() {
    return tasksFixed;
  }

  public void setTasksFixed(Double tasksFixed) {
    this.tasksFixed = tasksFixed;
  }


  public AppendixSerpLimitsRatesDataInfo jobs(AppendixJobsSerpLimitsRatesDataInfo jobs) {
    this.jobs = jobs;
    return this;
  }

   /**
   * Get jobs
   * @return jobs
  **/
  @javax.annotation.Nullable
  public AppendixJobsSerpLimitsRatesDataInfo getJobs() {
    return jobs;
  }

  public void setJobs(AppendixJobsSerpLimitsRatesDataInfo jobs) {
    this.jobs = jobs;
  }


  public AppendixSerpLimitsRatesDataInfo screenshot(Double screenshot) {
    this.screenshot = screenshot;
    return this;
  }

   /**
   * Get screenshot
   * @return screenshot
  **/
  @javax.annotation.Nullable
  public Double getScreenshot() {
    return screenshot;
  }

  public void setScreenshot(Double screenshot) {
    this.screenshot = screenshot;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendixSerpLimitsRatesDataInfo appendixSerpLimitsRatesDataInfo = (AppendixSerpLimitsRatesDataInfo) o;
    return Objects.equals(this.taskPost, appendixSerpLimitsRatesDataInfo.taskPost) &&
        Objects.equals(this.taskGet, appendixSerpLimitsRatesDataInfo.taskGet) &&
        Objects.equals(this.tasksReady, appendixSerpLimitsRatesDataInfo.tasksReady) &&
        Objects.equals(this.locations, appendixSerpLimitsRatesDataInfo.locations) &&
        Objects.equals(this.languages, appendixSerpLimitsRatesDataInfo.languages) &&
        Objects.equals(this.live, appendixSerpLimitsRatesDataInfo.live) &&
        Objects.equals(this.errors, appendixSerpLimitsRatesDataInfo.errors) &&
        Objects.equals(this.tasksFixed, appendixSerpLimitsRatesDataInfo.tasksFixed) &&
        Objects.equals(this.jobs, appendixSerpLimitsRatesDataInfo.jobs) &&
        Objects.equals(this.screenshot, appendixSerpLimitsRatesDataInfo.screenshot);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(taskPost, taskGet, tasksReady, locations, languages, live, errors, tasksFixed, jobs, screenshot);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendixSerpLimitsRatesDataInfo {\n");
    sb.append("    taskPost: ").append(toIndentedString(taskPost)).append("\n");
    sb.append("    taskGet: ").append(toIndentedString(taskGet)).append("\n");
    sb.append("    tasksReady: ").append(toIndentedString(tasksReady)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    tasksFixed: ").append(toIndentedString(tasksFixed)).append("\n");
    sb.append("    jobs: ").append(toIndentedString(jobs)).append("\n");
    sb.append("    screenshot: ").append(toIndentedString(screenshot)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("task_post");
    openapiFields.add("task_get");
    openapiFields.add("tasks_ready");
    openapiFields.add("locations");
    openapiFields.add("languages");
    openapiFields.add("live");
    openapiFields.add("errors");
    openapiFields.add("tasks_fixed");
    openapiFields.add("jobs");
    openapiFields.add("screenshot");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppendixSerpLimitsRatesDataInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendixSerpLimitsRatesDataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendixSerpLimitsRatesDataInfo is not found in the empty JSON string", AppendixSerpLimitsRatesDataInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendixSerpLimitsRatesDataInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendixSerpLimitsRatesDataInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `task_get`
      if (jsonObj.get("task_get") != null && !jsonObj.get("task_get").isJsonNull()) {
        AppendixFunctionTypeInfo.validateJsonElement(jsonObj.get("task_get"));
      }
      // validate the optional field `live`
      if (jsonObj.get("live") != null && !jsonObj.get("live").isJsonNull()) {
        AppendixFunctionTypeInfo.validateJsonElement(jsonObj.get("live"));
      }
      // validate the optional field `jobs`
      if (jsonObj.get("jobs") != null && !jsonObj.get("jobs").isJsonNull()) {
        AppendixJobsSerpLimitsRatesDataInfo.validateJsonElement(jsonObj.get("jobs"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendixSerpLimitsRatesDataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendixSerpLimitsRatesDataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendixSerpLimitsRatesDataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendixSerpLimitsRatesDataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendixSerpLimitsRatesDataInfo>() {
           @Override
           public void write(JsonWriter out, AppendixSerpLimitsRatesDataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendixSerpLimitsRatesDataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppendixSerpLimitsRatesDataInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppendixSerpLimitsRatesDataInfo
  * @throws IOException if the JSON string is invalid with respect to AppendixSerpLimitsRatesDataInfo
  */
  public static AppendixSerpLimitsRatesDataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendixSerpLimitsRatesDataInfo.class);
  }

 /**
  * Convert an instance of AppendixSerpLimitsRatesDataInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

