/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AvgBacklinksInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-05-19T23:45:33.338179400+03:00[Europe/Kiev]")
public class AvgBacklinksInfo {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_BACKLINKS = "backlinks";
  @SerializedName(SERIALIZED_NAME_BACKLINKS)
  private Float backlinks;

  public static final String SERIALIZED_NAME_DOFOLLOW = "dofollow";
  @SerializedName(SERIALIZED_NAME_DOFOLLOW)
  private Float dofollow;

  public static final String SERIALIZED_NAME_REFERRING_PAGES = "referring_pages";
  @SerializedName(SERIALIZED_NAME_REFERRING_PAGES)
  private Float referringPages;

  public static final String SERIALIZED_NAME_REFERRING_DOMAINS = "referring_domains";
  @SerializedName(SERIALIZED_NAME_REFERRING_DOMAINS)
  private Float referringDomains;

  public static final String SERIALIZED_NAME_REFERRING_MAIN_DOMAINS = "referring_main_domains";
  @SerializedName(SERIALIZED_NAME_REFERRING_MAIN_DOMAINS)
  private Float referringMainDomains;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Float rank;

  public static final String SERIALIZED_NAME_MAIN_DOMAIN_RANK = "main_domain_rank";
  @SerializedName(SERIALIZED_NAME_MAIN_DOMAIN_RANK)
  private Float mainDomainRank;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "last_updated_time";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private String lastUpdatedTime;

  public AvgBacklinksInfo() {
  }

  public AvgBacklinksInfo seType(String seType) {
    this.seType = seType;
    return this;
  }

   /**
   * search engine type
   * @return seType
  **/
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public AvgBacklinksInfo backlinks(Float backlinks) {
    this.backlinks = backlinks;
    return this;
  }

   /**
   * average number of backlinks
   * @return backlinks
  **/
  @javax.annotation.Nullable
  public Float getBacklinks() {
    return backlinks;
  }

  public void setBacklinks(Float backlinks) {
    this.backlinks = backlinks;
  }


  public AvgBacklinksInfo dofollow(Float dofollow) {
    this.dofollow = dofollow;
    return this;
  }

   /**
   * average number of dofollow links
   * @return dofollow
  **/
  @javax.annotation.Nullable
  public Float getDofollow() {
    return dofollow;
  }

  public void setDofollow(Float dofollow) {
    this.dofollow = dofollow;
  }


  public AvgBacklinksInfo referringPages(Float referringPages) {
    this.referringPages = referringPages;
    return this;
  }

   /**
   * average number of referring pages
   * @return referringPages
  **/
  @javax.annotation.Nullable
  public Float getReferringPages() {
    return referringPages;
  }

  public void setReferringPages(Float referringPages) {
    this.referringPages = referringPages;
  }


  public AvgBacklinksInfo referringDomains(Float referringDomains) {
    this.referringDomains = referringDomains;
    return this;
  }

   /**
   * average number of referring domains
   * @return referringDomains
  **/
  @javax.annotation.Nullable
  public Float getReferringDomains() {
    return referringDomains;
  }

  public void setReferringDomains(Float referringDomains) {
    this.referringDomains = referringDomains;
  }


  public AvgBacklinksInfo referringMainDomains(Float referringMainDomains) {
    this.referringMainDomains = referringMainDomains;
    return this;
  }

   /**
   * average number of referring main domains
   * @return referringMainDomains
  **/
  @javax.annotation.Nullable
  public Float getReferringMainDomains() {
    return referringMainDomains;
  }

  public void setReferringMainDomains(Float referringMainDomains) {
    this.referringMainDomains = referringMainDomains;
  }


  public AvgBacklinksInfo rank(Float rank) {
    this.rank = rank;
    return this;
  }

   /**
   * average rank learn more about the metric and its calculation formula in this help center article
   * @return rank
  **/
  @javax.annotation.Nullable
  public Float getRank() {
    return rank;
  }

  public void setRank(Float rank) {
    this.rank = rank;
  }


  public AvgBacklinksInfo mainDomainRank(Float mainDomainRank) {
    this.mainDomainRank = mainDomainRank;
    return this;
  }

   /**
   * average main domain rank learn more about the metric and its calculation formula in this help center article
   * @return mainDomainRank
  **/
  @javax.annotation.Nullable
  public Float getMainDomainRank() {
    return mainDomainRank;
  }

  public void setMainDomainRank(Float mainDomainRank) {
    this.mainDomainRank = mainDomainRank;
  }


  public AvgBacklinksInfo lastUpdatedTime(String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

   /**
   * date and time when backlink data was updated in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return lastUpdatedTime
  **/
  @javax.annotation.Nullable
  public String getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvgBacklinksInfo avgBacklinksInfo = (AvgBacklinksInfo) o;
    return Objects.equals(this.seType, avgBacklinksInfo.seType) &&
        Objects.equals(this.backlinks, avgBacklinksInfo.backlinks) &&
        Objects.equals(this.dofollow, avgBacklinksInfo.dofollow) &&
        Objects.equals(this.referringPages, avgBacklinksInfo.referringPages) &&
        Objects.equals(this.referringDomains, avgBacklinksInfo.referringDomains) &&
        Objects.equals(this.referringMainDomains, avgBacklinksInfo.referringMainDomains) &&
        Objects.equals(this.rank, avgBacklinksInfo.rank) &&
        Objects.equals(this.mainDomainRank, avgBacklinksInfo.mainDomainRank) &&
        Objects.equals(this.lastUpdatedTime, avgBacklinksInfo.lastUpdatedTime);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, backlinks, dofollow, referringPages, referringDomains, referringMainDomains, rank, mainDomainRank, lastUpdatedTime);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvgBacklinksInfo {\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    backlinks: ").append(toIndentedString(backlinks)).append("\n");
    sb.append("    dofollow: ").append(toIndentedString(dofollow)).append("\n");
    sb.append("    referringPages: ").append(toIndentedString(referringPages)).append("\n");
    sb.append("    referringDomains: ").append(toIndentedString(referringDomains)).append("\n");
    sb.append("    referringMainDomains: ").append(toIndentedString(referringMainDomains)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    mainDomainRank: ").append(toIndentedString(mainDomainRank)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("se_type");
    openapiFields.add("backlinks");
    openapiFields.add("dofollow");
    openapiFields.add("referring_pages");
    openapiFields.add("referring_domains");
    openapiFields.add("referring_main_domains");
    openapiFields.add("rank");
    openapiFields.add("main_domain_rank");
    openapiFields.add("last_updated_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AvgBacklinksInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvgBacklinksInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvgBacklinksInfo is not found in the empty JSON string", AvgBacklinksInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvgBacklinksInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvgBacklinksInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      if ((jsonObj.get("last_updated_time") != null && !jsonObj.get("last_updated_time").isJsonNull()) && !jsonObj.get("last_updated_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated_time").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvgBacklinksInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvgBacklinksInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvgBacklinksInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvgBacklinksInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<AvgBacklinksInfo>() {
           @Override
           public void write(JsonWriter out, AvgBacklinksInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvgBacklinksInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvgBacklinksInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvgBacklinksInfo
  * @throws IOException if the JSON string is invalid with respect to AvgBacklinksInfo
  */
  public static AvgBacklinksInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvgBacklinksInfo.class);
  }

 /**
  * Convert an instance of AvgBacklinksInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

