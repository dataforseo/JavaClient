/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.dataforseo.client.model.SslInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * DomainInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T20:51:42.343286900+03:00[Europe/Kiev]")
public class DomainInfo {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_CMS = "cms";
  @SerializedName(SERIALIZED_NAME_CMS)
  private String cms;

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private String ip;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_CRAWL_START = "crawl_start";
  @SerializedName(SERIALIZED_NAME_CRAWL_START)
  private String crawlStart;

  public static final String SERIALIZED_NAME_CRAWL_END = "crawl_end";
  @SerializedName(SERIALIZED_NAME_CRAWL_END)
  private String crawlEnd;

  public static final String SERIALIZED_NAME_EXTENDED_CRAWL_STATUS = "extended_crawl_status";
  @SerializedName(SERIALIZED_NAME_EXTENDED_CRAWL_STATUS)
  private String extendedCrawlStatus;

  public static final String SERIALIZED_NAME_SSL_INFO = "ssl_info";
  @SerializedName(SERIALIZED_NAME_SSL_INFO)
  private SslInfo sslInfo;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private Map<String, Boolean> checks;

  public static final String SERIALIZED_NAME_TOTAL_PAGES = "total_pages";
  @SerializedName(SERIALIZED_NAME_TOTAL_PAGES)
  private Long totalPages;

  public static final String SERIALIZED_NAME_PAGE_NOT_FOUND_STATUS_CODE = "page_not_found_status_code";
  @SerializedName(SERIALIZED_NAME_PAGE_NOT_FOUND_STATUS_CODE)
  private Integer pageNotFoundStatusCode;

  public static final String SERIALIZED_NAME_CANONICALIZATION_STATUS_CODE = "canonicalization_status_code";
  @SerializedName(SERIALIZED_NAME_CANONICALIZATION_STATUS_CODE)
  private Integer canonicalizationStatusCode;

  public static final String SERIALIZED_NAME_DIRECTORY_BROWSING_STATUS_CODE = "directory_browsing_status_code";
  @SerializedName(SERIALIZED_NAME_DIRECTORY_BROWSING_STATUS_CODE)
  private Integer directoryBrowsingStatusCode;

  public static final String SERIALIZED_NAME_WWW_REDIRECT_STATUS_CODE = "www_redirect_status_code";
  @SerializedName(SERIALIZED_NAME_WWW_REDIRECT_STATUS_CODE)
  private Integer wwwRedirectStatusCode;

  public static final String SERIALIZED_NAME_MAIN_DOMAIN = "main_domain";
  @SerializedName(SERIALIZED_NAME_MAIN_DOMAIN)
  private String mainDomain;

  public DomainInfo() {
  }

  public DomainInfo name(String name) {
    this.name = name;
    return this;
  }

   /**
   * domain name
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public DomainInfo cms(String cms) {
    this.cms = cms;
    return this;
  }

   /**
   * content management system content management system identified on a website the content of the generator meta tag the data is taken from the first random page that returns the 200 response code if our crawler was unable to identify the cms, the value would be null
   * @return cms
  **/
  @javax.annotation.Nullable
  public String getCms() {
    return cms;
  }

  public void setCms(String cms) {
    this.cms = cms;
  }


  public DomainInfo ip(String ip) {
    this.ip = ip;
    return this;
  }

   /**
   * domain ip address
   * @return ip
  **/
  @javax.annotation.Nullable
  public String getIp() {
    return ip;
  }

  public void setIp(String ip) {
    this.ip = ip;
  }


  public DomainInfo server(String server) {
    this.server = server;
    return this;
  }

   /**
   * website server the version of the server detected on a website the content of the server header the information is taken from the first page which response code is 200
   * @return server
  **/
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public DomainInfo crawlStart(String crawlStart) {
    this.crawlStart = crawlStart;
    return this;
  }

   /**
   * time when the crawling start date and time when the website was sent for crawling in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return crawlStart
  **/
  @javax.annotation.Nullable
  public String getCrawlStart() {
    return crawlStart;
  }

  public void setCrawlStart(String crawlStart) {
    this.crawlStart = crawlStart;
  }


  public DomainInfo crawlEnd(String crawlEnd) {
    this.crawlEnd = crawlEnd;
    return this;
  }

   /**
   * time when the crawling ended date and time when the crawling was finished in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00note: informative only if \&quot;crawl_progress\&quot; is \&quot;finished\&quot; if \&quot;crawl_progress\&quot; is in_progress, the value will be null
   * @return crawlEnd
  **/
  @javax.annotation.Nullable
  public String getCrawlEnd() {
    return crawlEnd;
  }

  public void setCrawlEnd(String crawlEnd) {
    this.crawlEnd = crawlEnd;
  }


  public DomainInfo extendedCrawlStatus(String extendedCrawlStatus) {
    this.extendedCrawlStatus = extendedCrawlStatus;
    return this;
  }

   /**
   * crawl status and errors indicates the reason why a website was not crawledcan take the following values: no_errors – no crawling errors were detected; site_unreachable – our crawler could not reach a website and thus was not able to obtain a status code; invalid_page_status_code – status code of the first crawled page &gt;&#x3D; 400; forbidden_meta_tag – the first crawled page contains the &lt;meta robots&#x3D;”noindex”&gt; tag; forbidden_robots – robots.txt forbids crawling the page; forbidden_http_header – HTTP header of the page contains “X-Robots-Tag: noindex” ; too_many_redirects – the first crawled page has more than 10 redirects; unknown – the reason is unknown
   * @return extendedCrawlStatus
  **/
  @javax.annotation.Nullable
  public String getExtendedCrawlStatus() {
    return extendedCrawlStatus;
  }

  public void setExtendedCrawlStatus(String extendedCrawlStatus) {
    this.extendedCrawlStatus = extendedCrawlStatus;
  }


  public DomainInfo sslInfo(SslInfo sslInfo) {
    this.sslInfo = sslInfo;
    return this;
  }

   /**
   * Get sslInfo
   * @return sslInfo
  **/
  @javax.annotation.Nullable
  public SslInfo getSslInfo() {
    return sslInfo;
  }

  public void setSslInfo(SslInfo sslInfo) {
    this.sslInfo = sslInfo;
  }


  public DomainInfo checks(Map<String, Boolean> checks) {
    this.checks = checks;
    return this;
  }

  public DomainInfo putChecksItem(String key, Boolean checksItem) {
    if (this.checks == null) {
      this.checks = new HashMap<>();
    }
    this.checks.put(key, checksItem);
    return this;
  }

   /**
   * website checks other on-page check-ups related to the website
   * @return checks
  **/
  @javax.annotation.Nullable
  public Map<String, Boolean> getChecks() {
    return checks;
  }

  public void setChecks(Map<String, Boolean> checks) {
    this.checks = checks;
  }


  public DomainInfo totalPages(Long totalPages) {
    this.totalPages = totalPages;
    return this;
  }

   /**
   * total crawled pages the total number of crawled pages
   * @return totalPages
  **/
  @javax.annotation.Nullable
  public Long getTotalPages() {
    return totalPages;
  }

  public void setTotalPages(Long totalPages) {
    this.totalPages = totalPages;
  }


  public DomainInfo pageNotFoundStatusCode(Integer pageNotFoundStatusCode) {
    this.pageNotFoundStatusCode = pageNotFoundStatusCode;
    return this;
  }

   /**
   * status code returned by a non-existent page in most cases, it is recommended a server returns a 404 response code
   * @return pageNotFoundStatusCode
  **/
  @javax.annotation.Nullable
  public Integer getPageNotFoundStatusCode() {
    return pageNotFoundStatusCode;
  }

  public void setPageNotFoundStatusCode(Integer pageNotFoundStatusCode) {
    this.pageNotFoundStatusCode = pageNotFoundStatusCode;
  }


  public DomainInfo canonicalizationStatusCode(Integer canonicalizationStatusCode) {
    this.canonicalizationStatusCode = canonicalizationStatusCode;
    return this;
  }

   /**
   * status code returned by a canonicalized page the checkup of the server behavior when our crawler tries to access the website via IP; in most cases, it is recommended that canonicalized pages respond with a 301 or 302 status code
   * @return canonicalizationStatusCode
  **/
  @javax.annotation.Nullable
  public Integer getCanonicalizationStatusCode() {
    return canonicalizationStatusCode;
  }

  public void setCanonicalizationStatusCode(Integer canonicalizationStatusCode) {
    this.canonicalizationStatusCode = canonicalizationStatusCode;
  }


  public DomainInfo directoryBrowsingStatusCode(Integer directoryBrowsingStatusCode) {
    this.directoryBrowsingStatusCode = directoryBrowsingStatusCode;
    return this;
  }

   /**
   * status code returned by a directory the status code returned by a directory page on a target website in most cases, it is recommended that directories respond with a 403 or 401 status code
   * @return directoryBrowsingStatusCode
  **/
  @javax.annotation.Nullable
  public Integer getDirectoryBrowsingStatusCode() {
    return directoryBrowsingStatusCode;
  }

  public void setDirectoryBrowsingStatusCode(Integer directoryBrowsingStatusCode) {
    this.directoryBrowsingStatusCode = directoryBrowsingStatusCode;
  }


  public DomainInfo wwwRedirectStatusCode(Integer wwwRedirectStatusCode) {
    this.wwwRedirectStatusCode = wwwRedirectStatusCode;
    return this;
  }

   /**
   * redirect status code the status code of the www to non-www redirect in most cases, it is recommended that redirect returns a 301 status code
   * @return wwwRedirectStatusCode
  **/
  @javax.annotation.Nullable
  public Integer getWwwRedirectStatusCode() {
    return wwwRedirectStatusCode;
  }

  public void setWwwRedirectStatusCode(Integer wwwRedirectStatusCode) {
    this.wwwRedirectStatusCode = wwwRedirectStatusCode;
  }


  public DomainInfo mainDomain(String mainDomain) {
    this.mainDomain = mainDomain;
    return this;
  }

   /**
   * root domain name
   * @return mainDomain
  **/
  @javax.annotation.Nullable
  public String getMainDomain() {
    return mainDomain;
  }

  public void setMainDomain(String mainDomain) {
    this.mainDomain = mainDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainInfo domainInfo = (DomainInfo) o;
    return Objects.equals(this.name, domainInfo.name) &&
        Objects.equals(this.cms, domainInfo.cms) &&
        Objects.equals(this.ip, domainInfo.ip) &&
        Objects.equals(this.server, domainInfo.server) &&
        Objects.equals(this.crawlStart, domainInfo.crawlStart) &&
        Objects.equals(this.crawlEnd, domainInfo.crawlEnd) &&
        Objects.equals(this.extendedCrawlStatus, domainInfo.extendedCrawlStatus) &&
        Objects.equals(this.sslInfo, domainInfo.sslInfo) &&
        Objects.equals(this.checks, domainInfo.checks) &&
        Objects.equals(this.totalPages, domainInfo.totalPages) &&
        Objects.equals(this.pageNotFoundStatusCode, domainInfo.pageNotFoundStatusCode) &&
        Objects.equals(this.canonicalizationStatusCode, domainInfo.canonicalizationStatusCode) &&
        Objects.equals(this.directoryBrowsingStatusCode, domainInfo.directoryBrowsingStatusCode) &&
        Objects.equals(this.wwwRedirectStatusCode, domainInfo.wwwRedirectStatusCode) &&
        Objects.equals(this.mainDomain, domainInfo.mainDomain);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, cms, ip, server, crawlStart, crawlEnd, extendedCrawlStatus, sslInfo, checks, totalPages, pageNotFoundStatusCode, canonicalizationStatusCode, directoryBrowsingStatusCode, wwwRedirectStatusCode, mainDomain);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainInfo {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    cms: ").append(toIndentedString(cms)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    crawlStart: ").append(toIndentedString(crawlStart)).append("\n");
    sb.append("    crawlEnd: ").append(toIndentedString(crawlEnd)).append("\n");
    sb.append("    extendedCrawlStatus: ").append(toIndentedString(extendedCrawlStatus)).append("\n");
    sb.append("    sslInfo: ").append(toIndentedString(sslInfo)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    totalPages: ").append(toIndentedString(totalPages)).append("\n");
    sb.append("    pageNotFoundStatusCode: ").append(toIndentedString(pageNotFoundStatusCode)).append("\n");
    sb.append("    canonicalizationStatusCode: ").append(toIndentedString(canonicalizationStatusCode)).append("\n");
    sb.append("    directoryBrowsingStatusCode: ").append(toIndentedString(directoryBrowsingStatusCode)).append("\n");
    sb.append("    wwwRedirectStatusCode: ").append(toIndentedString(wwwRedirectStatusCode)).append("\n");
    sb.append("    mainDomain: ").append(toIndentedString(mainDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("cms");
    openapiFields.add("ip");
    openapiFields.add("server");
    openapiFields.add("crawl_start");
    openapiFields.add("crawl_end");
    openapiFields.add("extended_crawl_status");
    openapiFields.add("ssl_info");
    openapiFields.add("checks");
    openapiFields.add("total_pages");
    openapiFields.add("page_not_found_status_code");
    openapiFields.add("canonicalization_status_code");
    openapiFields.add("directory_browsing_status_code");
    openapiFields.add("www_redirect_status_code");
    openapiFields.add("main_domain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DomainInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainInfo is not found in the empty JSON string", DomainInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("cms") != null && !jsonObj.get("cms").isJsonNull()) && !jsonObj.get("cms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cms").toString()));
      }
      if ((jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) && !jsonObj.get("ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ip").toString()));
      }
      if ((jsonObj.get("server") != null && !jsonObj.get("server").isJsonNull()) && !jsonObj.get("server").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `server` to be a primitive type in the JSON string but got `%s`", jsonObj.get("server").toString()));
      }
      if ((jsonObj.get("crawl_start") != null && !jsonObj.get("crawl_start").isJsonNull()) && !jsonObj.get("crawl_start").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crawl_start` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crawl_start").toString()));
      }
      if ((jsonObj.get("crawl_end") != null && !jsonObj.get("crawl_end").isJsonNull()) && !jsonObj.get("crawl_end").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crawl_end` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crawl_end").toString()));
      }
      if ((jsonObj.get("extended_crawl_status") != null && !jsonObj.get("extended_crawl_status").isJsonNull()) && !jsonObj.get("extended_crawl_status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extended_crawl_status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extended_crawl_status").toString()));
      }
      // validate the optional field `ssl_info`
      if (jsonObj.get("ssl_info") != null && !jsonObj.get("ssl_info").isJsonNull()) {
        SslInfo.validateJsonElement(jsonObj.get("ssl_info"));
      }
      if ((jsonObj.get("main_domain") != null && !jsonObj.get("main_domain").isJsonNull()) && !jsonObj.get("main_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_domain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainInfo>() {
           @Override
           public void write(JsonWriter out, DomainInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainInfo
  * @throws IOException if the JSON string is invalid with respect to DomainInfo
  */
  public static DomainInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainInfo.class);
  }

 /**
  * Convert an instance of DomainInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

