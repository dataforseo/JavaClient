/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.GraphElement;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * Graph
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-28T19:49:11.515676700+03:00[Europe/Kiev]")
public class Graph {
  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<GraphElement> items;

  public static final String SERIALIZED_NAME_PREVIOUS_ITEMS = "previous_items";
  @SerializedName(SERIALIZED_NAME_PREVIOUS_ITEMS)
  private List<GraphElement> previousItems;

  public Graph() {
  }

  public Graph items(List<GraphElement> items) {
    this.items = items;
    return this;
  }

  public Graph addItemsItem(GraphElement itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

   /**
   * contains arrays of specific images
   * @return items
  **/
  @javax.annotation.Nullable
  public List<GraphElement> getItems() {
    return items;
  }

  public void setItems(List<GraphElement> items) {
    this.items = items;
  }


  public Graph previousItems(List<GraphElement> previousItems) {
    this.previousItems = previousItems;
    return this;
  }

  public Graph addPreviousItemsItem(GraphElement previousItemsItem) {
    if (this.previousItems == null) {
      this.previousItems = new ArrayList<>();
    }
    this.previousItems.add(previousItemsItem);
    return this;
  }

   /**
   * previous close data contains stock price data based on the preceding time period
   * @return previousItems
  **/
  @javax.annotation.Nullable
  public List<GraphElement> getPreviousItems() {
    return previousItems;
  }

  public void setPreviousItems(List<GraphElement> previousItems) {
    this.previousItems = previousItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Graph graph = (Graph) o;
    return Objects.equals(this.items, graph.items) &&
        Objects.equals(this.previousItems, graph.previousItems);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(items, previousItems);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Graph {\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    previousItems: ").append(toIndentedString(previousItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("items");
    openapiFields.add("previous_items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to Graph
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Graph.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Graph is not found in the empty JSON string", Graph.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Graph.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Graph` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            GraphElement.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
      if (jsonObj.get("previous_items") != null && !jsonObj.get("previous_items").isJsonNull()) {
        JsonArray jsonArraypreviousItems = jsonObj.getAsJsonArray("previous_items");
        if (jsonArraypreviousItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previous_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previous_items` to be an array in the JSON string but got `%s`", jsonObj.get("previous_items").toString()));
          }

          // validate the optional field `previous_items` (array)
          for (int i = 0; i < jsonArraypreviousItems.size(); i++) {
            GraphElement.validateJsonElement(jsonArraypreviousItems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Graph.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Graph' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Graph> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Graph.class));

       return (TypeAdapter<T>) new TypeAdapter<Graph>() {
           @Override
           public void write(JsonWriter out, Graph value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Graph read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Graph given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Graph
  * @throws IOException if the JSON string is invalid with respect to Graph
  */
  public static Graph fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Graph.class);
  }

 /**
  * Convert an instance of Graph to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

