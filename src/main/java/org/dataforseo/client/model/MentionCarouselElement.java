/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.LinkElement;
import org.dataforseo.client.model.PriceInfo;
import org.dataforseo.client.model.RatingInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * MentionCarouselElement
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-21T10:44:48.237213300+03:00[Europe/Kiev]")
public class MentionCarouselElement {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private PriceInfo price;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingInfo rating;

  public static final String SERIALIZED_NAME_MENTIONED_IN = "mentioned_in";
  @SerializedName(SERIALIZED_NAME_MENTIONED_IN)
  private List<LinkElement> mentionedIn;

  public MentionCarouselElement() {
  }

  public MentionCarouselElement type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public MentionCarouselElement title(String title) {
    this.title = title;
    return this;
  }

   /**
   * title of a given link element
   * @return title
  **/
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public MentionCarouselElement price(PriceInfo price) {
    this.price = price;
    return this;
  }

   /**
   * Get price
   * @return price
  **/
  @javax.annotation.Nullable
  public PriceInfo getPrice() {
    return price;
  }

  public void setPrice(PriceInfo price) {
    this.price = price;
  }


  public MentionCarouselElement rating(RatingInfo rating) {
    this.rating = rating;
    return this;
  }

   /**
   * Get rating
   * @return rating
  **/
  @javax.annotation.Nullable
  public RatingInfo getRating() {
    return rating;
  }

  public void setRating(RatingInfo rating) {
    this.rating = rating;
  }


  public MentionCarouselElement mentionedIn(List<LinkElement> mentionedIn) {
    this.mentionedIn = mentionedIn;
    return this;
  }

  public MentionCarouselElement addMentionedInItem(LinkElement mentionedInItem) {
    if (this.mentionedIn == null) {
      this.mentionedIn = new ArrayList<>();
    }
    this.mentionedIn.add(mentionedInItem);
    return this;
  }

   /**
   * additional elements in the mention_carousel item
   * @return mentionedIn
  **/
  @javax.annotation.Nullable
  public List<LinkElement> getMentionedIn() {
    return mentionedIn;
  }

  public void setMentionedIn(List<LinkElement> mentionedIn) {
    this.mentionedIn = mentionedIn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MentionCarouselElement mentionCarouselElement = (MentionCarouselElement) o;
    return Objects.equals(this.type, mentionCarouselElement.type) &&
        Objects.equals(this.title, mentionCarouselElement.title) &&
        Objects.equals(this.price, mentionCarouselElement.price) &&
        Objects.equals(this.rating, mentionCarouselElement.rating) &&
        Objects.equals(this.mentionedIn, mentionCarouselElement.mentionedIn);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, title, price, rating, mentionedIn);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MentionCarouselElement {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    mentionedIn: ").append(toIndentedString(mentionedIn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("title");
    openapiFields.add("price");
    openapiFields.add("rating");
    openapiFields.add("mentioned_in");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to MentionCarouselElement
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MentionCarouselElement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MentionCarouselElement is not found in the empty JSON string", MentionCarouselElement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MentionCarouselElement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MentionCarouselElement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        PriceInfo.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        RatingInfo.validateJsonElement(jsonObj.get("rating"));
      }
      if (jsonObj.get("mentioned_in") != null && !jsonObj.get("mentioned_in").isJsonNull()) {
        JsonArray jsonArraymentionedIn = jsonObj.getAsJsonArray("mentioned_in");
        if (jsonArraymentionedIn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("mentioned_in").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `mentioned_in` to be an array in the JSON string but got `%s`", jsonObj.get("mentioned_in").toString()));
          }

          // validate the optional field `mentioned_in` (array)
          for (int i = 0; i < jsonArraymentionedIn.size(); i++) {
            LinkElement.validateJsonElement(jsonArraymentionedIn.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MentionCarouselElement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MentionCarouselElement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MentionCarouselElement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MentionCarouselElement.class));

       return (TypeAdapter<T>) new TypeAdapter<MentionCarouselElement>() {
           @Override
           public void write(JsonWriter out, MentionCarouselElement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MentionCarouselElement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MentionCarouselElement given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MentionCarouselElement
  * @throws IOException if the JSON string is invalid with respect to MentionCarouselElement
  */
  public static MentionCarouselElement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MentionCarouselElement.class);
  }

 /**
  * Convert an instance of MentionCarouselElement to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

