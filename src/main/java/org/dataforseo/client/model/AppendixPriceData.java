/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.AppendixAppDataPriceData;
import org.dataforseo.client.model.AppendixAppendixPriceData;
import org.dataforseo.client.model.AppendixBacklinksPriceData;
import org.dataforseo.client.model.AppendixBusinessDataPriceData;
import org.dataforseo.client.model.AppendixContentAnalysisPriceData;
import org.dataforseo.client.model.AppendixContentGenerationPriceData;
import org.dataforseo.client.model.AppendixDataforseoLabsPriceData;
import org.dataforseo.client.model.AppendixDomainAnalyticsPriceData;
import org.dataforseo.client.model.AppendixKeywordsDataPriceData;
import org.dataforseo.client.model.AppendixMerchantPriceData;
import org.dataforseo.client.model.AppendixOnPagePriceData;
import org.dataforseo.client.model.AppendixSerpPriceData;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AppendixPriceData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-02T09:14:36.455142500+03:00[Europe/Kiev]")
public class AppendixPriceData {
  public static final String SERIALIZED_NAME_KEYWORDS_DATA = "keywords_data";
  @SerializedName(SERIALIZED_NAME_KEYWORDS_DATA)
  private AppendixKeywordsDataPriceData keywordsData;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private AppendixMerchantPriceData merchant;

  public static final String SERIALIZED_NAME_SERP = "serp";
  @SerializedName(SERIALIZED_NAME_SERP)
  private AppendixSerpPriceData serp;

  public static final String SERIALIZED_NAME_APPENDIX = "appendix";
  @SerializedName(SERIALIZED_NAME_APPENDIX)
  private AppendixAppendixPriceData appendix;

  public static final String SERIALIZED_NAME_APP_DATA = "app_data";
  @SerializedName(SERIALIZED_NAME_APP_DATA)
  private AppendixAppDataPriceData appData;

  public static final String SERIALIZED_NAME_BACKLINKS = "backlinks";
  @SerializedName(SERIALIZED_NAME_BACKLINKS)
  private AppendixBacklinksPriceData backlinks;

  public static final String SERIALIZED_NAME_BUSINESS_DATA = "business_data";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DATA)
  private AppendixBusinessDataPriceData businessData;

  public static final String SERIALIZED_NAME_CONTENT_ANALYSIS = "content_analysis";
  @SerializedName(SERIALIZED_NAME_CONTENT_ANALYSIS)
  private AppendixContentAnalysisPriceData contentAnalysis;

  public static final String SERIALIZED_NAME_CONTENT_GENERATION = "content_generation";
  @SerializedName(SERIALIZED_NAME_CONTENT_GENERATION)
  private AppendixContentGenerationPriceData contentGeneration;

  public static final String SERIALIZED_NAME_DATAFORSEO_LABS = "dataforseo_labs";
  @SerializedName(SERIALIZED_NAME_DATAFORSEO_LABS)
  private AppendixDataforseoLabsPriceData dataforseoLabs;

  public static final String SERIALIZED_NAME_DOMAIN_ANALYTICS = "domain_analytics";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ANALYTICS)
  private AppendixDomainAnalyticsPriceData domainAnalytics;

  public static final String SERIALIZED_NAME_ON_PAGE = "on_page";
  @SerializedName(SERIALIZED_NAME_ON_PAGE)
  private AppendixOnPagePriceData onPage;

  public AppendixPriceData() {
  }

  public AppendixPriceData keywordsData(AppendixKeywordsDataPriceData keywordsData) {
    this.keywordsData = keywordsData;
    return this;
  }

   /**
   * Get keywordsData
   * @return keywordsData
  **/
  @javax.annotation.Nullable
  public AppendixKeywordsDataPriceData getKeywordsData() {
    return keywordsData;
  }

  public void setKeywordsData(AppendixKeywordsDataPriceData keywordsData) {
    this.keywordsData = keywordsData;
  }


  public AppendixPriceData merchant(AppendixMerchantPriceData merchant) {
    this.merchant = merchant;
    return this;
  }

   /**
   * Get merchant
   * @return merchant
  **/
  @javax.annotation.Nullable
  public AppendixMerchantPriceData getMerchant() {
    return merchant;
  }

  public void setMerchant(AppendixMerchantPriceData merchant) {
    this.merchant = merchant;
  }


  public AppendixPriceData serp(AppendixSerpPriceData serp) {
    this.serp = serp;
    return this;
  }

   /**
   * Get serp
   * @return serp
  **/
  @javax.annotation.Nullable
  public AppendixSerpPriceData getSerp() {
    return serp;
  }

  public void setSerp(AppendixSerpPriceData serp) {
    this.serp = serp;
  }


  public AppendixPriceData appendix(AppendixAppendixPriceData appendix) {
    this.appendix = appendix;
    return this;
  }

   /**
   * Get appendix
   * @return appendix
  **/
  @javax.annotation.Nullable
  public AppendixAppendixPriceData getAppendix() {
    return appendix;
  }

  public void setAppendix(AppendixAppendixPriceData appendix) {
    this.appendix = appendix;
  }


  public AppendixPriceData appData(AppendixAppDataPriceData appData) {
    this.appData = appData;
    return this;
  }

   /**
   * Get appData
   * @return appData
  **/
  @javax.annotation.Nullable
  public AppendixAppDataPriceData getAppData() {
    return appData;
  }

  public void setAppData(AppendixAppDataPriceData appData) {
    this.appData = appData;
  }


  public AppendixPriceData backlinks(AppendixBacklinksPriceData backlinks) {
    this.backlinks = backlinks;
    return this;
  }

   /**
   * Get backlinks
   * @return backlinks
  **/
  @javax.annotation.Nullable
  public AppendixBacklinksPriceData getBacklinks() {
    return backlinks;
  }

  public void setBacklinks(AppendixBacklinksPriceData backlinks) {
    this.backlinks = backlinks;
  }


  public AppendixPriceData businessData(AppendixBusinessDataPriceData businessData) {
    this.businessData = businessData;
    return this;
  }

   /**
   * Get businessData
   * @return businessData
  **/
  @javax.annotation.Nullable
  public AppendixBusinessDataPriceData getBusinessData() {
    return businessData;
  }

  public void setBusinessData(AppendixBusinessDataPriceData businessData) {
    this.businessData = businessData;
  }


  public AppendixPriceData contentAnalysis(AppendixContentAnalysisPriceData contentAnalysis) {
    this.contentAnalysis = contentAnalysis;
    return this;
  }

   /**
   * Get contentAnalysis
   * @return contentAnalysis
  **/
  @javax.annotation.Nullable
  public AppendixContentAnalysisPriceData getContentAnalysis() {
    return contentAnalysis;
  }

  public void setContentAnalysis(AppendixContentAnalysisPriceData contentAnalysis) {
    this.contentAnalysis = contentAnalysis;
  }


  public AppendixPriceData contentGeneration(AppendixContentGenerationPriceData contentGeneration) {
    this.contentGeneration = contentGeneration;
    return this;
  }

   /**
   * Get contentGeneration
   * @return contentGeneration
  **/
  @javax.annotation.Nullable
  public AppendixContentGenerationPriceData getContentGeneration() {
    return contentGeneration;
  }

  public void setContentGeneration(AppendixContentGenerationPriceData contentGeneration) {
    this.contentGeneration = contentGeneration;
  }


  public AppendixPriceData dataforseoLabs(AppendixDataforseoLabsPriceData dataforseoLabs) {
    this.dataforseoLabs = dataforseoLabs;
    return this;
  }

   /**
   * Get dataforseoLabs
   * @return dataforseoLabs
  **/
  @javax.annotation.Nullable
  public AppendixDataforseoLabsPriceData getDataforseoLabs() {
    return dataforseoLabs;
  }

  public void setDataforseoLabs(AppendixDataforseoLabsPriceData dataforseoLabs) {
    this.dataforseoLabs = dataforseoLabs;
  }


  public AppendixPriceData domainAnalytics(AppendixDomainAnalyticsPriceData domainAnalytics) {
    this.domainAnalytics = domainAnalytics;
    return this;
  }

   /**
   * Get domainAnalytics
   * @return domainAnalytics
  **/
  @javax.annotation.Nullable
  public AppendixDomainAnalyticsPriceData getDomainAnalytics() {
    return domainAnalytics;
  }

  public void setDomainAnalytics(AppendixDomainAnalyticsPriceData domainAnalytics) {
    this.domainAnalytics = domainAnalytics;
  }


  public AppendixPriceData onPage(AppendixOnPagePriceData onPage) {
    this.onPage = onPage;
    return this;
  }

   /**
   * Get onPage
   * @return onPage
  **/
  @javax.annotation.Nullable
  public AppendixOnPagePriceData getOnPage() {
    return onPage;
  }

  public void setOnPage(AppendixOnPagePriceData onPage) {
    this.onPage = onPage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendixPriceData appendixPriceData = (AppendixPriceData) o;
    return Objects.equals(this.keywordsData, appendixPriceData.keywordsData) &&
        Objects.equals(this.merchant, appendixPriceData.merchant) &&
        Objects.equals(this.serp, appendixPriceData.serp) &&
        Objects.equals(this.appendix, appendixPriceData.appendix) &&
        Objects.equals(this.appData, appendixPriceData.appData) &&
        Objects.equals(this.backlinks, appendixPriceData.backlinks) &&
        Objects.equals(this.businessData, appendixPriceData.businessData) &&
        Objects.equals(this.contentAnalysis, appendixPriceData.contentAnalysis) &&
        Objects.equals(this.contentGeneration, appendixPriceData.contentGeneration) &&
        Objects.equals(this.dataforseoLabs, appendixPriceData.dataforseoLabs) &&
        Objects.equals(this.domainAnalytics, appendixPriceData.domainAnalytics) &&
        Objects.equals(this.onPage, appendixPriceData.onPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(keywordsData, merchant, serp, appendix, appData, backlinks, businessData, contentAnalysis, contentGeneration, dataforseoLabs, domainAnalytics, onPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendixPriceData {\n");
    sb.append("    keywordsData: ").append(toIndentedString(keywordsData)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    serp: ").append(toIndentedString(serp)).append("\n");
    sb.append("    appendix: ").append(toIndentedString(appendix)).append("\n");
    sb.append("    appData: ").append(toIndentedString(appData)).append("\n");
    sb.append("    backlinks: ").append(toIndentedString(backlinks)).append("\n");
    sb.append("    businessData: ").append(toIndentedString(businessData)).append("\n");
    sb.append("    contentAnalysis: ").append(toIndentedString(contentAnalysis)).append("\n");
    sb.append("    contentGeneration: ").append(toIndentedString(contentGeneration)).append("\n");
    sb.append("    dataforseoLabs: ").append(toIndentedString(dataforseoLabs)).append("\n");
    sb.append("    domainAnalytics: ").append(toIndentedString(domainAnalytics)).append("\n");
    sb.append("    onPage: ").append(toIndentedString(onPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("keywords_data");
    openapiFields.add("merchant");
    openapiFields.add("serp");
    openapiFields.add("appendix");
    openapiFields.add("app_data");
    openapiFields.add("backlinks");
    openapiFields.add("business_data");
    openapiFields.add("content_analysis");
    openapiFields.add("content_generation");
    openapiFields.add("dataforseo_labs");
    openapiFields.add("domain_analytics");
    openapiFields.add("on_page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AppendixPriceData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendixPriceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendixPriceData is not found in the empty JSON string", AppendixPriceData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AppendixPriceData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AppendixPriceData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `keywords_data`
      if (jsonObj.get("keywords_data") != null && !jsonObj.get("keywords_data").isJsonNull()) {
        AppendixKeywordsDataPriceData.validateJsonElement(jsonObj.get("keywords_data"));
      }
      // validate the optional field `merchant`
      if (jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) {
        AppendixMerchantPriceData.validateJsonElement(jsonObj.get("merchant"));
      }
      // validate the optional field `serp`
      if (jsonObj.get("serp") != null && !jsonObj.get("serp").isJsonNull()) {
        AppendixSerpPriceData.validateJsonElement(jsonObj.get("serp"));
      }
      // validate the optional field `appendix`
      if (jsonObj.get("appendix") != null && !jsonObj.get("appendix").isJsonNull()) {
        AppendixAppendixPriceData.validateJsonElement(jsonObj.get("appendix"));
      }
      // validate the optional field `app_data`
      if (jsonObj.get("app_data") != null && !jsonObj.get("app_data").isJsonNull()) {
        AppendixAppDataPriceData.validateJsonElement(jsonObj.get("app_data"));
      }
      // validate the optional field `backlinks`
      if (jsonObj.get("backlinks") != null && !jsonObj.get("backlinks").isJsonNull()) {
        AppendixBacklinksPriceData.validateJsonElement(jsonObj.get("backlinks"));
      }
      // validate the optional field `business_data`
      if (jsonObj.get("business_data") != null && !jsonObj.get("business_data").isJsonNull()) {
        AppendixBusinessDataPriceData.validateJsonElement(jsonObj.get("business_data"));
      }
      // validate the optional field `content_analysis`
      if (jsonObj.get("content_analysis") != null && !jsonObj.get("content_analysis").isJsonNull()) {
        AppendixContentAnalysisPriceData.validateJsonElement(jsonObj.get("content_analysis"));
      }
      // validate the optional field `content_generation`
      if (jsonObj.get("content_generation") != null && !jsonObj.get("content_generation").isJsonNull()) {
        AppendixContentGenerationPriceData.validateJsonElement(jsonObj.get("content_generation"));
      }
      // validate the optional field `dataforseo_labs`
      if (jsonObj.get("dataforseo_labs") != null && !jsonObj.get("dataforseo_labs").isJsonNull()) {
        AppendixDataforseoLabsPriceData.validateJsonElement(jsonObj.get("dataforseo_labs"));
      }
      // validate the optional field `domain_analytics`
      if (jsonObj.get("domain_analytics") != null && !jsonObj.get("domain_analytics").isJsonNull()) {
        AppendixDomainAnalyticsPriceData.validateJsonElement(jsonObj.get("domain_analytics"));
      }
      // validate the optional field `on_page`
      if (jsonObj.get("on_page") != null && !jsonObj.get("on_page").isJsonNull()) {
        AppendixOnPagePriceData.validateJsonElement(jsonObj.get("on_page"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendixPriceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendixPriceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendixPriceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendixPriceData.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendixPriceData>() {
           @Override
           public void write(JsonWriter out, AppendixPriceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendixPriceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AppendixPriceData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AppendixPriceData
  * @throws IOException if the JSON string is invalid with respect to AppendixPriceData
  */
  public static AppendixPriceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendixPriceData.class);
  }

 /**
  * Convert an instance of AppendixPriceData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

