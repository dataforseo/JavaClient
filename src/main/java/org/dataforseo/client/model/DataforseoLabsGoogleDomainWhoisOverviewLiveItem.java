/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.dataforseo.client.model.BacklinksInfo;
import org.dataforseo.client.model.DataforseoLabsMetricsInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * DataforseoLabsGoogleDomainWhoisOverviewLiveItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T15:18:23.103906100+03:00[Europe/Kiev]")
public class DataforseoLabsGoogleDomainWhoisOverviewLiveItem {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_CREATED_DATETIME = "created_datetime";
  @SerializedName(SERIALIZED_NAME_CREATED_DATETIME)
  private String createdDatetime;

  public static final String SERIALIZED_NAME_CHANGED_DATETIME = "changed_datetime";
  @SerializedName(SERIALIZED_NAME_CHANGED_DATETIME)
  private String changedDatetime;

  public static final String SERIALIZED_NAME_EXPIRATION_DATETIME = "expiration_datetime";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATETIME)
  private String expirationDatetime;

  public static final String SERIALIZED_NAME_UPDATED_DATETIME = "updated_datetime";
  @SerializedName(SERIALIZED_NAME_UPDATED_DATETIME)
  private String updatedDatetime;

  public static final String SERIALIZED_NAME_FIRST_SEEN = "first_seen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private String firstSeen;

  public static final String SERIALIZED_NAME_EPP_STATUS_CODES = "epp_status_codes";
  @SerializedName(SERIALIZED_NAME_EPP_STATUS_CODES)
  private List<String> eppStatusCodes;

  public static final String SERIALIZED_NAME_TLD = "tld";
  @SerializedName(SERIALIZED_NAME_TLD)
  private String tld;

  public static final String SERIALIZED_NAME_REGISTERED = "registered";
  @SerializedName(SERIALIZED_NAME_REGISTERED)
  private Boolean registered;

  public static final String SERIALIZED_NAME_REGISTRAR = "registrar";
  @SerializedName(SERIALIZED_NAME_REGISTRAR)
  private String registrar;

  public static final String SERIALIZED_NAME_METRICS = "metrics";
  @SerializedName(SERIALIZED_NAME_METRICS)
  private Map<String, DataforseoLabsMetricsInfo> metrics;

  public static final String SERIALIZED_NAME_BACKLINKS_INFO = "backlinks_info";
  @SerializedName(SERIALIZED_NAME_BACKLINKS_INFO)
  private BacklinksInfo backlinksInfo;

  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem() {
  }

  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem seType(String seType) {
    this.seType = seType;
    return this;
  }

   /**
   * search engine type
   * @return seType
  **/
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * domain name
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem createdDatetime(String createdDatetime) {
    this.createdDatetime = createdDatetime;
    return this;
  }

   /**
   * date and time of registration date and time (in the ISO 8601 format) when the domain was first registered example: \&quot;1997-03-29 03:00:00 +00:00\&quot;
   * @return createdDatetime
  **/
  @javax.annotation.Nullable
  public String getCreatedDatetime() {
    return createdDatetime;
  }

  public void setCreatedDatetime(String createdDatetime) {
    this.createdDatetime = createdDatetime;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem changedDatetime(String changedDatetime) {
    this.changedDatetime = changedDatetime;
    return this;
  }

   /**
   * date and time when the domain entry was changed date and time (in the ISO 8601 format) when the domain entry was last modified example: \&quot;2021-01-14 08:36:28 +00:00\&quot;
   * @return changedDatetime
  **/
  @javax.annotation.Nullable
  public String getChangedDatetime() {
    return changedDatetime;
  }

  public void setChangedDatetime(String changedDatetime) {
    this.changedDatetime = changedDatetime;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem expirationDatetime(String expirationDatetime) {
    this.expirationDatetime = expirationDatetime;
    return this;
  }

   /**
   * date and time when the domain will expire date and time (in the ISO 8601 format) when the domain is due to expire example: \&quot;2022-11-26 17:21:23 +00:00\&quot;
   * @return expirationDatetime
  **/
  @javax.annotation.Nullable
  public String getExpirationDatetime() {
    return expirationDatetime;
  }

  public void setExpirationDatetime(String expirationDatetime) {
    this.expirationDatetime = expirationDatetime;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem updatedDatetime(String updatedDatetime) {
    this.updatedDatetime = updatedDatetime;
    return this;
  }

   /**
   * date and time when the domain was updated date and time (in the ISO 8601 format) when the domain was last updated example: \&quot;2021-01-29 13:59:38 +00:00\&quot;
   * @return updatedDatetime
  **/
  @javax.annotation.Nullable
  public String getUpdatedDatetime() {
    return updatedDatetime;
  }

  public void setUpdatedDatetime(String updatedDatetime) {
    this.updatedDatetime = updatedDatetime;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem firstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
    return this;
  }

   /**
   * date and time when our crawler found the domain for the first time in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: \&quot;2019-11-15 12:57:46 +00:00\&quot;
   * @return firstSeen
  **/
  @javax.annotation.Nullable
  public String getFirstSeen() {
    return firstSeen;
  }

  public void setFirstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem eppStatusCodes(List<String> eppStatusCodes) {
    this.eppStatusCodes = eppStatusCodes;
    return this;
  }

  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem addEppStatusCodesItem(String eppStatusCodesItem) {
    if (this.eppStatusCodes == null) {
      this.eppStatusCodes = new ArrayList<>();
    }
    this.eppStatusCodes.add(eppStatusCodesItem);
    return this;
  }

   /**
   * extensive provisioning protocol status codes the status of a domain name registration as defined by ICANN
   * @return eppStatusCodes
  **/
  @javax.annotation.Nullable
  public List<String> getEppStatusCodes() {
    return eppStatusCodes;
  }

  public void setEppStatusCodes(List<String> eppStatusCodes) {
    this.eppStatusCodes = eppStatusCodes;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem tld(String tld) {
    this.tld = tld;
    return this;
  }

   /**
   * top-level domain top-level domain in the DNS root zone
   * @return tld
  **/
  @javax.annotation.Nullable
  public String getTld() {
    return tld;
  }

  public void setTld(String tld) {
    this.tld = tld;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem registered(Boolean registered) {
    this.registered = registered;
    return this;
  }

   /**
   * domain registration status if false, the domain name registration has expired Note: expired domains will remain in the database for only a short period of time
   * @return registered
  **/
  @javax.annotation.Nullable
  public Boolean getRegistered() {
    return registered;
  }

  public void setRegistered(Boolean registered) {
    this.registered = registered;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem registrar(String registrar) {
    this.registrar = registrar;
    return this;
  }

   /**
   * domain registrar if null, the domain registrar is unknown example: NameCheap, Inc.
   * @return registrar
  **/
  @javax.annotation.Nullable
  public String getRegistrar() {
    return registrar;
  }

  public void setRegistrar(String registrar) {
    this.registrar = registrar;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem metrics(Map<String, DataforseoLabsMetricsInfo> metrics) {
    this.metrics = metrics;
    return this;
  }

  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem putMetricsItem(String key, DataforseoLabsMetricsInfo metricsItem) {
    if (this.metrics == null) {
      this.metrics = new HashMap<>();
    }
    this.metrics.put(key, metricsItem);
    return this;
  }

   /**
   * ranking data relevant to the specified domain
   * @return metrics
  **/
  @javax.annotation.Nullable
  public Map<String, DataforseoLabsMetricsInfo> getMetrics() {
    return metrics;
  }

  public void setMetrics(Map<String, DataforseoLabsMetricsInfo> metrics) {
    this.metrics = metrics;
  }


  public DataforseoLabsGoogleDomainWhoisOverviewLiveItem backlinksInfo(BacklinksInfo backlinksInfo) {
    this.backlinksInfo = backlinksInfo;
    return this;
  }

   /**
   * Get backlinksInfo
   * @return backlinksInfo
  **/
  @javax.annotation.Nullable
  public BacklinksInfo getBacklinksInfo() {
    return backlinksInfo;
  }

  public void setBacklinksInfo(BacklinksInfo backlinksInfo) {
    this.backlinksInfo = backlinksInfo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataforseoLabsGoogleDomainWhoisOverviewLiveItem dataforseoLabsGoogleDomainWhoisOverviewLiveItem = (DataforseoLabsGoogleDomainWhoisOverviewLiveItem) o;
    return Objects.equals(this.seType, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.seType) &&
        Objects.equals(this.domain, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.domain) &&
        Objects.equals(this.createdDatetime, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.createdDatetime) &&
        Objects.equals(this.changedDatetime, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.changedDatetime) &&
        Objects.equals(this.expirationDatetime, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.expirationDatetime) &&
        Objects.equals(this.updatedDatetime, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.updatedDatetime) &&
        Objects.equals(this.firstSeen, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.firstSeen) &&
        Objects.equals(this.eppStatusCodes, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.eppStatusCodes) &&
        Objects.equals(this.tld, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.tld) &&
        Objects.equals(this.registered, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.registered) &&
        Objects.equals(this.registrar, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.registrar) &&
        Objects.equals(this.metrics, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.metrics) &&
        Objects.equals(this.backlinksInfo, dataforseoLabsGoogleDomainWhoisOverviewLiveItem.backlinksInfo);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, domain, createdDatetime, changedDatetime, expirationDatetime, updatedDatetime, firstSeen, eppStatusCodes, tld, registered, registrar, metrics, backlinksInfo);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataforseoLabsGoogleDomainWhoisOverviewLiveItem {\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    createdDatetime: ").append(toIndentedString(createdDatetime)).append("\n");
    sb.append("    changedDatetime: ").append(toIndentedString(changedDatetime)).append("\n");
    sb.append("    expirationDatetime: ").append(toIndentedString(expirationDatetime)).append("\n");
    sb.append("    updatedDatetime: ").append(toIndentedString(updatedDatetime)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    eppStatusCodes: ").append(toIndentedString(eppStatusCodes)).append("\n");
    sb.append("    tld: ").append(toIndentedString(tld)).append("\n");
    sb.append("    registered: ").append(toIndentedString(registered)).append("\n");
    sb.append("    registrar: ").append(toIndentedString(registrar)).append("\n");
    sb.append("    metrics: ").append(toIndentedString(metrics)).append("\n");
    sb.append("    backlinksInfo: ").append(toIndentedString(backlinksInfo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("se_type");
    openapiFields.add("domain");
    openapiFields.add("created_datetime");
    openapiFields.add("changed_datetime");
    openapiFields.add("expiration_datetime");
    openapiFields.add("updated_datetime");
    openapiFields.add("first_seen");
    openapiFields.add("epp_status_codes");
    openapiFields.add("tld");
    openapiFields.add("registered");
    openapiFields.add("registrar");
    openapiFields.add("metrics");
    openapiFields.add("backlinks_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataforseoLabsGoogleDomainWhoisOverviewLiveItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataforseoLabsGoogleDomainWhoisOverviewLiveItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataforseoLabsGoogleDomainWhoisOverviewLiveItem is not found in the empty JSON string", DataforseoLabsGoogleDomainWhoisOverviewLiveItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataforseoLabsGoogleDomainWhoisOverviewLiveItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataforseoLabsGoogleDomainWhoisOverviewLiveItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("created_datetime") != null && !jsonObj.get("created_datetime").isJsonNull()) && !jsonObj.get("created_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_datetime").toString()));
      }
      if ((jsonObj.get("changed_datetime") != null && !jsonObj.get("changed_datetime").isJsonNull()) && !jsonObj.get("changed_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `changed_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("changed_datetime").toString()));
      }
      if ((jsonObj.get("expiration_datetime") != null && !jsonObj.get("expiration_datetime").isJsonNull()) && !jsonObj.get("expiration_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expiration_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expiration_datetime").toString()));
      }
      if ((jsonObj.get("updated_datetime") != null && !jsonObj.get("updated_datetime").isJsonNull()) && !jsonObj.get("updated_datetime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_datetime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_datetime").toString()));
      }
      if ((jsonObj.get("first_seen") != null && !jsonObj.get("first_seen").isJsonNull()) && !jsonObj.get("first_seen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_seen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_seen").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("epp_status_codes") != null && !jsonObj.get("epp_status_codes").isJsonNull() && !jsonObj.get("epp_status_codes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `epp_status_codes` to be an array in the JSON string but got `%s`", jsonObj.get("epp_status_codes").toString()));
      }
      if ((jsonObj.get("tld") != null && !jsonObj.get("tld").isJsonNull()) && !jsonObj.get("tld").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tld` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tld").toString()));
      }
      if ((jsonObj.get("registrar") != null && !jsonObj.get("registrar").isJsonNull()) && !jsonObj.get("registrar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrar").toString()));
      }
      // validate the optional field `backlinks_info`
      if (jsonObj.get("backlinks_info") != null && !jsonObj.get("backlinks_info").isJsonNull()) {
        BacklinksInfo.validateJsonElement(jsonObj.get("backlinks_info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataforseoLabsGoogleDomainWhoisOverviewLiveItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataforseoLabsGoogleDomainWhoisOverviewLiveItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataforseoLabsGoogleDomainWhoisOverviewLiveItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataforseoLabsGoogleDomainWhoisOverviewLiveItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DataforseoLabsGoogleDomainWhoisOverviewLiveItem>() {
           @Override
           public void write(JsonWriter out, DataforseoLabsGoogleDomainWhoisOverviewLiveItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataforseoLabsGoogleDomainWhoisOverviewLiveItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataforseoLabsGoogleDomainWhoisOverviewLiveItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataforseoLabsGoogleDomainWhoisOverviewLiveItem
  * @throws IOException if the JSON string is invalid with respect to DataforseoLabsGoogleDomainWhoisOverviewLiveItem
  */
  public static DataforseoLabsGoogleDomainWhoisOverviewLiveItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataforseoLabsGoogleDomainWhoisOverviewLiveItem.class);
  }

 /**
  * Convert an instance of DataforseoLabsGoogleDomainWhoisOverviewLiveItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

