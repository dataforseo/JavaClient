/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.dataforseo.client.model.TopicListDataItemInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * TrendsTopicListDataInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T10:30:03.431691300+03:00[Europe/Kiev]")
public class TrendsTopicListDataInfo {
  public static final String SERIALIZED_NAME_TOP = "top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private List<TopicListDataItemInfo> top;

  public static final String SERIALIZED_NAME_RISING = "rising";
  @SerializedName(SERIALIZED_NAME_RISING)
  private List<TopicListDataItemInfo> rising;

  public TrendsTopicListDataInfo() {
  }

  public TrendsTopicListDataInfo top(List<TopicListDataItemInfo> top) {
    this.top = top;
    return this;
  }

  public TrendsTopicListDataInfo addTopItem(TopicListDataItemInfo topItem) {
    if (this.top == null) {
      this.top = new ArrayList<>();
    }
    this.top.add(topItem);
    return this;
  }

   /**
   * the most popular related topics represents the list of the most popular related topics
   * @return top
  **/
  @javax.annotation.Nullable
  public List<TopicListDataItemInfo> getTop() {
    return top;
  }

  public void setTop(List<TopicListDataItemInfo> top) {
    this.top = top;
  }


  public TrendsTopicListDataInfo rising(List<TopicListDataItemInfo> rising) {
    this.rising = rising;
    return this;
  }

  public TrendsTopicListDataInfo addRisingItem(TopicListDataItemInfo risingItem) {
    if (this.rising == null) {
      this.rising = new ArrayList<>();
    }
    this.rising.add(risingItem);
    return this;
  }

   /**
   * emerging related topics represents the list of related topics with the biggest increase in search frequency since the last time period
   * @return rising
  **/
  @javax.annotation.Nullable
  public List<TopicListDataItemInfo> getRising() {
    return rising;
  }

  public void setRising(List<TopicListDataItemInfo> rising) {
    this.rising = rising;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TrendsTopicListDataInfo trendsTopicListDataInfo = (TrendsTopicListDataInfo) o;
    return Objects.equals(this.top, trendsTopicListDataInfo.top) &&
        Objects.equals(this.rising, trendsTopicListDataInfo.rising);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(top, rising);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TrendsTopicListDataInfo {\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("    rising: ").append(toIndentedString(rising)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("top");
    openapiFields.add("rising");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TrendsTopicListDataInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TrendsTopicListDataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TrendsTopicListDataInfo is not found in the empty JSON string", TrendsTopicListDataInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TrendsTopicListDataInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TrendsTopicListDataInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("top") != null && !jsonObj.get("top").isJsonNull()) {
        JsonArray jsonArraytop = jsonObj.getAsJsonArray("top");
        if (jsonArraytop != null) {
          // ensure the json data is an array
          if (!jsonObj.get("top").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `top` to be an array in the JSON string but got `%s`", jsonObj.get("top").toString()));
          }

          // validate the optional field `top` (array)
          for (int i = 0; i < jsonArraytop.size(); i++) {
            TopicListDataItemInfo.validateJsonElement(jsonArraytop.get(i));
          };
        }
      }
      if (jsonObj.get("rising") != null && !jsonObj.get("rising").isJsonNull()) {
        JsonArray jsonArrayrising = jsonObj.getAsJsonArray("rising");
        if (jsonArrayrising != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rising").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rising` to be an array in the JSON string but got `%s`", jsonObj.get("rising").toString()));
          }

          // validate the optional field `rising` (array)
          for (int i = 0; i < jsonArrayrising.size(); i++) {
            TopicListDataItemInfo.validateJsonElement(jsonArrayrising.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TrendsTopicListDataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TrendsTopicListDataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TrendsTopicListDataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TrendsTopicListDataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<TrendsTopicListDataInfo>() {
           @Override
           public void write(JsonWriter out, TrendsTopicListDataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TrendsTopicListDataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TrendsTopicListDataInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TrendsTopicListDataInfo
  * @throws IOException if the JSON string is invalid with respect to TrendsTopicListDataInfo
  */
  public static TrendsTopicListDataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TrendsTopicListDataInfo.class);
  }

 /**
  * Convert an instance of TrendsTopicListDataInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

