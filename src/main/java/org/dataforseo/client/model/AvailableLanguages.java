/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * AvailableLanguages
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-02T20:51:42.343286900+03:00[Europe/Kiev]")
public class AvailableLanguages {
  public static final String SERIALIZED_NAME_AVAILABLE_SOURCES = "available_sources";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_SOURCES)
  private List<String> availableSources;

  public static final String SERIALIZED_NAME_LANGUAGE_NAME = "language_name";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_NAME)
  private String languageName;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private Integer keywords;

  public static final String SERIALIZED_NAME_SERPS = "serps";
  @SerializedName(SERIALIZED_NAME_SERPS)
  private Integer serps;

  public AvailableLanguages() {
  }

  public AvailableLanguages availableSources(List<String> availableSources) {
    this.availableSources = availableSources;
    return this;
  }

  public AvailableLanguages addAvailableSourcesItem(String availableSourcesItem) {
    if (this.availableSources == null) {
      this.availableSources = new ArrayList<>();
    }
    this.availableSources.add(availableSourcesItem);
    return this;
  }

   /**
   * supported sources contains the sources of data supported for a specific location and language combination only google and bing are currently available
   * @return availableSources
  **/
  @javax.annotation.Nullable
  public List<String> getAvailableSources() {
    return availableSources;
  }

  public void setAvailableSources(List<String> availableSources) {
    this.availableSources = availableSources;
  }


  public AvailableLanguages languageName(String languageName) {
    this.languageName = languageName;
    return this;
  }

   /**
   * language name
   * @return languageName
  **/
  @javax.annotation.Nullable
  public String getLanguageName() {
    return languageName;
  }

  public void setLanguageName(String languageName) {
    this.languageName = languageName;
  }


  public AvailableLanguages languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

   /**
   * language code according to ISO 639-1
   * @return languageCode
  **/
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public AvailableLanguages keywords(Integer keywords) {
    this.keywords = keywords;
    return this;
  }

   /**
   * the number of keywords available for the given location and language
   * @return keywords
  **/
  @javax.annotation.Nullable
  public Integer getKeywords() {
    return keywords;
  }

  public void setKeywords(Integer keywords) {
    this.keywords = keywords;
  }


  public AvailableLanguages serps(Integer serps) {
    this.serps = serps;
    return this;
  }

   /**
   * the number of SERP pages available for the given location and language
   * @return serps
  **/
  @javax.annotation.Nullable
  public Integer getSerps() {
    return serps;
  }

  public void setSerps(Integer serps) {
    this.serps = serps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableLanguages availableLanguages = (AvailableLanguages) o;
    return Objects.equals(this.availableSources, availableLanguages.availableSources) &&
        Objects.equals(this.languageName, availableLanguages.languageName) &&
        Objects.equals(this.languageCode, availableLanguages.languageCode) &&
        Objects.equals(this.keywords, availableLanguages.keywords) &&
        Objects.equals(this.serps, availableLanguages.serps);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(availableSources, languageName, languageCode, keywords, serps);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableLanguages {\n");
    sb.append("    availableSources: ").append(toIndentedString(availableSources)).append("\n");
    sb.append("    languageName: ").append(toIndentedString(languageName)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    serps: ").append(toIndentedString(serps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("available_sources");
    openapiFields.add("language_name");
    openapiFields.add("language_code");
    openapiFields.add("keywords");
    openapiFields.add("serps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to AvailableLanguages
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableLanguages.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableLanguages is not found in the empty JSON string", AvailableLanguages.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableLanguages.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableLanguages` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("available_sources") != null && !jsonObj.get("available_sources").isJsonNull() && !jsonObj.get("available_sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_sources` to be an array in the JSON string but got `%s`", jsonObj.get("available_sources").toString()));
      }
      if ((jsonObj.get("language_name") != null && !jsonObj.get("language_name").isJsonNull()) && !jsonObj.get("language_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_name").toString()));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableLanguages.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableLanguages' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableLanguages> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableLanguages.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableLanguages>() {
           @Override
           public void write(JsonWriter out, AvailableLanguages value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableLanguages read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AvailableLanguages given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AvailableLanguages
  * @throws IOException if the JSON string is invalid with respect to AvailableLanguages
  */
  public static AvailableLanguages fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableLanguages.class);
  }

 /**
  * Convert an instance of AvailableLanguages to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

