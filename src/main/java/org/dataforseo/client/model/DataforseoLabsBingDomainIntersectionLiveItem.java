/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.dataforseo.client.model.BaseDataforseoLabsSerpElementItem;
import org.dataforseo.client.model.KeywordDataKeywordDataInfo;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * DataforseoLabsBingDomainIntersectionLiveItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-06-13T10:30:03.431691300+03:00[Europe/Kiev]")
public class DataforseoLabsBingDomainIntersectionLiveItem {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_KEYWORD_DATA = "keyword_data";
  @SerializedName(SERIALIZED_NAME_KEYWORD_DATA)
  private KeywordDataKeywordDataInfo keywordData;

  public static final String SERIALIZED_NAME_FIRST_DOMAIN_SERP_ELEMENT = "first_domain_serp_element";
  @SerializedName(SERIALIZED_NAME_FIRST_DOMAIN_SERP_ELEMENT)
  private BaseDataforseoLabsSerpElementItem firstDomainSerpElement;

  public static final String SERIALIZED_NAME_SECOND_DOMAIN_SERP_ELEMENT = "second_domain_serp_element";
  @SerializedName(SERIALIZED_NAME_SECOND_DOMAIN_SERP_ELEMENT)
  private BaseDataforseoLabsSerpElementItem secondDomainSerpElement;

  public DataforseoLabsBingDomainIntersectionLiveItem() {
  }

  public DataforseoLabsBingDomainIntersectionLiveItem seType(String seType) {
    this.seType = seType;
    return this;
  }

   /**
   * search engine type search engine type specified in a POST request; for this endpoint, the field equals bing
   * @return seType
  **/
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public DataforseoLabsBingDomainIntersectionLiveItem keywordData(KeywordDataKeywordDataInfo keywordData) {
    this.keywordData = keywordData;
    return this;
  }

   /**
   * Get keywordData
   * @return keywordData
  **/
  @javax.annotation.Nullable
  public KeywordDataKeywordDataInfo getKeywordData() {
    return keywordData;
  }

  public void setKeywordData(KeywordDataKeywordDataInfo keywordData) {
    this.keywordData = keywordData;
  }


  public DataforseoLabsBingDomainIntersectionLiveItem firstDomainSerpElement(BaseDataforseoLabsSerpElementItem firstDomainSerpElement) {
    this.firstDomainSerpElement = firstDomainSerpElement;
    return this;
  }

   /**
   * Get firstDomainSerpElement
   * @return firstDomainSerpElement
  **/
  @javax.annotation.Nullable
  public BaseDataforseoLabsSerpElementItem getFirstDomainSerpElement() {
    return firstDomainSerpElement;
  }

  public void setFirstDomainSerpElement(BaseDataforseoLabsSerpElementItem firstDomainSerpElement) {
    this.firstDomainSerpElement = firstDomainSerpElement;
  }


  public DataforseoLabsBingDomainIntersectionLiveItem secondDomainSerpElement(BaseDataforseoLabsSerpElementItem secondDomainSerpElement) {
    this.secondDomainSerpElement = secondDomainSerpElement;
    return this;
  }

   /**
   * Get secondDomainSerpElement
   * @return secondDomainSerpElement
  **/
  @javax.annotation.Nullable
  public BaseDataforseoLabsSerpElementItem getSecondDomainSerpElement() {
    return secondDomainSerpElement;
  }

  public void setSecondDomainSerpElement(BaseDataforseoLabsSerpElementItem secondDomainSerpElement) {
    this.secondDomainSerpElement = secondDomainSerpElement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataforseoLabsBingDomainIntersectionLiveItem dataforseoLabsBingDomainIntersectionLiveItem = (DataforseoLabsBingDomainIntersectionLiveItem) o;
    return Objects.equals(this.seType, dataforseoLabsBingDomainIntersectionLiveItem.seType) &&
        Objects.equals(this.keywordData, dataforseoLabsBingDomainIntersectionLiveItem.keywordData) &&
        Objects.equals(this.firstDomainSerpElement, dataforseoLabsBingDomainIntersectionLiveItem.firstDomainSerpElement) &&
        Objects.equals(this.secondDomainSerpElement, dataforseoLabsBingDomainIntersectionLiveItem.secondDomainSerpElement);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, keywordData, firstDomainSerpElement, secondDomainSerpElement);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataforseoLabsBingDomainIntersectionLiveItem {\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    keywordData: ").append(toIndentedString(keywordData)).append("\n");
    sb.append("    firstDomainSerpElement: ").append(toIndentedString(firstDomainSerpElement)).append("\n");
    sb.append("    secondDomainSerpElement: ").append(toIndentedString(secondDomainSerpElement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("se_type");
    openapiFields.add("keyword_data");
    openapiFields.add("first_domain_serp_element");
    openapiFields.add("second_domain_serp_element");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DataforseoLabsBingDomainIntersectionLiveItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataforseoLabsBingDomainIntersectionLiveItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataforseoLabsBingDomainIntersectionLiveItem is not found in the empty JSON string", DataforseoLabsBingDomainIntersectionLiveItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataforseoLabsBingDomainIntersectionLiveItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataforseoLabsBingDomainIntersectionLiveItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      // validate the optional field `keyword_data`
      if (jsonObj.get("keyword_data") != null && !jsonObj.get("keyword_data").isJsonNull()) {
        KeywordDataKeywordDataInfo.validateJsonElement(jsonObj.get("keyword_data"));
      }
      // validate the optional field `first_domain_serp_element`
      if (jsonObj.get("first_domain_serp_element") != null && !jsonObj.get("first_domain_serp_element").isJsonNull()) {
        BaseDataforseoLabsSerpElementItem.validateJsonElement(jsonObj.get("first_domain_serp_element"));
      }
      // validate the optional field `second_domain_serp_element`
      if (jsonObj.get("second_domain_serp_element") != null && !jsonObj.get("second_domain_serp_element").isJsonNull()) {
        BaseDataforseoLabsSerpElementItem.validateJsonElement(jsonObj.get("second_domain_serp_element"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataforseoLabsBingDomainIntersectionLiveItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataforseoLabsBingDomainIntersectionLiveItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataforseoLabsBingDomainIntersectionLiveItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataforseoLabsBingDomainIntersectionLiveItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DataforseoLabsBingDomainIntersectionLiveItem>() {
           @Override
           public void write(JsonWriter out, DataforseoLabsBingDomainIntersectionLiveItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataforseoLabsBingDomainIntersectionLiveItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataforseoLabsBingDomainIntersectionLiveItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataforseoLabsBingDomainIntersectionLiveItem
  * @throws IOException if the JSON string is invalid with respect to DataforseoLabsBingDomainIntersectionLiveItem
  */
  public static DataforseoLabsBingDomainIntersectionLiveItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataforseoLabsBingDomainIntersectionLiveItem.class);
  }

 /**
  * Convert an instance of DataforseoLabsBingDomainIntersectionLiveItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

