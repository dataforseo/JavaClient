/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.dataforseo.client.model.LocationChain;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.dataforseo.client.JSON;

/**
 * HotelLocationInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-19T15:18:23.103906100+03:00[Europe/Kiev]")
public class HotelLocationInfo {
  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_NEIGHBORHOOD_DESCRIPTION = "neighborhood_description";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD_DESCRIPTION)
  private String neighborhoodDescription;

  public static final String SERIALIZED_NAME_MAPS_URL = "maps_url";
  @SerializedName(SERIALIZED_NAME_MAPS_URL)
  private String mapsUrl;

  public static final String SERIALIZED_NAME_OVERALL_SCORE = "overall_score";
  @SerializedName(SERIALIZED_NAME_OVERALL_SCORE)
  private Float overallScore;

  public static final String SERIALIZED_NAME_SCORE_BY_CATEGORIES = "score_by_categories";
  @SerializedName(SERIALIZED_NAME_SCORE_BY_CATEGORIES)
  private Map<String, Double> scoreByCategories;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Float latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Float longitude;

  public static final String SERIALIZED_NAME_LOCATION_CHAIN = "location_chain";
  @SerializedName(SERIALIZED_NAME_LOCATION_CHAIN)
  private List<LocationChain> locationChain;

  public HotelLocationInfo() {
  }

  public HotelLocationInfo neighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
    return this;
  }

   /**
   * name of the neighborhood where the hotel is located
   * @return neighborhood
  **/
  @javax.annotation.Nullable
  public String getNeighborhood() {
    return neighborhood;
  }

  public void setNeighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
  }


  public HotelLocationInfo neighborhoodDescription(String neighborhoodDescription) {
    this.neighborhoodDescription = neighborhoodDescription;
    return this;
  }

   /**
   * description of the neighborhood where the hotel is located
   * @return neighborhoodDescription
  **/
  @javax.annotation.Nullable
  public String getNeighborhoodDescription() {
    return neighborhoodDescription;
  }

  public void setNeighborhoodDescription(String neighborhoodDescription) {
    this.neighborhoodDescription = neighborhoodDescription;
  }


  public HotelLocationInfo mapsUrl(String mapsUrl) {
    this.mapsUrl = mapsUrl;
    return this;
  }

   /**
   * url to the location of the hotel in google maps
   * @return mapsUrl
  **/
  @javax.annotation.Nullable
  public String getMapsUrl() {
    return mapsUrl;
  }

  public void setMapsUrl(String mapsUrl) {
    this.mapsUrl = mapsUrl;
  }


  public HotelLocationInfo overallScore(Float overallScore) {
    this.overallScore = overallScore;
    return this;
  }

   /**
   * overall score of the hotel location indicates the overall score of the hotel’s location in the range from 1 to 5; calculated based on data from the hotel’s proximity to nearby things to do and restaurants, transportation, and airports; note that the criteria are not weighted equally in the overall score
   * @return overallScore
  **/
  @javax.annotation.Nullable
  public Float getOverallScore() {
    return overallScore;
  }

  public void setOverallScore(Float overallScore) {
    this.overallScore = overallScore;
  }


  public HotelLocationInfo scoreByCategories(Map<String, Double> scoreByCategories) {
    this.scoreByCategories = scoreByCategories;
    return this;
  }

  public HotelLocationInfo putScoreByCategoriesItem(String key, Double scoreByCategoriesItem) {
    if (this.scoreByCategories == null) {
      this.scoreByCategories = new HashMap<>();
    }
    this.scoreByCategories.put(key, scoreByCategoriesItem);
    return this;
  }

   /**
   * category scores of the hotel location the scores of the hotel’s location tied to the categories that indicate the proximity to nearby things to do, restaurants, transportation, and airports;
   * @return scoreByCategories
  **/
  @javax.annotation.Nullable
  public Map<String, Double> getScoreByCategories() {
    return scoreByCategories;
  }

  public void setScoreByCategories(Map<String, Double> scoreByCategories) {
    this.scoreByCategories = scoreByCategories;
  }


  public HotelLocationInfo latitude(Float latitude) {
    this.latitude = latitude;
    return this;
  }

   /**
   * hotel latitude latitude coordinates of the hotel’s location example: 39.4806397
   * @return latitude
  **/
  @javax.annotation.Nullable
  public Float getLatitude() {
    return latitude;
  }

  public void setLatitude(Float latitude) {
    this.latitude = latitude;
  }


  public HotelLocationInfo longitude(Float longitude) {
    this.longitude = longitude;
    return this;
  }

   /**
   * hotel longitude latitude coordinates of the hotel’s location example: -106.0512973
   * @return longitude
  **/
  @javax.annotation.Nullable
  public Float getLongitude() {
    return longitude;
  }

  public void setLongitude(Float longitude) {
    this.longitude = longitude;
  }


  public HotelLocationInfo locationChain(List<LocationChain> locationChain) {
    this.locationChain = locationChain;
    return this;
  }

  public HotelLocationInfo addLocationChainItem(LocationChain locationChainItem) {
    if (this.locationChain == null) {
      this.locationChain = new ArrayList<>();
    }
    this.locationChain.add(locationChainItem);
    return this;
  }

   /**
   * elements of the location chain additional parameters of each element of the location chain
   * @return locationChain
  **/
  @javax.annotation.Nullable
  public List<LocationChain> getLocationChain() {
    return locationChain;
  }

  public void setLocationChain(List<LocationChain> locationChain) {
    this.locationChain = locationChain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HotelLocationInfo hotelLocationInfo = (HotelLocationInfo) o;
    return Objects.equals(this.neighborhood, hotelLocationInfo.neighborhood) &&
        Objects.equals(this.neighborhoodDescription, hotelLocationInfo.neighborhoodDescription) &&
        Objects.equals(this.mapsUrl, hotelLocationInfo.mapsUrl) &&
        Objects.equals(this.overallScore, hotelLocationInfo.overallScore) &&
        Objects.equals(this.scoreByCategories, hotelLocationInfo.scoreByCategories) &&
        Objects.equals(this.latitude, hotelLocationInfo.latitude) &&
        Objects.equals(this.longitude, hotelLocationInfo.longitude) &&
        Objects.equals(this.locationChain, hotelLocationInfo.locationChain);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(neighborhood, neighborhoodDescription, mapsUrl, overallScore, scoreByCategories, latitude, longitude, locationChain);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HotelLocationInfo {\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    neighborhoodDescription: ").append(toIndentedString(neighborhoodDescription)).append("\n");
    sb.append("    mapsUrl: ").append(toIndentedString(mapsUrl)).append("\n");
    sb.append("    overallScore: ").append(toIndentedString(overallScore)).append("\n");
    sb.append("    scoreByCategories: ").append(toIndentedString(scoreByCategories)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    locationChain: ").append(toIndentedString(locationChain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("neighborhood");
    openapiFields.add("neighborhood_description");
    openapiFields.add("maps_url");
    openapiFields.add("overall_score");
    openapiFields.add("score_by_categories");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("location_chain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to HotelLocationInfo
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HotelLocationInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HotelLocationInfo is not found in the empty JSON string", HotelLocationInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HotelLocationInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HotelLocationInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("neighborhood") != null && !jsonObj.get("neighborhood").isJsonNull()) && !jsonObj.get("neighborhood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood").toString()));
      }
      if ((jsonObj.get("neighborhood_description") != null && !jsonObj.get("neighborhood_description").isJsonNull()) && !jsonObj.get("neighborhood_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood_description").toString()));
      }
      if ((jsonObj.get("maps_url") != null && !jsonObj.get("maps_url").isJsonNull()) && !jsonObj.get("maps_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maps_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maps_url").toString()));
      }
      if (jsonObj.get("location_chain") != null && !jsonObj.get("location_chain").isJsonNull()) {
        JsonArray jsonArraylocationChain = jsonObj.getAsJsonArray("location_chain");
        if (jsonArraylocationChain != null) {
          // ensure the json data is an array
          if (!jsonObj.get("location_chain").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `location_chain` to be an array in the JSON string but got `%s`", jsonObj.get("location_chain").toString()));
          }

          // validate the optional field `location_chain` (array)
          for (int i = 0; i < jsonArraylocationChain.size(); i++) {
            LocationChain.validateJsonElement(jsonArraylocationChain.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HotelLocationInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HotelLocationInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HotelLocationInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HotelLocationInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<HotelLocationInfo>() {
           @Override
           public void write(JsonWriter out, HotelLocationInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HotelLocationInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of HotelLocationInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of HotelLocationInfo
  * @throws IOException if the JSON string is invalid with respect to HotelLocationInfo
  */
  public static HotelLocationInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HotelLocationInfo.class);
  }

 /**
  * Convert an instance of HotelLocationInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

