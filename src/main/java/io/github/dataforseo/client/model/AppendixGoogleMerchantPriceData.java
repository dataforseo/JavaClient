/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.AppendixPriceDataInfo;
import io.github.dataforseo.client.model.AppendixProductGoogleMerchantPriceDataInfo;
import io.github.dataforseo.client.model.AppendixSellersGoogleMerchantPriceData;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * AppendixGoogleMerchantPriceData
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-27T21:03:13.693366700+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class AppendixGoogleMerchantPriceData {
  public static final String SERIALIZED_NAME_PRODUCT_INFO = "product_info";
  @SerializedName(SERIALIZED_NAME_PRODUCT_INFO)
  private AppendixPriceDataInfo productInfo;

  public static final String SERIALIZED_NAME_PRODUCT_SPEC = "product_spec";
  @SerializedName(SERIALIZED_NAME_PRODUCT_SPEC)
  private AppendixProductGoogleMerchantPriceDataInfo productSpec;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private AppendixProductGoogleMerchantPriceDataInfo products;

  public static final String SERIALIZED_NAME_SELLERS = "sellers";
  @SerializedName(SERIALIZED_NAME_SELLERS)
  private AppendixSellersGoogleMerchantPriceData sellers;

  public AppendixGoogleMerchantPriceData() {
  }

  public AppendixGoogleMerchantPriceData productInfo(AppendixPriceDataInfo productInfo) {
    this.productInfo = productInfo;
    return this;
  }

  /**
   * Get productInfo
   * @return productInfo
   */
  @javax.annotation.Nullable
  public AppendixPriceDataInfo getProductInfo() {
    return productInfo;
  }

  public void setProductInfo(AppendixPriceDataInfo productInfo) {
    this.productInfo = productInfo;
  }


  public AppendixGoogleMerchantPriceData productSpec(AppendixProductGoogleMerchantPriceDataInfo productSpec) {
    this.productSpec = productSpec;
    return this;
  }

  /**
   * Get productSpec
   * @return productSpec
   */
  @javax.annotation.Nullable
  public AppendixProductGoogleMerchantPriceDataInfo getProductSpec() {
    return productSpec;
  }

  public void setProductSpec(AppendixProductGoogleMerchantPriceDataInfo productSpec) {
    this.productSpec = productSpec;
  }


  public AppendixGoogleMerchantPriceData products(AppendixProductGoogleMerchantPriceDataInfo products) {
    this.products = products;
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public AppendixProductGoogleMerchantPriceDataInfo getProducts() {
    return products;
  }

  public void setProducts(AppendixProductGoogleMerchantPriceDataInfo products) {
    this.products = products;
  }


  public AppendixGoogleMerchantPriceData sellers(AppendixSellersGoogleMerchantPriceData sellers) {
    this.sellers = sellers;
    return this;
  }

  /**
   * Get sellers
   * @return sellers
   */
  @javax.annotation.Nullable
  public AppendixSellersGoogleMerchantPriceData getSellers() {
    return sellers;
  }

  public void setSellers(AppendixSellersGoogleMerchantPriceData sellers) {
    this.sellers = sellers;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AppendixGoogleMerchantPriceData instance itself
   */
  public AppendixGoogleMerchantPriceData putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppendixGoogleMerchantPriceData appendixGoogleMerchantPriceData = (AppendixGoogleMerchantPriceData) o;
    return Objects.equals(this.productInfo, appendixGoogleMerchantPriceData.productInfo) &&
        Objects.equals(this.productSpec, appendixGoogleMerchantPriceData.productSpec) &&
        Objects.equals(this.products, appendixGoogleMerchantPriceData.products) &&
        Objects.equals(this.sellers, appendixGoogleMerchantPriceData.sellers)&&
        Objects.equals(this.additionalProperties, appendixGoogleMerchantPriceData.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(productInfo, productSpec, products, sellers, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppendixGoogleMerchantPriceData {\n");
    sb.append("    productInfo: ").append(toIndentedString(productInfo)).append("\n");
    sb.append("    productSpec: ").append(toIndentedString(productSpec)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    sellers: ").append(toIndentedString(sellers)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("product_info");
    openapiFields.add("product_spec");
    openapiFields.add("products");
    openapiFields.add("sellers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AppendixGoogleMerchantPriceData
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AppendixGoogleMerchantPriceData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AppendixGoogleMerchantPriceData is not found in the empty JSON string", AppendixGoogleMerchantPriceData.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `product_info`
      if (jsonObj.get("product_info") != null && !jsonObj.get("product_info").isJsonNull()) {
        AppendixPriceDataInfo.validateJsonElement(jsonObj.get("product_info"));
      }
      // validate the optional field `product_spec`
      if (jsonObj.get("product_spec") != null && !jsonObj.get("product_spec").isJsonNull()) {
        AppendixProductGoogleMerchantPriceDataInfo.validateJsonElement(jsonObj.get("product_spec"));
      }
      // validate the optional field `products`
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        AppendixProductGoogleMerchantPriceDataInfo.validateJsonElement(jsonObj.get("products"));
      }
      // validate the optional field `sellers`
      if (jsonObj.get("sellers") != null && !jsonObj.get("sellers").isJsonNull()) {
        AppendixSellersGoogleMerchantPriceData.validateJsonElement(jsonObj.get("sellers"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AppendixGoogleMerchantPriceData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AppendixGoogleMerchantPriceData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AppendixGoogleMerchantPriceData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AppendixGoogleMerchantPriceData.class));

       return (TypeAdapter<T>) new TypeAdapter<AppendixGoogleMerchantPriceData>() {
           @Override
           public void write(JsonWriter out, AppendixGoogleMerchantPriceData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AppendixGoogleMerchantPriceData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AppendixGoogleMerchantPriceData instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AppendixGoogleMerchantPriceData given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AppendixGoogleMerchantPriceData
   * @throws IOException if the JSON string is invalid with respect to AppendixGoogleMerchantPriceData
   */
  public static AppendixGoogleMerchantPriceData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AppendixGoogleMerchantPriceData.class);
  }

  /**
   * Convert an instance of AppendixGoogleMerchantPriceData to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

