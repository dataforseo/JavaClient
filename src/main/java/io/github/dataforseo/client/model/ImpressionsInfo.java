/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * ImpressionsInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T14:14:20.254791+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class ImpressionsInfo {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_LAST_UPDATED_TIME = "last_updated_time";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED_TIME)
  private String lastUpdatedTime;

  public static final String SERIALIZED_NAME_BID = "bid";
  @SerializedName(SERIALIZED_NAME_BID)
  private Long bid;

  public static final String SERIALIZED_NAME_MATCH_TYPE = "match_type";
  @SerializedName(SERIALIZED_NAME_MATCH_TYPE)
  private String matchType;

  public static final String SERIALIZED_NAME_AD_POSITION_MIN = "ad_position_min";
  @SerializedName(SERIALIZED_NAME_AD_POSITION_MIN)
  private Float adPositionMin;

  public static final String SERIALIZED_NAME_AD_POSITION_MAX = "ad_position_max";
  @SerializedName(SERIALIZED_NAME_AD_POSITION_MAX)
  private Float adPositionMax;

  public static final String SERIALIZED_NAME_AD_POSITION_AVERAGE = "ad_position_average";
  @SerializedName(SERIALIZED_NAME_AD_POSITION_AVERAGE)
  private Double adPositionAverage;

  public static final String SERIALIZED_NAME_CPC_MIN = "cpc_min";
  @SerializedName(SERIALIZED_NAME_CPC_MIN)
  private Float cpcMin;

  public static final String SERIALIZED_NAME_CPC_MAX = "cpc_max";
  @SerializedName(SERIALIZED_NAME_CPC_MAX)
  private Float cpcMax;

  public static final String SERIALIZED_NAME_CPC_AVERAGE = "cpc_average";
  @SerializedName(SERIALIZED_NAME_CPC_AVERAGE)
  private Double cpcAverage;

  public static final String SERIALIZED_NAME_DAILY_IMPRESSIONS_MIN = "daily_impressions_min";
  @SerializedName(SERIALIZED_NAME_DAILY_IMPRESSIONS_MIN)
  private Float dailyImpressionsMin;

  public static final String SERIALIZED_NAME_DAILY_IMPRESSIONS_MAX = "daily_impressions_max";
  @SerializedName(SERIALIZED_NAME_DAILY_IMPRESSIONS_MAX)
  private Float dailyImpressionsMax;

  public static final String SERIALIZED_NAME_DAILY_IMPRESSIONS_AVERAGE = "daily_impressions_average";
  @SerializedName(SERIALIZED_NAME_DAILY_IMPRESSIONS_AVERAGE)
  private Double dailyImpressionsAverage;

  public static final String SERIALIZED_NAME_DAILY_CLICKS_MIN = "daily_clicks_min";
  @SerializedName(SERIALIZED_NAME_DAILY_CLICKS_MIN)
  private Float dailyClicksMin;

  public static final String SERIALIZED_NAME_DAILY_CLICKS_MAX = "daily_clicks_max";
  @SerializedName(SERIALIZED_NAME_DAILY_CLICKS_MAX)
  private Float dailyClicksMax;

  public static final String SERIALIZED_NAME_DAILY_CLICKS_AVERAGE = "daily_clicks_average";
  @SerializedName(SERIALIZED_NAME_DAILY_CLICKS_AVERAGE)
  private Double dailyClicksAverage;

  public static final String SERIALIZED_NAME_DAILY_COST_MIN = "daily_cost_min";
  @SerializedName(SERIALIZED_NAME_DAILY_COST_MIN)
  private Float dailyCostMin;

  public static final String SERIALIZED_NAME_DAILY_COST_MAX = "daily_cost_max";
  @SerializedName(SERIALIZED_NAME_DAILY_COST_MAX)
  private Float dailyCostMax;

  public static final String SERIALIZED_NAME_DAILY_COST_AVERAGE = "daily_cost_average";
  @SerializedName(SERIALIZED_NAME_DAILY_COST_AVERAGE)
  private Double dailyCostAverage;

  public ImpressionsInfo() {
  }

  public ImpressionsInfo seType(String seType) {
    this.seType = seType;
    return this;
  }

  /**
   * search engine type
   * @return seType
   */
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public ImpressionsInfo lastUpdatedTime(String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
    return this;
  }

  /**
   * date and time when SERP data was updated in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return lastUpdatedTime
   */
  @javax.annotation.Nullable
  public String getLastUpdatedTime() {
    return lastUpdatedTime;
  }

  public void setLastUpdatedTime(String lastUpdatedTime) {
    this.lastUpdatedTime = lastUpdatedTime;
  }


  public ImpressionsInfo bid(Long bid) {
    this.bid = bid;
    return this;
  }

  /**
   * the maximum CPC it stands for the price you are willing to pay for an ad. The higher value, the higher positions and price you will getwe return the results for the 999 bid value to provide the highest number of impressions and level down the account-specific factors
   * @return bid
   */
  @javax.annotation.Nullable
  public Long getBid() {
    return bid;
  }

  public void setBid(Long bid) {
    this.bid = bid;
  }


  public ImpressionsInfo matchType(String matchType) {
    this.matchType = matchType;
    return this;
  }

  /**
   * type of keyword match can take the following values: exact, broad, phrase
   * @return matchType
   */
  @javax.annotation.Nullable
  public String getMatchType() {
    return matchType;
  }

  public void setMatchType(String matchType) {
    this.matchType = matchType;
  }


  public ImpressionsInfo adPositionMin(Float adPositionMin) {
    this.adPositionMin = adPositionMin;
    return this;
  }

  /**
   * the minimum ad position represents the minimum position of the advertisement
   * @return adPositionMin
   */
  @javax.annotation.Nullable
  public Float getAdPositionMin() {
    return adPositionMin;
  }

  public void setAdPositionMin(Float adPositionMin) {
    this.adPositionMin = adPositionMin;
  }


  public ImpressionsInfo adPositionMax(Float adPositionMax) {
    this.adPositionMax = adPositionMax;
    return this;
  }

  /**
   * the maximum ad position represents the maximum position of the advertisement
   * @return adPositionMax
   */
  @javax.annotation.Nullable
  public Float getAdPositionMax() {
    return adPositionMax;
  }

  public void setAdPositionMax(Float adPositionMax) {
    this.adPositionMax = adPositionMax;
  }


  public ImpressionsInfo adPositionAverage(Double adPositionAverage) {
    this.adPositionAverage = adPositionAverage;
    return this;
  }

  /**
   * the average ad position represents the average position of the advertisement
   * @return adPositionAverage
   */
  @javax.annotation.Nullable
  public Double getAdPositionAverage() {
    return adPositionAverage;
  }

  public void setAdPositionAverage(Double adPositionAverage) {
    this.adPositionAverage = adPositionAverage;
  }


  public ImpressionsInfo cpcMin(Float cpcMin) {
    this.cpcMin = cpcMin;
    return this;
  }

  /**
   * the minimum value of cost-per-click the minimum cost-per-click (USD) for the keyword given that a bid is set to 999; note: this field does not represent an actual CPC value; you can find an actual CPC value for a keyword in the cpc field of the keyword_info object
   * @return cpcMin
   */
  @javax.annotation.Nullable
  public Float getCpcMin() {
    return cpcMin;
  }

  public void setCpcMin(Float cpcMin) {
    this.cpcMin = cpcMin;
  }


  public ImpressionsInfo cpcMax(Float cpcMax) {
    this.cpcMax = cpcMax;
    return this;
  }

  /**
   * the maximum value of cost-per-click the maximum cost-per-click (USD) for the keyword given that a bid is set to 999; note: this field does not represent an actual CPC value; you can find an actual CPC value for a keyword in the cpc field of the keyword_info object
   * @return cpcMax
   */
  @javax.annotation.Nullable
  public Float getCpcMax() {
    return cpcMax;
  }

  public void setCpcMax(Float cpcMax) {
    this.cpcMax = cpcMax;
  }


  public ImpressionsInfo cpcAverage(Double cpcAverage) {
    this.cpcAverage = cpcAverage;
    return this;
  }

  /**
   * the average value of cost-per-click the average cost-per-click (USD) for the keyword given that a bid is set to 999; note: this field does not represent an actual CPC value; you can find an actual CPC value for a keyword in the cpc field of the keyword_info object
   * @return cpcAverage
   */
  @javax.annotation.Nullable
  public Double getCpcAverage() {
    return cpcAverage;
  }

  public void setCpcAverage(Double cpcAverage) {
    this.cpcAverage = cpcAverage;
  }


  public ImpressionsInfo dailyImpressionsMin(Float dailyImpressionsMin) {
    this.dailyImpressionsMin = dailyImpressionsMin;
    return this;
  }

  /**
   * the minimum value of daily impressions represents the minimum number of daily impressions of the advertisement given that that a bid is set to 999; provides a more accurate alternative to Google search volume data
   * @return dailyImpressionsMin
   */
  @javax.annotation.Nullable
  public Float getDailyImpressionsMin() {
    return dailyImpressionsMin;
  }

  public void setDailyImpressionsMin(Float dailyImpressionsMin) {
    this.dailyImpressionsMin = dailyImpressionsMin;
  }


  public ImpressionsInfo dailyImpressionsMax(Float dailyImpressionsMax) {
    this.dailyImpressionsMax = dailyImpressionsMax;
    return this;
  }

  /**
   * the maximum value of daily impressions represents the maximum number of daily impressions of the advertisement given that that a bid is set to 999; provides a more accurate alternative to Google search volume data
   * @return dailyImpressionsMax
   */
  @javax.annotation.Nullable
  public Float getDailyImpressionsMax() {
    return dailyImpressionsMax;
  }

  public void setDailyImpressionsMax(Float dailyImpressionsMax) {
    this.dailyImpressionsMax = dailyImpressionsMax;
  }


  public ImpressionsInfo dailyImpressionsAverage(Double dailyImpressionsAverage) {
    this.dailyImpressionsAverage = dailyImpressionsAverage;
    return this;
  }

  /**
   * the average value of daily impressions represents the average number of daily impressions of the advertisement given that that a bid is set to 999; provides a more accurate alternative to Google search volume data
   * @return dailyImpressionsAverage
   */
  @javax.annotation.Nullable
  public Double getDailyImpressionsAverage() {
    return dailyImpressionsAverage;
  }

  public void setDailyImpressionsAverage(Double dailyImpressionsAverage) {
    this.dailyImpressionsAverage = dailyImpressionsAverage;
  }


  public ImpressionsInfo dailyClicksMin(Float dailyClicksMin) {
    this.dailyClicksMin = dailyClicksMin;
    return this;
  }

  /**
   * the minimum value of daily clicks represents the minimum number of daily clicks on the advertisement
   * @return dailyClicksMin
   */
  @javax.annotation.Nullable
  public Float getDailyClicksMin() {
    return dailyClicksMin;
  }

  public void setDailyClicksMin(Float dailyClicksMin) {
    this.dailyClicksMin = dailyClicksMin;
  }


  public ImpressionsInfo dailyClicksMax(Float dailyClicksMax) {
    this.dailyClicksMax = dailyClicksMax;
    return this;
  }

  /**
   * the maximum value of daily clicks represents the maximum number of daily clicks on the advertisement
   * @return dailyClicksMax
   */
  @javax.annotation.Nullable
  public Float getDailyClicksMax() {
    return dailyClicksMax;
  }

  public void setDailyClicksMax(Float dailyClicksMax) {
    this.dailyClicksMax = dailyClicksMax;
  }


  public ImpressionsInfo dailyClicksAverage(Double dailyClicksAverage) {
    this.dailyClicksAverage = dailyClicksAverage;
    return this;
  }

  /**
   * the average value of daily clicks represents the average number of daily clicks on the advertisement
   * @return dailyClicksAverage
   */
  @javax.annotation.Nullable
  public Double getDailyClicksAverage() {
    return dailyClicksAverage;
  }

  public void setDailyClicksAverage(Double dailyClicksAverage) {
    this.dailyClicksAverage = dailyClicksAverage;
  }


  public ImpressionsInfo dailyCostMin(Float dailyCostMin) {
    this.dailyCostMin = dailyCostMin;
    return this;
  }

  /**
   * the minimum daily charge value represents the minimum daily cost of the advertisement (USD)
   * @return dailyCostMin
   */
  @javax.annotation.Nullable
  public Float getDailyCostMin() {
    return dailyCostMin;
  }

  public void setDailyCostMin(Float dailyCostMin) {
    this.dailyCostMin = dailyCostMin;
  }


  public ImpressionsInfo dailyCostMax(Float dailyCostMax) {
    this.dailyCostMax = dailyCostMax;
    return this;
  }

  /**
   * the maximum daily charge value represents the maximum daily cost of the advertisement (USD)
   * @return dailyCostMax
   */
  @javax.annotation.Nullable
  public Float getDailyCostMax() {
    return dailyCostMax;
  }

  public void setDailyCostMax(Float dailyCostMax) {
    this.dailyCostMax = dailyCostMax;
  }


  public ImpressionsInfo dailyCostAverage(Double dailyCostAverage) {
    this.dailyCostAverage = dailyCostAverage;
    return this;
  }

  /**
   * the average daily charge value represents the average daily cost of the advertisement (USD)
   * @return dailyCostAverage
   */
  @javax.annotation.Nullable
  public Double getDailyCostAverage() {
    return dailyCostAverage;
  }

  public void setDailyCostAverage(Double dailyCostAverage) {
    this.dailyCostAverage = dailyCostAverage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ImpressionsInfo instance itself
   */
  public ImpressionsInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImpressionsInfo impressionsInfo = (ImpressionsInfo) o;
    return Objects.equals(this.seType, impressionsInfo.seType) &&
        Objects.equals(this.lastUpdatedTime, impressionsInfo.lastUpdatedTime) &&
        Objects.equals(this.bid, impressionsInfo.bid) &&
        Objects.equals(this.matchType, impressionsInfo.matchType) &&
        Objects.equals(this.adPositionMin, impressionsInfo.adPositionMin) &&
        Objects.equals(this.adPositionMax, impressionsInfo.adPositionMax) &&
        Objects.equals(this.adPositionAverage, impressionsInfo.adPositionAverage) &&
        Objects.equals(this.cpcMin, impressionsInfo.cpcMin) &&
        Objects.equals(this.cpcMax, impressionsInfo.cpcMax) &&
        Objects.equals(this.cpcAverage, impressionsInfo.cpcAverage) &&
        Objects.equals(this.dailyImpressionsMin, impressionsInfo.dailyImpressionsMin) &&
        Objects.equals(this.dailyImpressionsMax, impressionsInfo.dailyImpressionsMax) &&
        Objects.equals(this.dailyImpressionsAverage, impressionsInfo.dailyImpressionsAverage) &&
        Objects.equals(this.dailyClicksMin, impressionsInfo.dailyClicksMin) &&
        Objects.equals(this.dailyClicksMax, impressionsInfo.dailyClicksMax) &&
        Objects.equals(this.dailyClicksAverage, impressionsInfo.dailyClicksAverage) &&
        Objects.equals(this.dailyCostMin, impressionsInfo.dailyCostMin) &&
        Objects.equals(this.dailyCostMax, impressionsInfo.dailyCostMax) &&
        Objects.equals(this.dailyCostAverage, impressionsInfo.dailyCostAverage)&&
        Objects.equals(this.additionalProperties, impressionsInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, lastUpdatedTime, bid, matchType, adPositionMin, adPositionMax, adPositionAverage, cpcMin, cpcMax, cpcAverage, dailyImpressionsMin, dailyImpressionsMax, dailyImpressionsAverage, dailyClicksMin, dailyClicksMax, dailyClicksAverage, dailyCostMin, dailyCostMax, dailyCostAverage, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImpressionsInfo {\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    lastUpdatedTime: ").append(toIndentedString(lastUpdatedTime)).append("\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    matchType: ").append(toIndentedString(matchType)).append("\n");
    sb.append("    adPositionMin: ").append(toIndentedString(adPositionMin)).append("\n");
    sb.append("    adPositionMax: ").append(toIndentedString(adPositionMax)).append("\n");
    sb.append("    adPositionAverage: ").append(toIndentedString(adPositionAverage)).append("\n");
    sb.append("    cpcMin: ").append(toIndentedString(cpcMin)).append("\n");
    sb.append("    cpcMax: ").append(toIndentedString(cpcMax)).append("\n");
    sb.append("    cpcAverage: ").append(toIndentedString(cpcAverage)).append("\n");
    sb.append("    dailyImpressionsMin: ").append(toIndentedString(dailyImpressionsMin)).append("\n");
    sb.append("    dailyImpressionsMax: ").append(toIndentedString(dailyImpressionsMax)).append("\n");
    sb.append("    dailyImpressionsAverage: ").append(toIndentedString(dailyImpressionsAverage)).append("\n");
    sb.append("    dailyClicksMin: ").append(toIndentedString(dailyClicksMin)).append("\n");
    sb.append("    dailyClicksMax: ").append(toIndentedString(dailyClicksMax)).append("\n");
    sb.append("    dailyClicksAverage: ").append(toIndentedString(dailyClicksAverage)).append("\n");
    sb.append("    dailyCostMin: ").append(toIndentedString(dailyCostMin)).append("\n");
    sb.append("    dailyCostMax: ").append(toIndentedString(dailyCostMax)).append("\n");
    sb.append("    dailyCostAverage: ").append(toIndentedString(dailyCostAverage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("se_type");
    openapiFields.add("last_updated_time");
    openapiFields.add("bid");
    openapiFields.add("match_type");
    openapiFields.add("ad_position_min");
    openapiFields.add("ad_position_max");
    openapiFields.add("ad_position_average");
    openapiFields.add("cpc_min");
    openapiFields.add("cpc_max");
    openapiFields.add("cpc_average");
    openapiFields.add("daily_impressions_min");
    openapiFields.add("daily_impressions_max");
    openapiFields.add("daily_impressions_average");
    openapiFields.add("daily_clicks_min");
    openapiFields.add("daily_clicks_max");
    openapiFields.add("daily_clicks_average");
    openapiFields.add("daily_cost_min");
    openapiFields.add("daily_cost_max");
    openapiFields.add("daily_cost_average");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImpressionsInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImpressionsInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImpressionsInfo is not found in the empty JSON string", ImpressionsInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      if ((jsonObj.get("last_updated_time") != null && !jsonObj.get("last_updated_time").isJsonNull()) && !jsonObj.get("last_updated_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_updated_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_updated_time").toString()));
      }
      if ((jsonObj.get("match_type") != null && !jsonObj.get("match_type").isJsonNull()) && !jsonObj.get("match_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `match_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("match_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImpressionsInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImpressionsInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImpressionsInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImpressionsInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ImpressionsInfo>() {
           @Override
           public void write(JsonWriter out, ImpressionsInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ImpressionsInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ImpressionsInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImpressionsInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImpressionsInfo
   * @throws IOException if the JSON string is invalid with respect to ImpressionsInfo
   */
  public static ImpressionsInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImpressionsInfo.class);
  }

  /**
   * Convert an instance of ImpressionsInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

