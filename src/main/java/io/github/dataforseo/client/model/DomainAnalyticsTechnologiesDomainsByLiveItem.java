/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.TechnologiesInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * items array
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T21:14:57.172884200+02:00[Europe/Helsinki]", comments = "Generator version: 7.8.0")
public class DomainAnalyticsTechnologiesDomainsByLiveItem {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_META_KEYWORDS = "meta_keywords";
  @SerializedName(SERIALIZED_NAME_META_KEYWORDS)
  private List<String> metaKeywords;

  public static final String SERIALIZED_NAME_DOMAIN_RANK = "domain_rank";
  @SerializedName(SERIALIZED_NAME_DOMAIN_RANK)
  private String domainRank;

  public static final String SERIALIZED_NAME_LAST_VISITED = "last_visited";
  @SerializedName(SERIALIZED_NAME_LAST_VISITED)
  private String lastVisited;

  public static final String SERIALIZED_NAME_COUNTRY_ISO_CODE = "country_iso_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO_CODE)
  private String countryIsoCode;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_CONTENT_LANGUAGE_CODE = "content_language_code";
  @SerializedName(SERIALIZED_NAME_CONTENT_LANGUAGE_CODE)
  private String contentLanguageCode;

  public static final String SERIALIZED_NAME_PHONE_NUMBERS = "phone_numbers";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBERS)
  private List<String> phoneNumbers;

  public static final String SERIALIZED_NAME_EMAILS = "emails";
  @SerializedName(SERIALIZED_NAME_EMAILS)
  private List<String> emails;

  public static final String SERIALIZED_NAME_SOCIAL_GRAPH_URLS = "social_graph_urls";
  @SerializedName(SERIALIZED_NAME_SOCIAL_GRAPH_URLS)
  private List<String> socialGraphUrls;

  public static final String SERIALIZED_NAME_TECHNOLOGIES = "technologies";
  @SerializedName(SERIALIZED_NAME_TECHNOLOGIES)
  private TechnologiesInfo technologies;

  public DomainAnalyticsTechnologiesDomainsByLiveItem() {
  }

  public DomainAnalyticsTechnologiesDomainsByLiveItem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * type of element
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * specified domain name
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * domain meta title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * domain meta description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem metaKeywords(List<String> metaKeywords) {
    this.metaKeywords = metaKeywords;
    return this;
  }

  public DomainAnalyticsTechnologiesDomainsByLiveItem addMetaKeywordsItem(String metaKeywordsItem) {
    if (this.metaKeywords == null) {
      this.metaKeywords = new ArrayList<>();
    }
    this.metaKeywords.add(metaKeywordsItem);
    return this;
  }

  /**
   * domain meta keywords
   * @return metaKeywords
   */
  @javax.annotation.Nullable
  public List<String> getMetaKeywords() {
    return metaKeywords;
  }

  public void setMetaKeywords(List<String> metaKeywords) {
    this.metaKeywords = metaKeywords;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem domainRank(String domainRank) {
    this.domainRank = domainRank;
    return this;
  }

  /**
   * backlink rank of the target domain learn more about the metric and how it is calculated in this help center article
   * @return domainRank
   */
  @javax.annotation.Nullable
  public String getDomainRank() {
    return domainRank;
  }

  public void setDomainRank(String domainRank) {
    this.domainRank = domainRank;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem lastVisited(String lastVisited) {
    this.lastVisited = lastVisited;
    return this;
  }

  /**
   * most recent date when our crawler visited the domain in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2022-10-10 12:57:46 +00:00
   * @return lastVisited
   */
  @javax.annotation.Nullable
  public String getLastVisited() {
    return lastVisited;
  }

  public void setLastVisited(String lastVisited) {
    this.lastVisited = lastVisited;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem countryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
    return this;
  }

  /**
   * domain ISO code ISO code of the country that target domain is determined to belong to
   * @return countryIsoCode
   */
  @javax.annotation.Nullable
  public String getCountryIsoCode() {
    return countryIsoCode;
  }

  public void setCountryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * domain language code of the language that target domain is determined to be associated with
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem contentLanguageCode(String contentLanguageCode) {
    this.contentLanguageCode = contentLanguageCode;
    return this;
  }

  /**
   * content language code of the language that content on the target domain is written with
   * @return contentLanguageCode
   */
  @javax.annotation.Nullable
  public String getContentLanguageCode() {
    return contentLanguageCode;
  }

  public void setContentLanguageCode(String contentLanguageCode) {
    this.contentLanguageCode = contentLanguageCode;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem phoneNumbers(List<String> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
    return this;
  }

  public DomainAnalyticsTechnologiesDomainsByLiveItem addPhoneNumbersItem(String phoneNumbersItem) {
    if (this.phoneNumbers == null) {
      this.phoneNumbers = new ArrayList<>();
    }
    this.phoneNumbers.add(phoneNumbersItem);
    return this;
  }

  /**
   * phone numbers of the target contact phone numbers indicated on the target website
   * @return phoneNumbers
   */
  @javax.annotation.Nullable
  public List<String> getPhoneNumbers() {
    return phoneNumbers;
  }

  public void setPhoneNumbers(List<String> phoneNumbers) {
    this.phoneNumbers = phoneNumbers;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem emails(List<String> emails) {
    this.emails = emails;
    return this;
  }

  public DomainAnalyticsTechnologiesDomainsByLiveItem addEmailsItem(String emailsItem) {
    if (this.emails == null) {
      this.emails = new ArrayList<>();
    }
    this.emails.add(emailsItem);
    return this;
  }

  /**
   * emails of the target emails indicated on the target website
   * @return emails
   */
  @javax.annotation.Nullable
  public List<String> getEmails() {
    return emails;
  }

  public void setEmails(List<String> emails) {
    this.emails = emails;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem socialGraphUrls(List<String> socialGraphUrls) {
    this.socialGraphUrls = socialGraphUrls;
    return this;
  }

  public DomainAnalyticsTechnologiesDomainsByLiveItem addSocialGraphUrlsItem(String socialGraphUrlsItem) {
    if (this.socialGraphUrls == null) {
      this.socialGraphUrls = new ArrayList<>();
    }
    this.socialGraphUrls.add(socialGraphUrlsItem);
    return this;
  }

  /**
   * social media links and handles social media URLs detected in the social graphs of the target website
   * @return socialGraphUrls
   */
  @javax.annotation.Nullable
  public List<String> getSocialGraphUrls() {
    return socialGraphUrls;
  }

  public void setSocialGraphUrls(List<String> socialGraphUrls) {
    this.socialGraphUrls = socialGraphUrls;
  }


  public DomainAnalyticsTechnologiesDomainsByLiveItem technologies(TechnologiesInfo technologies) {
    this.technologies = technologies;
    return this;
  }

  /**
   * Get technologies
   * @return technologies
   */
  @javax.annotation.Nullable
  public TechnologiesInfo getTechnologies() {
    return technologies;
  }

  public void setTechnologies(TechnologiesInfo technologies) {
    this.technologies = technologies;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DomainAnalyticsTechnologiesDomainsByLiveItem instance itself
   */
  public DomainAnalyticsTechnologiesDomainsByLiveItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainAnalyticsTechnologiesDomainsByLiveItem domainAnalyticsTechnologiesDomainsByLiveItem = (DomainAnalyticsTechnologiesDomainsByLiveItem) o;
    return Objects.equals(this.type, domainAnalyticsTechnologiesDomainsByLiveItem.type) &&
        Objects.equals(this.domain, domainAnalyticsTechnologiesDomainsByLiveItem.domain) &&
        Objects.equals(this.title, domainAnalyticsTechnologiesDomainsByLiveItem.title) &&
        Objects.equals(this.description, domainAnalyticsTechnologiesDomainsByLiveItem.description) &&
        Objects.equals(this.metaKeywords, domainAnalyticsTechnologiesDomainsByLiveItem.metaKeywords) &&
        Objects.equals(this.domainRank, domainAnalyticsTechnologiesDomainsByLiveItem.domainRank) &&
        Objects.equals(this.lastVisited, domainAnalyticsTechnologiesDomainsByLiveItem.lastVisited) &&
        Objects.equals(this.countryIsoCode, domainAnalyticsTechnologiesDomainsByLiveItem.countryIsoCode) &&
        Objects.equals(this.languageCode, domainAnalyticsTechnologiesDomainsByLiveItem.languageCode) &&
        Objects.equals(this.contentLanguageCode, domainAnalyticsTechnologiesDomainsByLiveItem.contentLanguageCode) &&
        Objects.equals(this.phoneNumbers, domainAnalyticsTechnologiesDomainsByLiveItem.phoneNumbers) &&
        Objects.equals(this.emails, domainAnalyticsTechnologiesDomainsByLiveItem.emails) &&
        Objects.equals(this.socialGraphUrls, domainAnalyticsTechnologiesDomainsByLiveItem.socialGraphUrls) &&
        Objects.equals(this.technologies, domainAnalyticsTechnologiesDomainsByLiveItem.technologies)&&
        Objects.equals(this.additionalProperties, domainAnalyticsTechnologiesDomainsByLiveItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, domain, title, description, metaKeywords, domainRank, lastVisited, countryIsoCode, languageCode, contentLanguageCode, phoneNumbers, emails, socialGraphUrls, technologies, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainAnalyticsTechnologiesDomainsByLiveItem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metaKeywords: ").append(toIndentedString(metaKeywords)).append("\n");
    sb.append("    domainRank: ").append(toIndentedString(domainRank)).append("\n");
    sb.append("    lastVisited: ").append(toIndentedString(lastVisited)).append("\n");
    sb.append("    countryIsoCode: ").append(toIndentedString(countryIsoCode)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    contentLanguageCode: ").append(toIndentedString(contentLanguageCode)).append("\n");
    sb.append("    phoneNumbers: ").append(toIndentedString(phoneNumbers)).append("\n");
    sb.append("    emails: ").append(toIndentedString(emails)).append("\n");
    sb.append("    socialGraphUrls: ").append(toIndentedString(socialGraphUrls)).append("\n");
    sb.append("    technologies: ").append(toIndentedString(technologies)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("domain");
    openapiFields.add("title");
    openapiFields.add("description");
    openapiFields.add("meta_keywords");
    openapiFields.add("domain_rank");
    openapiFields.add("last_visited");
    openapiFields.add("country_iso_code");
    openapiFields.add("language_code");
    openapiFields.add("content_language_code");
    openapiFields.add("phone_numbers");
    openapiFields.add("emails");
    openapiFields.add("social_graph_urls");
    openapiFields.add("technologies");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainAnalyticsTechnologiesDomainsByLiveItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainAnalyticsTechnologiesDomainsByLiveItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainAnalyticsTechnologiesDomainsByLiveItem is not found in the empty JSON string", DomainAnalyticsTechnologiesDomainsByLiveItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meta_keywords") != null && !jsonObj.get("meta_keywords").isJsonNull() && !jsonObj.get("meta_keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_keywords` to be an array in the JSON string but got `%s`", jsonObj.get("meta_keywords").toString()));
      }
      if ((jsonObj.get("domain_rank") != null && !jsonObj.get("domain_rank").isJsonNull()) && !jsonObj.get("domain_rank").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain_rank` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain_rank").toString()));
      }
      if ((jsonObj.get("last_visited") != null && !jsonObj.get("last_visited").isJsonNull()) && !jsonObj.get("last_visited").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_visited` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_visited").toString()));
      }
      if ((jsonObj.get("country_iso_code") != null && !jsonObj.get("country_iso_code").isJsonNull()) && !jsonObj.get("country_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_iso_code").toString()));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      if ((jsonObj.get("content_language_code") != null && !jsonObj.get("content_language_code").isJsonNull()) && !jsonObj.get("content_language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content_language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content_language_code").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("phone_numbers") != null && !jsonObj.get("phone_numbers").isJsonNull() && !jsonObj.get("phone_numbers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_numbers` to be an array in the JSON string but got `%s`", jsonObj.get("phone_numbers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("emails") != null && !jsonObj.get("emails").isJsonNull() && !jsonObj.get("emails").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `emails` to be an array in the JSON string but got `%s`", jsonObj.get("emails").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("social_graph_urls") != null && !jsonObj.get("social_graph_urls").isJsonNull() && !jsonObj.get("social_graph_urls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `social_graph_urls` to be an array in the JSON string but got `%s`", jsonObj.get("social_graph_urls").toString()));
      }
      // validate the optional field `technologies`
      if (jsonObj.get("technologies") != null && !jsonObj.get("technologies").isJsonNull()) {
        TechnologiesInfo.validateJsonElement(jsonObj.get("technologies"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainAnalyticsTechnologiesDomainsByLiveItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainAnalyticsTechnologiesDomainsByLiveItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainAnalyticsTechnologiesDomainsByLiveItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainAnalyticsTechnologiesDomainsByLiveItem.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainAnalyticsTechnologiesDomainsByLiveItem>() {
           @Override
           public void write(JsonWriter out, DomainAnalyticsTechnologiesDomainsByLiveItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainAnalyticsTechnologiesDomainsByLiveItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             DomainAnalyticsTechnologiesDomainsByLiveItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainAnalyticsTechnologiesDomainsByLiveItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainAnalyticsTechnologiesDomainsByLiveItem
   * @throws IOException if the JSON string is invalid with respect to DomainAnalyticsTechnologiesDomainsByLiveItem
   */
  public static DomainAnalyticsTechnologiesDomainsByLiveItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainAnalyticsTechnologiesDomainsByLiveItem.class);
  }

  /**
   * Convert an instance of DomainAnalyticsTechnologiesDomainsByLiveItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

