/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.BaseOnPageResourceItemInfo;
import io.github.dataforseo.client.model.CacheControl;
import io.github.dataforseo.client.model.FetchTiming;
import io.github.dataforseo.client.model.LastModified;
import io.github.dataforseo.client.model.OnPageResourceIssueInfo;
import io.github.dataforseo.client.model.ResourceMetaInfo;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * StylesheetResourceElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-04T13:45:49.667097300+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class StylesheetResourceElementItem extends BaseOnPageResourceItemInfo {
  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private ResourceMetaInfo meta;

  public static final String SERIALIZED_NAME_FETCH_TIMING = "fetch_timing";
  @SerializedName(SERIALIZED_NAME_FETCH_TIMING)
  private FetchTiming fetchTiming;

  public static final String SERIALIZED_NAME_ACCEPT_TYPE = "accept_type";
  @SerializedName(SERIALIZED_NAME_ACCEPT_TYPE)
  private String acceptType;

  public static final String SERIALIZED_NAME_INITIATOR = "initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private String initiator;

  public static final String SERIALIZED_NAME_DURATION_TIME = "duration_time";
  @SerializedName(SERIALIZED_NAME_DURATION_TIME)
  private Integer durationTime;

  public static final String SERIALIZED_NAME_FETCH_START = "fetch_start";
  @SerializedName(SERIALIZED_NAME_FETCH_START)
  private Integer fetchStart;

  public static final String SERIALIZED_NAME_FETCH_END = "fetch_end";
  @SerializedName(SERIALIZED_NAME_FETCH_END)
  private Integer fetchEnd;

  public static final String SERIALIZED_NAME_IS_RENDER_BLOCKING = "is_render_blocking";
  @SerializedName(SERIALIZED_NAME_IS_RENDER_BLOCKING)
  private Boolean isRenderBlocking;

  public StylesheetResourceElementItem() {
    this.resourceType = this.getClass().getSimpleName();
  }

  public StylesheetResourceElementItem meta(ResourceMetaInfo meta) {
    this.meta = meta;
    return this;
  }

  /**
   * Get meta
   * @return meta
   */
  @javax.annotation.Nullable
  public ResourceMetaInfo getMeta() {
    return meta;
  }

  public void setMeta(ResourceMetaInfo meta) {
    this.meta = meta;
  }


  public StylesheetResourceElementItem fetchTiming(FetchTiming fetchTiming) {
    this.fetchTiming = fetchTiming;
    return this;
  }

  /**
   * Get fetchTiming
   * @return fetchTiming
   */
  @javax.annotation.Nullable
  public FetchTiming getFetchTiming() {
    return fetchTiming;
  }

  public void setFetchTiming(FetchTiming fetchTiming) {
    this.fetchTiming = fetchTiming;
  }


  public StylesheetResourceElementItem acceptType(String acceptType) {
    this.acceptType = acceptType;
    return this;
  }

  /**
   * indicates the expected type of resource for example, if \&quot;resource_type\&quot;: \&quot;broken\&quot;, accept_type will indicate the type of the broken resource possible values: any, none, image, sitemap, robots, script, stylesheet, redirect, html, text, other, font
   * @return acceptType
   */
  @javax.annotation.Nullable
  public String getAcceptType() {
    return acceptType;
  }

  public void setAcceptType(String acceptType) {
    this.acceptType = acceptType;
  }


  public StylesheetResourceElementItem initiator(String initiator) {
    this.initiator = initiator;
    return this;
  }

  /**
   * resource initiator
   * @return initiator
   */
  @javax.annotation.Nullable
  public String getInitiator() {
    return initiator;
  }

  public void setInitiator(String initiator) {
    this.initiator = initiator;
  }


  public StylesheetResourceElementItem durationTime(Integer durationTime) {
    this.durationTime = durationTime;
    return this;
  }

  /**
   * total time it takes until a browser receives a complete response from a server (in milliseconds)
   * @return durationTime
   */
  @javax.annotation.Nullable
  public Integer getDurationTime() {
    return durationTime;
  }

  public void setDurationTime(Integer durationTime) {
    this.durationTime = durationTime;
  }


  public StylesheetResourceElementItem fetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
    return this;
  }

  /**
   * time to start downloading the resource the amount of time the browser needs to start downloading a resource
   * @return fetchStart
   */
  @javax.annotation.Nullable
  public Integer getFetchStart() {
    return fetchStart;
  }

  public void setFetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
  }


  public StylesheetResourceElementItem fetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
    return this;
  }

  /**
   * time to complete downloading the resource the amount of time the browser needs to complete downloading a resource
   * @return fetchEnd
   */
  @javax.annotation.Nullable
  public Integer getFetchEnd() {
    return fetchEnd;
  }

  public void setFetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
  }


  public StylesheetResourceElementItem isRenderBlocking(Boolean isRenderBlocking) {
    this.isRenderBlocking = isRenderBlocking;
    return this;
  }

  /**
   * indicates whether the resource blocks rendering
   * @return isRenderBlocking
   */
  @javax.annotation.Nullable
  public Boolean getIsRenderBlocking() {
    return isRenderBlocking;
  }

  public void setIsRenderBlocking(Boolean isRenderBlocking) {
    this.isRenderBlocking = isRenderBlocking;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the StylesheetResourceElementItem instance itself
   */
  public StylesheetResourceElementItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StylesheetResourceElementItem stylesheetResourceElementItem = (StylesheetResourceElementItem) o;
    return Objects.equals(this.meta, stylesheetResourceElementItem.meta) &&
        Objects.equals(this.fetchTiming, stylesheetResourceElementItem.fetchTiming) &&
        Objects.equals(this.acceptType, stylesheetResourceElementItem.acceptType) &&
        Objects.equals(this.initiator, stylesheetResourceElementItem.initiator) &&
        Objects.equals(this.durationTime, stylesheetResourceElementItem.durationTime) &&
        Objects.equals(this.fetchStart, stylesheetResourceElementItem.fetchStart) &&
        Objects.equals(this.fetchEnd, stylesheetResourceElementItem.fetchEnd) &&
        Objects.equals(this.isRenderBlocking, stylesheetResourceElementItem.isRenderBlocking)&&
        Objects.equals(this.additionalProperties, stylesheetResourceElementItem.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, fetchTiming, acceptType, initiator, durationTime, fetchStart, fetchEnd, isRenderBlocking, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StylesheetResourceElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    fetchTiming: ").append(toIndentedString(fetchTiming)).append("\n");
    sb.append("    acceptType: ").append(toIndentedString(acceptType)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    durationTime: ").append(toIndentedString(durationTime)).append("\n");
    sb.append("    fetchStart: ").append(toIndentedString(fetchStart)).append("\n");
    sb.append("    fetchEnd: ").append(toIndentedString(fetchEnd)).append("\n");
    sb.append("    isRenderBlocking: ").append(toIndentedString(isRenderBlocking)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resource_type");
    openapiFields.add("status_code");
    openapiFields.add("location");
    openapiFields.add("url");
    openapiFields.add("resource_errors");
    openapiFields.add("size");
    openapiFields.add("encoded_size");
    openapiFields.add("total_transfer_size");
    openapiFields.add("fetch_time");
    openapiFields.add("cache_control");
    openapiFields.add("checks");
    openapiFields.add("content_encoding");
    openapiFields.add("media_type");
    openapiFields.add("server");
    openapiFields.add("last_modified");
    openapiFields.add("meta");
    openapiFields.add("fetch_timing");
    openapiFields.add("accept_type");
    openapiFields.add("initiator");
    openapiFields.add("duration_time");
    openapiFields.add("fetch_start");
    openapiFields.add("fetch_end");
    openapiFields.add("is_render_blocking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StylesheetResourceElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StylesheetResourceElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StylesheetResourceElementItem is not found in the empty JSON string", StylesheetResourceElementItem.openapiRequiredFields.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StylesheetResourceElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StylesheetResourceElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StylesheetResourceElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StylesheetResourceElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<StylesheetResourceElementItem>() {
           @Override
           public void write(JsonWriter out, StylesheetResourceElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public StylesheetResourceElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             StylesheetResourceElementItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StylesheetResourceElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StylesheetResourceElementItem
   * @throws IOException if the JSON string is invalid with respect to StylesheetResourceElementItem
   */
  public static StylesheetResourceElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StylesheetResourceElementItem.class);
  }

  /**
   * Convert an instance of StylesheetResourceElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

