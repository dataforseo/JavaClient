/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.LocationChain;
import io.github.dataforseo.client.model.ScoreByCategories;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * Location
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-10T21:39:12.196275300+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class Location {
  public static final String SERIALIZED_NAME_NEIGHBORHOOD = "neighborhood";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD)
  private String neighborhood;

  public static final String SERIALIZED_NAME_NEIGHBORHOOD_DESCRIPTION = "neighborhood_description";
  @SerializedName(SERIALIZED_NAME_NEIGHBORHOOD_DESCRIPTION)
  private String neighborhoodDescription;

  public static final String SERIALIZED_NAME_MAPS_URL = "maps_url";
  @SerializedName(SERIALIZED_NAME_MAPS_URL)
  private String mapsUrl;

  public static final String SERIALIZED_NAME_OVERALL_SCORE = "overall_score";
  @SerializedName(SERIALIZED_NAME_OVERALL_SCORE)
  private Float overallScore;

  public static final String SERIALIZED_NAME_SCORE_BY_CATEGORIES = "score_by_categories";
  @SerializedName(SERIALIZED_NAME_SCORE_BY_CATEGORIES)
  private ScoreByCategories scoreByCategories;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Float latitude;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Float longitude;

  public static final String SERIALIZED_NAME_LOCATION_CHAIN = "location_chain";
  @SerializedName(SERIALIZED_NAME_LOCATION_CHAIN)
  private List<LocationChain> locationChain;

  public Location() {
  }

  public Location neighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
    return this;
  }

  /**
   * name of the neighborhood where the hotel is located
   * @return neighborhood
   */
  @javax.annotation.Nullable
  public String getNeighborhood() {
    return neighborhood;
  }

  public void setNeighborhood(String neighborhood) {
    this.neighborhood = neighborhood;
  }


  public Location neighborhoodDescription(String neighborhoodDescription) {
    this.neighborhoodDescription = neighborhoodDescription;
    return this;
  }

  /**
   * description of the neighborhood where the hotel is located
   * @return neighborhoodDescription
   */
  @javax.annotation.Nullable
  public String getNeighborhoodDescription() {
    return neighborhoodDescription;
  }

  public void setNeighborhoodDescription(String neighborhoodDescription) {
    this.neighborhoodDescription = neighborhoodDescription;
  }


  public Location mapsUrl(String mapsUrl) {
    this.mapsUrl = mapsUrl;
    return this;
  }

  /**
   * url to the location of the hotel in google maps
   * @return mapsUrl
   */
  @javax.annotation.Nullable
  public String getMapsUrl() {
    return mapsUrl;
  }

  public void setMapsUrl(String mapsUrl) {
    this.mapsUrl = mapsUrl;
  }


  public Location overallScore(Float overallScore) {
    this.overallScore = overallScore;
    return this;
  }

  /**
   * overall score of the hotel location indicates the overall score of the hotel’s location in the range from 1 to 5; calculated based on data from the hotel’s proximity to nearby things to do and restaurants, transportation, and airports; note that the criteria are not weighted equally in the overall score
   * @return overallScore
   */
  @javax.annotation.Nullable
  public Float getOverallScore() {
    return overallScore;
  }

  public void setOverallScore(Float overallScore) {
    this.overallScore = overallScore;
  }


  public Location scoreByCategories(ScoreByCategories scoreByCategories) {
    this.scoreByCategories = scoreByCategories;
    return this;
  }

  /**
   * Get scoreByCategories
   * @return scoreByCategories
   */
  @javax.annotation.Nullable
  public ScoreByCategories getScoreByCategories() {
    return scoreByCategories;
  }

  public void setScoreByCategories(ScoreByCategories scoreByCategories) {
    this.scoreByCategories = scoreByCategories;
  }


  public Location latitude(Float latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * hotel latitude latitude coordinates of the hotel’s location example: 39.4806397
   * @return latitude
   */
  @javax.annotation.Nullable
  public Float getLatitude() {
    return latitude;
  }

  public void setLatitude(Float latitude) {
    this.latitude = latitude;
  }


  public Location longitude(Float longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * hotel longitude latitude coordinates of the hotel’s location example: -106.0512973
   * @return longitude
   */
  @javax.annotation.Nullable
  public Float getLongitude() {
    return longitude;
  }

  public void setLongitude(Float longitude) {
    this.longitude = longitude;
  }


  public Location locationChain(List<LocationChain> locationChain) {
    this.locationChain = locationChain;
    return this;
  }

  public Location addLocationChainItem(LocationChain locationChainItem) {
    if (this.locationChain == null) {
      this.locationChain = new ArrayList<>();
    }
    this.locationChain.add(locationChainItem);
    return this;
  }

  /**
   * elements of the location chain additional parameters of each element of the location chain
   * @return locationChain
   */
  @javax.annotation.Nullable
  public List<LocationChain> getLocationChain() {
    return locationChain;
  }

  public void setLocationChain(List<LocationChain> locationChain) {
    this.locationChain = locationChain;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Location instance itself
   */
  public Location putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Location location = (Location) o;
    return Objects.equals(this.neighborhood, location.neighborhood) &&
        Objects.equals(this.neighborhoodDescription, location.neighborhoodDescription) &&
        Objects.equals(this.mapsUrl, location.mapsUrl) &&
        Objects.equals(this.overallScore, location.overallScore) &&
        Objects.equals(this.scoreByCategories, location.scoreByCategories) &&
        Objects.equals(this.latitude, location.latitude) &&
        Objects.equals(this.longitude, location.longitude) &&
        Objects.equals(this.locationChain, location.locationChain)&&
        Objects.equals(this.additionalProperties, location.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(neighborhood, neighborhoodDescription, mapsUrl, overallScore, scoreByCategories, latitude, longitude, locationChain, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Location {\n");
    sb.append("    neighborhood: ").append(toIndentedString(neighborhood)).append("\n");
    sb.append("    neighborhoodDescription: ").append(toIndentedString(neighborhoodDescription)).append("\n");
    sb.append("    mapsUrl: ").append(toIndentedString(mapsUrl)).append("\n");
    sb.append("    overallScore: ").append(toIndentedString(overallScore)).append("\n");
    sb.append("    scoreByCategories: ").append(toIndentedString(scoreByCategories)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    locationChain: ").append(toIndentedString(locationChain)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("neighborhood");
    openapiFields.add("neighborhood_description");
    openapiFields.add("maps_url");
    openapiFields.add("overall_score");
    openapiFields.add("score_by_categories");
    openapiFields.add("latitude");
    openapiFields.add("longitude");
    openapiFields.add("location_chain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Location
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Location.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Location is not found in the empty JSON string", Location.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("neighborhood") != null && !jsonObj.get("neighborhood").isJsonNull()) && !jsonObj.get("neighborhood").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood").toString()));
      }
      if ((jsonObj.get("neighborhood_description") != null && !jsonObj.get("neighborhood_description").isJsonNull()) && !jsonObj.get("neighborhood_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `neighborhood_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("neighborhood_description").toString()));
      }
      if ((jsonObj.get("maps_url") != null && !jsonObj.get("maps_url").isJsonNull()) && !jsonObj.get("maps_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maps_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maps_url").toString()));
      }
      // validate the optional field `score_by_categories`
      if (jsonObj.get("score_by_categories") != null && !jsonObj.get("score_by_categories").isJsonNull()) {
        ScoreByCategories.validateJsonElement(jsonObj.get("score_by_categories"));
      }
      if (jsonObj.get("location_chain") != null && !jsonObj.get("location_chain").isJsonNull()) {
        JsonArray jsonArraylocationChain = jsonObj.getAsJsonArray("location_chain");
        if (jsonArraylocationChain != null) {
          // ensure the json data is an array
          if (!jsonObj.get("location_chain").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `location_chain` to be an array in the JSON string but got `%s`", jsonObj.get("location_chain").toString()));
          }

          // validate the optional field `location_chain` (array)
          for (int i = 0; i < jsonArraylocationChain.size(); i++) {
            LocationChain.validateJsonElement(jsonArraylocationChain.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Location.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Location' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Location> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Location.class));

       return (TypeAdapter<T>) new TypeAdapter<Location>() {
           @Override
           public void write(JsonWriter out, Location value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Location read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             Location instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Location given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Location
   * @throws IOException if the JSON string is invalid with respect to Location
   */
  public static Location fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Location.class);
  }

  /**
   * Convert an instance of Location to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

