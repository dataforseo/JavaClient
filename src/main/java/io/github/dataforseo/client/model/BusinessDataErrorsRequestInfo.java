/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * BusinessDataErrorsRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-20T19:00:02.019506800+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class BusinessDataErrorsRequestInfo {
  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_FILTERED_FUNCTION = "filtered_function";
  @SerializedName(SERIALIZED_NAME_FILTERED_FUNCTION)
  private String filteredFunction;

  public static final String SERIALIZED_NAME_DATETIME_FROM = "datetime_from";
  @SerializedName(SERIALIZED_NAME_DATETIME_FROM)
  private String datetimeFrom;

  public static final String SERIALIZED_NAME_DATETIME_TO = "datetime_to";
  @SerializedName(SERIALIZED_NAME_DATETIME_TO)
  private String datetimeTo;

  public BusinessDataErrorsRequestInfo() {
  }

  public BusinessDataErrorsRequestInfo limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * the maximum number of returned tasks that responded with an error optional field default value: 1000 maximum value: 1000
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public BusinessDataErrorsRequestInfo offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * offset in the results array of returned tasks optional field default value: 0 if you specify the 10 value, the first ten tasks in the results array will be omitted and the data will be provided for the successive tasks
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public BusinessDataErrorsRequestInfo filteredFunction(String filteredFunction) {
    this.filteredFunction = filteredFunction;
    return this;
  }

  /**
   * return tasks with a certain function use this field to obtain a list of tasks that returned an error filtered by a certain function you can filter the results by the values you receive in the function fields of the API response i.e., once you receive unfiltered results, you can call this API again to filter them by function example: hotel_searches/task_post, postback_url, pingback_url
   * @return filteredFunction
   */
  @javax.annotation.Nullable
  public String getFilteredFunction() {
    return filteredFunction;
  }

  public void setFilteredFunction(String filteredFunction) {
    this.filteredFunction = filteredFunction;
  }


  public BusinessDataErrorsRequestInfo datetimeFrom(String datetimeFrom) {
    this.datetimeFrom = datetimeFrom;
    return this;
  }

  /**
   * start time for filtering results optional field allows filtering results by the datetime parameter within the range of the last 7 days; must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2021-11-15 12:57:46 +00:00
   * @return datetimeFrom
   */
  @javax.annotation.Nullable
  public String getDatetimeFrom() {
    return datetimeFrom;
  }

  public void setDatetimeFrom(String datetimeFrom) {
    this.datetimeFrom = datetimeFrom;
  }


  public BusinessDataErrorsRequestInfo datetimeTo(String datetimeTo) {
    this.datetimeTo = datetimeTo;
    return this;
  }

  /**
   * finish time for filtering results optional field allows filtering results by the datetime parameter within the range of the last 7 days; must be specified in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2021-11-15 13:57:46 +00:00
   * @return datetimeTo
   */
  @javax.annotation.Nullable
  public String getDatetimeTo() {
    return datetimeTo;
  }

  public void setDatetimeTo(String datetimeTo) {
    this.datetimeTo = datetimeTo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BusinessDataErrorsRequestInfo instance itself
   */
  public BusinessDataErrorsRequestInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BusinessDataErrorsRequestInfo businessDataErrorsRequestInfo = (BusinessDataErrorsRequestInfo) o;
    return Objects.equals(this.limit, businessDataErrorsRequestInfo.limit) &&
        Objects.equals(this.offset, businessDataErrorsRequestInfo.offset) &&
        Objects.equals(this.filteredFunction, businessDataErrorsRequestInfo.filteredFunction) &&
        Objects.equals(this.datetimeFrom, businessDataErrorsRequestInfo.datetimeFrom) &&
        Objects.equals(this.datetimeTo, businessDataErrorsRequestInfo.datetimeTo)&&
        Objects.equals(this.additionalProperties, businessDataErrorsRequestInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(limit, offset, filteredFunction, datetimeFrom, datetimeTo, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BusinessDataErrorsRequestInfo {\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    filteredFunction: ").append(toIndentedString(filteredFunction)).append("\n");
    sb.append("    datetimeFrom: ").append(toIndentedString(datetimeFrom)).append("\n");
    sb.append("    datetimeTo: ").append(toIndentedString(datetimeTo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("filtered_function");
    openapiFields.add("datetime_from");
    openapiFields.add("datetime_to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BusinessDataErrorsRequestInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BusinessDataErrorsRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BusinessDataErrorsRequestInfo is not found in the empty JSON string", BusinessDataErrorsRequestInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("filtered_function") != null && !jsonObj.get("filtered_function").isJsonNull()) && !jsonObj.get("filtered_function").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filtered_function` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filtered_function").toString()));
      }
      if ((jsonObj.get("datetime_from") != null && !jsonObj.get("datetime_from").isJsonNull()) && !jsonObj.get("datetime_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime_from").toString()));
      }
      if ((jsonObj.get("datetime_to") != null && !jsonObj.get("datetime_to").isJsonNull()) && !jsonObj.get("datetime_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `datetime_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("datetime_to").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BusinessDataErrorsRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BusinessDataErrorsRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BusinessDataErrorsRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BusinessDataErrorsRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BusinessDataErrorsRequestInfo>() {
           @Override
           public void write(JsonWriter out, BusinessDataErrorsRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BusinessDataErrorsRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             BusinessDataErrorsRequestInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BusinessDataErrorsRequestInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BusinessDataErrorsRequestInfo
   * @throws IOException if the JSON string is invalid with respect to BusinessDataErrorsRequestInfo
   */
  public static BusinessDataErrorsRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BusinessDataErrorsRequestInfo.class);
  }

  /**
   * Convert an instance of BusinessDataErrorsRequestInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

