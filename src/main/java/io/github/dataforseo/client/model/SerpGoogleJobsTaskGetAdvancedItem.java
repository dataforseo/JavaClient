/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.Rectangle;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * SerpGoogleJobsTaskGetAdvancedItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-06T19:08:02.252153200+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class SerpGoogleJobsTaskGetAdvancedItem {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_RANK_GROUP = "rank_group";
  @SerializedName(SERIALIZED_NAME_RANK_GROUP)
  private Integer rankGroup;

  public static final String SERIALIZED_NAME_RANK_ABSOLUTE = "rank_absolute";
  @SerializedName(SERIALIZED_NAME_RANK_ABSOLUTE)
  private Integer rankAbsolute;

  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_XPATH = "xpath";
  @SerializedName(SERIALIZED_NAME_XPATH)
  private String xpath;

  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_EMPLOYER_NAME = "employer_name";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_NAME)
  private String employerName;

  public static final String SERIALIZED_NAME_EMPLOYER_URL = "employer_url";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_URL)
  private String employerUrl;

  public static final String SERIALIZED_NAME_EMPLOYER_IMAGE_URL = "employer_image_url";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_IMAGE_URL)
  private String employerImageUrl;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "source_name";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_URL = "source_url";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_SALARY = "salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private String salary;

  public static final String SERIALIZED_NAME_CONTRACT_TYPE = "contract_type";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE)
  private String contractType;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TIME_AGO = "time_ago";
  @SerializedName(SERIALIZED_NAME_TIME_AGO)
  private String timeAgo;

  public static final String SERIALIZED_NAME_RECTANGLE = "rectangle";
  @SerializedName(SERIALIZED_NAME_RECTANGLE)
  private Rectangle rectangle;

  public SerpGoogleJobsTaskGetAdvancedItem() {
  }

  public SerpGoogleJobsTaskGetAdvancedItem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * type of element
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public SerpGoogleJobsTaskGetAdvancedItem rankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
    return this;
  }

  /**
   * group rank in SERP position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group
   * @return rankGroup
   */
  @javax.annotation.Nullable
  public Integer getRankGroup() {
    return rankGroup;
  }

  public void setRankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
  }


  public SerpGoogleJobsTaskGetAdvancedItem rankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
    return this;
  }

  /**
   * absolute rank in SERP absolute position among all the elements in SERP
   * @return rankAbsolute
   */
  @javax.annotation.Nullable
  public Integer getRankAbsolute() {
    return rankAbsolute;
  }

  public void setRankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
  }


  public SerpGoogleJobsTaskGetAdvancedItem position(String position) {
    this.position = position;
    return this;
  }

  /**
   * the alignment of the element in SERP can take the following values: left, right
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public SerpGoogleJobsTaskGetAdvancedItem xpath(String xpath) {
    this.xpath = xpath;
    return this;
  }

  /**
   * the XPath of the element
   * @return xpath
   */
  @javax.annotation.Nullable
  public String getXpath() {
    return xpath;
  }

  public void setXpath(String xpath) {
    this.xpath = xpath;
  }


  public SerpGoogleJobsTaskGetAdvancedItem jobId(String jobId) {
    this.jobId = jobId;
    return this;
  }

  /**
   * ID of the job on Google Jobs
   * @return jobId
   */
  @javax.annotation.Nullable
  public String getJobId() {
    return jobId;
  }

  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public SerpGoogleJobsTaskGetAdvancedItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * title of the job
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SerpGoogleJobsTaskGetAdvancedItem employerName(String employerName) {
    this.employerName = employerName;
    return this;
  }

  /**
   * name of the employer
   * @return employerName
   */
  @javax.annotation.Nullable
  public String getEmployerName() {
    return employerName;
  }

  public void setEmployerName(String employerName) {
    this.employerName = employerName;
  }


  public SerpGoogleJobsTaskGetAdvancedItem employerUrl(String employerUrl) {
    this.employerUrl = employerUrl;
    return this;
  }

  /**
   * URL to the employer’s website
   * @return employerUrl
   */
  @javax.annotation.Nullable
  public String getEmployerUrl() {
    return employerUrl;
  }

  public void setEmployerUrl(String employerUrl) {
    this.employerUrl = employerUrl;
  }


  public SerpGoogleJobsTaskGetAdvancedItem employerImageUrl(String employerImageUrl) {
    this.employerImageUrl = employerImageUrl;
    return this;
  }

  /**
   * URL to the image used in the job posting
   * @return employerImageUrl
   */
  @javax.annotation.Nullable
  public String getEmployerImageUrl() {
    return employerImageUrl;
  }

  public void setEmployerImageUrl(String employerImageUrl) {
    this.employerImageUrl = employerImageUrl;
  }


  public SerpGoogleJobsTaskGetAdvancedItem location(String location) {
    this.location = location;
    return this;
  }

  /**
   * location for which the job vacancy is posted
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public SerpGoogleJobsTaskGetAdvancedItem sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

  /**
   * original source of the job vacancy
   * @return sourceName
   */
  @javax.annotation.Nullable
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public SerpGoogleJobsTaskGetAdvancedItem sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

  /**
   * URL to the original source of the job vacancy
   * @return sourceUrl
   */
  @javax.annotation.Nullable
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public SerpGoogleJobsTaskGetAdvancedItem salary(String salary) {
    this.salary = salary;
    return this;
  }

  /**
   * the salary indicated in the job vacancy if the salary isn’t indicated, this field will equal null
   * @return salary
   */
  @javax.annotation.Nullable
  public String getSalary() {
    return salary;
  }

  public void setSalary(String salary) {
    this.salary = salary;
  }


  public SerpGoogleJobsTaskGetAdvancedItem contractType(String contractType) {
    this.contractType = contractType;
    return this;
  }

  /**
   * employment contract type
   * @return contractType
   */
  @javax.annotation.Nullable
  public String getContractType() {
    return contractType;
  }

  public void setContractType(String contractType) {
    this.contractType = contractType;
  }


  public SerpGoogleJobsTaskGetAdvancedItem timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * date and time when the result was published in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public SerpGoogleJobsTaskGetAdvancedItem timeAgo(String timeAgo) {
    this.timeAgo = timeAgo;
    return this;
  }

  /**
   * indicates how long ago the job vacancy was posted
   * @return timeAgo
   */
  @javax.annotation.Nullable
  public String getTimeAgo() {
    return timeAgo;
  }

  public void setTimeAgo(String timeAgo) {
    this.timeAgo = timeAgo;
  }


  public SerpGoogleJobsTaskGetAdvancedItem rectangle(Rectangle rectangle) {
    this.rectangle = rectangle;
    return this;
  }

  /**
   * Get rectangle
   * @return rectangle
   */
  @javax.annotation.Nullable
  public Rectangle getRectangle() {
    return rectangle;
  }

  public void setRectangle(Rectangle rectangle) {
    this.rectangle = rectangle;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the SerpGoogleJobsTaskGetAdvancedItem instance itself
   */
  public SerpGoogleJobsTaskGetAdvancedItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SerpGoogleJobsTaskGetAdvancedItem serpGoogleJobsTaskGetAdvancedItem = (SerpGoogleJobsTaskGetAdvancedItem) o;
    return Objects.equals(this.type, serpGoogleJobsTaskGetAdvancedItem.type) &&
        Objects.equals(this.rankGroup, serpGoogleJobsTaskGetAdvancedItem.rankGroup) &&
        Objects.equals(this.rankAbsolute, serpGoogleJobsTaskGetAdvancedItem.rankAbsolute) &&
        Objects.equals(this.position, serpGoogleJobsTaskGetAdvancedItem.position) &&
        Objects.equals(this.xpath, serpGoogleJobsTaskGetAdvancedItem.xpath) &&
        Objects.equals(this.jobId, serpGoogleJobsTaskGetAdvancedItem.jobId) &&
        Objects.equals(this.title, serpGoogleJobsTaskGetAdvancedItem.title) &&
        Objects.equals(this.employerName, serpGoogleJobsTaskGetAdvancedItem.employerName) &&
        Objects.equals(this.employerUrl, serpGoogleJobsTaskGetAdvancedItem.employerUrl) &&
        Objects.equals(this.employerImageUrl, serpGoogleJobsTaskGetAdvancedItem.employerImageUrl) &&
        Objects.equals(this.location, serpGoogleJobsTaskGetAdvancedItem.location) &&
        Objects.equals(this.sourceName, serpGoogleJobsTaskGetAdvancedItem.sourceName) &&
        Objects.equals(this.sourceUrl, serpGoogleJobsTaskGetAdvancedItem.sourceUrl) &&
        Objects.equals(this.salary, serpGoogleJobsTaskGetAdvancedItem.salary) &&
        Objects.equals(this.contractType, serpGoogleJobsTaskGetAdvancedItem.contractType) &&
        Objects.equals(this.timestamp, serpGoogleJobsTaskGetAdvancedItem.timestamp) &&
        Objects.equals(this.timeAgo, serpGoogleJobsTaskGetAdvancedItem.timeAgo) &&
        Objects.equals(this.rectangle, serpGoogleJobsTaskGetAdvancedItem.rectangle)&&
        Objects.equals(this.additionalProperties, serpGoogleJobsTaskGetAdvancedItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, rankGroup, rankAbsolute, position, xpath, jobId, title, employerName, employerUrl, employerImageUrl, location, sourceName, sourceUrl, salary, contractType, timestamp, timeAgo, rectangle, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SerpGoogleJobsTaskGetAdvancedItem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    rankGroup: ").append(toIndentedString(rankGroup)).append("\n");
    sb.append("    rankAbsolute: ").append(toIndentedString(rankAbsolute)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    xpath: ").append(toIndentedString(xpath)).append("\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    employerName: ").append(toIndentedString(employerName)).append("\n");
    sb.append("    employerUrl: ").append(toIndentedString(employerUrl)).append("\n");
    sb.append("    employerImageUrl: ").append(toIndentedString(employerImageUrl)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    contractType: ").append(toIndentedString(contractType)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    timeAgo: ").append(toIndentedString(timeAgo)).append("\n");
    sb.append("    rectangle: ").append(toIndentedString(rectangle)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("position");
    openapiFields.add("xpath");
    openapiFields.add("job_id");
    openapiFields.add("title");
    openapiFields.add("employer_name");
    openapiFields.add("employer_url");
    openapiFields.add("employer_image_url");
    openapiFields.add("location");
    openapiFields.add("source_name");
    openapiFields.add("source_url");
    openapiFields.add("salary");
    openapiFields.add("contract_type");
    openapiFields.add("timestamp");
    openapiFields.add("time_ago");
    openapiFields.add("rectangle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SerpGoogleJobsTaskGetAdvancedItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SerpGoogleJobsTaskGetAdvancedItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SerpGoogleJobsTaskGetAdvancedItem is not found in the empty JSON string", SerpGoogleJobsTaskGetAdvancedItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("xpath") != null && !jsonObj.get("xpath").isJsonNull()) && !jsonObj.get("xpath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `xpath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("xpath").toString()));
      }
      if ((jsonObj.get("job_id") != null && !jsonObj.get("job_id").isJsonNull()) && !jsonObj.get("job_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job_id").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("employer_name") != null && !jsonObj.get("employer_name").isJsonNull()) && !jsonObj.get("employer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_name").toString()));
      }
      if ((jsonObj.get("employer_url") != null && !jsonObj.get("employer_url").isJsonNull()) && !jsonObj.get("employer_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_url").toString()));
      }
      if ((jsonObj.get("employer_image_url") != null && !jsonObj.get("employer_image_url").isJsonNull()) && !jsonObj.get("employer_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employer_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employer_image_url").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("source_name") != null && !jsonObj.get("source_name").isJsonNull()) && !jsonObj.get("source_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_name").toString()));
      }
      if ((jsonObj.get("source_url") != null && !jsonObj.get("source_url").isJsonNull()) && !jsonObj.get("source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source_url").toString()));
      }
      if ((jsonObj.get("salary") != null && !jsonObj.get("salary").isJsonNull()) && !jsonObj.get("salary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `salary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("salary").toString()));
      }
      if ((jsonObj.get("contract_type") != null && !jsonObj.get("contract_type").isJsonNull()) && !jsonObj.get("contract_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contract_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contract_type").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("time_ago") != null && !jsonObj.get("time_ago").isJsonNull()) && !jsonObj.get("time_ago").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_ago` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_ago").toString()));
      }
      // validate the optional field `rectangle`
      if (jsonObj.get("rectangle") != null && !jsonObj.get("rectangle").isJsonNull()) {
        Rectangle.validateJsonElement(jsonObj.get("rectangle"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SerpGoogleJobsTaskGetAdvancedItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SerpGoogleJobsTaskGetAdvancedItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SerpGoogleJobsTaskGetAdvancedItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SerpGoogleJobsTaskGetAdvancedItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SerpGoogleJobsTaskGetAdvancedItem>() {
           @Override
           public void write(JsonWriter out, SerpGoogleJobsTaskGetAdvancedItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public SerpGoogleJobsTaskGetAdvancedItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             SerpGoogleJobsTaskGetAdvancedItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SerpGoogleJobsTaskGetAdvancedItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SerpGoogleJobsTaskGetAdvancedItem
   * @throws IOException if the JSON string is invalid with respect to SerpGoogleJobsTaskGetAdvancedItem
   */
  public static SerpGoogleJobsTaskGetAdvancedItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SerpGoogleJobsTaskGetAdvancedItem.class);
  }

  /**
   * Convert an instance of SerpGoogleJobsTaskGetAdvancedItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

