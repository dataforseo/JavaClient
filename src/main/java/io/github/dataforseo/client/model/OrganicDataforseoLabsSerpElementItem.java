/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.AboutThisResultElement;
import io.github.dataforseo.client.model.AdLinkElement;
import io.github.dataforseo.client.model.BacklinksInfo;
import io.github.dataforseo.client.model.BaseDataforseoLabsSerpElementItem;
import io.github.dataforseo.client.model.RankChanges;
import io.github.dataforseo.client.model.RankInfo;
import io.github.dataforseo.client.model.RatingInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * OrganicDataforseoLabsSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-11T19:55:34.761968200+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class OrganicDataforseoLabsSerpElementItem extends BaseDataforseoLabsSerpElementItem {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_BREADCRUMB = "breadcrumb";
  @SerializedName(SERIALIZED_NAME_BREADCRUMB)
  private String breadcrumb;

  public static final String SERIALIZED_NAME_WEBSITE_NAME = "website_name";
  @SerializedName(SERIALIZED_NAME_WEBSITE_NAME)
  private String websiteName;

  public static final String SERIALIZED_NAME_IS_IMAGE = "is_image";
  @SerializedName(SERIALIZED_NAME_IS_IMAGE)
  private Boolean isImage;

  public static final String SERIALIZED_NAME_IS_VIDEO = "is_video";
  @SerializedName(SERIALIZED_NAME_IS_VIDEO)
  private Boolean isVideo;

  public static final String SERIALIZED_NAME_IS_FEATURED_SNIPPET = "is_featured_snippet";
  @SerializedName(SERIALIZED_NAME_IS_FEATURED_SNIPPET)
  private Boolean isFeaturedSnippet;

  public static final String SERIALIZED_NAME_IS_MALICIOUS = "is_malicious";
  @SerializedName(SERIALIZED_NAME_IS_MALICIOUS)
  private Boolean isMalicious;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_PRE_SNIPPET = "pre_snippet";
  @SerializedName(SERIALIZED_NAME_PRE_SNIPPET)
  private String preSnippet;

  public static final String SERIALIZED_NAME_EXTENDED_SNIPPET = "extended_snippet";
  @SerializedName(SERIALIZED_NAME_EXTENDED_SNIPPET)
  private String extendedSnippet;

  public static final String SERIALIZED_NAME_AMP_VERSION = "amp_version";
  @SerializedName(SERIALIZED_NAME_AMP_VERSION)
  private Boolean ampVersion;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingInfo rating;

  public static final String SERIALIZED_NAME_HIGHLIGHTED = "highlighted";
  @SerializedName(SERIALIZED_NAME_HIGHLIGHTED)
  private List<String> highlighted;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<AdLinkElement> links;

  public static final String SERIALIZED_NAME_ABOUT_THIS_RESULT = "about_this_result";
  @SerializedName(SERIALIZED_NAME_ABOUT_THIS_RESULT)
  private Map<String, AboutThisResultElement> aboutThisResult;

  public static final String SERIALIZED_NAME_MAIN_DOMAIN = "main_domain";
  @SerializedName(SERIALIZED_NAME_MAIN_DOMAIN)
  private String mainDomain;

  public static final String SERIALIZED_NAME_RELATIVE_URL = "relative_url";
  @SerializedName(SERIALIZED_NAME_RELATIVE_URL)
  private String relativeUrl;

  public static final String SERIALIZED_NAME_ETV = "etv";
  @SerializedName(SERIALIZED_NAME_ETV)
  private Float etv;

  public static final String SERIALIZED_NAME_IMPRESSIONS_ETV = "impressions_etv";
  @SerializedName(SERIALIZED_NAME_IMPRESSIONS_ETV)
  private Float impressionsEtv;

  public static final String SERIALIZED_NAME_ESTIMATED_PAID_TRAFFIC_COST = "estimated_paid_traffic_cost";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_PAID_TRAFFIC_COST)
  private Float estimatedPaidTrafficCost;

  public static final String SERIALIZED_NAME_CLICKSTREAM_ETV = "clickstream_etv";
  @SerializedName(SERIALIZED_NAME_CLICKSTREAM_ETV)
  private Integer clickstreamEtv;

  public static final String SERIALIZED_NAME_RANK_CHANGES = "rank_changes";
  @SerializedName(SERIALIZED_NAME_RANK_CHANGES)
  private RankChanges rankChanges;

  public static final String SERIALIZED_NAME_BACKLINKS_INFO = "backlinks_info";
  @SerializedName(SERIALIZED_NAME_BACKLINKS_INFO)
  private BacklinksInfo backlinksInfo;

  public static final String SERIALIZED_NAME_RANK_INFO = "rank_info";
  @SerializedName(SERIALIZED_NAME_RANK_INFO)
  private RankInfo rankInfo;

  public OrganicDataforseoLabsSerpElementItem() {
  }

  public OrganicDataforseoLabsSerpElementItem seType(String seType) {
    this.seType = seType;
    return this;
  }

  /**
   * search engine type
   * @return seType
   */
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public OrganicDataforseoLabsSerpElementItem domain(String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * subdomain in SERP
   * @return domain
   */
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public OrganicDataforseoLabsSerpElementItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * title of the result in SERP
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public OrganicDataforseoLabsSerpElementItem url(String url) {
    this.url = url;
    return this;
  }

  /**
   * relevant URL in SERP
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public OrganicDataforseoLabsSerpElementItem breadcrumb(String breadcrumb) {
    this.breadcrumb = breadcrumb;
    return this;
  }

  /**
   * breadcrumb in SERP
   * @return breadcrumb
   */
  @javax.annotation.Nullable
  public String getBreadcrumb() {
    return breadcrumb;
  }

  public void setBreadcrumb(String breadcrumb) {
    this.breadcrumb = breadcrumb;
  }


  public OrganicDataforseoLabsSerpElementItem websiteName(String websiteName) {
    this.websiteName = websiteName;
    return this;
  }

  /**
   * relevant website name in SERP
   * @return websiteName
   */
  @javax.annotation.Nullable
  public String getWebsiteName() {
    return websiteName;
  }

  public void setWebsiteName(String websiteName) {
    this.websiteName = websiteName;
  }


  public OrganicDataforseoLabsSerpElementItem isImage(Boolean isImage) {
    this.isImage = isImage;
    return this;
  }

  /**
   * indicates whether the element contains anÂ image
   * @return isImage
   */
  @javax.annotation.Nullable
  public Boolean getIsImage() {
    return isImage;
  }

  public void setIsImage(Boolean isImage) {
    this.isImage = isImage;
  }


  public OrganicDataforseoLabsSerpElementItem isVideo(Boolean isVideo) {
    this.isVideo = isVideo;
    return this;
  }

  /**
   * indicates whether the element contains a video
   * @return isVideo
   */
  @javax.annotation.Nullable
  public Boolean getIsVideo() {
    return isVideo;
  }

  public void setIsVideo(Boolean isVideo) {
    this.isVideo = isVideo;
  }


  public OrganicDataforseoLabsSerpElementItem isFeaturedSnippet(Boolean isFeaturedSnippet) {
    this.isFeaturedSnippet = isFeaturedSnippet;
    return this;
  }

  /**
   * indicates whether the element is a featured_snippet
   * @return isFeaturedSnippet
   */
  @javax.annotation.Nullable
  public Boolean getIsFeaturedSnippet() {
    return isFeaturedSnippet;
  }

  public void setIsFeaturedSnippet(Boolean isFeaturedSnippet) {
    this.isFeaturedSnippet = isFeaturedSnippet;
  }


  public OrganicDataforseoLabsSerpElementItem isMalicious(Boolean isMalicious) {
    this.isMalicious = isMalicious;
    return this;
  }

  /**
   * indicates whether the element is marked as malicious
   * @return isMalicious
   */
  @javax.annotation.Nullable
  public Boolean getIsMalicious() {
    return isMalicious;
  }

  public void setIsMalicious(Boolean isMalicious) {
    this.isMalicious = isMalicious;
  }


  public OrganicDataforseoLabsSerpElementItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * description of the results element in SERP
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public OrganicDataforseoLabsSerpElementItem preSnippet(String preSnippet) {
    this.preSnippet = preSnippet;
    return this;
  }

  /**
   * includes additional information appended before the result description in SERP
   * @return preSnippet
   */
  @javax.annotation.Nullable
  public String getPreSnippet() {
    return preSnippet;
  }

  public void setPreSnippet(String preSnippet) {
    this.preSnippet = preSnippet;
  }


  public OrganicDataforseoLabsSerpElementItem extendedSnippet(String extendedSnippet) {
    this.extendedSnippet = extendedSnippet;
    return this;
  }

  /**
   * includes additional information appended after the result description in SERP
   * @return extendedSnippet
   */
  @javax.annotation.Nullable
  public String getExtendedSnippet() {
    return extendedSnippet;
  }

  public void setExtendedSnippet(String extendedSnippet) {
    this.extendedSnippet = extendedSnippet;
  }


  public OrganicDataforseoLabsSerpElementItem ampVersion(Boolean ampVersion) {
    this.ampVersion = ampVersion;
    return this;
  }

  /**
   * Accelerated Mobile Pages indicates whether an item has the Accelerated Mobile Page (AMP) version
   * @return ampVersion
   */
  @javax.annotation.Nullable
  public Boolean getAmpVersion() {
    return ampVersion;
  }

  public void setAmpVersion(Boolean ampVersion) {
    this.ampVersion = ampVersion;
  }


  public OrganicDataforseoLabsSerpElementItem rating(RatingInfo rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public RatingInfo getRating() {
    return rating;
  }

  public void setRating(RatingInfo rating) {
    this.rating = rating;
  }


  public OrganicDataforseoLabsSerpElementItem highlighted(List<String> highlighted) {
    this.highlighted = highlighted;
    return this;
  }

  public OrganicDataforseoLabsSerpElementItem addHighlightedItem(String highlightedItem) {
    if (this.highlighted == null) {
      this.highlighted = new ArrayList<>();
    }
    this.highlighted.add(highlightedItem);
    return this;
  }

  /**
   * words highlighted in bold within the results description
   * @return highlighted
   */
  @javax.annotation.Nullable
  public List<String> getHighlighted() {
    return highlighted;
  }

  public void setHighlighted(List<String> highlighted) {
    this.highlighted = highlighted;
  }


  public OrganicDataforseoLabsSerpElementItem links(List<AdLinkElement> links) {
    this.links = links;
    return this;
  }

  public OrganicDataforseoLabsSerpElementItem addLinksItem(AdLinkElement linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

  /**
   * sitelinks the links shown below some of Googleâs search results if there are none, equals null
   * @return links
   */
  @javax.annotation.Nullable
  public List<AdLinkElement> getLinks() {
    return links;
  }

  public void setLinks(List<AdLinkElement> links) {
    this.links = links;
  }


  public OrganicDataforseoLabsSerpElementItem aboutThisResult(Map<String, AboutThisResultElement> aboutThisResult) {
    this.aboutThisResult = aboutThisResult;
    return this;
  }

  public OrganicDataforseoLabsSerpElementItem putAboutThisResultItem(String key, AboutThisResultElement aboutThisResultItem) {
    if (this.aboutThisResult == null) {
      this.aboutThisResult = new HashMap<>();
    }
    this.aboutThisResult.put(key, aboutThisResultItem);
    return this;
  }

  /**
   * contains information from the âAbout this resultâ panel âAbout this resultâ panel provides additional context about why Google returned this result for the given query; this feature appears after clicking on the three dots next to most results
   * @return aboutThisResult
   */
  @javax.annotation.Nullable
  public Map<String, AboutThisResultElement> getAboutThisResult() {
    return aboutThisResult;
  }

  public void setAboutThisResult(Map<String, AboutThisResultElement> aboutThisResult) {
    this.aboutThisResult = aboutThisResult;
  }


  public OrganicDataforseoLabsSerpElementItem mainDomain(String mainDomain) {
    this.mainDomain = mainDomain;
    return this;
  }

  /**
   * primary domain name in SERP
   * @return mainDomain
   */
  @javax.annotation.Nullable
  public String getMainDomain() {
    return mainDomain;
  }

  public void setMainDomain(String mainDomain) {
    this.mainDomain = mainDomain;
  }


  public OrganicDataforseoLabsSerpElementItem relativeUrl(String relativeUrl) {
    this.relativeUrl = relativeUrl;
    return this;
  }

  /**
   * URL in SERP that does not specify the HTTPs protocol and domain name
   * @return relativeUrl
   */
  @javax.annotation.Nullable
  public String getRelativeUrl() {
    return relativeUrl;
  }

  public void setRelativeUrl(String relativeUrl) {
    this.relativeUrl = relativeUrl;
  }


  public OrganicDataforseoLabsSerpElementItem etv(Float etv) {
    this.etv = etv;
    return this;
  }

  /**
   * estimated traffic volume estimated paid monthly traffic to the domain calculated as the product of CTR (click-through-rate) and search volume values of all keywords in the category that the domain ranks for learn more about how the metric is calculated in this help center article
   * @return etv
   */
  @javax.annotation.Nullable
  public Float getEtv() {
    return etv;
  }

  public void setEtv(Float etv) {
    this.etv = etv;
  }


  public OrganicDataforseoLabsSerpElementItem impressionsEtv(Float impressionsEtv) {
    this.impressionsEtv = impressionsEtv;
    return this;
  }

  /**
   * estimated traffic volume based on impressions estimated paid monthly traffic to the domain calculated as the product of CTR (click-through-rate) and impressions values of all keywords in the category that the domain ranks for learn more about how the metric is calculated in this help center article
   * @return impressionsEtv
   */
  @javax.annotation.Nullable
  public Float getImpressionsEtv() {
    return impressionsEtv;
  }

  public void setImpressionsEtv(Float impressionsEtv) {
    this.impressionsEtv = impressionsEtv;
  }


  public OrganicDataforseoLabsSerpElementItem estimatedPaidTrafficCost(Float estimatedPaidTrafficCost) {
    this.estimatedPaidTrafficCost = estimatedPaidTrafficCost;
    return this;
  }

  /**
   * estimated cost of monthly search traffic represents the estimated cost of paid monthly traffic (USD) based on etv and cpc values of all keywords in the category that the domain ranks for learn more about how the metric is calculated in this help center article
   * @return estimatedPaidTrafficCost
   */
  @javax.annotation.Nullable
  public Float getEstimatedPaidTrafficCost() {
    return estimatedPaidTrafficCost;
  }

  public void setEstimatedPaidTrafficCost(Float estimatedPaidTrafficCost) {
    this.estimatedPaidTrafficCost = estimatedPaidTrafficCost;
  }


  public OrganicDataforseoLabsSerpElementItem clickstreamEtv(Integer clickstreamEtv) {
    this.clickstreamEtv = clickstreamEtv;
    return this;
  }

  /**
   * estimated traffic volume based on clickstream data calculated as the product of click-through-rate and clickstream search volume values of all keywords the domain ranks for to retrieve results for this field, the parameter include_clickstream_data must be set to true learn more about how the metric is calculated in this help center article
   * @return clickstreamEtv
   */
  @javax.annotation.Nullable
  public Integer getClickstreamEtv() {
    return clickstreamEtv;
  }

  public void setClickstreamEtv(Integer clickstreamEtv) {
    this.clickstreamEtv = clickstreamEtv;
  }


  public OrganicDataforseoLabsSerpElementItem rankChanges(RankChanges rankChanges) {
    this.rankChanges = rankChanges;
    return this;
  }

  /**
   * Get rankChanges
   * @return rankChanges
   */
  @javax.annotation.Nullable
  public RankChanges getRankChanges() {
    return rankChanges;
  }

  public void setRankChanges(RankChanges rankChanges) {
    this.rankChanges = rankChanges;
  }


  public OrganicDataforseoLabsSerpElementItem backlinksInfo(BacklinksInfo backlinksInfo) {
    this.backlinksInfo = backlinksInfo;
    return this;
  }

  /**
   * Get backlinksInfo
   * @return backlinksInfo
   */
  @javax.annotation.Nullable
  public BacklinksInfo getBacklinksInfo() {
    return backlinksInfo;
  }

  public void setBacklinksInfo(BacklinksInfo backlinksInfo) {
    this.backlinksInfo = backlinksInfo;
  }


  public OrganicDataforseoLabsSerpElementItem rankInfo(RankInfo rankInfo) {
    this.rankInfo = rankInfo;
    return this;
  }

  /**
   * Get rankInfo
   * @return rankInfo
   */
  @javax.annotation.Nullable
  public RankInfo getRankInfo() {
    return rankInfo;
  }

  public void setRankInfo(RankInfo rankInfo) {
    this.rankInfo = rankInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OrganicDataforseoLabsSerpElementItem instance itself
   */
  public OrganicDataforseoLabsSerpElementItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganicDataforseoLabsSerpElementItem organicDataforseoLabsSerpElementItem = (OrganicDataforseoLabsSerpElementItem) o;
    return Objects.equals(this.seType, organicDataforseoLabsSerpElementItem.seType) &&
        Objects.equals(this.domain, organicDataforseoLabsSerpElementItem.domain) &&
        Objects.equals(this.title, organicDataforseoLabsSerpElementItem.title) &&
        Objects.equals(this.url, organicDataforseoLabsSerpElementItem.url) &&
        Objects.equals(this.breadcrumb, organicDataforseoLabsSerpElementItem.breadcrumb) &&
        Objects.equals(this.websiteName, organicDataforseoLabsSerpElementItem.websiteName) &&
        Objects.equals(this.isImage, organicDataforseoLabsSerpElementItem.isImage) &&
        Objects.equals(this.isVideo, organicDataforseoLabsSerpElementItem.isVideo) &&
        Objects.equals(this.isFeaturedSnippet, organicDataforseoLabsSerpElementItem.isFeaturedSnippet) &&
        Objects.equals(this.isMalicious, organicDataforseoLabsSerpElementItem.isMalicious) &&
        Objects.equals(this.description, organicDataforseoLabsSerpElementItem.description) &&
        Objects.equals(this.preSnippet, organicDataforseoLabsSerpElementItem.preSnippet) &&
        Objects.equals(this.extendedSnippet, organicDataforseoLabsSerpElementItem.extendedSnippet) &&
        Objects.equals(this.ampVersion, organicDataforseoLabsSerpElementItem.ampVersion) &&
        Objects.equals(this.rating, organicDataforseoLabsSerpElementItem.rating) &&
        Objects.equals(this.highlighted, organicDataforseoLabsSerpElementItem.highlighted) &&
        Objects.equals(this.links, organicDataforseoLabsSerpElementItem.links) &&
        Objects.equals(this.aboutThisResult, organicDataforseoLabsSerpElementItem.aboutThisResult) &&
        Objects.equals(this.mainDomain, organicDataforseoLabsSerpElementItem.mainDomain) &&
        Objects.equals(this.relativeUrl, organicDataforseoLabsSerpElementItem.relativeUrl) &&
        Objects.equals(this.etv, organicDataforseoLabsSerpElementItem.etv) &&
        Objects.equals(this.impressionsEtv, organicDataforseoLabsSerpElementItem.impressionsEtv) &&
        Objects.equals(this.estimatedPaidTrafficCost, organicDataforseoLabsSerpElementItem.estimatedPaidTrafficCost) &&
        Objects.equals(this.clickstreamEtv, organicDataforseoLabsSerpElementItem.clickstreamEtv) &&
        Objects.equals(this.rankChanges, organicDataforseoLabsSerpElementItem.rankChanges) &&
        Objects.equals(this.backlinksInfo, organicDataforseoLabsSerpElementItem.backlinksInfo) &&
        Objects.equals(this.rankInfo, organicDataforseoLabsSerpElementItem.rankInfo)&&
        Objects.equals(this.additionalProperties, organicDataforseoLabsSerpElementItem.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, domain, title, url, breadcrumb, websiteName, isImage, isVideo, isFeaturedSnippet, isMalicious, description, preSnippet, extendedSnippet, ampVersion, rating, highlighted, links, aboutThisResult, mainDomain, relativeUrl, etv, impressionsEtv, estimatedPaidTrafficCost, clickstreamEtv, rankChanges, backlinksInfo, rankInfo, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganicDataforseoLabsSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    breadcrumb: ").append(toIndentedString(breadcrumb)).append("\n");
    sb.append("    websiteName: ").append(toIndentedString(websiteName)).append("\n");
    sb.append("    isImage: ").append(toIndentedString(isImage)).append("\n");
    sb.append("    isVideo: ").append(toIndentedString(isVideo)).append("\n");
    sb.append("    isFeaturedSnippet: ").append(toIndentedString(isFeaturedSnippet)).append("\n");
    sb.append("    isMalicious: ").append(toIndentedString(isMalicious)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    preSnippet: ").append(toIndentedString(preSnippet)).append("\n");
    sb.append("    extendedSnippet: ").append(toIndentedString(extendedSnippet)).append("\n");
    sb.append("    ampVersion: ").append(toIndentedString(ampVersion)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    highlighted: ").append(toIndentedString(highlighted)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    aboutThisResult: ").append(toIndentedString(aboutThisResult)).append("\n");
    sb.append("    mainDomain: ").append(toIndentedString(mainDomain)).append("\n");
    sb.append("    relativeUrl: ").append(toIndentedString(relativeUrl)).append("\n");
    sb.append("    etv: ").append(toIndentedString(etv)).append("\n");
    sb.append("    impressionsEtv: ").append(toIndentedString(impressionsEtv)).append("\n");
    sb.append("    estimatedPaidTrafficCost: ").append(toIndentedString(estimatedPaidTrafficCost)).append("\n");
    sb.append("    clickstreamEtv: ").append(toIndentedString(clickstreamEtv)).append("\n");
    sb.append("    rankChanges: ").append(toIndentedString(rankChanges)).append("\n");
    sb.append("    backlinksInfo: ").append(toIndentedString(backlinksInfo)).append("\n");
    sb.append("    rankInfo: ").append(toIndentedString(rankInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("position");
    openapiFields.add("xpath");
    openapiFields.add("se_type");
    openapiFields.add("domain");
    openapiFields.add("title");
    openapiFields.add("url");
    openapiFields.add("breadcrumb");
    openapiFields.add("website_name");
    openapiFields.add("is_image");
    openapiFields.add("is_video");
    openapiFields.add("is_featured_snippet");
    openapiFields.add("is_malicious");
    openapiFields.add("description");
    openapiFields.add("pre_snippet");
    openapiFields.add("extended_snippet");
    openapiFields.add("amp_version");
    openapiFields.add("rating");
    openapiFields.add("highlighted");
    openapiFields.add("links");
    openapiFields.add("about_this_result");
    openapiFields.add("main_domain");
    openapiFields.add("relative_url");
    openapiFields.add("etv");
    openapiFields.add("impressions_etv");
    openapiFields.add("estimated_paid_traffic_cost");
    openapiFields.add("clickstream_etv");
    openapiFields.add("rank_changes");
    openapiFields.add("backlinks_info");
    openapiFields.add("rank_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganicDataforseoLabsSerpElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OrganicDataforseoLabsSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganicDataforseoLabsSerpElementItem is not found in the empty JSON string", OrganicDataforseoLabsSerpElementItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      if ((jsonObj.get("domain") != null && !jsonObj.get("domain").isJsonNull()) && !jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("breadcrumb") != null && !jsonObj.get("breadcrumb").isJsonNull()) && !jsonObj.get("breadcrumb").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breadcrumb` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breadcrumb").toString()));
      }
      if ((jsonObj.get("website_name") != null && !jsonObj.get("website_name").isJsonNull()) && !jsonObj.get("website_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website_name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("pre_snippet") != null && !jsonObj.get("pre_snippet").isJsonNull()) && !jsonObj.get("pre_snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pre_snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pre_snippet").toString()));
      }
      if ((jsonObj.get("extended_snippet") != null && !jsonObj.get("extended_snippet").isJsonNull()) && !jsonObj.get("extended_snippet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extended_snippet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extended_snippet").toString()));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        RatingInfo.validateJsonElement(jsonObj.get("rating"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("highlighted") != null && !jsonObj.get("highlighted").isJsonNull() && !jsonObj.get("highlighted").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `highlighted` to be an array in the JSON string but got `%s`", jsonObj.get("highlighted").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            AdLinkElement.validateJsonElement(jsonArraylinks.get(i));
          };
        }
      }
      if ((jsonObj.get("main_domain") != null && !jsonObj.get("main_domain").isJsonNull()) && !jsonObj.get("main_domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `main_domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("main_domain").toString()));
      }
      if ((jsonObj.get("relative_url") != null && !jsonObj.get("relative_url").isJsonNull()) && !jsonObj.get("relative_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relative_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relative_url").toString()));
      }
      // validate the optional field `rank_changes`
      if (jsonObj.get("rank_changes") != null && !jsonObj.get("rank_changes").isJsonNull()) {
        RankChanges.validateJsonElement(jsonObj.get("rank_changes"));
      }
      // validate the optional field `backlinks_info`
      if (jsonObj.get("backlinks_info") != null && !jsonObj.get("backlinks_info").isJsonNull()) {
        BacklinksInfo.validateJsonElement(jsonObj.get("backlinks_info"));
      }
      // validate the optional field `rank_info`
      if (jsonObj.get("rank_info") != null && !jsonObj.get("rank_info").isJsonNull()) {
        RankInfo.validateJsonElement(jsonObj.get("rank_info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganicDataforseoLabsSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganicDataforseoLabsSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganicDataforseoLabsSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganicDataforseoLabsSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganicDataforseoLabsSerpElementItem>() {
           @Override
           public void write(JsonWriter out, OrganicDataforseoLabsSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganicDataforseoLabsSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OrganicDataforseoLabsSerpElementItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganicDataforseoLabsSerpElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganicDataforseoLabsSerpElementItem
   * @throws IOException if the JSON string is invalid with respect to OrganicDataforseoLabsSerpElementItem
   */
  public static OrganicDataforseoLabsSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganicDataforseoLabsSerpElementItem.class);
  }

  /**
   * Convert an instance of OrganicDataforseoLabsSerpElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

