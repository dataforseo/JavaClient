/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * ContentGenerationGenerateTextLiveRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-24T10:03:11.930414100+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class ContentGenerationGenerateTextLiveRequestInfo {
  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_WORD_COUNT = "word_count";
  @SerializedName(SERIALIZED_NAME_WORD_COUNT)
  private Long wordCount;

  public static final String SERIALIZED_NAME_SUB_TOPICS = "sub_topics";
  @SerializedName(SERIALIZED_NAME_SUB_TOPICS)
  private List<String> subTopics;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_META_KEYWORDS = "meta_keywords";
  @SerializedName(SERIALIZED_NAME_META_KEYWORDS)
  private List<String> metaKeywords;

  public static final String SERIALIZED_NAME_CREATIVITY_INDEX = "creativity_index";
  @SerializedName(SERIALIZED_NAME_CREATIVITY_INDEX)
  private Float creativityIndex;

  public static final String SERIALIZED_NAME_INCLUDE_CONCLUSION = "include_conclusion";
  @SerializedName(SERIALIZED_NAME_INCLUDE_CONCLUSION)
  private Boolean includeConclusion;

  public static final String SERIALIZED_NAME_SUPPLEMENT_TOKEN = "supplement_token";
  @SerializedName(SERIALIZED_NAME_SUPPLEMENT_TOKEN)
  private String supplementToken;

  public static final String SERIALIZED_NAME_TAG = "tag";
  @SerializedName(SERIALIZED_NAME_TAG)
  private String tag;

  public ContentGenerationGenerateTextLiveRequestInfo() {
  }

  public ContentGenerationGenerateTextLiveRequestInfo topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * main topic of the content to generate required field main topic for generating content; can contain from 1 to 50 tokens
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public ContentGenerationGenerateTextLiveRequestInfo wordCount(Long wordCount) {
    this.wordCount = wordCount;
    return this;
  }

  /**
   * number of words in content required field the number of tokens in the generated text; can take values from 1 to 1000
   * @return wordCount
   */
  @javax.annotation.Nullable
  public Long getWordCount() {
    return wordCount;
  }

  public void setWordCount(Long wordCount) {
    this.wordCount = wordCount;
  }


  public ContentGenerationGenerateTextLiveRequestInfo subTopics(List<String> subTopics) {
    this.subTopics = subTopics;
    return this;
  }

  public ContentGenerationGenerateTextLiveRequestInfo addSubTopicsItem(String subTopicsItem) {
    if (this.subTopics == null) {
      this.subTopics = new ArrayList<>();
    }
    this.subTopics.add(subTopicsItem);
    return this;
  }

  /**
   * secondary topics of the content to generate optional field secondary topics for generating content; can contain up to 10 terms; example: \&quot;sub_topics\&quot;: [\&quot;Apple\&quot;,\&quot;Pixar\&quot;,\&quot;Amazing Products\&quot;]
   * @return subTopics
   */
  @javax.annotation.Nullable
  public List<String> getSubTopics() {
    return subTopics;
  }

  public void setSubTopics(List<String> subTopics) {
    this.subTopics = subTopics;
  }


  public ContentGenerationGenerateTextLiveRequestInfo description(String description) {
    this.description = description;
    return this;
  }

  /**
   * meta description of the content to generate optional field can contain from 1 to 1000 tokens learn more about this parameter on our help center
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ContentGenerationGenerateTextLiveRequestInfo metaKeywords(List<String> metaKeywords) {
    this.metaKeywords = metaKeywords;
    return this;
  }

  public ContentGenerationGenerateTextLiveRequestInfo addMetaKeywordsItem(String metaKeywordsItem) {
    if (this.metaKeywords == null) {
      this.metaKeywords = new ArrayList<>();
    }
    this.metaKeywords.add(metaKeywordsItem);
    return this;
  }

  /**
   * keywords for the content to generate optional field can contain up to 10 terms; learn more about this parameter on our help center example: \&quot;meta_keywords\&quot;: [\&quot;iPhone\&quot;,\&quot;sell\&quot;,\&quot;CEO\&quot;]
   * @return metaKeywords
   */
  @javax.annotation.Nullable
  public List<String> getMetaKeywords() {
    return metaKeywords;
  }

  public void setMetaKeywords(List<String> metaKeywords) {
    this.metaKeywords = metaKeywords;
  }


  public ContentGenerationGenerateTextLiveRequestInfo creativityIndex(Float creativityIndex) {
    this.creativityIndex = creativityIndex;
    return this;
  }

  /**
   * creativity of content generation optional field the randomness of the selection of equally probable subsequent tokens; can take values from 0 to 1 default value: 0.8 learn more about this parameter on our help center
   * @return creativityIndex
   */
  @javax.annotation.Nullable
  public Float getCreativityIndex() {
    return creativityIndex;
  }

  public void setCreativityIndex(Float creativityIndex) {
    this.creativityIndex = creativityIndex;
  }


  public ContentGenerationGenerateTextLiveRequestInfo includeConclusion(Boolean includeConclusion) {
    this.includeConclusion = includeConclusion;
    return this;
  }

  /**
   * include conclusion in generated text optional field if set to true, generated content will include a logical conclusion
   * @return includeConclusion
   */
  @javax.annotation.Nullable
  public Boolean getIncludeConclusion() {
    return includeConclusion;
  }

  public void setIncludeConclusion(Boolean includeConclusion) {
    this.includeConclusion = includeConclusion;
  }


  public ContentGenerationGenerateTextLiveRequestInfo supplementToken(String supplementToken) {
    this.supplementToken = supplementToken;
    return this;
  }

  /**
   * token for generating subsequent results optional field provided in the identical filed of the response to each request; you can use this parameter to continue the generation of text from the initial response supplement_token values are unique for each subsequent task
   * @return supplementToken
   */
  @javax.annotation.Nullable
  public String getSupplementToken() {
    return supplementToken;
  }

  public void setSupplementToken(String supplementToken) {
    this.supplementToken = supplementToken;
  }


  public ContentGenerationGenerateTextLiveRequestInfo tag(String tag) {
    this.tag = tag;
    return this;
  }

  /**
   * user-defined task identifier optional field the character limit is 255 you can use this parameter to identify the task and match it with the result you will find the specified tag value in the data object of the response
   * @return tag
   */
  @javax.annotation.Nullable
  public String getTag() {
    return tag;
  }

  public void setTag(String tag) {
    this.tag = tag;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContentGenerationGenerateTextLiveRequestInfo instance itself
   */
  public ContentGenerationGenerateTextLiveRequestInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentGenerationGenerateTextLiveRequestInfo contentGenerationGenerateTextLiveRequestInfo = (ContentGenerationGenerateTextLiveRequestInfo) o;
    return Objects.equals(this.topic, contentGenerationGenerateTextLiveRequestInfo.topic) &&
        Objects.equals(this.wordCount, contentGenerationGenerateTextLiveRequestInfo.wordCount) &&
        Objects.equals(this.subTopics, contentGenerationGenerateTextLiveRequestInfo.subTopics) &&
        Objects.equals(this.description, contentGenerationGenerateTextLiveRequestInfo.description) &&
        Objects.equals(this.metaKeywords, contentGenerationGenerateTextLiveRequestInfo.metaKeywords) &&
        Objects.equals(this.creativityIndex, contentGenerationGenerateTextLiveRequestInfo.creativityIndex) &&
        Objects.equals(this.includeConclusion, contentGenerationGenerateTextLiveRequestInfo.includeConclusion) &&
        Objects.equals(this.supplementToken, contentGenerationGenerateTextLiveRequestInfo.supplementToken) &&
        Objects.equals(this.tag, contentGenerationGenerateTextLiveRequestInfo.tag)&&
        Objects.equals(this.additionalProperties, contentGenerationGenerateTextLiveRequestInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(topic, wordCount, subTopics, description, metaKeywords, creativityIndex, includeConclusion, supplementToken, tag, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentGenerationGenerateTextLiveRequestInfo {\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    wordCount: ").append(toIndentedString(wordCount)).append("\n");
    sb.append("    subTopics: ").append(toIndentedString(subTopics)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    metaKeywords: ").append(toIndentedString(metaKeywords)).append("\n");
    sb.append("    creativityIndex: ").append(toIndentedString(creativityIndex)).append("\n");
    sb.append("    includeConclusion: ").append(toIndentedString(includeConclusion)).append("\n");
    sb.append("    supplementToken: ").append(toIndentedString(supplementToken)).append("\n");
    sb.append("    tag: ").append(toIndentedString(tag)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("topic");
    openapiFields.add("word_count");
    openapiFields.add("sub_topics");
    openapiFields.add("description");
    openapiFields.add("meta_keywords");
    openapiFields.add("creativity_index");
    openapiFields.add("include_conclusion");
    openapiFields.add("supplement_token");
    openapiFields.add("tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentGenerationGenerateTextLiveRequestInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentGenerationGenerateTextLiveRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentGenerationGenerateTextLiveRequestInfo is not found in the empty JSON string", ContentGenerationGenerateTextLiveRequestInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sub_topics") != null && !jsonObj.get("sub_topics").isJsonNull() && !jsonObj.get("sub_topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_topics` to be an array in the JSON string but got `%s`", jsonObj.get("sub_topics").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("meta_keywords") != null && !jsonObj.get("meta_keywords").isJsonNull() && !jsonObj.get("meta_keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `meta_keywords` to be an array in the JSON string but got `%s`", jsonObj.get("meta_keywords").toString()));
      }
      if ((jsonObj.get("supplement_token") != null && !jsonObj.get("supplement_token").isJsonNull()) && !jsonObj.get("supplement_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplement_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplement_token").toString()));
      }
      if ((jsonObj.get("tag") != null && !jsonObj.get("tag").isJsonNull()) && !jsonObj.get("tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentGenerationGenerateTextLiveRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentGenerationGenerateTextLiveRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentGenerationGenerateTextLiveRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentGenerationGenerateTextLiveRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentGenerationGenerateTextLiveRequestInfo>() {
           @Override
           public void write(JsonWriter out, ContentGenerationGenerateTextLiveRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentGenerationGenerateTextLiveRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ContentGenerationGenerateTextLiveRequestInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentGenerationGenerateTextLiveRequestInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentGenerationGenerateTextLiveRequestInfo
   * @throws IOException if the JSON string is invalid with respect to ContentGenerationGenerateTextLiveRequestInfo
   */
  public static ContentGenerationGenerateTextLiveRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentGenerationGenerateTextLiveRequestInfo.class);
  }

  /**
   * Convert an instance of ContentGenerationGenerateTextLiveRequestInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

