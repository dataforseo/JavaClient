/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * PageTiming
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-10T21:39:12.196275300+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class PageTiming {
  public static final String SERIALIZED_NAME_TIME_TO_INTERACTIVE = "time_to_interactive";
  @SerializedName(SERIALIZED_NAME_TIME_TO_INTERACTIVE)
  private Integer timeToInteractive;

  public static final String SERIALIZED_NAME_DOM_COMPLETE = "dom_complete";
  @SerializedName(SERIALIZED_NAME_DOM_COMPLETE)
  private Integer domComplete;

  public static final String SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT = "largest_contentful_paint";
  @SerializedName(SERIALIZED_NAME_LARGEST_CONTENTFUL_PAINT)
  private Float largestContentfulPaint;

  public static final String SERIALIZED_NAME_FIRST_INPUT_DELAY = "first_input_delay";
  @SerializedName(SERIALIZED_NAME_FIRST_INPUT_DELAY)
  private Float firstInputDelay;

  public static final String SERIALIZED_NAME_CONNECTION_TIME = "connection_time";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TIME)
  private Integer connectionTime;

  public static final String SERIALIZED_NAME_TIME_TO_SECURE_CONNECTION = "time_to_secure_connection";
  @SerializedName(SERIALIZED_NAME_TIME_TO_SECURE_CONNECTION)
  private Integer timeToSecureConnection;

  public static final String SERIALIZED_NAME_REQUEST_SENT_TIME = "request_sent_time";
  @SerializedName(SERIALIZED_NAME_REQUEST_SENT_TIME)
  private Integer requestSentTime;

  public static final String SERIALIZED_NAME_WAITING_TIME = "waiting_time";
  @SerializedName(SERIALIZED_NAME_WAITING_TIME)
  private Integer waitingTime;

  public static final String SERIALIZED_NAME_DOWNLOAD_TIME = "download_time";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_TIME)
  private Integer downloadTime;

  public static final String SERIALIZED_NAME_DURATION_TIME = "duration_time";
  @SerializedName(SERIALIZED_NAME_DURATION_TIME)
  private Integer durationTime;

  public static final String SERIALIZED_NAME_FETCH_START = "fetch_start";
  @SerializedName(SERIALIZED_NAME_FETCH_START)
  private Integer fetchStart;

  public static final String SERIALIZED_NAME_FETCH_END = "fetch_end";
  @SerializedName(SERIALIZED_NAME_FETCH_END)
  private Integer fetchEnd;

  public PageTiming() {
  }

  public PageTiming timeToInteractive(Integer timeToInteractive) {
    this.timeToInteractive = timeToInteractive;
    return this;
  }

  /**
   * Time To Interactive (TTI) metric the time it takes until the user can interact with a page (in milliseconds)
   * @return timeToInteractive
   */
  @javax.annotation.Nullable
  public Integer getTimeToInteractive() {
    return timeToInteractive;
  }

  public void setTimeToInteractive(Integer timeToInteractive) {
    this.timeToInteractive = timeToInteractive;
  }


  public PageTiming domComplete(Integer domComplete) {
    this.domComplete = domComplete;
    return this;
  }

  /**
   * time to load resources the time it takes until the page and all of its subresources are downloaded (in milliseconds)
   * @return domComplete
   */
  @javax.annotation.Nullable
  public Integer getDomComplete() {
    return domComplete;
  }

  public void setDomComplete(Integer domComplete) {
    this.domComplete = domComplete;
  }


  public PageTiming largestContentfulPaint(Float largestContentfulPaint) {
    this.largestContentfulPaint = largestContentfulPaint;
    return this;
  }

  /**
   * Core Web Vitals metric measuring how fast the largest above-the-fold content element is displayed The amount of time (in milliseconds) to render the largest content element visible in the viewport, from when the user requests the URL. Learn more.
   * @return largestContentfulPaint
   */
  @javax.annotation.Nullable
  public Float getLargestContentfulPaint() {
    return largestContentfulPaint;
  }

  public void setLargestContentfulPaint(Float largestContentfulPaint) {
    this.largestContentfulPaint = largestContentfulPaint;
  }


  public PageTiming firstInputDelay(Float firstInputDelay) {
    this.firstInputDelay = firstInputDelay;
    return this;
  }

  /**
   * Core Web Vitals metric indicating the responsiveness of a page The time (in milliseconds) from when a user first interacts with your page to the time when the browser responds to that interaction. Learn more.
   * @return firstInputDelay
   */
  @javax.annotation.Nullable
  public Float getFirstInputDelay() {
    return firstInputDelay;
  }

  public void setFirstInputDelay(Float firstInputDelay) {
    this.firstInputDelay = firstInputDelay;
  }


  public PageTiming connectionTime(Integer connectionTime) {
    this.connectionTime = connectionTime;
    return this;
  }

  /**
   * time to connect to a server the time it takes until the connection with a server is established (in milliseconds)
   * @return connectionTime
   */
  @javax.annotation.Nullable
  public Integer getConnectionTime() {
    return connectionTime;
  }

  public void setConnectionTime(Integer connectionTime) {
    this.connectionTime = connectionTime;
  }


  public PageTiming timeToSecureConnection(Integer timeToSecureConnection) {
    this.timeToSecureConnection = timeToSecureConnection;
    return this;
  }

  /**
   * time to establish a secure connection the time it takes until the secure connection with a server is established (in milliseconds)
   * @return timeToSecureConnection
   */
  @javax.annotation.Nullable
  public Integer getTimeToSecureConnection() {
    return timeToSecureConnection;
  }

  public void setTimeToSecureConnection(Integer timeToSecureConnection) {
    this.timeToSecureConnection = timeToSecureConnection;
  }


  public PageTiming requestSentTime(Integer requestSentTime) {
    this.requestSentTime = requestSentTime;
    return this;
  }

  /**
   * time to send a request to a server the time it takes until the request to a server is sent (in milliseconds)
   * @return requestSentTime
   */
  @javax.annotation.Nullable
  public Integer getRequestSentTime() {
    return requestSentTime;
  }

  public void setRequestSentTime(Integer requestSentTime) {
    this.requestSentTime = requestSentTime;
  }


  public PageTiming waitingTime(Integer waitingTime) {
    this.waitingTime = waitingTime;
    return this;
  }

  /**
   * time to first byte (TTFB) in milliseconds
   * @return waitingTime
   */
  @javax.annotation.Nullable
  public Integer getWaitingTime() {
    return waitingTime;
  }

  public void setWaitingTime(Integer waitingTime) {
    this.waitingTime = waitingTime;
  }


  public PageTiming downloadTime(Integer downloadTime) {
    this.downloadTime = downloadTime;
    return this;
  }

  /**
   * time it takes for a browser to receive a response (in milliseconds)
   * @return downloadTime
   */
  @javax.annotation.Nullable
  public Integer getDownloadTime() {
    return downloadTime;
  }

  public void setDownloadTime(Integer downloadTime) {
    this.downloadTime = downloadTime;
  }


  public PageTiming durationTime(Integer durationTime) {
    this.durationTime = durationTime;
    return this;
  }

  /**
   * total time it takes until a browser receives a complete response from a server (in milliseconds)
   * @return durationTime
   */
  @javax.annotation.Nullable
  public Integer getDurationTime() {
    return durationTime;
  }

  public void setDurationTime(Integer durationTime) {
    this.durationTime = durationTime;
  }


  public PageTiming fetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
    return this;
  }

  /**
   * time to start downloading the HTML resource the amount of time the browser needs to start downloading a page
   * @return fetchStart
   */
  @javax.annotation.Nullable
  public Integer getFetchStart() {
    return fetchStart;
  }

  public void setFetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
  }


  public PageTiming fetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
    return this;
  }

  /**
   * time to complete downloading the HTML resource the amount of time the browser needs to complete downloading a page
   * @return fetchEnd
   */
  @javax.annotation.Nullable
  public Integer getFetchEnd() {
    return fetchEnd;
  }

  public void setFetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PageTiming instance itself
   */
  public PageTiming putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageTiming pageTiming = (PageTiming) o;
    return Objects.equals(this.timeToInteractive, pageTiming.timeToInteractive) &&
        Objects.equals(this.domComplete, pageTiming.domComplete) &&
        Objects.equals(this.largestContentfulPaint, pageTiming.largestContentfulPaint) &&
        Objects.equals(this.firstInputDelay, pageTiming.firstInputDelay) &&
        Objects.equals(this.connectionTime, pageTiming.connectionTime) &&
        Objects.equals(this.timeToSecureConnection, pageTiming.timeToSecureConnection) &&
        Objects.equals(this.requestSentTime, pageTiming.requestSentTime) &&
        Objects.equals(this.waitingTime, pageTiming.waitingTime) &&
        Objects.equals(this.downloadTime, pageTiming.downloadTime) &&
        Objects.equals(this.durationTime, pageTiming.durationTime) &&
        Objects.equals(this.fetchStart, pageTiming.fetchStart) &&
        Objects.equals(this.fetchEnd, pageTiming.fetchEnd)&&
        Objects.equals(this.additionalProperties, pageTiming.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeToInteractive, domComplete, largestContentfulPaint, firstInputDelay, connectionTime, timeToSecureConnection, requestSentTime, waitingTime, downloadTime, durationTime, fetchStart, fetchEnd, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageTiming {\n");
    sb.append("    timeToInteractive: ").append(toIndentedString(timeToInteractive)).append("\n");
    sb.append("    domComplete: ").append(toIndentedString(domComplete)).append("\n");
    sb.append("    largestContentfulPaint: ").append(toIndentedString(largestContentfulPaint)).append("\n");
    sb.append("    firstInputDelay: ").append(toIndentedString(firstInputDelay)).append("\n");
    sb.append("    connectionTime: ").append(toIndentedString(connectionTime)).append("\n");
    sb.append("    timeToSecureConnection: ").append(toIndentedString(timeToSecureConnection)).append("\n");
    sb.append("    requestSentTime: ").append(toIndentedString(requestSentTime)).append("\n");
    sb.append("    waitingTime: ").append(toIndentedString(waitingTime)).append("\n");
    sb.append("    downloadTime: ").append(toIndentedString(downloadTime)).append("\n");
    sb.append("    durationTime: ").append(toIndentedString(durationTime)).append("\n");
    sb.append("    fetchStart: ").append(toIndentedString(fetchStart)).append("\n");
    sb.append("    fetchEnd: ").append(toIndentedString(fetchEnd)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("time_to_interactive");
    openapiFields.add("dom_complete");
    openapiFields.add("largest_contentful_paint");
    openapiFields.add("first_input_delay");
    openapiFields.add("connection_time");
    openapiFields.add("time_to_secure_connection");
    openapiFields.add("request_sent_time");
    openapiFields.add("waiting_time");
    openapiFields.add("download_time");
    openapiFields.add("duration_time");
    openapiFields.add("fetch_start");
    openapiFields.add("fetch_end");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageTiming
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageTiming.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageTiming is not found in the empty JSON string", PageTiming.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageTiming.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageTiming' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageTiming> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageTiming.class));

       return (TypeAdapter<T>) new TypeAdapter<PageTiming>() {
           @Override
           public void write(JsonWriter out, PageTiming value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PageTiming read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PageTiming instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageTiming given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageTiming
   * @throws IOException if the JSON string is invalid with respect to PageTiming
   */
  public static PageTiming fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageTiming.class);
  }

  /**
   * Convert an instance of PageTiming to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

