/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.AmazonDeliveryInfo;
import io.github.dataforseo.client.model.BaseAmazonSerpElementItem;
import io.github.dataforseo.client.model.PriceInfo;
import io.github.dataforseo.client.model.RatingElement;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * AmazonAmazonSellerMainItemSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-10T21:39:12.196275300+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class AmazonAmazonSellerMainItemSerpElementItem extends BaseAmazonSerpElementItem {
  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_SELLER_NAME = "seller_name";
  @SerializedName(SERIALIZED_NAME_SELLER_NAME)
  private String sellerName;

  public static final String SERIALIZED_NAME_SELLER_URL = "seller_url";
  @SerializedName(SERIALIZED_NAME_SELLER_URL)
  private String sellerUrl;

  public static final String SERIALIZED_NAME_SHIPS_FROM = "ships_from";
  @SerializedName(SERIALIZED_NAME_SHIPS_FROM)
  private String shipsFrom;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private PriceInfo price;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingElement rating;

  public static final String SERIALIZED_NAME_CONDITION = "condition";
  @SerializedName(SERIALIZED_NAME_CONDITION)
  private String condition;

  public static final String SERIALIZED_NAME_CONDITION_DESCRIPTION = "condition_description";
  @SerializedName(SERIALIZED_NAME_CONDITION_DESCRIPTION)
  private String conditionDescription;

  public static final String SERIALIZED_NAME_DELIVERY_INFO = "delivery_info";
  @SerializedName(SERIALIZED_NAME_DELIVERY_INFO)
  private AmazonDeliveryInfo deliveryInfo;

  public AmazonAmazonSellerMainItemSerpElementItem() {
  }

  public AmazonAmazonSellerMainItemSerpElementItem position(String position) {
    this.position = position;
    return this;
  }

  /**
   * alignment of the element in SERP possible values: left, right
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public AmazonAmazonSellerMainItemSerpElementItem sellerName(String sellerName) {
    this.sellerName = sellerName;
    return this;
  }

  /**
   * business name of the seller
   * @return sellerName
   */
  @javax.annotation.Nullable
  public String getSellerName() {
    return sellerName;
  }

  public void setSellerName(String sellerName) {
    this.sellerName = sellerName;
  }


  public AmazonAmazonSellerMainItemSerpElementItem sellerUrl(String sellerUrl) {
    this.sellerUrl = sellerUrl;
    return this;
  }

  /**
   * url forwarding to the sellerâ€™s page on Amazon
   * @return sellerUrl
   */
  @javax.annotation.Nullable
  public String getSellerUrl() {
    return sellerUrl;
  }

  public void setSellerUrl(String sellerUrl) {
    this.sellerUrl = sellerUrl;
  }


  public AmazonAmazonSellerMainItemSerpElementItem shipsFrom(String shipsFrom) {
    this.shipsFrom = shipsFrom;
    return this;
  }

  /**
   * sender company name
   * @return shipsFrom
   */
  @javax.annotation.Nullable
  public String getShipsFrom() {
    return shipsFrom;
  }

  public void setShipsFrom(String shipsFrom) {
    this.shipsFrom = shipsFrom;
  }


  public AmazonAmazonSellerMainItemSerpElementItem price(PriceInfo price) {
    this.price = price;
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nullable
  public PriceInfo getPrice() {
    return price;
  }

  public void setPrice(PriceInfo price) {
    this.price = price;
  }


  public AmazonAmazonSellerMainItemSerpElementItem rating(RatingElement rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public RatingElement getRating() {
    return rating;
  }

  public void setRating(RatingElement rating) {
    this.rating = rating;
  }


  public AmazonAmazonSellerMainItemSerpElementItem condition(String condition) {
    this.condition = condition;
    return this;
  }

  /**
   * product condition condition of the product offered by the seller
   * @return condition
   */
  @javax.annotation.Nullable
  public String getCondition() {
    return condition;
  }

  public void setCondition(String condition) {
    this.condition = condition;
  }


  public AmazonAmazonSellerMainItemSerpElementItem conditionDescription(String conditionDescription) {
    this.conditionDescription = conditionDescription;
    return this;
  }

  /**
   * product condition details expanded details on the condition of the product offered by the seller
   * @return conditionDescription
   */
  @javax.annotation.Nullable
  public String getConditionDescription() {
    return conditionDescription;
  }

  public void setConditionDescription(String conditionDescription) {
    this.conditionDescription = conditionDescription;
  }


  public AmazonAmazonSellerMainItemSerpElementItem deliveryInfo(AmazonDeliveryInfo deliveryInfo) {
    this.deliveryInfo = deliveryInfo;
    return this;
  }

  /**
   * Get deliveryInfo
   * @return deliveryInfo
   */
  @javax.annotation.Nullable
  public AmazonDeliveryInfo getDeliveryInfo() {
    return deliveryInfo;
  }

  public void setDeliveryInfo(AmazonDeliveryInfo deliveryInfo) {
    this.deliveryInfo = deliveryInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AmazonAmazonSellerMainItemSerpElementItem instance itself
   */
  public AmazonAmazonSellerMainItemSerpElementItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmazonAmazonSellerMainItemSerpElementItem amazonAmazonSellerMainItemSerpElementItem = (AmazonAmazonSellerMainItemSerpElementItem) o;
    return Objects.equals(this.position, amazonAmazonSellerMainItemSerpElementItem.position) &&
        Objects.equals(this.sellerName, amazonAmazonSellerMainItemSerpElementItem.sellerName) &&
        Objects.equals(this.sellerUrl, amazonAmazonSellerMainItemSerpElementItem.sellerUrl) &&
        Objects.equals(this.shipsFrom, amazonAmazonSellerMainItemSerpElementItem.shipsFrom) &&
        Objects.equals(this.price, amazonAmazonSellerMainItemSerpElementItem.price) &&
        Objects.equals(this.rating, amazonAmazonSellerMainItemSerpElementItem.rating) &&
        Objects.equals(this.condition, amazonAmazonSellerMainItemSerpElementItem.condition) &&
        Objects.equals(this.conditionDescription, amazonAmazonSellerMainItemSerpElementItem.conditionDescription) &&
        Objects.equals(this.deliveryInfo, amazonAmazonSellerMainItemSerpElementItem.deliveryInfo)&&
        Objects.equals(this.additionalProperties, amazonAmazonSellerMainItemSerpElementItem.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, sellerName, sellerUrl, shipsFrom, price, rating, condition, conditionDescription, deliveryInfo, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmazonAmazonSellerMainItemSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    sellerName: ").append(toIndentedString(sellerName)).append("\n");
    sb.append("    sellerUrl: ").append(toIndentedString(sellerUrl)).append("\n");
    sb.append("    shipsFrom: ").append(toIndentedString(shipsFrom)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    condition: ").append(toIndentedString(condition)).append("\n");
    sb.append("    conditionDescription: ").append(toIndentedString(conditionDescription)).append("\n");
    sb.append("    deliveryInfo: ").append(toIndentedString(deliveryInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("xpath");
    openapiFields.add("position");
    openapiFields.add("seller_name");
    openapiFields.add("seller_url");
    openapiFields.add("ships_from");
    openapiFields.add("price");
    openapiFields.add("rating");
    openapiFields.add("condition");
    openapiFields.add("condition_description");
    openapiFields.add("delivery_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmazonAmazonSellerMainItemSerpElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmazonAmazonSellerMainItemSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmazonAmazonSellerMainItemSerpElementItem is not found in the empty JSON string", AmazonAmazonSellerMainItemSerpElementItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("seller_name") != null && !jsonObj.get("seller_name").isJsonNull()) && !jsonObj.get("seller_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_name").toString()));
      }
      if ((jsonObj.get("seller_url") != null && !jsonObj.get("seller_url").isJsonNull()) && !jsonObj.get("seller_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seller_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seller_url").toString()));
      }
      if ((jsonObj.get("ships_from") != null && !jsonObj.get("ships_from").isJsonNull()) && !jsonObj.get("ships_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ships_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ships_from").toString()));
      }
      // validate the optional field `price`
      if (jsonObj.get("price") != null && !jsonObj.get("price").isJsonNull()) {
        PriceInfo.validateJsonElement(jsonObj.get("price"));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        RatingElement.validateJsonElement(jsonObj.get("rating"));
      }
      if ((jsonObj.get("condition") != null && !jsonObj.get("condition").isJsonNull()) && !jsonObj.get("condition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition").toString()));
      }
      if ((jsonObj.get("condition_description") != null && !jsonObj.get("condition_description").isJsonNull()) && !jsonObj.get("condition_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `condition_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("condition_description").toString()));
      }
      // validate the optional field `delivery_info`
      if (jsonObj.get("delivery_info") != null && !jsonObj.get("delivery_info").isJsonNull()) {
        AmazonDeliveryInfo.validateJsonElement(jsonObj.get("delivery_info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmazonAmazonSellerMainItemSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmazonAmazonSellerMainItemSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmazonAmazonSellerMainItemSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmazonAmazonSellerMainItemSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AmazonAmazonSellerMainItemSerpElementItem>() {
           @Override
           public void write(JsonWriter out, AmazonAmazonSellerMainItemSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AmazonAmazonSellerMainItemSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AmazonAmazonSellerMainItemSerpElementItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmazonAmazonSellerMainItemSerpElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmazonAmazonSellerMainItemSerpElementItem
   * @throws IOException if the JSON string is invalid with respect to AmazonAmazonSellerMainItemSerpElementItem
   */
  public static AmazonAmazonSellerMainItemSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmazonAmazonSellerMainItemSerpElementItem.class);
  }

  /**
   * Convert an instance of AmazonAmazonSellerMainItemSerpElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

