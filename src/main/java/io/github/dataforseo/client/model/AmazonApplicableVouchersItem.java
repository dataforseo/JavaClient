/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * AmazonApplicableVouchersItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-24T10:03:11.930414100+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class AmazonApplicableVouchersItem {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_FIXED_DISCOUNT = "fixed_discount";
  @SerializedName(SERIALIZED_NAME_FIXED_DISCOUNT)
  private Float fixedDiscount;

  public static final String SERIALIZED_NAME_FIXED_DISCOUNT_CURRENCY = "fixed_discount_currency";
  @SerializedName(SERIALIZED_NAME_FIXED_DISCOUNT_CURRENCY)
  private String fixedDiscountCurrency;

  public static final String SERIALIZED_NAME_PERCENTAGE_DISCOUNT = "percentage_discount";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_DISCOUNT)
  private Float percentageDiscount;

  public static final String SERIALIZED_NAME_IMPORTANT_DETAILS = "important_details";
  @SerializedName(SERIALIZED_NAME_IMPORTANT_DETAILS)
  private String importantDetails;

  public AmazonApplicableVouchersItem() {
  }

  public AmazonApplicableVouchersItem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * type of element
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public AmazonApplicableVouchersItem text(String text) {
    this.text = text;
    return this;
  }

  /**
   * text of the voucher
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public AmazonApplicableVouchersItem fixedDiscount(Float fixedDiscount) {
    this.fixedDiscount = fixedDiscount;
    return this;
  }

  /**
   * value of the fixed discount
   * @return fixedDiscount
   */
  @javax.annotation.Nullable
  public Float getFixedDiscount() {
    return fixedDiscount;
  }

  public void setFixedDiscount(Float fixedDiscount) {
    this.fixedDiscount = fixedDiscount;
  }


  public AmazonApplicableVouchersItem fixedDiscountCurrency(String fixedDiscountCurrency) {
    this.fixedDiscountCurrency = fixedDiscountCurrency;
    return this;
  }

  /**
   * currency code of the fixed discount
   * @return fixedDiscountCurrency
   */
  @javax.annotation.Nullable
  public String getFixedDiscountCurrency() {
    return fixedDiscountCurrency;
  }

  public void setFixedDiscountCurrency(String fixedDiscountCurrency) {
    this.fixedDiscountCurrency = fixedDiscountCurrency;
  }


  public AmazonApplicableVouchersItem percentageDiscount(Float percentageDiscount) {
    this.percentageDiscount = percentageDiscount;
    return this;
  }

  /**
   * value of the percentage discount if the discount is fixed, the value will be null
   * @return percentageDiscount
   */
  @javax.annotation.Nullable
  public Float getPercentageDiscount() {
    return percentageDiscount;
  }

  public void setPercentageDiscount(Float percentageDiscount) {
    this.percentageDiscount = percentageDiscount;
  }


  public AmazonApplicableVouchersItem importantDetails(String importantDetails) {
    this.importantDetails = importantDetails;
    return this;
  }

  /**
   * important details about the terms of discount vouchers
   * @return importantDetails
   */
  @javax.annotation.Nullable
  public String getImportantDetails() {
    return importantDetails;
  }

  public void setImportantDetails(String importantDetails) {
    this.importantDetails = importantDetails;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AmazonApplicableVouchersItem instance itself
   */
  public AmazonApplicableVouchersItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AmazonApplicableVouchersItem amazonApplicableVouchersItem = (AmazonApplicableVouchersItem) o;
    return Objects.equals(this.type, amazonApplicableVouchersItem.type) &&
        Objects.equals(this.text, amazonApplicableVouchersItem.text) &&
        Objects.equals(this.fixedDiscount, amazonApplicableVouchersItem.fixedDiscount) &&
        Objects.equals(this.fixedDiscountCurrency, amazonApplicableVouchersItem.fixedDiscountCurrency) &&
        Objects.equals(this.percentageDiscount, amazonApplicableVouchersItem.percentageDiscount) &&
        Objects.equals(this.importantDetails, amazonApplicableVouchersItem.importantDetails)&&
        Objects.equals(this.additionalProperties, amazonApplicableVouchersItem.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, text, fixedDiscount, fixedDiscountCurrency, percentageDiscount, importantDetails, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AmazonApplicableVouchersItem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    fixedDiscount: ").append(toIndentedString(fixedDiscount)).append("\n");
    sb.append("    fixedDiscountCurrency: ").append(toIndentedString(fixedDiscountCurrency)).append("\n");
    sb.append("    percentageDiscount: ").append(toIndentedString(percentageDiscount)).append("\n");
    sb.append("    importantDetails: ").append(toIndentedString(importantDetails)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("text");
    openapiFields.add("fixed_discount");
    openapiFields.add("fixed_discount_currency");
    openapiFields.add("percentage_discount");
    openapiFields.add("important_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AmazonApplicableVouchersItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AmazonApplicableVouchersItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AmazonApplicableVouchersItem is not found in the empty JSON string", AmazonApplicableVouchersItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
      if ((jsonObj.get("fixed_discount_currency") != null && !jsonObj.get("fixed_discount_currency").isJsonNull()) && !jsonObj.get("fixed_discount_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixed_discount_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fixed_discount_currency").toString()));
      }
      if ((jsonObj.get("important_details") != null && !jsonObj.get("important_details").isJsonNull()) && !jsonObj.get("important_details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `important_details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("important_details").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AmazonApplicableVouchersItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AmazonApplicableVouchersItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AmazonApplicableVouchersItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AmazonApplicableVouchersItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AmazonApplicableVouchersItem>() {
           @Override
           public void write(JsonWriter out, AmazonApplicableVouchersItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AmazonApplicableVouchersItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AmazonApplicableVouchersItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AmazonApplicableVouchersItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AmazonApplicableVouchersItem
   * @throws IOException if the JSON string is invalid with respect to AmazonApplicableVouchersItem
   */
  public static AmazonApplicableVouchersItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AmazonApplicableVouchersItem.class);
  }

  /**
   * Convert an instance of AmazonApplicableVouchersItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

