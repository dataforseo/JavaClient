/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * KeywordsDataBingAudienceEstimationTaskPostRequestInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-30T15:21:14.476580900+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class KeywordsDataBingAudienceEstimationTaskPostRequestInfo {
  public static final String SERIALIZED_NAME_LOCATION_NAME = "location_name";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "location_code";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private Integer locationCode;

  public static final String SERIALIZED_NAME_LOCATION_COORDINATE = "location_coordinate";
  @SerializedName(SERIALIZED_NAME_LOCATION_COORDINATE)
  private String locationCoordinate;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private List<String> age;

  public static final String SERIALIZED_NAME_BID = "bid";
  @SerializedName(SERIALIZED_NAME_BID)
  private Float bid;

  public static final String SERIALIZED_NAME_DAILY_BUDGET = "daily_budget";
  @SerializedName(SERIALIZED_NAME_DAILY_BUDGET)
  private Float dailyBudget;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private List<String> gender;

  public static final String SERIALIZED_NAME_INDUSTRY = "industry";
  @SerializedName(SERIALIZED_NAME_INDUSTRY)
  private List<String> industry;

  public static final String SERIALIZED_NAME_JOB_FUNCTION = "job_function";
  @SerializedName(SERIALIZED_NAME_JOB_FUNCTION)
  private List<String> jobFunction;

  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo() {
  }

  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo locationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * full name of search engine location required field if you don’t specify location_code or location_coordinate if you use this field, you don’t need to specify location_code or location_coordinate you can receive the list of available locations of the search engine with their location_name by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations example: London,England,United Kingdom
   * @return locationName
   */
  @javax.annotation.Nullable
  public String getLocationName() {
    return locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo locationCode(Integer locationCode) {
    this.locationCode = locationCode;
    return this;
  }

  /**
   * search engine location code required field if you don’t specify location_name or location_coordinate if you use this field, you don’t need to specify location_name or location_coordinate you can receive the list of available locations of the search engines with their location_code by making a separate request to https://api.dataforseo.com/v3/keywords_data/bing/locations example: 2840
   * @return locationCode
   */
  @javax.annotation.Nullable
  public Integer getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(Integer locationCode) {
    this.locationCode = locationCode;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo locationCoordinate(String locationCoordinate) {
    this.locationCoordinate = locationCoordinate;
    return this;
  }

  /**
   * GPS coordinates of a location required field if you don’t specify location_name or location_code if you use this field, you don’t need to specify location_name or location_code location_coordinate parameter should be specified in the “latitude,longitude,radius (in km)” format the data will be provided for the country the specified coordinates belong to example: 29.6821525,-82.4098881,100
   * @return locationCoordinate
   */
  @javax.annotation.Nullable
  public String getLocationCoordinate() {
    return locationCoordinate;
  }

  public void setLocationCoordinate(String locationCoordinate) {
    this.locationCoordinate = locationCoordinate;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo age(List<String> age) {
    this.age = age;
    return this;
  }

  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo addAgeItem(String ageItem) {
    if (this.age == null) {
      this.age = new ArrayList<>();
    }
    this.age.add(ageItem);
    return this;
  }

  /**
   * selection of age ranges for targeting possible values: eighteen_to_twenty_four, fifty_to_sixty_four, sixty_five_and_above, thirteen_to_seventeen, thirty_five_to_forty_nine, twenty_five_to_thirty_four, unknown, zero_to_twelve
   * @return age
   */
  @javax.annotation.Nullable
  public List<String> getAge() {
    return age;
  }

  public void setAge(List<String> age) {
    this.age = age;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo bid(Float bid) {
    this.bid = bid;
    return this;
  }

  /**
   * desired bid setting value in USD maximum value: 1000
   * @return bid
   */
  @javax.annotation.Nullable
  public Float getBid() {
    return bid;
  }

  public void setBid(Float bid) {
    this.bid = bid;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo dailyBudget(Float dailyBudget) {
    this.dailyBudget = dailyBudget;
    return this;
  }

  /**
   * daily campaign budget value in USD maximum value: 10000
   * @return dailyBudget
   */
  @javax.annotation.Nullable
  public Float getDailyBudget() {
    return dailyBudget;
  }

  public void setDailyBudget(Float dailyBudget) {
    this.dailyBudget = dailyBudget;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo gender(List<String> gender) {
    this.gender = gender;
    return this;
  }

  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo addGenderItem(String genderItem) {
    if (this.gender == null) {
      this.gender = new ArrayList<>();
    }
    this.gender.add(genderItem);
    return this;
  }

  /**
   * gender to target possible values: male, female, unknown
   * @return gender
   */
  @javax.annotation.Nullable
  public List<String> getGender() {
    return gender;
  }

  public void setGender(List<String> gender) {
    this.gender = gender;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo industry(List<String> industry) {
    this.industry = industry;
    return this;
  }

  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo addIndustryItem(String industryItem) {
    if (this.industry == null) {
      this.industry = new ArrayList<>();
    }
    this.industry.add(industryItem);
    return this;
  }

  /**
   * industry of LinkedIn profile targeting if you use this field, you can receive the list of available industry names  with industry_id by making a separate request to the https://api.dataforseo.com/v3/keywords_data/bing/audience_estimation/industries example: 806301758
   * @return industry
   */
  @javax.annotation.Nullable
  public List<String> getIndustry() {
    return industry;
  }

  public void setIndustry(List<String> industry) {
    this.industry = industry;
  }


  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo jobFunction(List<String> jobFunction) {
    this.jobFunction = jobFunction;
    return this;
  }

  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo addJobFunctionItem(String jobFunctionItem) {
    if (this.jobFunction == null) {
      this.jobFunction = new ArrayList<>();
    }
    this.jobFunction.add(jobFunctionItem);
    return this;
  }

  /**
   * job function of LinkedIn profile targeting if you use this field, you can receive the list of available job function names  with job_function_id by making a separate request to the https://api.dataforseo.com/v3/keywords_data/bing/audience_estimation/job_functions example: 806300451
   * @return jobFunction
   */
  @javax.annotation.Nullable
  public List<String> getJobFunction() {
    return jobFunction;
  }

  public void setJobFunction(List<String> jobFunction) {
    this.jobFunction = jobFunction;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the KeywordsDataBingAudienceEstimationTaskPostRequestInfo instance itself
   */
  public KeywordsDataBingAudienceEstimationTaskPostRequestInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordsDataBingAudienceEstimationTaskPostRequestInfo keywordsDataBingAudienceEstimationTaskPostRequestInfo = (KeywordsDataBingAudienceEstimationTaskPostRequestInfo) o;
    return Objects.equals(this.locationName, keywordsDataBingAudienceEstimationTaskPostRequestInfo.locationName) &&
        Objects.equals(this.locationCode, keywordsDataBingAudienceEstimationTaskPostRequestInfo.locationCode) &&
        Objects.equals(this.locationCoordinate, keywordsDataBingAudienceEstimationTaskPostRequestInfo.locationCoordinate) &&
        Objects.equals(this.age, keywordsDataBingAudienceEstimationTaskPostRequestInfo.age) &&
        Objects.equals(this.bid, keywordsDataBingAudienceEstimationTaskPostRequestInfo.bid) &&
        Objects.equals(this.dailyBudget, keywordsDataBingAudienceEstimationTaskPostRequestInfo.dailyBudget) &&
        Objects.equals(this.gender, keywordsDataBingAudienceEstimationTaskPostRequestInfo.gender) &&
        Objects.equals(this.industry, keywordsDataBingAudienceEstimationTaskPostRequestInfo.industry) &&
        Objects.equals(this.jobFunction, keywordsDataBingAudienceEstimationTaskPostRequestInfo.jobFunction)&&
        Objects.equals(this.additionalProperties, keywordsDataBingAudienceEstimationTaskPostRequestInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationName, locationCode, locationCoordinate, age, bid, dailyBudget, gender, industry, jobFunction, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordsDataBingAudienceEstimationTaskPostRequestInfo {\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    locationCoordinate: ").append(toIndentedString(locationCoordinate)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    bid: ").append(toIndentedString(bid)).append("\n");
    sb.append("    dailyBudget: ").append(toIndentedString(dailyBudget)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    industry: ").append(toIndentedString(industry)).append("\n");
    sb.append("    jobFunction: ").append(toIndentedString(jobFunction)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location_name");
    openapiFields.add("location_code");
    openapiFields.add("location_coordinate");
    openapiFields.add("age");
    openapiFields.add("bid");
    openapiFields.add("daily_budget");
    openapiFields.add("gender");
    openapiFields.add("industry");
    openapiFields.add("job_function");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeywordsDataBingAudienceEstimationTaskPostRequestInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordsDataBingAudienceEstimationTaskPostRequestInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordsDataBingAudienceEstimationTaskPostRequestInfo is not found in the empty JSON string", KeywordsDataBingAudienceEstimationTaskPostRequestInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("location_name") != null && !jsonObj.get("location_name").isJsonNull()) && !jsonObj.get("location_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_name").toString()));
      }
      if ((jsonObj.get("location_coordinate") != null && !jsonObj.get("location_coordinate").isJsonNull()) && !jsonObj.get("location_coordinate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_coordinate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_coordinate").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("age") != null && !jsonObj.get("age").isJsonNull() && !jsonObj.get("age").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `age` to be an array in the JSON string but got `%s`", jsonObj.get("age").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull() && !jsonObj.get("gender").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be an array in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("industry") != null && !jsonObj.get("industry").isJsonNull() && !jsonObj.get("industry").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `industry` to be an array in the JSON string but got `%s`", jsonObj.get("industry").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("job_function") != null && !jsonObj.get("job_function").isJsonNull() && !jsonObj.get("job_function").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `job_function` to be an array in the JSON string but got `%s`", jsonObj.get("job_function").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordsDataBingAudienceEstimationTaskPostRequestInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordsDataBingAudienceEstimationTaskPostRequestInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordsDataBingAudienceEstimationTaskPostRequestInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordsDataBingAudienceEstimationTaskPostRequestInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordsDataBingAudienceEstimationTaskPostRequestInfo>() {
           @Override
           public void write(JsonWriter out, KeywordsDataBingAudienceEstimationTaskPostRequestInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordsDataBingAudienceEstimationTaskPostRequestInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             KeywordsDataBingAudienceEstimationTaskPostRequestInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeywordsDataBingAudienceEstimationTaskPostRequestInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeywordsDataBingAudienceEstimationTaskPostRequestInfo
   * @throws IOException if the JSON string is invalid with respect to KeywordsDataBingAudienceEstimationTaskPostRequestInfo
   */
  public static KeywordsDataBingAudienceEstimationTaskPostRequestInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordsDataBingAudienceEstimationTaskPostRequestInfo.class);
  }

  /**
   * Convert an instance of KeywordsDataBingAudienceEstimationTaskPostRequestInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

