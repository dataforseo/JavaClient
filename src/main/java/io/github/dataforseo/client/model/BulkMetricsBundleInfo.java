/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.BulkMetricsInfo;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * BulkMetricsBundleInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-30T15:21:14.476580900+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class BulkMetricsBundleInfo {
  public static final String SERIALIZED_NAME_ORGANIC = "organic";
  @SerializedName(SERIALIZED_NAME_ORGANIC)
  private BulkMetricsInfo organic;

  public static final String SERIALIZED_NAME_PAID = "paid";
  @SerializedName(SERIALIZED_NAME_PAID)
  private BulkMetricsInfo paid;

  public static final String SERIALIZED_NAME_LOCAL_PACK = "local_pack";
  @SerializedName(SERIALIZED_NAME_LOCAL_PACK)
  private BulkMetricsInfo localPack;

  public static final String SERIALIZED_NAME_FEATURED_SNIPPET = "featured_snippet";
  @SerializedName(SERIALIZED_NAME_FEATURED_SNIPPET)
  private BulkMetricsInfo featuredSnippet;

  public BulkMetricsBundleInfo() {
  }

  public BulkMetricsBundleInfo organic(BulkMetricsInfo organic) {
    this.organic = organic;
    return this;
  }

  /**
   * Get organic
   * @return organic
   */
  @javax.annotation.Nullable
  public BulkMetricsInfo getOrganic() {
    return organic;
  }

  public void setOrganic(BulkMetricsInfo organic) {
    this.organic = organic;
  }


  public BulkMetricsBundleInfo paid(BulkMetricsInfo paid) {
    this.paid = paid;
    return this;
  }

  /**
   * Get paid
   * @return paid
   */
  @javax.annotation.Nullable
  public BulkMetricsInfo getPaid() {
    return paid;
  }

  public void setPaid(BulkMetricsInfo paid) {
    this.paid = paid;
  }


  public BulkMetricsBundleInfo localPack(BulkMetricsInfo localPack) {
    this.localPack = localPack;
    return this;
  }

  /**
   * Get localPack
   * @return localPack
   */
  @javax.annotation.Nullable
  public BulkMetricsInfo getLocalPack() {
    return localPack;
  }

  public void setLocalPack(BulkMetricsInfo localPack) {
    this.localPack = localPack;
  }


  public BulkMetricsBundleInfo featuredSnippet(BulkMetricsInfo featuredSnippet) {
    this.featuredSnippet = featuredSnippet;
    return this;
  }

  /**
   * Get featuredSnippet
   * @return featuredSnippet
   */
  @javax.annotation.Nullable
  public BulkMetricsInfo getFeaturedSnippet() {
    return featuredSnippet;
  }

  public void setFeaturedSnippet(BulkMetricsInfo featuredSnippet) {
    this.featuredSnippet = featuredSnippet;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BulkMetricsBundleInfo instance itself
   */
  public BulkMetricsBundleInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkMetricsBundleInfo bulkMetricsBundleInfo = (BulkMetricsBundleInfo) o;
    return Objects.equals(this.organic, bulkMetricsBundleInfo.organic) &&
        Objects.equals(this.paid, bulkMetricsBundleInfo.paid) &&
        Objects.equals(this.localPack, bulkMetricsBundleInfo.localPack) &&
        Objects.equals(this.featuredSnippet, bulkMetricsBundleInfo.featuredSnippet)&&
        Objects.equals(this.additionalProperties, bulkMetricsBundleInfo.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(organic, paid, localPack, featuredSnippet, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkMetricsBundleInfo {\n");
    sb.append("    organic: ").append(toIndentedString(organic)).append("\n");
    sb.append("    paid: ").append(toIndentedString(paid)).append("\n");
    sb.append("    localPack: ").append(toIndentedString(localPack)).append("\n");
    sb.append("    featuredSnippet: ").append(toIndentedString(featuredSnippet)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("organic");
    openapiFields.add("paid");
    openapiFields.add("local_pack");
    openapiFields.add("featured_snippet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BulkMetricsBundleInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BulkMetricsBundleInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkMetricsBundleInfo is not found in the empty JSON string", BulkMetricsBundleInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `organic`
      if (jsonObj.get("organic") != null && !jsonObj.get("organic").isJsonNull()) {
        BulkMetricsInfo.validateJsonElement(jsonObj.get("organic"));
      }
      // validate the optional field `paid`
      if (jsonObj.get("paid") != null && !jsonObj.get("paid").isJsonNull()) {
        BulkMetricsInfo.validateJsonElement(jsonObj.get("paid"));
      }
      // validate the optional field `local_pack`
      if (jsonObj.get("local_pack") != null && !jsonObj.get("local_pack").isJsonNull()) {
        BulkMetricsInfo.validateJsonElement(jsonObj.get("local_pack"));
      }
      // validate the optional field `featured_snippet`
      if (jsonObj.get("featured_snippet") != null && !jsonObj.get("featured_snippet").isJsonNull()) {
        BulkMetricsInfo.validateJsonElement(jsonObj.get("featured_snippet"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkMetricsBundleInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkMetricsBundleInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkMetricsBundleInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkMetricsBundleInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkMetricsBundleInfo>() {
           @Override
           public void write(JsonWriter out, BulkMetricsBundleInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkMetricsBundleInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             BulkMetricsBundleInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BulkMetricsBundleInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BulkMetricsBundleInfo
   * @throws IOException if the JSON string is invalid with respect to BulkMetricsBundleInfo
   */
  public static BulkMetricsBundleInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkMetricsBundleInfo.class);
  }

  /**
   * Convert an instance of BulkMetricsBundleInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

