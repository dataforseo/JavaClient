/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.AvailableLanguages;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T14:14:20.254791+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo {
  public static final String SERIALIZED_NAME_LOCATION_CODE = "location_code";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private Integer locationCode;

  public static final String SERIALIZED_NAME_LOCATION_NAME = "location_name";
  @SerializedName(SERIALIZED_NAME_LOCATION_NAME)
  private String locationName;

  public static final String SERIALIZED_NAME_LOCATION_CODE_PARENT = "location_code_parent";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE_PARENT)
  private Integer locationCodeParent;

  public static final String SERIALIZED_NAME_COUNTRY_ISO_CODE = "country_iso_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_ISO_CODE)
  private String countryIsoCode;

  public static final String SERIALIZED_NAME_LOCATION_TYPE = "location_type";
  @SerializedName(SERIALIZED_NAME_LOCATION_TYPE)
  private String locationType;

  public static final String SERIALIZED_NAME_AVAILABLE_LANGUAGES = "available_languages";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_LANGUAGES)
  private List<AvailableLanguages> availableLanguages;

  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo() {
  }

  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo locationCode(Integer locationCode) {
    this.locationCode = locationCode;
    return this;
  }

  /**
   * location code
   * @return locationCode
   */
  @javax.annotation.Nullable
  public Integer getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(Integer locationCode) {
    this.locationCode = locationCode;
  }


  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo locationName(String locationName) {
    this.locationName = locationName;
    return this;
  }

  /**
   * full name of the location
   * @return locationName
   */
  @javax.annotation.Nullable
  public String getLocationName() {
    return locationName;
  }

  public void setLocationName(String locationName) {
    this.locationName = locationName;
  }


  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo locationCodeParent(Integer locationCodeParent) {
    this.locationCodeParent = locationCodeParent;
    return this;
  }

  /**
   * the code of the superordinate location the value will be null as Country is the only supported location_type for this API
   * @return locationCodeParent
   */
  @javax.annotation.Nullable
  public Integer getLocationCodeParent() {
    return locationCodeParent;
  }

  public void setLocationCodeParent(Integer locationCodeParent) {
    this.locationCodeParent = locationCodeParent;
  }


  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo countryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
    return this;
  }

  /**
   * ISO country code of the location
   * @return countryIsoCode
   */
  @javax.annotation.Nullable
  public String getCountryIsoCode() {
    return countryIsoCode;
  }

  public void setCountryIsoCode(String countryIsoCode) {
    this.countryIsoCode = countryIsoCode;
  }


  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo locationType(String locationType) {
    this.locationType = locationType;
    return this;
  }

  /**
   * location type possible values: Country
   * @return locationType
   */
  @javax.annotation.Nullable
  public String getLocationType() {
    return locationType;
  }

  public void setLocationType(String locationType) {
    this.locationType = locationType;
  }


  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo availableLanguages(List<AvailableLanguages> availableLanguages) {
    this.availableLanguages = availableLanguages;
    return this;
  }

  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo addAvailableLanguagesItem(AvailableLanguages availableLanguagesItem) {
    if (this.availableLanguages == null) {
      this.availableLanguages = new ArrayList<>();
    }
    this.availableLanguages.add(availableLanguagesItem);
    return this;
  }

  /**
   * supported languages contains the languages which are supported for a specific location
   * @return availableLanguages
   */
  @javax.annotation.Nullable
  public List<AvailableLanguages> getAvailableLanguages() {
    return availableLanguages;
  }

  public void setAvailableLanguages(List<AvailableLanguages> availableLanguages) {
    this.availableLanguages = availableLanguages;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo instance itself
   */
  public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo keywordsDataClickstreamDataLocationsAndLanguagesResultInfo = (KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo) o;
    return Objects.equals(this.locationCode, keywordsDataClickstreamDataLocationsAndLanguagesResultInfo.locationCode) &&
        Objects.equals(this.locationName, keywordsDataClickstreamDataLocationsAndLanguagesResultInfo.locationName) &&
        Objects.equals(this.locationCodeParent, keywordsDataClickstreamDataLocationsAndLanguagesResultInfo.locationCodeParent) &&
        Objects.equals(this.countryIsoCode, keywordsDataClickstreamDataLocationsAndLanguagesResultInfo.countryIsoCode) &&
        Objects.equals(this.locationType, keywordsDataClickstreamDataLocationsAndLanguagesResultInfo.locationType) &&
        Objects.equals(this.availableLanguages, keywordsDataClickstreamDataLocationsAndLanguagesResultInfo.availableLanguages)&&
        Objects.equals(this.additionalProperties, keywordsDataClickstreamDataLocationsAndLanguagesResultInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(locationCode, locationName, locationCodeParent, countryIsoCode, locationType, availableLanguages, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo {\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    locationName: ").append(toIndentedString(locationName)).append("\n");
    sb.append("    locationCodeParent: ").append(toIndentedString(locationCodeParent)).append("\n");
    sb.append("    countryIsoCode: ").append(toIndentedString(countryIsoCode)).append("\n");
    sb.append("    locationType: ").append(toIndentedString(locationType)).append("\n");
    sb.append("    availableLanguages: ").append(toIndentedString(availableLanguages)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("location_code");
    openapiFields.add("location_name");
    openapiFields.add("location_code_parent");
    openapiFields.add("country_iso_code");
    openapiFields.add("location_type");
    openapiFields.add("available_languages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo is not found in the empty JSON string", KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("location_name") != null && !jsonObj.get("location_name").isJsonNull()) && !jsonObj.get("location_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_name").toString()));
      }
      if ((jsonObj.get("country_iso_code") != null && !jsonObj.get("country_iso_code").isJsonNull()) && !jsonObj.get("country_iso_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_iso_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_iso_code").toString()));
      }
      if ((jsonObj.get("location_type") != null && !jsonObj.get("location_type").isJsonNull()) && !jsonObj.get("location_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location_type").toString()));
      }
      if (jsonObj.get("available_languages") != null && !jsonObj.get("available_languages").isJsonNull()) {
        JsonArray jsonArrayavailableLanguages = jsonObj.getAsJsonArray("available_languages");
        if (jsonArrayavailableLanguages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("available_languages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `available_languages` to be an array in the JSON string but got `%s`", jsonObj.get("available_languages").toString()));
          }

          // validate the optional field `available_languages` (array)
          for (int i = 0; i < jsonArrayavailableLanguages.size(); i++) {
            AvailableLanguages.validateJsonElement(jsonArrayavailableLanguages.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo>() {
           @Override
           public void write(JsonWriter out, KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo
   * @throws IOException if the JSON string is invalid with respect to KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo
   */
  public static KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo.class);
  }

  /**
   * Convert an instance of KeywordsDataClickstreamDataLocationsAndLanguagesResultInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

