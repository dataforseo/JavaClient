/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.CrawlStatus;
import io.github.dataforseo.client.model.OnPageNonIndexableItem;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * OnPageNonIndexableResultInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-30T15:21:14.476580900+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class OnPageNonIndexableResultInfo {
  public static final String SERIALIZED_NAME_CRAWL_PROGRESS = "crawl_progress";
  @SerializedName(SERIALIZED_NAME_CRAWL_PROGRESS)
  private String crawlProgress;

  public static final String SERIALIZED_NAME_CRAWL_STATUS = "crawl_status";
  @SerializedName(SERIALIZED_NAME_CRAWL_STATUS)
  private CrawlStatus crawlStatus;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS_COUNT = "total_items_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS_COUNT)
  private BigDecimal totalItemsCount;

  public static final String SERIALIZED_NAME_ITEMS_COUNT = "items_count";
  @SerializedName(SERIALIZED_NAME_ITEMS_COUNT)
  private BigDecimal itemsCount;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private List<OnPageNonIndexableItem> items;

  public OnPageNonIndexableResultInfo() {
  }

  public OnPageNonIndexableResultInfo crawlProgress(String crawlProgress) {
    this.crawlProgress = crawlProgress;
    return this;
  }

  /**
   * status of the crawling session possible values: in_progress, finished
   * @return crawlProgress
   */
  @javax.annotation.Nullable
  public String getCrawlProgress() {
    return crawlProgress;
  }

  public void setCrawlProgress(String crawlProgress) {
    this.crawlProgress = crawlProgress;
  }


  public OnPageNonIndexableResultInfo crawlStatus(CrawlStatus crawlStatus) {
    this.crawlStatus = crawlStatus;
    return this;
  }

  /**
   * Get crawlStatus
   * @return crawlStatus
   */
  @javax.annotation.Nullable
  public CrawlStatus getCrawlStatus() {
    return crawlStatus;
  }

  public void setCrawlStatus(CrawlStatus crawlStatus) {
    this.crawlStatus = crawlStatus;
  }


  public OnPageNonIndexableResultInfo totalItemsCount(BigDecimal totalItemsCount) {
    this.totalItemsCount = totalItemsCount;
    return this;
  }

  /**
   * total number of relevant items in the database
   * @return totalItemsCount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalItemsCount() {
    return totalItemsCount;
  }

  public void setTotalItemsCount(BigDecimal totalItemsCount) {
    this.totalItemsCount = totalItemsCount;
  }


  public OnPageNonIndexableResultInfo itemsCount(BigDecimal itemsCount) {
    this.itemsCount = itemsCount;
    return this;
  }

  /**
   * number of items in the results array
   * @return itemsCount
   */
  @javax.annotation.Nullable
  public BigDecimal getItemsCount() {
    return itemsCount;
  }

  public void setItemsCount(BigDecimal itemsCount) {
    this.itemsCount = itemsCount;
  }


  public OnPageNonIndexableResultInfo items(List<OnPageNonIndexableItem> items) {
    this.items = items;
    return this;
  }

  public OnPageNonIndexableResultInfo addItemsItem(OnPageNonIndexableItem itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.items.add(itemsItem);
    return this;
  }

  /**
   * items array
   * @return items
   */
  @javax.annotation.Nullable
  public List<OnPageNonIndexableItem> getItems() {
    return items;
  }

  public void setItems(List<OnPageNonIndexableItem> items) {
    this.items = items;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OnPageNonIndexableResultInfo instance itself
   */
  public OnPageNonIndexableResultInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnPageNonIndexableResultInfo onPageNonIndexableResultInfo = (OnPageNonIndexableResultInfo) o;
    return Objects.equals(this.crawlProgress, onPageNonIndexableResultInfo.crawlProgress) &&
        Objects.equals(this.crawlStatus, onPageNonIndexableResultInfo.crawlStatus) &&
        Objects.equals(this.totalItemsCount, onPageNonIndexableResultInfo.totalItemsCount) &&
        Objects.equals(this.itemsCount, onPageNonIndexableResultInfo.itemsCount) &&
        Objects.equals(this.items, onPageNonIndexableResultInfo.items)&&
        Objects.equals(this.additionalProperties, onPageNonIndexableResultInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(crawlProgress, crawlStatus, totalItemsCount, itemsCount, items, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnPageNonIndexableResultInfo {\n");
    sb.append("    crawlProgress: ").append(toIndentedString(crawlProgress)).append("\n");
    sb.append("    crawlStatus: ").append(toIndentedString(crawlStatus)).append("\n");
    sb.append("    totalItemsCount: ").append(toIndentedString(totalItemsCount)).append("\n");
    sb.append("    itemsCount: ").append(toIndentedString(itemsCount)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("crawl_progress");
    openapiFields.add("crawl_status");
    openapiFields.add("total_items_count");
    openapiFields.add("items_count");
    openapiFields.add("items");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OnPageNonIndexableResultInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnPageNonIndexableResultInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnPageNonIndexableResultInfo is not found in the empty JSON string", OnPageNonIndexableResultInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("crawl_progress") != null && !jsonObj.get("crawl_progress").isJsonNull()) && !jsonObj.get("crawl_progress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `crawl_progress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("crawl_progress").toString()));
      }
      // validate the optional field `crawl_status`
      if (jsonObj.get("crawl_status") != null && !jsonObj.get("crawl_status").isJsonNull()) {
        CrawlStatus.validateJsonElement(jsonObj.get("crawl_status"));
      }
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        JsonArray jsonArrayitems = jsonObj.getAsJsonArray("items");
        if (jsonArrayitems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `items` to be an array in the JSON string but got `%s`", jsonObj.get("items").toString()));
          }

          // validate the optional field `items` (array)
          for (int i = 0; i < jsonArrayitems.size(); i++) {
            OnPageNonIndexableItem.validateJsonElement(jsonArrayitems.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnPageNonIndexableResultInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnPageNonIndexableResultInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnPageNonIndexableResultInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnPageNonIndexableResultInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<OnPageNonIndexableResultInfo>() {
           @Override
           public void write(JsonWriter out, OnPageNonIndexableResultInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OnPageNonIndexableResultInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             OnPageNonIndexableResultInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OnPageNonIndexableResultInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OnPageNonIndexableResultInfo
   * @throws IOException if the JSON string is invalid with respect to OnPageNonIndexableResultInfo
   */
  public static OnPageNonIndexableResultInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnPageNonIndexableResultInfo.class);
  }

  /**
   * Convert an instance of OnPageNonIndexableResultInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

