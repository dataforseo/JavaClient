/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.BaseBusinessDataSerpElementItem;
import io.github.dataforseo.client.model.BusinessDataUserProfileInfo;
import io.github.dataforseo.client.model.ImageUrlInfo;
import io.github.dataforseo.client.model.RatingInfo;
import io.github.dataforseo.client.model.ReviewHighlights;
import io.github.dataforseo.client.model.ReviewResponseItemInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * TripadvisorReviewSearchBusinessDataSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-27T21:03:13.693366700+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class TripadvisorReviewSearchBusinessDataSerpElementItem extends BaseBusinessDataSerpElementItem {
  public static final String SERIALIZED_NAME_POSITION = "position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingInfo rating;

  public static final String SERIALIZED_NAME_DATE_OF_VISIT = "date_of_visit";
  @SerializedName(SERIALIZED_NAME_DATE_OF_VISIT)
  private String dateOfVisit;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_REVIEW_TEXT = "review_text";
  @SerializedName(SERIALIZED_NAME_REVIEW_TEXT)
  private String reviewText;

  public static final String SERIALIZED_NAME_REVIEW_IMAGES = "review_images";
  @SerializedName(SERIALIZED_NAME_REVIEW_IMAGES)
  private List<ImageUrlInfo> reviewImages;

  public static final String SERIALIZED_NAME_USER_PROFILE = "user_profile";
  @SerializedName(SERIALIZED_NAME_USER_PROFILE)
  private BusinessDataUserProfileInfo userProfile;

  public static final String SERIALIZED_NAME_RESPONSES = "responses";
  @SerializedName(SERIALIZED_NAME_RESPONSES)
  private List<ReviewResponseItemInfo> responses;

  public static final String SERIALIZED_NAME_REVIEW_HIGHLIGHTS = "review_highlights";
  @SerializedName(SERIALIZED_NAME_REVIEW_HIGHLIGHTS)
  private List<ReviewHighlights> reviewHighlights;

  public TripadvisorReviewSearchBusinessDataSerpElementItem() {
  }

  public TripadvisorReviewSearchBusinessDataSerpElementItem position(String position) {
    this.position = position;
    return this;
  }

  /**
   * the alignment of the review in SERP can take the following values: right
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of the review
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem rating(RatingInfo rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public RatingInfo getRating() {
    return rating;
  }

  public void setRating(RatingInfo rating) {
    this.rating = rating;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem dateOfVisit(String dateOfVisit) {
    this.dateOfVisit = dateOfVisit;
    return this;
  }

  /**
   * date of the reviewer’s visit to the local establishment in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return dateOfVisit
   */
  @javax.annotation.Nullable
  public String getDateOfVisit() {
    return dateOfVisit;
  }

  public void setDateOfVisit(String dateOfVisit) {
    this.dateOfVisit = dateOfVisit;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * date and time when the review was published in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * title of the review
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem reviewText(String reviewText) {
    this.reviewText = reviewText;
    return this;
  }

  /**
   * content of the review
   * @return reviewText
   */
  @javax.annotation.Nullable
  public String getReviewText() {
    return reviewText;
  }

  public void setReviewText(String reviewText) {
    this.reviewText = reviewText;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem reviewImages(List<ImageUrlInfo> reviewImages) {
    this.reviewImages = reviewImages;
    return this;
  }

  public TripadvisorReviewSearchBusinessDataSerpElementItem addReviewImagesItem(ImageUrlInfo reviewImagesItem) {
    if (this.reviewImages == null) {
      this.reviewImages = new ArrayList<>();
    }
    this.reviewImages.add(reviewImagesItem);
    return this;
  }

  /**
   * contains URLs of the images used in the review
   * @return reviewImages
   */
  @javax.annotation.Nullable
  public List<ImageUrlInfo> getReviewImages() {
    return reviewImages;
  }

  public void setReviewImages(List<ImageUrlInfo> reviewImages) {
    this.reviewImages = reviewImages;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem userProfile(BusinessDataUserProfileInfo userProfile) {
    this.userProfile = userProfile;
    return this;
  }

  /**
   * Get userProfile
   * @return userProfile
   */
  @javax.annotation.Nullable
  public BusinessDataUserProfileInfo getUserProfile() {
    return userProfile;
  }

  public void setUserProfile(BusinessDataUserProfileInfo userProfile) {
    this.userProfile = userProfile;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem responses(List<ReviewResponseItemInfo> responses) {
    this.responses = responses;
    return this;
  }

  public TripadvisorReviewSearchBusinessDataSerpElementItem addResponsesItem(ReviewResponseItemInfo responsesItem) {
    if (this.responses == null) {
      this.responses = new ArrayList<>();
    }
    this.responses.add(responsesItem);
    return this;
  }

  /**
   * contains information about the owner’s response
   * @return responses
   */
  @javax.annotation.Nullable
  public List<ReviewResponseItemInfo> getResponses() {
    return responses;
  }

  public void setResponses(List<ReviewResponseItemInfo> responses) {
    this.responses = responses;
  }


  public TripadvisorReviewSearchBusinessDataSerpElementItem reviewHighlights(List<ReviewHighlights> reviewHighlights) {
    this.reviewHighlights = reviewHighlights;
    return this;
  }

  public TripadvisorReviewSearchBusinessDataSerpElementItem addReviewHighlightsItem(ReviewHighlights reviewHighlightsItem) {
    if (this.reviewHighlights == null) {
      this.reviewHighlights = new ArrayList<>();
    }
    this.reviewHighlights.add(reviewHighlightsItem);
    return this;
  }

  /**
   * review highlights contains highlighted review criteria and assessments
   * @return reviewHighlights
   */
  @javax.annotation.Nullable
  public List<ReviewHighlights> getReviewHighlights() {
    return reviewHighlights;
  }

  public void setReviewHighlights(List<ReviewHighlights> reviewHighlights) {
    this.reviewHighlights = reviewHighlights;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TripadvisorReviewSearchBusinessDataSerpElementItem instance itself
   */
  public TripadvisorReviewSearchBusinessDataSerpElementItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TripadvisorReviewSearchBusinessDataSerpElementItem tripadvisorReviewSearchBusinessDataSerpElementItem = (TripadvisorReviewSearchBusinessDataSerpElementItem) o;
    return Objects.equals(this.position, tripadvisorReviewSearchBusinessDataSerpElementItem.position) &&
        Objects.equals(this.url, tripadvisorReviewSearchBusinessDataSerpElementItem.url) &&
        Objects.equals(this.rating, tripadvisorReviewSearchBusinessDataSerpElementItem.rating) &&
        Objects.equals(this.dateOfVisit, tripadvisorReviewSearchBusinessDataSerpElementItem.dateOfVisit) &&
        Objects.equals(this.timestamp, tripadvisorReviewSearchBusinessDataSerpElementItem.timestamp) &&
        Objects.equals(this.title, tripadvisorReviewSearchBusinessDataSerpElementItem.title) &&
        Objects.equals(this.reviewText, tripadvisorReviewSearchBusinessDataSerpElementItem.reviewText) &&
        Objects.equals(this.reviewImages, tripadvisorReviewSearchBusinessDataSerpElementItem.reviewImages) &&
        Objects.equals(this.userProfile, tripadvisorReviewSearchBusinessDataSerpElementItem.userProfile) &&
        Objects.equals(this.responses, tripadvisorReviewSearchBusinessDataSerpElementItem.responses) &&
        Objects.equals(this.reviewHighlights, tripadvisorReviewSearchBusinessDataSerpElementItem.reviewHighlights)&&
        Objects.equals(this.additionalProperties, tripadvisorReviewSearchBusinessDataSerpElementItem.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(position, url, rating, dateOfVisit, timestamp, title, reviewText, reviewImages, userProfile, responses, reviewHighlights, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TripadvisorReviewSearchBusinessDataSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    dateOfVisit: ").append(toIndentedString(dateOfVisit)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    reviewText: ").append(toIndentedString(reviewText)).append("\n");
    sb.append("    reviewImages: ").append(toIndentedString(reviewImages)).append("\n");
    sb.append("    userProfile: ").append(toIndentedString(userProfile)).append("\n");
    sb.append("    responses: ").append(toIndentedString(responses)).append("\n");
    sb.append("    reviewHighlights: ").append(toIndentedString(reviewHighlights)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("position");
    openapiFields.add("url");
    openapiFields.add("rating");
    openapiFields.add("date_of_visit");
    openapiFields.add("timestamp");
    openapiFields.add("title");
    openapiFields.add("review_text");
    openapiFields.add("review_images");
    openapiFields.add("user_profile");
    openapiFields.add("responses");
    openapiFields.add("review_highlights");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TripadvisorReviewSearchBusinessDataSerpElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TripadvisorReviewSearchBusinessDataSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TripadvisorReviewSearchBusinessDataSerpElementItem is not found in the empty JSON string", TripadvisorReviewSearchBusinessDataSerpElementItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("position") != null && !jsonObj.get("position").isJsonNull()) && !jsonObj.get("position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("position").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        RatingInfo.validateJsonElement(jsonObj.get("rating"));
      }
      if ((jsonObj.get("date_of_visit") != null && !jsonObj.get("date_of_visit").isJsonNull()) && !jsonObj.get("date_of_visit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `date_of_visit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("date_of_visit").toString()));
      }
      if ((jsonObj.get("timestamp") != null && !jsonObj.get("timestamp").isJsonNull()) && !jsonObj.get("timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("review_text") != null && !jsonObj.get("review_text").isJsonNull()) && !jsonObj.get("review_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `review_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("review_text").toString()));
      }
      if (jsonObj.get("review_images") != null && !jsonObj.get("review_images").isJsonNull()) {
        JsonArray jsonArrayreviewImages = jsonObj.getAsJsonArray("review_images");
        if (jsonArrayreviewImages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("review_images").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `review_images` to be an array in the JSON string but got `%s`", jsonObj.get("review_images").toString()));
          }

          // validate the optional field `review_images` (array)
          for (int i = 0; i < jsonArrayreviewImages.size(); i++) {
            ImageUrlInfo.validateJsonElement(jsonArrayreviewImages.get(i));
          };
        }
      }
      // validate the optional field `user_profile`
      if (jsonObj.get("user_profile") != null && !jsonObj.get("user_profile").isJsonNull()) {
        BusinessDataUserProfileInfo.validateJsonElement(jsonObj.get("user_profile"));
      }
      if (jsonObj.get("responses") != null && !jsonObj.get("responses").isJsonNull()) {
        JsonArray jsonArrayresponses = jsonObj.getAsJsonArray("responses");
        if (jsonArrayresponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("responses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responses` to be an array in the JSON string but got `%s`", jsonObj.get("responses").toString()));
          }

          // validate the optional field `responses` (array)
          for (int i = 0; i < jsonArrayresponses.size(); i++) {
            ReviewResponseItemInfo.validateJsonElement(jsonArrayresponses.get(i));
          };
        }
      }
      if (jsonObj.get("review_highlights") != null && !jsonObj.get("review_highlights").isJsonNull()) {
        JsonArray jsonArrayreviewHighlights = jsonObj.getAsJsonArray("review_highlights");
        if (jsonArrayreviewHighlights != null) {
          // ensure the json data is an array
          if (!jsonObj.get("review_highlights").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `review_highlights` to be an array in the JSON string but got `%s`", jsonObj.get("review_highlights").toString()));
          }

          // validate the optional field `review_highlights` (array)
          for (int i = 0; i < jsonArrayreviewHighlights.size(); i++) {
            ReviewHighlights.validateJsonElement(jsonArrayreviewHighlights.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TripadvisorReviewSearchBusinessDataSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TripadvisorReviewSearchBusinessDataSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TripadvisorReviewSearchBusinessDataSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TripadvisorReviewSearchBusinessDataSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TripadvisorReviewSearchBusinessDataSerpElementItem>() {
           @Override
           public void write(JsonWriter out, TripadvisorReviewSearchBusinessDataSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TripadvisorReviewSearchBusinessDataSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TripadvisorReviewSearchBusinessDataSerpElementItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TripadvisorReviewSearchBusinessDataSerpElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TripadvisorReviewSearchBusinessDataSerpElementItem
   * @throws IOException if the JSON string is invalid with respect to TripadvisorReviewSearchBusinessDataSerpElementItem
   */
  public static TripadvisorReviewSearchBusinessDataSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TripadvisorReviewSearchBusinessDataSerpElementItem.class);
  }

  /**
   * Convert an instance of TripadvisorReviewSearchBusinessDataSerpElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

