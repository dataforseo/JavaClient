/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.AvgBacklinksInfo;
import io.github.dataforseo.client.model.ImpressionsInfo;
import io.github.dataforseo.client.model.KeywordInfo;
import io.github.dataforseo.client.model.KeywordInfoNormalizedWithInfo;
import io.github.dataforseo.client.model.KeywordProperties;
import io.github.dataforseo.client.model.SearchIntentInfo;
import io.github.dataforseo.client.model.SerpInfo;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * KeywordDataInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-11T19:55:34.761968200+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class KeywordDataInfo {
  public static final String SERIALIZED_NAME_SE_TYPE = "se_type";
  @SerializedName(SERIALIZED_NAME_SE_TYPE)
  private String seType;

  public static final String SERIALIZED_NAME_KEYWORD = "keyword";
  @SerializedName(SERIALIZED_NAME_KEYWORD)
  private String keyword;

  public static final String SERIALIZED_NAME_LOCATION_CODE = "location_code";
  @SerializedName(SERIALIZED_NAME_LOCATION_CODE)
  private Integer locationCode;

  public static final String SERIALIZED_NAME_LANGUAGE_CODE = "language_code";
  @SerializedName(SERIALIZED_NAME_LANGUAGE_CODE)
  private String languageCode;

  public static final String SERIALIZED_NAME_KEYWORD_INFO = "keyword_info";
  @SerializedName(SERIALIZED_NAME_KEYWORD_INFO)
  private KeywordInfo keywordInfo;

  public static final String SERIALIZED_NAME_KEYWORD_INFO_NORMALIZED_WITH_BING = "keyword_info_normalized_with_bing";
  @SerializedName(SERIALIZED_NAME_KEYWORD_INFO_NORMALIZED_WITH_BING)
  private KeywordInfoNormalizedWithInfo keywordInfoNormalizedWithBing;

  public static final String SERIALIZED_NAME_KEYWORD_INFO_NORMALIZED_WITH_CLICKSTREAM = "keyword_info_normalized_with_clickstream";
  @SerializedName(SERIALIZED_NAME_KEYWORD_INFO_NORMALIZED_WITH_CLICKSTREAM)
  private KeywordInfoNormalizedWithInfo keywordInfoNormalizedWithClickstream;

  public static final String SERIALIZED_NAME_CLICKSTREAM_KEYWORD_INFO = "clickstream_keyword_info";
  @SerializedName(SERIALIZED_NAME_CLICKSTREAM_KEYWORD_INFO)
  private Object clickstreamKeywordInfo = null;

  public static final String SERIALIZED_NAME_KEYWORD_PROPERTIES = "keyword_properties";
  @SerializedName(SERIALIZED_NAME_KEYWORD_PROPERTIES)
  private KeywordProperties keywordProperties;

  public static final String SERIALIZED_NAME_IMPRESSIONS_INFO = "impressions_info";
  @SerializedName(SERIALIZED_NAME_IMPRESSIONS_INFO)
  private ImpressionsInfo impressionsInfo;

  public static final String SERIALIZED_NAME_SERP_INFO = "serp_info";
  @SerializedName(SERIALIZED_NAME_SERP_INFO)
  private SerpInfo serpInfo;

  public static final String SERIALIZED_NAME_AVG_BACKLINKS_INFO = "avg_backlinks_info";
  @SerializedName(SERIALIZED_NAME_AVG_BACKLINKS_INFO)
  private AvgBacklinksInfo avgBacklinksInfo;

  public static final String SERIALIZED_NAME_SEARCH_INTENT_INFO = "search_intent_info";
  @SerializedName(SERIALIZED_NAME_SEARCH_INTENT_INFO)
  private SearchIntentInfo searchIntentInfo;

  public KeywordDataInfo() {
  }

  public KeywordDataInfo seType(String seType) {
    this.seType = seType;
    return this;
  }

  /**
   * search engine type
   * @return seType
   */
  @javax.annotation.Nullable
  public String getSeType() {
    return seType;
  }

  public void setSeType(String seType) {
    this.seType = seType;
  }


  public KeywordDataInfo keyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  /**
   * returned keyword idea
   * @return keyword
   */
  @javax.annotation.Nullable
  public String getKeyword() {
    return keyword;
  }

  public void setKeyword(String keyword) {
    this.keyword = keyword;
  }


  public KeywordDataInfo locationCode(Integer locationCode) {
    this.locationCode = locationCode;
    return this;
  }

  /**
   * location code in a POST array
   * @return locationCode
   */
  @javax.annotation.Nullable
  public Integer getLocationCode() {
    return locationCode;
  }

  public void setLocationCode(Integer locationCode) {
    this.locationCode = locationCode;
  }


  public KeywordDataInfo languageCode(String languageCode) {
    this.languageCode = languageCode;
    return this;
  }

  /**
   * language code in a POST array
   * @return languageCode
   */
  @javax.annotation.Nullable
  public String getLanguageCode() {
    return languageCode;
  }

  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
  }


  public KeywordDataInfo keywordInfo(KeywordInfo keywordInfo) {
    this.keywordInfo = keywordInfo;
    return this;
  }

  /**
   * Get keywordInfo
   * @return keywordInfo
   */
  @javax.annotation.Nullable
  public KeywordInfo getKeywordInfo() {
    return keywordInfo;
  }

  public void setKeywordInfo(KeywordInfo keywordInfo) {
    this.keywordInfo = keywordInfo;
  }


  public KeywordDataInfo keywordInfoNormalizedWithBing(KeywordInfoNormalizedWithInfo keywordInfoNormalizedWithBing) {
    this.keywordInfoNormalizedWithBing = keywordInfoNormalizedWithBing;
    return this;
  }

  /**
   * Get keywordInfoNormalizedWithBing
   * @return keywordInfoNormalizedWithBing
   */
  @javax.annotation.Nullable
  public KeywordInfoNormalizedWithInfo getKeywordInfoNormalizedWithBing() {
    return keywordInfoNormalizedWithBing;
  }

  public void setKeywordInfoNormalizedWithBing(KeywordInfoNormalizedWithInfo keywordInfoNormalizedWithBing) {
    this.keywordInfoNormalizedWithBing = keywordInfoNormalizedWithBing;
  }


  public KeywordDataInfo keywordInfoNormalizedWithClickstream(KeywordInfoNormalizedWithInfo keywordInfoNormalizedWithClickstream) {
    this.keywordInfoNormalizedWithClickstream = keywordInfoNormalizedWithClickstream;
    return this;
  }

  /**
   * Get keywordInfoNormalizedWithClickstream
   * @return keywordInfoNormalizedWithClickstream
   */
  @javax.annotation.Nullable
  public KeywordInfoNormalizedWithInfo getKeywordInfoNormalizedWithClickstream() {
    return keywordInfoNormalizedWithClickstream;
  }

  public void setKeywordInfoNormalizedWithClickstream(KeywordInfoNormalizedWithInfo keywordInfoNormalizedWithClickstream) {
    this.keywordInfoNormalizedWithClickstream = keywordInfoNormalizedWithClickstream;
  }


  public KeywordDataInfo clickstreamKeywordInfo(Object clickstreamKeywordInfo) {
    this.clickstreamKeywordInfo = clickstreamKeywordInfo;
    return this;
  }

  /**
   * Get clickstreamKeywordInfo
   * @return clickstreamKeywordInfo
   */
  @javax.annotation.Nullable
  public Object getClickstreamKeywordInfo() {
    return clickstreamKeywordInfo;
  }

  public void setClickstreamKeywordInfo(Object clickstreamKeywordInfo) {
    this.clickstreamKeywordInfo = clickstreamKeywordInfo;
  }


  public KeywordDataInfo keywordProperties(KeywordProperties keywordProperties) {
    this.keywordProperties = keywordProperties;
    return this;
  }

  /**
   * Get keywordProperties
   * @return keywordProperties
   */
  @javax.annotation.Nullable
  public KeywordProperties getKeywordProperties() {
    return keywordProperties;
  }

  public void setKeywordProperties(KeywordProperties keywordProperties) {
    this.keywordProperties = keywordProperties;
  }


  public KeywordDataInfo impressionsInfo(ImpressionsInfo impressionsInfo) {
    this.impressionsInfo = impressionsInfo;
    return this;
  }

  /**
   * Get impressionsInfo
   * @return impressionsInfo
   */
  @javax.annotation.Nullable
  public ImpressionsInfo getImpressionsInfo() {
    return impressionsInfo;
  }

  public void setImpressionsInfo(ImpressionsInfo impressionsInfo) {
    this.impressionsInfo = impressionsInfo;
  }


  public KeywordDataInfo serpInfo(SerpInfo serpInfo) {
    this.serpInfo = serpInfo;
    return this;
  }

  /**
   * Get serpInfo
   * @return serpInfo
   */
  @javax.annotation.Nullable
  public SerpInfo getSerpInfo() {
    return serpInfo;
  }

  public void setSerpInfo(SerpInfo serpInfo) {
    this.serpInfo = serpInfo;
  }


  public KeywordDataInfo avgBacklinksInfo(AvgBacklinksInfo avgBacklinksInfo) {
    this.avgBacklinksInfo = avgBacklinksInfo;
    return this;
  }

  /**
   * Get avgBacklinksInfo
   * @return avgBacklinksInfo
   */
  @javax.annotation.Nullable
  public AvgBacklinksInfo getAvgBacklinksInfo() {
    return avgBacklinksInfo;
  }

  public void setAvgBacklinksInfo(AvgBacklinksInfo avgBacklinksInfo) {
    this.avgBacklinksInfo = avgBacklinksInfo;
  }


  public KeywordDataInfo searchIntentInfo(SearchIntentInfo searchIntentInfo) {
    this.searchIntentInfo = searchIntentInfo;
    return this;
  }

  /**
   * Get searchIntentInfo
   * @return searchIntentInfo
   */
  @javax.annotation.Nullable
  public SearchIntentInfo getSearchIntentInfo() {
    return searchIntentInfo;
  }

  public void setSearchIntentInfo(SearchIntentInfo searchIntentInfo) {
    this.searchIntentInfo = searchIntentInfo;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the KeywordDataInfo instance itself
   */
  public KeywordDataInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    KeywordDataInfo keywordDataInfo = (KeywordDataInfo) o;
    return Objects.equals(this.seType, keywordDataInfo.seType) &&
        Objects.equals(this.keyword, keywordDataInfo.keyword) &&
        Objects.equals(this.locationCode, keywordDataInfo.locationCode) &&
        Objects.equals(this.languageCode, keywordDataInfo.languageCode) &&
        Objects.equals(this.keywordInfo, keywordDataInfo.keywordInfo) &&
        Objects.equals(this.keywordInfoNormalizedWithBing, keywordDataInfo.keywordInfoNormalizedWithBing) &&
        Objects.equals(this.keywordInfoNormalizedWithClickstream, keywordDataInfo.keywordInfoNormalizedWithClickstream) &&
        Objects.equals(this.clickstreamKeywordInfo, keywordDataInfo.clickstreamKeywordInfo) &&
        Objects.equals(this.keywordProperties, keywordDataInfo.keywordProperties) &&
        Objects.equals(this.impressionsInfo, keywordDataInfo.impressionsInfo) &&
        Objects.equals(this.serpInfo, keywordDataInfo.serpInfo) &&
        Objects.equals(this.avgBacklinksInfo, keywordDataInfo.avgBacklinksInfo) &&
        Objects.equals(this.searchIntentInfo, keywordDataInfo.searchIntentInfo)&&
        Objects.equals(this.additionalProperties, keywordDataInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(seType, keyword, locationCode, languageCode, keywordInfo, keywordInfoNormalizedWithBing, keywordInfoNormalizedWithClickstream, clickstreamKeywordInfo, keywordProperties, impressionsInfo, serpInfo, avgBacklinksInfo, searchIntentInfo, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class KeywordDataInfo {\n");
    sb.append("    seType: ").append(toIndentedString(seType)).append("\n");
    sb.append("    keyword: ").append(toIndentedString(keyword)).append("\n");
    sb.append("    locationCode: ").append(toIndentedString(locationCode)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    keywordInfo: ").append(toIndentedString(keywordInfo)).append("\n");
    sb.append("    keywordInfoNormalizedWithBing: ").append(toIndentedString(keywordInfoNormalizedWithBing)).append("\n");
    sb.append("    keywordInfoNormalizedWithClickstream: ").append(toIndentedString(keywordInfoNormalizedWithClickstream)).append("\n");
    sb.append("    clickstreamKeywordInfo: ").append(toIndentedString(clickstreamKeywordInfo)).append("\n");
    sb.append("    keywordProperties: ").append(toIndentedString(keywordProperties)).append("\n");
    sb.append("    impressionsInfo: ").append(toIndentedString(impressionsInfo)).append("\n");
    sb.append("    serpInfo: ").append(toIndentedString(serpInfo)).append("\n");
    sb.append("    avgBacklinksInfo: ").append(toIndentedString(avgBacklinksInfo)).append("\n");
    sb.append("    searchIntentInfo: ").append(toIndentedString(searchIntentInfo)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("se_type");
    openapiFields.add("keyword");
    openapiFields.add("location_code");
    openapiFields.add("language_code");
    openapiFields.add("keyword_info");
    openapiFields.add("keyword_info_normalized_with_bing");
    openapiFields.add("keyword_info_normalized_with_clickstream");
    openapiFields.add("clickstream_keyword_info");
    openapiFields.add("keyword_properties");
    openapiFields.add("impressions_info");
    openapiFields.add("serp_info");
    openapiFields.add("avg_backlinks_info");
    openapiFields.add("search_intent_info");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to KeywordDataInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!KeywordDataInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in KeywordDataInfo is not found in the empty JSON string", KeywordDataInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("se_type") != null && !jsonObj.get("se_type").isJsonNull()) && !jsonObj.get("se_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se_type").toString()));
      }
      if ((jsonObj.get("keyword") != null && !jsonObj.get("keyword").isJsonNull()) && !jsonObj.get("keyword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyword").toString()));
      }
      if ((jsonObj.get("language_code") != null && !jsonObj.get("language_code").isJsonNull()) && !jsonObj.get("language_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language_code").toString()));
      }
      // validate the optional field `keyword_info`
      if (jsonObj.get("keyword_info") != null && !jsonObj.get("keyword_info").isJsonNull()) {
        KeywordInfo.validateJsonElement(jsonObj.get("keyword_info"));
      }
      // validate the optional field `keyword_info_normalized_with_bing`
      if (jsonObj.get("keyword_info_normalized_with_bing") != null && !jsonObj.get("keyword_info_normalized_with_bing").isJsonNull()) {
        KeywordInfoNormalizedWithInfo.validateJsonElement(jsonObj.get("keyword_info_normalized_with_bing"));
      }
      // validate the optional field `keyword_info_normalized_with_clickstream`
      if (jsonObj.get("keyword_info_normalized_with_clickstream") != null && !jsonObj.get("keyword_info_normalized_with_clickstream").isJsonNull()) {
        KeywordInfoNormalizedWithInfo.validateJsonElement(jsonObj.get("keyword_info_normalized_with_clickstream"));
      }
      // validate the optional field `keyword_properties`
      if (jsonObj.get("keyword_properties") != null && !jsonObj.get("keyword_properties").isJsonNull()) {
        KeywordProperties.validateJsonElement(jsonObj.get("keyword_properties"));
      }
      // validate the optional field `impressions_info`
      if (jsonObj.get("impressions_info") != null && !jsonObj.get("impressions_info").isJsonNull()) {
        ImpressionsInfo.validateJsonElement(jsonObj.get("impressions_info"));
      }
      // validate the optional field `serp_info`
      if (jsonObj.get("serp_info") != null && !jsonObj.get("serp_info").isJsonNull()) {
        SerpInfo.validateJsonElement(jsonObj.get("serp_info"));
      }
      // validate the optional field `avg_backlinks_info`
      if (jsonObj.get("avg_backlinks_info") != null && !jsonObj.get("avg_backlinks_info").isJsonNull()) {
        AvgBacklinksInfo.validateJsonElement(jsonObj.get("avg_backlinks_info"));
      }
      // validate the optional field `search_intent_info`
      if (jsonObj.get("search_intent_info") != null && !jsonObj.get("search_intent_info").isJsonNull()) {
        SearchIntentInfo.validateJsonElement(jsonObj.get("search_intent_info"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!KeywordDataInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'KeywordDataInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<KeywordDataInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(KeywordDataInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<KeywordDataInfo>() {
           @Override
           public void write(JsonWriter out, KeywordDataInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public KeywordDataInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             KeywordDataInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of KeywordDataInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of KeywordDataInfo
   * @throws IOException if the JSON string is invalid with respect to KeywordDataInfo
   */
  public static KeywordDataInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, KeywordDataInfo.class);
  }

  /**
   * Convert an instance of KeywordDataInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

