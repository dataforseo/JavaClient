/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.BaseOnPageLinkItemInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * AnchorLinkElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-24T10:03:11.930414100+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class AnchorLinkElementItem extends BaseOnPageLinkItemInfo {
  public static final String SERIALIZED_NAME_LINK_ATTRIBUTE = "link_attribute";
  @SerializedName(SERIALIZED_NAME_LINK_ATTRIBUTE)
  private List<String> linkAttribute;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_PAGE_TO_STATUS_CODE = "page_to_status_code";
  @SerializedName(SERIALIZED_NAME_PAGE_TO_STATUS_CODE)
  private Integer pageToStatusCode;

  public AnchorLinkElementItem() {
  }

  public AnchorLinkElementItem linkAttribute(List<String> linkAttribute) {
    this.linkAttribute = linkAttribute;
    return this;
  }

  public AnchorLinkElementItem addLinkAttributeItem(String linkAttributeItem) {
    if (this.linkAttribute == null) {
      this.linkAttribute = new ArrayList<>();
    }
    this.linkAttribute.add(linkAttributeItem);
    return this;
  }

  /**
   * link attribute added to external link indicates link attributes added to the link_to on the page_from example: [\&quot;ugc\&quot;,\&quot;noopener\&quot;]
   * @return linkAttribute
   */
  @javax.annotation.Nullable
  public List<String> getLinkAttribute() {
    return linkAttribute;
  }

  public void setLinkAttribute(List<String> linkAttribute) {
    this.linkAttribute = linkAttribute;
  }


  public AnchorLinkElementItem text(String text) {
    this.text = text;
    return this;
  }

  /**
   * anchor text
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public AnchorLinkElementItem pageToStatusCode(Integer pageToStatusCode) {
    this.pageToStatusCode = pageToStatusCode;
    return this;
  }

  /**
   * status code of the referenced page status code of the page to which the link is pointing
   * @return pageToStatusCode
   */
  @javax.annotation.Nullable
  public Integer getPageToStatusCode() {
    return pageToStatusCode;
  }

  public void setPageToStatusCode(Integer pageToStatusCode) {
    this.pageToStatusCode = pageToStatusCode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AnchorLinkElementItem instance itself
   */
  public AnchorLinkElementItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AnchorLinkElementItem anchorLinkElementItem = (AnchorLinkElementItem) o;
    return Objects.equals(this.linkAttribute, anchorLinkElementItem.linkAttribute) &&
        Objects.equals(this.text, anchorLinkElementItem.text) &&
        Objects.equals(this.pageToStatusCode, anchorLinkElementItem.pageToStatusCode)&&
        Objects.equals(this.additionalProperties, anchorLinkElementItem.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(linkAttribute, text, pageToStatusCode, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AnchorLinkElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    linkAttribute: ").append(toIndentedString(linkAttribute)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    pageToStatusCode: ").append(toIndentedString(pageToStatusCode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("domain_from");
    openapiFields.add("domain_to");
    openapiFields.add("page_from");
    openapiFields.add("page_to");
    openapiFields.add("link_from");
    openapiFields.add("link_to");
    openapiFields.add("dofollow");
    openapiFields.add("page_from_scheme");
    openapiFields.add("page_to_scheme");
    openapiFields.add("direction");
    openapiFields.add("is_broken");
    openapiFields.add("is_link_relation_conflict");
    openapiFields.add("link_attribute");
    openapiFields.add("text");
    openapiFields.add("page_to_status_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AnchorLinkElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AnchorLinkElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AnchorLinkElementItem is not found in the empty JSON string", AnchorLinkElementItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("link_attribute") != null && !jsonObj.get("link_attribute").isJsonNull() && !jsonObj.get("link_attribute").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_attribute` to be an array in the JSON string but got `%s`", jsonObj.get("link_attribute").toString()));
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AnchorLinkElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AnchorLinkElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AnchorLinkElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AnchorLinkElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AnchorLinkElementItem>() {
           @Override
           public void write(JsonWriter out, AnchorLinkElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AnchorLinkElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             AnchorLinkElementItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AnchorLinkElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AnchorLinkElementItem
   * @throws IOException if the JSON string is invalid with respect to AnchorLinkElementItem
   */
  public static AnchorLinkElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AnchorLinkElementItem.class);
  }

  /**
   * Convert an instance of AnchorLinkElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

