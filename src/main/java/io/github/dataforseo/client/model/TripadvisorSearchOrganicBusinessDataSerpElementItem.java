/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.BaseBusinessDataSerpElementItem;
import io.github.dataforseo.client.model.RatingInfo;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * TripadvisorSearchOrganicBusinessDataSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-27T21:03:13.693366700+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class TripadvisorSearchOrganicBusinessDataSerpElementItem extends BaseBusinessDataSerpElementItem {
  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_URL_PATH = "url_path";
  @SerializedName(SERIALIZED_NAME_URL_PATH)
  private String urlPath;

  public static final String SERIALIZED_NAME_IS_SPONSORED = "is_sponsored";
  @SerializedName(SERIALIZED_NAME_IS_SPONSORED)
  private Boolean isSponsored;

  public static final String SERIALIZED_NAME_REVIEWS_COUNT = "reviews_count";
  @SerializedName(SERIALIZED_NAME_REVIEWS_COUNT)
  private Long reviewsCount;

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_PRICE_RATE = "price_rate";
  @SerializedName(SERIALIZED_NAME_PRICE_RATE)
  private String priceRate;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private RatingInfo rating;

  public TripadvisorSearchOrganicBusinessDataSerpElementItem() {
  }

  public TripadvisorSearchOrganicBusinessDataSerpElementItem title(String title) {
    this.title = title;
    return this;
  }

  /**
   * name of the business entity
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public TripadvisorSearchOrganicBusinessDataSerpElementItem urlPath(String urlPath) {
    this.urlPath = urlPath;
    return this;
  }

  /**
   * URL path of the business entity URL path to the Tripadvisor page of the business entity you can use this identifier to collect reviews for the business entity using Tripadvisor Reviews
   * @return urlPath
   */
  @javax.annotation.Nullable
  public String getUrlPath() {
    return urlPath;
  }

  public void setUrlPath(String urlPath) {
    this.urlPath = urlPath;
  }


  public TripadvisorSearchOrganicBusinessDataSerpElementItem isSponsored(Boolean isSponsored) {
    this.isSponsored = isSponsored;
    return this;
  }

  /**
   * indicates a sponsored placement if true, related tripadvisor_search_organic item is a paid advertising on Tripadvisor
   * @return isSponsored
   */
  @javax.annotation.Nullable
  public Boolean getIsSponsored() {
    return isSponsored;
  }

  public void setIsSponsored(Boolean isSponsored) {
    this.isSponsored = isSponsored;
  }


  public TripadvisorSearchOrganicBusinessDataSerpElementItem reviewsCount(Long reviewsCount) {
    this.reviewsCount = reviewsCount;
    return this;
  }

  /**
   * the total number of reviews
   * @return reviewsCount
   */
  @javax.annotation.Nullable
  public Long getReviewsCount() {
    return reviewsCount;
  }

  public void setReviewsCount(Long reviewsCount) {
    this.reviewsCount = reviewsCount;
  }


  public TripadvisorSearchOrganicBusinessDataSerpElementItem category(String category) {
    this.category = category;
    return this;
  }

  /**
   * place category
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public TripadvisorSearchOrganicBusinessDataSerpElementItem priceRate(String priceRate) {
    this.priceRate = priceRate;
    return this;
  }

  /**
   * average price rate
   * @return priceRate
   */
  @javax.annotation.Nullable
  public String getPriceRate() {
    return priceRate;
  }

  public void setPriceRate(String priceRate) {
    this.priceRate = priceRate;
  }


  public TripadvisorSearchOrganicBusinessDataSerpElementItem rating(RatingInfo rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public RatingInfo getRating() {
    return rating;
  }

  public void setRating(RatingInfo rating) {
    this.rating = rating;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TripadvisorSearchOrganicBusinessDataSerpElementItem instance itself
   */
  public TripadvisorSearchOrganicBusinessDataSerpElementItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TripadvisorSearchOrganicBusinessDataSerpElementItem tripadvisorSearchOrganicBusinessDataSerpElementItem = (TripadvisorSearchOrganicBusinessDataSerpElementItem) o;
    return Objects.equals(this.title, tripadvisorSearchOrganicBusinessDataSerpElementItem.title) &&
        Objects.equals(this.urlPath, tripadvisorSearchOrganicBusinessDataSerpElementItem.urlPath) &&
        Objects.equals(this.isSponsored, tripadvisorSearchOrganicBusinessDataSerpElementItem.isSponsored) &&
        Objects.equals(this.reviewsCount, tripadvisorSearchOrganicBusinessDataSerpElementItem.reviewsCount) &&
        Objects.equals(this.category, tripadvisorSearchOrganicBusinessDataSerpElementItem.category) &&
        Objects.equals(this.priceRate, tripadvisorSearchOrganicBusinessDataSerpElementItem.priceRate) &&
        Objects.equals(this.rating, tripadvisorSearchOrganicBusinessDataSerpElementItem.rating)&&
        Objects.equals(this.additionalProperties, tripadvisorSearchOrganicBusinessDataSerpElementItem.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, urlPath, isSponsored, reviewsCount, category, priceRate, rating, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TripadvisorSearchOrganicBusinessDataSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    urlPath: ").append(toIndentedString(urlPath)).append("\n");
    sb.append("    isSponsored: ").append(toIndentedString(isSponsored)).append("\n");
    sb.append("    reviewsCount: ").append(toIndentedString(reviewsCount)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    priceRate: ").append(toIndentedString(priceRate)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("title");
    openapiFields.add("url_path");
    openapiFields.add("is_sponsored");
    openapiFields.add("reviews_count");
    openapiFields.add("category");
    openapiFields.add("price_rate");
    openapiFields.add("rating");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TripadvisorSearchOrganicBusinessDataSerpElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TripadvisorSearchOrganicBusinessDataSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TripadvisorSearchOrganicBusinessDataSerpElementItem is not found in the empty JSON string", TripadvisorSearchOrganicBusinessDataSerpElementItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url_path") != null && !jsonObj.get("url_path").isJsonNull()) && !jsonObj.get("url_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url_path").toString()));
      }
      if ((jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) && !jsonObj.get("category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      if ((jsonObj.get("price_rate") != null && !jsonObj.get("price_rate").isJsonNull()) && !jsonObj.get("price_rate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `price_rate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("price_rate").toString()));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        RatingInfo.validateJsonElement(jsonObj.get("rating"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TripadvisorSearchOrganicBusinessDataSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TripadvisorSearchOrganicBusinessDataSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TripadvisorSearchOrganicBusinessDataSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TripadvisorSearchOrganicBusinessDataSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<TripadvisorSearchOrganicBusinessDataSerpElementItem>() {
           @Override
           public void write(JsonWriter out, TripadvisorSearchOrganicBusinessDataSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TripadvisorSearchOrganicBusinessDataSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             TripadvisorSearchOrganicBusinessDataSerpElementItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TripadvisorSearchOrganicBusinessDataSerpElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TripadvisorSearchOrganicBusinessDataSerpElementItem
   * @throws IOException if the JSON string is invalid with respect to TripadvisorSearchOrganicBusinessDataSerpElementItem
   */
  public static TripadvisorSearchOrganicBusinessDataSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TripadvisorSearchOrganicBusinessDataSerpElementItem.class);
  }

  /**
   * Convert an instance of TripadvisorSearchOrganicBusinessDataSerpElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

