/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * BaseGoogleFinanceTickerSearchSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-24T10:03:11.930414100+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class BaseGoogleFinanceTickerSearchSerpElementItem {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  protected String type;

  public static final String SERIALIZED_NAME_RANK_GROUP = "rank_group";
  @SerializedName(SERIALIZED_NAME_RANK_GROUP)
  private Integer rankGroup;

  public static final String SERIALIZED_NAME_RANK_ABSOLUTE = "rank_absolute";
  @SerializedName(SERIALIZED_NAME_RANK_ABSOLUTE)
  private Integer rankAbsolute;

  public static final String SERIALIZED_NAME_IDENTIFIER = "identifier";
  @SerializedName(SERIALIZED_NAME_IDENTIFIER)
  private String identifier;

  public static final String SERIALIZED_NAME_DISPLAYED_NAME = "displayed_name";
  @SerializedName(SERIALIZED_NAME_DISPLAYED_NAME)
  private String displayedName;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_TREND = "trend";
  @SerializedName(SERIALIZED_NAME_TREND)
  private String trend;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public static final String SERIALIZED_NAME_PERCENTAGE_DELTA = "percentage_delta";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE_DELTA)
  private Float percentageDelta;

  public BaseGoogleFinanceTickerSearchSerpElementItem() {
    this.type = this.getClass().getSimpleName();
  }

  public BaseGoogleFinanceTickerSearchSerpElementItem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * type of element
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem rankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
    return this;
  }

  /**
   * group rank in SERP position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group
   * @return rankGroup
   */
  @javax.annotation.Nullable
  public Integer getRankGroup() {
    return rankGroup;
  }

  public void setRankGroup(Integer rankGroup) {
    this.rankGroup = rankGroup;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem rankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
    return this;
  }

  /**
   * absolute rank in SERP absolute position among all the elements in SERP
   * @return rankAbsolute
   */
  @javax.annotation.Nullable
  public Integer getRankAbsolute() {
    return rankAbsolute;
  }

  public void setRankAbsolute(Integer rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem identifier(String identifier) {
    this.identifier = identifier;
    return this;
  }

  /**
   * identifier of the element full identifier of the element that consists from ticker and market_identifier example: PX1:INDEXDB
   * @return identifier
   */
  @javax.annotation.Nullable
  public String getIdentifier() {
    return identifier;
  }

  public void setIdentifier(String identifier) {
    this.identifier = identifier;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem displayedName(String displayedName) {
    this.displayedName = displayedName;
    return this;
  }

  /**
   * name of the market index as displayed on Google Finance example: CAC 40
   * @return displayedName
   */
  @javax.annotation.Nullable
  public String getDisplayedName() {
    return displayedName;
  }

  public void setDisplayedName(String displayedName) {
    this.displayedName = displayedName;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem url(String url) {
    this.url = url;
    return this;
  }

  /**
   * URL to the page of the market index on Google Finance
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem location(String location) {
    this.location = location;
    return this;
  }

  /**
   * location of the market index example: Europe/Paris
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem trend(String trend) {
    this.trend = trend;
    return this;
  }

  /**
   * growth trend of the market index possible values: up, down, stable
   * @return trend
   */
  @javax.annotation.Nullable
  public String getTrend() {
    return trend;
  }

  public void setTrend(String trend) {
    this.trend = trend;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * date and time of the value readout in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2025-02-10 09:40:00 +00:00
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }


  public BaseGoogleFinanceTickerSearchSerpElementItem percentageDelta(Float percentageDelta) {
    this.percentageDelta = percentageDelta;
    return this;
  }

  /**
   * percentage of change in value of the market index
   * @return percentageDelta
   */
  @javax.annotation.Nullable
  public Float getPercentageDelta() {
    return percentageDelta;
  }

  public void setPercentageDelta(Float percentageDelta) {
    this.percentageDelta = percentageDelta;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BaseGoogleFinanceTickerSearchSerpElementItem baseGoogleFinanceTickerSearchSerpElementItem = (BaseGoogleFinanceTickerSearchSerpElementItem) o;
    return Objects.equals(this.type, baseGoogleFinanceTickerSearchSerpElementItem.type) &&
        Objects.equals(this.rankGroup, baseGoogleFinanceTickerSearchSerpElementItem.rankGroup) &&
        Objects.equals(this.rankAbsolute, baseGoogleFinanceTickerSearchSerpElementItem.rankAbsolute) &&
        Objects.equals(this.identifier, baseGoogleFinanceTickerSearchSerpElementItem.identifier) &&
        Objects.equals(this.displayedName, baseGoogleFinanceTickerSearchSerpElementItem.displayedName) &&
        Objects.equals(this.url, baseGoogleFinanceTickerSearchSerpElementItem.url) &&
        Objects.equals(this.location, baseGoogleFinanceTickerSearchSerpElementItem.location) &&
        Objects.equals(this.trend, baseGoogleFinanceTickerSearchSerpElementItem.trend) &&
        Objects.equals(this.timestamp, baseGoogleFinanceTickerSearchSerpElementItem.timestamp) &&
        Objects.equals(this.percentageDelta, baseGoogleFinanceTickerSearchSerpElementItem.percentageDelta);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, rankGroup, rankAbsolute, identifier, displayedName, url, location, trend, timestamp, percentageDelta);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BaseGoogleFinanceTickerSearchSerpElementItem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    rankGroup: ").append(toIndentedString(rankGroup)).append("\n");
    sb.append("    rankAbsolute: ").append(toIndentedString(rankAbsolute)).append("\n");
    sb.append("    identifier: ").append(toIndentedString(identifier)).append("\n");
    sb.append("    displayedName: ").append(toIndentedString(displayedName)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    trend: ").append(toIndentedString(trend)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    percentageDelta: ").append(toIndentedString(percentageDelta)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("identifier");
    openapiFields.add("displayed_name");
    openapiFields.add("url");
    openapiFields.add("location");
    openapiFields.add("trend");
    openapiFields.add("timestamp");
    openapiFields.add("percentage_delta");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BaseGoogleFinanceTickerSearchSerpElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BaseGoogleFinanceTickerSearchSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BaseGoogleFinanceTickerSearchSerpElementItem is not found in the empty JSON string", BaseGoogleFinanceTickerSearchSerpElementItem.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("type").getAsString();
      switch (discriminatorValue) {
        case "google_finance_asset_pair":
          GoogleFinanceAssetPairSerpElementItem.validateJsonElement(jsonElement);
          break;
        case "google_finance_market_index":
          GoogleFinanceMarketIndexSerpElementItem.validateJsonElement(jsonElement);
          break;
        case "google_finance_market_instrument":
          GoogleFinanceMarketInstrumentSerpElementItem.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `type` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of BaseGoogleFinanceTickerSearchSerpElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BaseGoogleFinanceTickerSearchSerpElementItem
   * @throws IOException if the JSON string is invalid with respect to BaseGoogleFinanceTickerSearchSerpElementItem
   */
  public static BaseGoogleFinanceTickerSearchSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BaseGoogleFinanceTickerSearchSerpElementItem.class);
  }

  /**
   * Convert an instance of BaseGoogleFinanceTickerSearchSerpElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

