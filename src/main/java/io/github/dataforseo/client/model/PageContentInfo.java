/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.Contacts;
import io.github.dataforseo.client.model.ContentCommentInfo;
import io.github.dataforseo.client.model.ContentOfferInfo;
import io.github.dataforseo.client.model.ContentRatingInfo;
import io.github.dataforseo.client.model.PageSectionContentInfo;
import io.github.dataforseo.client.model.TopicInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * PageContentInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-03-10T21:39:12.196275300+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class PageContentInfo {
  public static final String SERIALIZED_NAME_HEADER = "header";
  @SerializedName(SERIALIZED_NAME_HEADER)
  private PageSectionContentInfo header;

  public static final String SERIALIZED_NAME_FOOTER = "footer";
  @SerializedName(SERIALIZED_NAME_FOOTER)
  private PageSectionContentInfo footer;

  public static final String SERIALIZED_NAME_MAIN_TOPIC = "main_topic";
  @SerializedName(SERIALIZED_NAME_MAIN_TOPIC)
  private List<TopicInfo> mainTopic;

  public static final String SERIALIZED_NAME_SECONDARY_TOPIC = "secondary_topic";
  @SerializedName(SERIALIZED_NAME_SECONDARY_TOPIC)
  private List<TopicInfo> secondaryTopic;

  public static final String SERIALIZED_NAME_RATINGS = "ratings";
  @SerializedName(SERIALIZED_NAME_RATINGS)
  private List<ContentRatingInfo> ratings;

  public static final String SERIALIZED_NAME_OFFERS = "offers";
  @SerializedName(SERIALIZED_NAME_OFFERS)
  private List<ContentOfferInfo> offers;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<ContentCommentInfo> comments;

  public static final String SERIALIZED_NAME_CONTACTS = "contacts";
  @SerializedName(SERIALIZED_NAME_CONTACTS)
  private Contacts contacts;

  public PageContentInfo() {
  }

  public PageContentInfo header(PageSectionContentInfo header) {
    this.header = header;
    return this;
  }

  /**
   * Get header
   * @return header
   */
  @javax.annotation.Nullable
  public PageSectionContentInfo getHeader() {
    return header;
  }

  public void setHeader(PageSectionContentInfo header) {
    this.header = header;
  }


  public PageContentInfo footer(PageSectionContentInfo footer) {
    this.footer = footer;
    return this;
  }

  /**
   * Get footer
   * @return footer
   */
  @javax.annotation.Nullable
  public PageSectionContentInfo getFooter() {
    return footer;
  }

  public void setFooter(PageSectionContentInfo footer) {
    this.footer = footer;
  }


  public PageContentInfo mainTopic(List<TopicInfo> mainTopic) {
    this.mainTopic = mainTopic;
    return this;
  }

  public PageContentInfo addMainTopicItem(TopicInfo mainTopicItem) {
    if (this.mainTopic == null) {
      this.mainTopic = new ArrayList<>();
    }
    this.mainTopic.add(mainTopicItem);
    return this;
  }

  /**
   * main topic on the page you can find more information about topic priority calculation in this help center article
   * @return mainTopic
   */
  @javax.annotation.Nullable
  public List<TopicInfo> getMainTopic() {
    return mainTopic;
  }

  public void setMainTopic(List<TopicInfo> mainTopic) {
    this.mainTopic = mainTopic;
  }


  public PageContentInfo secondaryTopic(List<TopicInfo> secondaryTopic) {
    this.secondaryTopic = secondaryTopic;
    return this;
  }

  public PageContentInfo addSecondaryTopicItem(TopicInfo secondaryTopicItem) {
    if (this.secondaryTopic == null) {
      this.secondaryTopic = new ArrayList<>();
    }
    this.secondaryTopic.add(secondaryTopicItem);
    return this;
  }

  /**
   * secondary topic on the page you can find more information about topic priority calculation in this help center article
   * @return secondaryTopic
   */
  @javax.annotation.Nullable
  public List<TopicInfo> getSecondaryTopic() {
    return secondaryTopic;
  }

  public void setSecondaryTopic(List<TopicInfo> secondaryTopic) {
    this.secondaryTopic = secondaryTopic;
  }


  public PageContentInfo ratings(List<ContentRatingInfo> ratings) {
    this.ratings = ratings;
    return this;
  }

  public PageContentInfo addRatingsItem(ContentRatingInfo ratingsItem) {
    if (this.ratings == null) {
      this.ratings = new ArrayList<>();
    }
    this.ratings.add(ratingsItem);
    return this;
  }

  /**
   * contains objects with rating information for the products displayed on the page
   * @return ratings
   */
  @javax.annotation.Nullable
  public List<ContentRatingInfo> getRatings() {
    return ratings;
  }

  public void setRatings(List<ContentRatingInfo> ratings) {
    this.ratings = ratings;
  }


  public PageContentInfo offers(List<ContentOfferInfo> offers) {
    this.offers = offers;
    return this;
  }

  public PageContentInfo addOffersItem(ContentOfferInfo offersItem) {
    if (this.offers == null) {
      this.offers = new ArrayList<>();
    }
    this.offers.add(offersItem);
    return this;
  }

  /**
   * array of products displayed on the page contains objects with information on products displayed on the page
   * @return offers
   */
  @javax.annotation.Nullable
  public List<ContentOfferInfo> getOffers() {
    return offers;
  }

  public void setOffers(List<ContentOfferInfo> offers) {
    this.offers = offers;
  }


  public PageContentInfo comments(List<ContentCommentInfo> comments) {
    this.comments = comments;
    return this;
  }

  public PageContentInfo addCommentsItem(ContentCommentInfo commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * array of comments displayed on the page contains objects with information on comments related to displayed products
   * @return comments
   */
  @javax.annotation.Nullable
  public List<ContentCommentInfo> getComments() {
    return comments;
  }

  public void setComments(List<ContentCommentInfo> comments) {
    this.comments = comments;
  }


  public PageContentInfo contacts(Contacts contacts) {
    this.contacts = contacts;
    return this;
  }

  /**
   * Get contacts
   * @return contacts
   */
  @javax.annotation.Nullable
  public Contacts getContacts() {
    return contacts;
  }

  public void setContacts(Contacts contacts) {
    this.contacts = contacts;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the PageContentInfo instance itself
   */
  public PageContentInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageContentInfo pageContentInfo = (PageContentInfo) o;
    return Objects.equals(this.header, pageContentInfo.header) &&
        Objects.equals(this.footer, pageContentInfo.footer) &&
        Objects.equals(this.mainTopic, pageContentInfo.mainTopic) &&
        Objects.equals(this.secondaryTopic, pageContentInfo.secondaryTopic) &&
        Objects.equals(this.ratings, pageContentInfo.ratings) &&
        Objects.equals(this.offers, pageContentInfo.offers) &&
        Objects.equals(this.comments, pageContentInfo.comments) &&
        Objects.equals(this.contacts, pageContentInfo.contacts)&&
        Objects.equals(this.additionalProperties, pageContentInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(header, footer, mainTopic, secondaryTopic, ratings, offers, comments, contacts, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageContentInfo {\n");
    sb.append("    header: ").append(toIndentedString(header)).append("\n");
    sb.append("    footer: ").append(toIndentedString(footer)).append("\n");
    sb.append("    mainTopic: ").append(toIndentedString(mainTopic)).append("\n");
    sb.append("    secondaryTopic: ").append(toIndentedString(secondaryTopic)).append("\n");
    sb.append("    ratings: ").append(toIndentedString(ratings)).append("\n");
    sb.append("    offers: ").append(toIndentedString(offers)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("header");
    openapiFields.add("footer");
    openapiFields.add("main_topic");
    openapiFields.add("secondary_topic");
    openapiFields.add("ratings");
    openapiFields.add("offers");
    openapiFields.add("comments");
    openapiFields.add("contacts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PageContentInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PageContentInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PageContentInfo is not found in the empty JSON string", PageContentInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `header`
      if (jsonObj.get("header") != null && !jsonObj.get("header").isJsonNull()) {
        PageSectionContentInfo.validateJsonElement(jsonObj.get("header"));
      }
      // validate the optional field `footer`
      if (jsonObj.get("footer") != null && !jsonObj.get("footer").isJsonNull()) {
        PageSectionContentInfo.validateJsonElement(jsonObj.get("footer"));
      }
      if (jsonObj.get("main_topic") != null && !jsonObj.get("main_topic").isJsonNull()) {
        JsonArray jsonArraymainTopic = jsonObj.getAsJsonArray("main_topic");
        if (jsonArraymainTopic != null) {
          // ensure the json data is an array
          if (!jsonObj.get("main_topic").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `main_topic` to be an array in the JSON string but got `%s`", jsonObj.get("main_topic").toString()));
          }

          // validate the optional field `main_topic` (array)
          for (int i = 0; i < jsonArraymainTopic.size(); i++) {
            TopicInfo.validateJsonElement(jsonArraymainTopic.get(i));
          };
        }
      }
      if (jsonObj.get("secondary_topic") != null && !jsonObj.get("secondary_topic").isJsonNull()) {
        JsonArray jsonArraysecondaryTopic = jsonObj.getAsJsonArray("secondary_topic");
        if (jsonArraysecondaryTopic != null) {
          // ensure the json data is an array
          if (!jsonObj.get("secondary_topic").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `secondary_topic` to be an array in the JSON string but got `%s`", jsonObj.get("secondary_topic").toString()));
          }

          // validate the optional field `secondary_topic` (array)
          for (int i = 0; i < jsonArraysecondaryTopic.size(); i++) {
            TopicInfo.validateJsonElement(jsonArraysecondaryTopic.get(i));
          };
        }
      }
      if (jsonObj.get("ratings") != null && !jsonObj.get("ratings").isJsonNull()) {
        JsonArray jsonArrayratings = jsonObj.getAsJsonArray("ratings");
        if (jsonArrayratings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ratings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ratings` to be an array in the JSON string but got `%s`", jsonObj.get("ratings").toString()));
          }

          // validate the optional field `ratings` (array)
          for (int i = 0; i < jsonArrayratings.size(); i++) {
            ContentRatingInfo.validateJsonElement(jsonArrayratings.get(i));
          };
        }
      }
      if (jsonObj.get("offers") != null && !jsonObj.get("offers").isJsonNull()) {
        JsonArray jsonArrayoffers = jsonObj.getAsJsonArray("offers");
        if (jsonArrayoffers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("offers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `offers` to be an array in the JSON string but got `%s`", jsonObj.get("offers").toString()));
          }

          // validate the optional field `offers` (array)
          for (int i = 0; i < jsonArrayoffers.size(); i++) {
            ContentOfferInfo.validateJsonElement(jsonArrayoffers.get(i));
          };
        }
      }
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) {
        JsonArray jsonArraycomments = jsonObj.getAsJsonArray("comments");
        if (jsonArraycomments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("comments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
          }

          // validate the optional field `comments` (array)
          for (int i = 0; i < jsonArraycomments.size(); i++) {
            ContentCommentInfo.validateJsonElement(jsonArraycomments.get(i));
          };
        }
      }
      // validate the optional field `contacts`
      if (jsonObj.get("contacts") != null && !jsonObj.get("contacts").isJsonNull()) {
        Contacts.validateJsonElement(jsonObj.get("contacts"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PageContentInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PageContentInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PageContentInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PageContentInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<PageContentInfo>() {
           @Override
           public void write(JsonWriter out, PageContentInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public PageContentInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             PageContentInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PageContentInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PageContentInfo
   * @throws IOException if the JSON string is invalid with respect to PageContentInfo
   */
  public static PageContentInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PageContentInfo.class);
  }

  /**
   * Convert an instance of PageContentInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

