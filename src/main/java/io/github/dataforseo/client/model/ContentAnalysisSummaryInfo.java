/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.ContentAnalysisCategoriesInfo;
import io.github.dataforseo.client.model.TopDomainInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * ContentAnalysisSummaryInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-06T19:08:02.252153200+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class ContentAnalysisSummaryInfo {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_TOTAL_COUNT = "total_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_COUNT)
  private Long totalCount;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_TOP_DOMAINS = "top_domains";
  @SerializedName(SERIALIZED_NAME_TOP_DOMAINS)
  private List<TopDomainInfo> topDomains;

  public static final String SERIALIZED_NAME_SENTIMENT_CONNOTATIONS = "sentiment_connotations";
  @SerializedName(SERIALIZED_NAME_SENTIMENT_CONNOTATIONS)
  private Map<String, Long> sentimentConnotations;

  public static final String SERIALIZED_NAME_CONNOTATION_TYPES = "connotation_types";
  @SerializedName(SERIALIZED_NAME_CONNOTATION_TYPES)
  private Map<String, Long> connotationTypes;

  public static final String SERIALIZED_NAME_TEXT_CATEGORIES = "text_categories";
  @SerializedName(SERIALIZED_NAME_TEXT_CATEGORIES)
  private List<ContentAnalysisCategoriesInfo> textCategories;

  public static final String SERIALIZED_NAME_PAGE_CATEGORIES = "page_categories";
  @SerializedName(SERIALIZED_NAME_PAGE_CATEGORIES)
  private List<ContentAnalysisCategoriesInfo> pageCategories;

  public static final String SERIALIZED_NAME_PAGE_TYPES = "page_types";
  @SerializedName(SERIALIZED_NAME_PAGE_TYPES)
  private Map<String, Long> pageTypes;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private Map<String, Long> countries;

  public static final String SERIALIZED_NAME_LANGUAGES = "languages";
  @SerializedName(SERIALIZED_NAME_LANGUAGES)
  private Map<String, Long> languages;

  public ContentAnalysisSummaryInfo() {
  }

  public ContentAnalysisSummaryInfo type(String type) {
    this.type = type;
    return this;
  }

  /**
   * type of element
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ContentAnalysisSummaryInfo totalCount(Long totalCount) {
    this.totalCount = totalCount;
    return this;
  }

  /**
   * total amount of results in our database relevant to your request
   * @return totalCount
   */
  @javax.annotation.Nullable
  public Long getTotalCount() {
    return totalCount;
  }

  public void setTotalCount(Long totalCount) {
    this.totalCount = totalCount;
  }


  public ContentAnalysisSummaryInfo rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * rank of all URLs citing the keyword normalized sum of ranks of all URLs citing the target keyword
   * @return rank
   */
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public ContentAnalysisSummaryInfo topDomains(List<TopDomainInfo> topDomains) {
    this.topDomains = topDomains;
    return this;
  }

  public ContentAnalysisSummaryInfo addTopDomainsItem(TopDomainInfo topDomainsItem) {
    if (this.topDomains == null) {
      this.topDomains = new ArrayList<>();
    }
    this.topDomains.add(topDomainsItem);
    return this;
  }

  /**
   * top domains citing the target keyword contains objects with top domains citing the target keword and citation count per each domain
   * @return topDomains
   */
  @javax.annotation.Nullable
  public List<TopDomainInfo> getTopDomains() {
    return topDomains;
  }

  public void setTopDomains(List<TopDomainInfo> topDomains) {
    this.topDomains = topDomains;
  }


  public ContentAnalysisSummaryInfo sentimentConnotations(Map<String, Long> sentimentConnotations) {
    this.sentimentConnotations = sentimentConnotations;
    return this;
  }

  public ContentAnalysisSummaryInfo putSentimentConnotationsItem(String key, Long sentimentConnotationsItem) {
    if (this.sentimentConnotations == null) {
      this.sentimentConnotations = new HashMap<>();
    }
    this.sentimentConnotations.put(key, sentimentConnotationsItem);
    return this;
  }

  /**
   * sentiment connotations contains sentiments (emotional reactions) related to the target keyword citation and the number of citations per each sentiment possible sentiment connotations: anger, happiness, love, sadness, share, fun
   * @return sentimentConnotations
   */
  @javax.annotation.Nullable
  public Map<String, Long> getSentimentConnotations() {
    return sentimentConnotations;
  }

  public void setSentimentConnotations(Map<String, Long> sentimentConnotations) {
    this.sentimentConnotations = sentimentConnotations;
  }


  public ContentAnalysisSummaryInfo connotationTypes(Map<String, Long> connotationTypes) {
    this.connotationTypes = connotationTypes;
    return this;
  }

  public ContentAnalysisSummaryInfo putConnotationTypesItem(String key, Long connotationTypesItem) {
    if (this.connotationTypes == null) {
      this.connotationTypes = new HashMap<>();
    }
    this.connotationTypes.put(key, connotationTypesItem);
    return this;
  }

  /**
   * connotation types contains types of sentiments (sentiment polarity) related to the keyword citation and citation count per each sentiment type possible sentiment connotation types: positive, negative, neutral
   * @return connotationTypes
   */
  @javax.annotation.Nullable
  public Map<String, Long> getConnotationTypes() {
    return connotationTypes;
  }

  public void setConnotationTypes(Map<String, Long> connotationTypes) {
    this.connotationTypes = connotationTypes;
  }


  public ContentAnalysisSummaryInfo textCategories(List<ContentAnalysisCategoriesInfo> textCategories) {
    this.textCategories = textCategories;
    return this;
  }

  public ContentAnalysisSummaryInfo addTextCategoriesItem(ContentAnalysisCategoriesInfo textCategoriesItem) {
    if (this.textCategories == null) {
      this.textCategories = new ArrayList<>();
    }
    this.textCategories.add(textCategoriesItem);
    return this;
  }

  /**
   * text categories contains objects with text categories and citation count in each text category to obtain a full list of available categories, refer to the Categories endpoint
   * @return textCategories
   */
  @javax.annotation.Nullable
  public List<ContentAnalysisCategoriesInfo> getTextCategories() {
    return textCategories;
  }

  public void setTextCategories(List<ContentAnalysisCategoriesInfo> textCategories) {
    this.textCategories = textCategories;
  }


  public ContentAnalysisSummaryInfo pageCategories(List<ContentAnalysisCategoriesInfo> pageCategories) {
    this.pageCategories = pageCategories;
    return this;
  }

  public ContentAnalysisSummaryInfo addPageCategoriesItem(ContentAnalysisCategoriesInfo pageCategoriesItem) {
    if (this.pageCategories == null) {
      this.pageCategories = new ArrayList<>();
    }
    this.pageCategories.add(pageCategoriesItem);
    return this;
  }

  /**
   * page categories contains objects with page categories and citation count in each page category to obtain a full list of available categories, refer to the Categories endpoint
   * @return pageCategories
   */
  @javax.annotation.Nullable
  public List<ContentAnalysisCategoriesInfo> getPageCategories() {
    return pageCategories;
  }

  public void setPageCategories(List<ContentAnalysisCategoriesInfo> pageCategories) {
    this.pageCategories = pageCategories;
  }


  public ContentAnalysisSummaryInfo pageTypes(Map<String, Long> pageTypes) {
    this.pageTypes = pageTypes;
    return this;
  }

  public ContentAnalysisSummaryInfo putPageTypesItem(String key, Long pageTypesItem) {
    if (this.pageTypes == null) {
      this.pageTypes = new HashMap<>();
    }
    this.pageTypes.put(key, pageTypesItem);
    return this;
  }

  /**
   * page types contains page types and citation count per each page type
   * @return pageTypes
   */
  @javax.annotation.Nullable
  public Map<String, Long> getPageTypes() {
    return pageTypes;
  }

  public void setPageTypes(Map<String, Long> pageTypes) {
    this.pageTypes = pageTypes;
  }


  public ContentAnalysisSummaryInfo countries(Map<String, Long> countries) {
    this.countries = countries;
    return this;
  }

  public ContentAnalysisSummaryInfo putCountriesItem(String key, Long countriesItem) {
    if (this.countries == null) {
      this.countries = new HashMap<>();
    }
    this.countries.put(key, countriesItem);
    return this;
  }

  /**
   * countries contains countries and citation count in each country to obtain a full list of available countries, refer to the Locations endpoint
   * @return countries
   */
  @javax.annotation.Nullable
  public Map<String, Long> getCountries() {
    return countries;
  }

  public void setCountries(Map<String, Long> countries) {
    this.countries = countries;
  }


  public ContentAnalysisSummaryInfo languages(Map<String, Long> languages) {
    this.languages = languages;
    return this;
  }

  public ContentAnalysisSummaryInfo putLanguagesItem(String key, Long languagesItem) {
    if (this.languages == null) {
      this.languages = new HashMap<>();
    }
    this.languages.put(key, languagesItem);
    return this;
  }

  /**
   * languages contains languages and citation count in each language to obtain a full list of available languages, refer to the Languages endpoint
   * @return languages
   */
  @javax.annotation.Nullable
  public Map<String, Long> getLanguages() {
    return languages;
  }

  public void setLanguages(Map<String, Long> languages) {
    this.languages = languages;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ContentAnalysisSummaryInfo instance itself
   */
  public ContentAnalysisSummaryInfo putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContentAnalysisSummaryInfo contentAnalysisSummaryInfo = (ContentAnalysisSummaryInfo) o;
    return Objects.equals(this.type, contentAnalysisSummaryInfo.type) &&
        Objects.equals(this.totalCount, contentAnalysisSummaryInfo.totalCount) &&
        Objects.equals(this.rank, contentAnalysisSummaryInfo.rank) &&
        Objects.equals(this.topDomains, contentAnalysisSummaryInfo.topDomains) &&
        Objects.equals(this.sentimentConnotations, contentAnalysisSummaryInfo.sentimentConnotations) &&
        Objects.equals(this.connotationTypes, contentAnalysisSummaryInfo.connotationTypes) &&
        Objects.equals(this.textCategories, contentAnalysisSummaryInfo.textCategories) &&
        Objects.equals(this.pageCategories, contentAnalysisSummaryInfo.pageCategories) &&
        Objects.equals(this.pageTypes, contentAnalysisSummaryInfo.pageTypes) &&
        Objects.equals(this.countries, contentAnalysisSummaryInfo.countries) &&
        Objects.equals(this.languages, contentAnalysisSummaryInfo.languages)&&
        Objects.equals(this.additionalProperties, contentAnalysisSummaryInfo.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, totalCount, rank, topDomains, sentimentConnotations, connotationTypes, textCategories, pageCategories, pageTypes, countries, languages, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContentAnalysisSummaryInfo {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    totalCount: ").append(toIndentedString(totalCount)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    topDomains: ").append(toIndentedString(topDomains)).append("\n");
    sb.append("    sentimentConnotations: ").append(toIndentedString(sentimentConnotations)).append("\n");
    sb.append("    connotationTypes: ").append(toIndentedString(connotationTypes)).append("\n");
    sb.append("    textCategories: ").append(toIndentedString(textCategories)).append("\n");
    sb.append("    pageCategories: ").append(toIndentedString(pageCategories)).append("\n");
    sb.append("    pageTypes: ").append(toIndentedString(pageTypes)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    languages: ").append(toIndentedString(languages)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("total_count");
    openapiFields.add("rank");
    openapiFields.add("top_domains");
    openapiFields.add("sentiment_connotations");
    openapiFields.add("connotation_types");
    openapiFields.add("text_categories");
    openapiFields.add("page_categories");
    openapiFields.add("page_types");
    openapiFields.add("countries");
    openapiFields.add("languages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContentAnalysisSummaryInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContentAnalysisSummaryInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContentAnalysisSummaryInfo is not found in the empty JSON string", ContentAnalysisSummaryInfo.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if (jsonObj.get("top_domains") != null && !jsonObj.get("top_domains").isJsonNull()) {
        JsonArray jsonArraytopDomains = jsonObj.getAsJsonArray("top_domains");
        if (jsonArraytopDomains != null) {
          // ensure the json data is an array
          if (!jsonObj.get("top_domains").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `top_domains` to be an array in the JSON string but got `%s`", jsonObj.get("top_domains").toString()));
          }

          // validate the optional field `top_domains` (array)
          for (int i = 0; i < jsonArraytopDomains.size(); i++) {
            TopDomainInfo.validateJsonElement(jsonArraytopDomains.get(i));
          };
        }
      }
      if (jsonObj.get("text_categories") != null && !jsonObj.get("text_categories").isJsonNull()) {
        JsonArray jsonArraytextCategories = jsonObj.getAsJsonArray("text_categories");
        if (jsonArraytextCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("text_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `text_categories` to be an array in the JSON string but got `%s`", jsonObj.get("text_categories").toString()));
          }

          // validate the optional field `text_categories` (array)
          for (int i = 0; i < jsonArraytextCategories.size(); i++) {
            ContentAnalysisCategoriesInfo.validateJsonElement(jsonArraytextCategories.get(i));
          };
        }
      }
      if (jsonObj.get("page_categories") != null && !jsonObj.get("page_categories").isJsonNull()) {
        JsonArray jsonArraypageCategories = jsonObj.getAsJsonArray("page_categories");
        if (jsonArraypageCategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("page_categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `page_categories` to be an array in the JSON string but got `%s`", jsonObj.get("page_categories").toString()));
          }

          // validate the optional field `page_categories` (array)
          for (int i = 0; i < jsonArraypageCategories.size(); i++) {
            ContentAnalysisCategoriesInfo.validateJsonElement(jsonArraypageCategories.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContentAnalysisSummaryInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContentAnalysisSummaryInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContentAnalysisSummaryInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContentAnalysisSummaryInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<ContentAnalysisSummaryInfo>() {
           @Override
           public void write(JsonWriter out, ContentAnalysisSummaryInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ContentAnalysisSummaryInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             ContentAnalysisSummaryInfo instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContentAnalysisSummaryInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContentAnalysisSummaryInfo
   * @throws IOException if the JSON string is invalid with respect to ContentAnalysisSummaryInfo
   */
  public static ContentAnalysisSummaryInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContentAnalysisSummaryInfo.class);
  }

  /**
   * Convert an instance of ContentAnalysisSummaryInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

