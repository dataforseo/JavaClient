/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.BaseGoogleFinanceSerpElementItem;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.client.JSON;

/**
 * GoogleFinanceAboutSerpElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-30T15:21:14.476580900+03:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class GoogleFinanceAboutSerpElementItem extends BaseGoogleFinanceSerpElementItem {
  public static final String SERIALIZED_NAME_RANK_GROUP = "rank_group";
  @SerializedName(SERIALIZED_NAME_RANK_GROUP)
  private BigDecimal rankGroup;

  public static final String SERIALIZED_NAME_RANK_ABSOLUTE = "rank_absolute";
  @SerializedName(SERIALIZED_NAME_RANK_ABSOLUTE)
  private BigDecimal rankAbsolute;

  public static final String SERIALIZED_NAME_DISPLAYED_NAME = "displayed_name";
  @SerializedName(SERIALIZED_NAME_DISPLAYED_NAME)
  private String displayedName;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DESCRIPTION_SOURCE_URL = "description_source_url";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION_SOURCE_URL)
  private String descriptionSourceUrl;

  public static final String SERIALIZED_NAME_CEO = "ceo";
  @SerializedName(SERIALIZED_NAME_CEO)
  private String ceo;

  public static final String SERIALIZED_NAME_FOUNDED = "founded";
  @SerializedName(SERIALIZED_NAME_FOUNDED)
  private String founded;

  public static final String SERIALIZED_NAME_HEADQUARTERS = "headquarters";
  @SerializedName(SERIALIZED_NAME_HEADQUARTERS)
  private String headquarters;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public static final String SERIALIZED_NAME_EMPLOYEES = "employees";
  @SerializedName(SERIALIZED_NAME_EMPLOYEES)
  private BigDecimal employees;

  public GoogleFinanceAboutSerpElementItem() {
  }

  public GoogleFinanceAboutSerpElementItem rankGroup(BigDecimal rankGroup) {
    this.rankGroup = rankGroup;
    return this;
  }

  /**
   * group rank in SERP position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group
   * @return rankGroup
   */
  @javax.annotation.Nullable
  public BigDecimal getRankGroup() {
    return rankGroup;
  }

  public void setRankGroup(BigDecimal rankGroup) {
    this.rankGroup = rankGroup;
  }


  public GoogleFinanceAboutSerpElementItem rankAbsolute(BigDecimal rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
    return this;
  }

  /**
   * absolute rank in SERP absolute position among all the elements in SERP
   * @return rankAbsolute
   */
  @javax.annotation.Nullable
  public BigDecimal getRankAbsolute() {
    return rankAbsolute;
  }

  public void setRankAbsolute(BigDecimal rankAbsolute) {
    this.rankAbsolute = rankAbsolute;
  }


  public GoogleFinanceAboutSerpElementItem displayedName(String displayedName) {
    this.displayedName = displayedName;
    return this;
  }

  /**
   * displayed name of the market index example: E-mini Dow ($5)
   * @return displayedName
   */
  @javax.annotation.Nullable
  public String getDisplayedName() {
    return displayedName;
  }

  public void setDisplayedName(String displayedName) {
    this.displayedName = displayedName;
  }


  public GoogleFinanceAboutSerpElementItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * company description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public GoogleFinanceAboutSerpElementItem descriptionSourceUrl(String descriptionSourceUrl) {
    this.descriptionSourceUrl = descriptionSourceUrl;
    return this;
  }

  /**
   * source of information provided in description
   * @return descriptionSourceUrl
   */
  @javax.annotation.Nullable
  public String getDescriptionSourceUrl() {
    return descriptionSourceUrl;
  }

  public void setDescriptionSourceUrl(String descriptionSourceUrl) {
    this.descriptionSourceUrl = descriptionSourceUrl;
  }


  public GoogleFinanceAboutSerpElementItem ceo(String ceo) {
    this.ceo = ceo;
    return this;
  }

  /**
   * Chief Executive Officer of the company
   * @return ceo
   */
  @javax.annotation.Nullable
  public String getCeo() {
    return ceo;
  }

  public void setCeo(String ceo) {
    this.ceo = ceo;
  }


  public GoogleFinanceAboutSerpElementItem founded(String founded) {
    this.founded = founded;
    return this;
  }

  /**
   * date when the company was founded in the format: “yyyy-mm-ddThh-mm-ssZ” example: 1993-04-05T00:00:00Z
   * @return founded
   */
  @javax.annotation.Nullable
  public String getFounded() {
    return founded;
  }

  public void setFounded(String founded) {
    this.founded = founded;
  }


  public GoogleFinanceAboutSerpElementItem headquarters(String headquarters) {
    this.headquarters = headquarters;
    return this;
  }

  /**
   * company headquarters
   * @return headquarters
   */
  @javax.annotation.Nullable
  public String getHeadquarters() {
    return headquarters;
  }

  public void setHeadquarters(String headquarters) {
    this.headquarters = headquarters;
  }


  public GoogleFinanceAboutSerpElementItem website(String website) {
    this.website = website;
    return this;
  }

  /**
   * company website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }


  public GoogleFinanceAboutSerpElementItem employees(BigDecimal employees) {
    this.employees = employees;
    return this;
  }

  /**
   * number of company employees
   * @return employees
   */
  @javax.annotation.Nullable
  public BigDecimal getEmployees() {
    return employees;
  }

  public void setEmployees(BigDecimal employees) {
    this.employees = employees;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the GoogleFinanceAboutSerpElementItem instance itself
   */
  public GoogleFinanceAboutSerpElementItem putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GoogleFinanceAboutSerpElementItem googleFinanceAboutSerpElementItem = (GoogleFinanceAboutSerpElementItem) o;
    return Objects.equals(this.rankGroup, googleFinanceAboutSerpElementItem.rankGroup) &&
        Objects.equals(this.rankAbsolute, googleFinanceAboutSerpElementItem.rankAbsolute) &&
        Objects.equals(this.displayedName, googleFinanceAboutSerpElementItem.displayedName) &&
        Objects.equals(this.description, googleFinanceAboutSerpElementItem.description) &&
        Objects.equals(this.descriptionSourceUrl, googleFinanceAboutSerpElementItem.descriptionSourceUrl) &&
        Objects.equals(this.ceo, googleFinanceAboutSerpElementItem.ceo) &&
        Objects.equals(this.founded, googleFinanceAboutSerpElementItem.founded) &&
        Objects.equals(this.headquarters, googleFinanceAboutSerpElementItem.headquarters) &&
        Objects.equals(this.website, googleFinanceAboutSerpElementItem.website) &&
        Objects.equals(this.employees, googleFinanceAboutSerpElementItem.employees)&&
        Objects.equals(this.additionalProperties, googleFinanceAboutSerpElementItem.additionalProperties) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(rankGroup, rankAbsolute, displayedName, description, descriptionSourceUrl, ceo, founded, headquarters, website, employees, super.hashCode(), additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GoogleFinanceAboutSerpElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    rankGroup: ").append(toIndentedString(rankGroup)).append("\n");
    sb.append("    rankAbsolute: ").append(toIndentedString(rankAbsolute)).append("\n");
    sb.append("    displayedName: ").append(toIndentedString(displayedName)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    descriptionSourceUrl: ").append(toIndentedString(descriptionSourceUrl)).append("\n");
    sb.append("    ceo: ").append(toIndentedString(ceo)).append("\n");
    sb.append("    founded: ").append(toIndentedString(founded)).append("\n");
    sb.append("    headquarters: ").append(toIndentedString(headquarters)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("    employees: ").append(toIndentedString(employees)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("rank_group");
    openapiFields.add("rank_absolute");
    openapiFields.add("displayed_name");
    openapiFields.add("description");
    openapiFields.add("description_source_url");
    openapiFields.add("ceo");
    openapiFields.add("founded");
    openapiFields.add("headquarters");
    openapiFields.add("website");
    openapiFields.add("employees");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GoogleFinanceAboutSerpElementItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GoogleFinanceAboutSerpElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GoogleFinanceAboutSerpElementItem is not found in the empty JSON string", GoogleFinanceAboutSerpElementItem.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayed_name") != null && !jsonObj.get("displayed_name").isJsonNull()) && !jsonObj.get("displayed_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayed_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayed_name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("description_source_url") != null && !jsonObj.get("description_source_url").isJsonNull()) && !jsonObj.get("description_source_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description_source_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description_source_url").toString()));
      }
      if ((jsonObj.get("ceo") != null && !jsonObj.get("ceo").isJsonNull()) && !jsonObj.get("ceo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ceo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ceo").toString()));
      }
      if ((jsonObj.get("founded") != null && !jsonObj.get("founded").isJsonNull()) && !jsonObj.get("founded").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `founded` to be a primitive type in the JSON string but got `%s`", jsonObj.get("founded").toString()));
      }
      if ((jsonObj.get("headquarters") != null && !jsonObj.get("headquarters").isJsonNull()) && !jsonObj.get("headquarters").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `headquarters` to be a primitive type in the JSON string but got `%s`", jsonObj.get("headquarters").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GoogleFinanceAboutSerpElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GoogleFinanceAboutSerpElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GoogleFinanceAboutSerpElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GoogleFinanceAboutSerpElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<GoogleFinanceAboutSerpElementItem>() {
           @Override
           public void write(JsonWriter out, GoogleFinanceAboutSerpElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public GoogleFinanceAboutSerpElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             GoogleFinanceAboutSerpElementItem instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GoogleFinanceAboutSerpElementItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GoogleFinanceAboutSerpElementItem
   * @throws IOException if the JSON string is invalid with respect to GoogleFinanceAboutSerpElementItem
   */
  public static GoogleFinanceAboutSerpElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GoogleFinanceAboutSerpElementItem.class);
  }

  /**
   * Convert an instance of GoogleFinanceAboutSerpElementItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

