/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.PageContentInfo;
import io.github.dataforseo.client.model.PageSectionContentInfo;
import io.github.dataforseo.client.model.TopicInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import io.github.dataforseo.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-11T19:55:34.761968200+02:00[Europe/Kiev]", comments = "Generator version: 7.8.0")
public class OnPageContentParsingItemPageContent extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(OnPageContentParsingItemPageContent.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!OnPageContentParsingItemPageContent.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'OnPageContentParsingItemPageContent' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<PageContentInfo> adapterPageContentInfo = gson.getDelegateAdapter(this, TypeToken.get(PageContentInfo.class));

            return (TypeAdapter<T>) new TypeAdapter<OnPageContentParsingItemPageContent>() {
                @Override
                public void write(JsonWriter out, OnPageContentParsingItemPageContent value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `PageContentInfo`
                    if (value.getActualInstance() instanceof PageContentInfo) {
                        JsonElement element = adapterPageContentInfo.toJsonTree((PageContentInfo)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: PageContentInfo");
                }

                @Override
                public OnPageContentParsingItemPageContent read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize PageContentInfo
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PageContentInfo.validateJsonElement(jsonElement);
                        actualAdapter = adapterPageContentInfo;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PageContentInfo'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PageContentInfo failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PageContentInfo'", e);
                    }

                    if (match == 1) {
                        OnPageContentParsingItemPageContent ret = new OnPageContentParsingItemPageContent();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for OnPageContentParsingItemPageContent: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public OnPageContentParsingItemPageContent() {
        super("oneOf", Boolean.TRUE);
    }

    public OnPageContentParsingItemPageContent(Object o) {
        super("oneOf", Boolean.TRUE);
        setActualInstance(o);
    }

    static {
        schemas.put("PageContentInfo", PageContentInfo.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return OnPageContentParsingItemPageContent.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * PageContentInfo
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance == null) {
           super.setActualInstance(instance);
           return;
        }

        if (instance instanceof PageContentInfo) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be PageContentInfo");
    }

    /**
     * Get the actual instance, which can be the following:
     * PageContentInfo
     *
     * @return The actual instance (PageContentInfo)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `PageContentInfo`. If the actual instance is not `PageContentInfo`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PageContentInfo`
     * @throws ClassCastException if the instance is not `PageContentInfo`
     */
    public PageContentInfo getPageContentInfo() throws ClassCastException {
        return (PageContentInfo)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to OnPageContentParsingItemPageContent
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with PageContentInfo
        try {
            PageContentInfo.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PageContentInfo failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for OnPageContentParsingItemPageContent with oneOf schemas: PageContentInfo. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of OnPageContentParsingItemPageContent given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of OnPageContentParsingItemPageContent
     * @throws IOException if the JSON string is invalid with respect to OnPageContentParsingItemPageContent
     */
    public static OnPageContentParsingItemPageContent fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, OnPageContentParsingItemPageContent.class);
    }

    /**
     * Convert an instance of OnPageContentParsingItemPageContent to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

