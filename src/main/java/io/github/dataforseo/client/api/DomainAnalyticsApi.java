/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.api;

import io.github.dataforseo.client.ApiCallback;
import io.github.dataforseo.client.ApiClient;
import io.github.dataforseo.client.ApiException;
import io.github.dataforseo.client.ApiResponse;
import io.github.dataforseo.client.Configuration;
import io.github.dataforseo.client.Pair;
import io.github.dataforseo.client.ProgressRequestBody;
import io.github.dataforseo.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.dataforseo.client.model.DomainAnalyticsErrorsRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsErrorsResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsIdListRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsIdListResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesAvailableFiltersResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesLanguagesResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesLocationsResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesTechnologiesResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsWhoisAvailableFiltersResponseInfo;
import io.github.dataforseo.client.model.DomainAnalyticsWhoisOverviewLiveRequestInfo;
import io.github.dataforseo.client.model.DomainAnalyticsWhoisOverviewLiveResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainAnalyticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainAnalyticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainAnalyticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for domainAnalyticsErrors
     * @param domainAnalyticsErrorsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsErrorsCall(List<DomainAnalyticsErrorsRequestInfo> domainAnalyticsErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsErrorsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainAnalyticsErrorsValidateBeforeCall(List<DomainAnalyticsErrorsRequestInfo> domainAnalyticsErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        return domainAnalyticsErrorsCall(domainAnalyticsErrorsRequestInfo, _callback);

    }

    /**
     * 
     * By calling this endpoint you will receive information about the Domain Analytics API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/errors/?bash&#39;
     * @param domainAnalyticsErrorsRequestInfo  (optional)
     * @return DomainAnalyticsErrorsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsErrorsResponseInfo domainAnalyticsErrors(List<DomainAnalyticsErrorsRequestInfo> domainAnalyticsErrorsRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsErrorsResponseInfo> localVarResp = domainAnalyticsErrorsWithHttpInfo(domainAnalyticsErrorsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this endpoint you will receive information about the Domain Analytics API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/errors/?bash&#39;
     * @param domainAnalyticsErrorsRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsErrorsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsErrorsResponseInfo> domainAnalyticsErrorsWithHttpInfo(List<DomainAnalyticsErrorsRequestInfo> domainAnalyticsErrorsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = domainAnalyticsErrorsValidateBeforeCall(domainAnalyticsErrorsRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsErrorsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this endpoint you will receive information about the Domain Analytics API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/errors/?bash&#39;
     * @param domainAnalyticsErrorsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsErrorsAsync(List<DomainAnalyticsErrorsRequestInfo> domainAnalyticsErrorsRequestInfo, final ApiCallback<DomainAnalyticsErrorsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainAnalyticsErrorsValidateBeforeCall(domainAnalyticsErrorsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsErrorsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainAnalyticsIdList
     * @param domainAnalyticsIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsIdListCall(List<DomainAnalyticsIdListRequestInfo> domainAnalyticsIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainAnalyticsIdListValidateBeforeCall(List<DomainAnalyticsIdListRequestInfo> domainAnalyticsIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return domainAnalyticsIdListCall(domainAnalyticsIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Domain Analytics tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/id_list/?bash&#39;
     * @param domainAnalyticsIdListRequestInfo  (optional)
     * @return DomainAnalyticsIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsIdListResponseInfo domainAnalyticsIdList(List<DomainAnalyticsIdListRequestInfo> domainAnalyticsIdListRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsIdListResponseInfo> localVarResp = domainAnalyticsIdListWithHttpInfo(domainAnalyticsIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Domain Analytics tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/id_list/?bash&#39;
     * @param domainAnalyticsIdListRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsIdListResponseInfo> domainAnalyticsIdListWithHttpInfo(List<DomainAnalyticsIdListRequestInfo> domainAnalyticsIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = domainAnalyticsIdListValidateBeforeCall(domainAnalyticsIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed Domain Analytics tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/id_list/?bash&#39;
     * @param domainAnalyticsIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsIdListAsync(List<DomainAnalyticsIdListRequestInfo> domainAnalyticsIdListRequestInfo, final ApiCallback<DomainAnalyticsIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainAnalyticsIdListValidateBeforeCall(domainAnalyticsIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainAnalyticsTechnologiesLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsTechnologiesLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainAnalyticsTechnologiesLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return domainAnalyticsTechnologiesLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/languages/?bash&#39;
     * @return DomainAnalyticsTechnologiesLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesLanguagesResponseInfo domainAnalyticsTechnologiesLanguages() throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesLanguagesResponseInfo> localVarResp = domainAnalyticsTechnologiesLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/languages/?bash&#39;
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesLanguagesResponseInfo> domainAnalyticsTechnologiesLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = domainAnalyticsTechnologiesLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsTechnologiesLanguagesAsync(final ApiCallback<DomainAnalyticsTechnologiesLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainAnalyticsTechnologiesLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for domainAnalyticsTechnologiesLocations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsTechnologiesLocationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call domainAnalyticsTechnologiesLocationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return domainAnalyticsTechnologiesLocationsCall(_callback);

    }

    /**
     * 
     * You will receive the list of locations by this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/locations/?bash&#39;
     * @return DomainAnalyticsTechnologiesLocationsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesLocationsResponseInfo domainAnalyticsTechnologiesLocations() throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesLocationsResponseInfo> localVarResp = domainAnalyticsTechnologiesLocationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of locations by this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/locations/?bash&#39;
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesLocationsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesLocationsResponseInfo> domainAnalyticsTechnologiesLocationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = domainAnalyticsTechnologiesLocationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesLocationsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of locations by this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/locations/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call domainAnalyticsTechnologiesLocationsAsync(final ApiCallback<DomainAnalyticsTechnologiesLocationsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = domainAnalyticsTechnologiesLocationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesLocationsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesAggregationTechnologiesLive
     * @param domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesAggregationTechnologiesLiveCall(List<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/aggregation_technologies/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesAggregationTechnologiesLiveValidateBeforeCall(List<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return technologiesAggregationTechnologiesLiveCall(domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ The Aggregation Technologies endpoint will provide you with a list of the most popular technologies websites use alongside the technologies you specify. Alternatively, you can specify technology categories or groups to obtain wider stats. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/aggregation_technologies/live/?bash&#39;
     * @param domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo  (optional)
     * @return DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo technologiesAggregationTechnologiesLive(List<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo> localVarResp = technologiesAggregationTechnologiesLiveWithHttpInfo(domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ The Aggregation Technologies endpoint will provide you with a list of the most popular technologies websites use alongside the technologies you specify. Alternatively, you can specify technology categories or groups to obtain wider stats. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/aggregation_technologies/live/?bash&#39;
     * @param domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo> technologiesAggregationTechnologiesLiveWithHttpInfo(List<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = technologiesAggregationTechnologiesLiveValidateBeforeCall(domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ The Aggregation Technologies endpoint will provide you with a list of the most popular technologies websites use alongside the technologies you specify. Alternatively, you can specify technology categories or groups to obtain wider stats. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/aggregation_technologies/live/?bash&#39;
     * @param domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesAggregationTechnologiesLiveAsync(List<DomainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo, final ApiCallback<DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesAggregationTechnologiesLiveValidateBeforeCall(domainAnalyticsTechnologiesAggregationTechnologiesLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesAggregationTechnologiesLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesAvailableFilters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesAvailableFiltersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/available_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesAvailableFiltersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return technologiesAvailableFiltersCall(_callback);

    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Domain Analytics Technologies API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/filters/?bash&#39;
     * @return DomainAnalyticsTechnologiesAvailableFiltersResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesAvailableFiltersResponseInfo technologiesAvailableFilters() throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesAvailableFiltersResponseInfo> localVarResp = technologiesAvailableFiltersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Domain Analytics Technologies API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/filters/?bash&#39;
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesAvailableFiltersResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesAvailableFiltersResponseInfo> technologiesAvailableFiltersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = technologiesAvailableFiltersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesAvailableFiltersResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Here you will find all the necessary information about filters that can be used with Domain Analytics Technologies API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/filters/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesAvailableFiltersAsync(final ApiCallback<DomainAnalyticsTechnologiesAvailableFiltersResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesAvailableFiltersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesAvailableFiltersResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesDomainTechnologiesLive
     * @param domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesDomainTechnologiesLiveCall(List<DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/domain_technologies/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesDomainTechnologiesLiveValidateBeforeCall(List<DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return technologiesDomainTechnologiesLiveCall(domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Using this endpoint you will get a list of technologies used in a particular domain. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domain_technologies/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo  (optional)
     * @return DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo technologiesDomainTechnologiesLive(List<DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo> localVarResp = technologiesDomainTechnologiesLiveWithHttpInfo(domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Using this endpoint you will get a list of technologies used in a particular domain. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domain_technologies/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo> technologiesDomainTechnologiesLiveWithHttpInfo(List<DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = technologiesDomainTechnologiesLiveValidateBeforeCall(domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Using this endpoint you will get a list of technologies used in a particular domain. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domain_technologies/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesDomainTechnologiesLiveAsync(List<DomainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo> domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo, final ApiCallback<DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesDomainTechnologiesLiveValidateBeforeCall(domainAnalyticsTechnologiesDomainTechnologiesLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesDomainTechnologiesLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesDomainsByHtmlTermsLive
     * @param domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesDomainsByHtmlTermsLiveCall(List<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo> domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/domains_by_html_terms/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesDomainsByHtmlTermsLiveValidateBeforeCall(List<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo> domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return technologiesDomainsByHtmlTermsLiveCall(domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides domains based on the HTML terms they use on their homepage. In addition to the list of domains, you will also get their technology profiles, the country and language they belong to, and other related data. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domains_by_html_terms/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo  (optional)
     * @return DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo technologiesDomainsByHtmlTermsLive(List<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo> domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo> localVarResp = technologiesDomainsByHtmlTermsLiveWithHttpInfo(domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides domains based on the HTML terms they use on their homepage. In addition to the list of domains, you will also get their technology profiles, the country and language they belong to, and other related data. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domains_by_html_terms/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo> technologiesDomainsByHtmlTermsLiveWithHttpInfo(List<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo> domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = technologiesDomainsByHtmlTermsLiveValidateBeforeCall(domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides domains based on the HTML terms they use on their homepage. In addition to the list of domains, you will also get their technology profiles, the country and language they belong to, and other related data. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domains_by_html_terms/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesDomainsByHtmlTermsLiveAsync(List<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo> domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo, final ApiCallback<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesDomainsByHtmlTermsLiveValidateBeforeCall(domainAnalyticsTechnologiesDomainsByHtmlTermsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesDomainsByHtmlTermsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesDomainsByTechnologyLive
     * @param domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesDomainsByTechnologyLiveCall(List<DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo> domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/domains_by_technology/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesDomainsByTechnologyLiveValidateBeforeCall(List<DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo> domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return technologiesDomainsByTechnologyLiveCall(domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint provides domains based on the technology they use. In addition to the list of domains, you will also get their technology profiles, the country and language they belong to, and other related data. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domains_by_technology/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo  (optional)
     * @return DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo technologiesDomainsByTechnologyLive(List<DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo> domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo> localVarResp = technologiesDomainsByTechnologyLiveWithHttpInfo(domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint provides domains based on the technology they use. In addition to the list of domains, you will also get their technology profiles, the country and language they belong to, and other related data. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domains_by_technology/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo> technologiesDomainsByTechnologyLiveWithHttpInfo(List<DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo> domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = technologiesDomainsByTechnologyLiveValidateBeforeCall(domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint provides domains based on the technology they use. In addition to the list of domains, you will also get their technology profiles, the country and language they belong to, and other related data. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/domains_by_technology/live/?bash&#39;
     * @param domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesDomainsByTechnologyLiveAsync(List<DomainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo> domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo, final ApiCallback<DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesDomainsByTechnologyLiveValidateBeforeCall(domainAnalyticsTechnologiesDomainsByTechnologyLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesDomainsByTechnologyLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesTechnologies
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesTechnologiesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/technologies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesTechnologiesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return technologiesTechnologiesCall(_callback);

    }

    /**
     * 
     * This endpoint will provide you with the full list of available technologies structured by technology groups and categories each particular technology belongs to. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technologies/?bash&#39;
     * @return DomainAnalyticsTechnologiesTechnologiesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesTechnologiesResponseInfo technologiesTechnologies() throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesTechnologiesResponseInfo> localVarResp = technologiesTechnologiesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint will provide you with the full list of available technologies structured by technology groups and categories each particular technology belongs to. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technologies/?bash&#39;
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesTechnologiesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesTechnologiesResponseInfo> technologiesTechnologiesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = technologiesTechnologiesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesTechnologiesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint will provide you with the full list of available technologies structured by technology groups and categories each particular technology belongs to. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technologies/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesTechnologiesAsync(final ApiCallback<DomainAnalyticsTechnologiesTechnologiesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesTechnologiesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesTechnologiesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesTechnologiesSummaryLive
     * @param domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesTechnologiesSummaryLiveCall(List<DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo> domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/technologies_summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesTechnologiesSummaryLiveValidateBeforeCall(List<DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo> domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return technologiesTechnologiesSummaryLiveCall(domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ The Technologies Summary endpoint will provide you with the number of domains across different countries and languages that use the specified technology names, technology groups, or technology categories. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technologies_summary/live/?bash&#39;
     * @param domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo  (optional)
     * @return DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo technologiesTechnologiesSummaryLive(List<DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo> domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo> localVarResp = technologiesTechnologiesSummaryLiveWithHttpInfo(domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ The Technologies Summary endpoint will provide you with the number of domains across different countries and languages that use the specified technology names, technology groups, or technology categories. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technologies_summary/live/?bash&#39;
     * @param domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo> technologiesTechnologiesSummaryLiveWithHttpInfo(List<DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo> domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = technologiesTechnologiesSummaryLiveValidateBeforeCall(domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ The Technologies Summary endpoint will provide you with the number of domains across different countries and languages that use the specified technology names, technology groups, or technology categories. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technologies_summary/live/?bash&#39;
     * @param domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesTechnologiesSummaryLiveAsync(List<DomainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo> domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo, final ApiCallback<DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesTechnologiesSummaryLiveValidateBeforeCall(domainAnalyticsTechnologiesTechnologiesSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesTechnologiesSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for technologiesTechnologyStatsLive
     * @param domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesTechnologyStatsLiveCall(List<DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo> domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/technologies/technology_stats/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call technologiesTechnologyStatsLiveValidateBeforeCall(List<DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo> domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return technologiesTechnologyStatsLiveCall(domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ The Technology Stats endpoint will provide you with historical data on the number of domains across different countries and languages that use the specified technology. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technology_stats/live/?bash&#39;
     * @param domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo  (optional)
     * @return DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo technologiesTechnologyStatsLive(List<DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo> domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo> localVarResp = technologiesTechnologyStatsLiveWithHttpInfo(domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ The Technology Stats endpoint will provide you with historical data on the number of domains across different countries and languages that use the specified technology. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technology_stats/live/?bash&#39;
     * @param domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo> technologiesTechnologyStatsLiveWithHttpInfo(List<DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo> domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = technologiesTechnologyStatsLiveValidateBeforeCall(domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ The Technology Stats endpoint will provide you with historical data on the number of domains across different countries and languages that use the specified technology. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/technologies/technology_stats/live/?bash&#39;
     * @param domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call technologiesTechnologyStatsLiveAsync(List<DomainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo> domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo, final ApiCallback<DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = technologiesTechnologyStatsLiveValidateBeforeCall(domainAnalyticsTechnologiesTechnologyStatsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsTechnologiesTechnologyStatsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for whoisAvailableFilters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whoisAvailableFiltersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/whois/available_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call whoisAvailableFiltersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return whoisAvailableFiltersCall(_callback);

    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Domain Analytics Whois API. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/whois/filters/?bash&#39;
     * @return DomainAnalyticsWhoisAvailableFiltersResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsWhoisAvailableFiltersResponseInfo whoisAvailableFilters() throws ApiException {
        ApiResponse<DomainAnalyticsWhoisAvailableFiltersResponseInfo> localVarResp = whoisAvailableFiltersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Here you will find all the necessary information about filters that can be used with Domain Analytics Whois API. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/whois/filters/?bash&#39;
     * @return ApiResponse&lt;DomainAnalyticsWhoisAvailableFiltersResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsWhoisAvailableFiltersResponseInfo> whoisAvailableFiltersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = whoisAvailableFiltersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsWhoisAvailableFiltersResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Here you will find all the necessary information about filters that can be used with Domain Analytics Whois API. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/whois/filters/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whoisAvailableFiltersAsync(final ApiCallback<DomainAnalyticsWhoisAvailableFiltersResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = whoisAvailableFiltersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsWhoisAvailableFiltersResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for whoisOverviewLive
     * @param domainAnalyticsWhoisOverviewLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whoisOverviewLiveCall(List<DomainAnalyticsWhoisOverviewLiveRequestInfo> domainAnalyticsWhoisOverviewLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = domainAnalyticsWhoisOverviewLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/domain_analytics/whois/overview/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call whoisOverviewLiveValidateBeforeCall(List<DomainAnalyticsWhoisOverviewLiveRequestInfo> domainAnalyticsWhoisOverviewLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return whoisOverviewLiveCall(domainAnalyticsWhoisOverviewLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with Whois data enriched with backlink stats, and ranking and traffic info from organic and paid search results. Using this endpoint you will be able to get all these data for the domains matching the parameters you specify in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/whois/overview/live/?bash&#39;
     * @param domainAnalyticsWhoisOverviewLiveRequestInfo  (optional)
     * @return DomainAnalyticsWhoisOverviewLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public DomainAnalyticsWhoisOverviewLiveResponseInfo whoisOverviewLive(List<DomainAnalyticsWhoisOverviewLiveRequestInfo> domainAnalyticsWhoisOverviewLiveRequestInfo) throws ApiException {
        ApiResponse<DomainAnalyticsWhoisOverviewLiveResponseInfo> localVarResp = whoisOverviewLiveWithHttpInfo(domainAnalyticsWhoisOverviewLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with Whois data enriched with backlink stats, and ranking and traffic info from organic and paid search results. Using this endpoint you will be able to get all these data for the domains matching the parameters you specify in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/whois/overview/live/?bash&#39;
     * @param domainAnalyticsWhoisOverviewLiveRequestInfo  (optional)
     * @return ApiResponse&lt;DomainAnalyticsWhoisOverviewLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DomainAnalyticsWhoisOverviewLiveResponseInfo> whoisOverviewLiveWithHttpInfo(List<DomainAnalyticsWhoisOverviewLiveRequestInfo> domainAnalyticsWhoisOverviewLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = whoisOverviewLiveValidateBeforeCall(domainAnalyticsWhoisOverviewLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<DomainAnalyticsWhoisOverviewLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with Whois data enriched with backlink stats, and ranking and traffic info from organic and paid search results. Using this endpoint you will be able to get all these data for the domains matching the parameters you specify in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/domain_analytics/whois/overview/live/?bash&#39;
     * @param domainAnalyticsWhoisOverviewLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call whoisOverviewLiveAsync(List<DomainAnalyticsWhoisOverviewLiveRequestInfo> domainAnalyticsWhoisOverviewLiveRequestInfo, final ApiCallback<DomainAnalyticsWhoisOverviewLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = whoisOverviewLiveValidateBeforeCall(domainAnalyticsWhoisOverviewLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<DomainAnalyticsWhoisOverviewLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
