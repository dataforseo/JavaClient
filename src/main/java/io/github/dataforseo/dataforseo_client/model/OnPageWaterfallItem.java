/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.dataforseo_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.dataforseo_client.model.BaseOnPageResourceItemInfo;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.dataforseo_client.JSON;

/**
 * OnPageWaterfallItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:39:13.468741042Z[Etc/UTC]")
public class OnPageWaterfallItem {
  public static final String SERIALIZED_NAME_PAGE_URL = "page_url";
  @SerializedName(SERIALIZED_NAME_PAGE_URL)
  private String pageUrl;

  public static final String SERIALIZED_NAME_TIME_TO_INTERACTIVE = "time_to_interactive";
  @SerializedName(SERIALIZED_NAME_TIME_TO_INTERACTIVE)
  private Integer timeToInteractive;

  public static final String SERIALIZED_NAME_DOM_COMPLETE = "dom_complete";
  @SerializedName(SERIALIZED_NAME_DOM_COMPLETE)
  private Integer domComplete;

  public static final String SERIALIZED_NAME_CONNECTION_TIME = "connection_time";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TIME)
  private Integer connectionTime;

  public static final String SERIALIZED_NAME_TIME_TO_SECURE_CONNECTION = "time_to_secure_connection";
  @SerializedName(SERIALIZED_NAME_TIME_TO_SECURE_CONNECTION)
  private Integer timeToSecureConnection;

  public static final String SERIALIZED_NAME_REQUEST_SENT_TIME = "request_sent_time";
  @SerializedName(SERIALIZED_NAME_REQUEST_SENT_TIME)
  private Integer requestSentTime;

  public static final String SERIALIZED_NAME_WAITING_TIME = "waiting_time";
  @SerializedName(SERIALIZED_NAME_WAITING_TIME)
  private Integer waitingTime;

  public static final String SERIALIZED_NAME_DOWNLOAD_TIME = "download_time";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_TIME)
  private Integer downloadTime;

  public static final String SERIALIZED_NAME_DURATION_TIME = "duration_time";
  @SerializedName(SERIALIZED_NAME_DURATION_TIME)
  private Integer durationTime;

  public static final String SERIALIZED_NAME_FETCH_START = "fetch_start";
  @SerializedName(SERIALIZED_NAME_FETCH_START)
  private Integer fetchStart;

  public static final String SERIALIZED_NAME_FETCH_END = "fetch_end";
  @SerializedName(SERIALIZED_NAME_FETCH_END)
  private Integer fetchEnd;

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<BaseOnPageResourceItemInfo> resources;

  public OnPageWaterfallItem() {
  }

  public OnPageWaterfallItem pageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
    return this;
  }

   /**
   * URL of the page
   * @return pageUrl
  **/
  @javax.annotation.Nullable
  public String getPageUrl() {
    return pageUrl;
  }

  public void setPageUrl(String pageUrl) {
    this.pageUrl = pageUrl;
  }


  public OnPageWaterfallItem timeToInteractive(Integer timeToInteractive) {
    this.timeToInteractive = timeToInteractive;
    return this;
  }

   /**
   * Time To Interactive (TTI) metric the time it takes until the user can interact with a page (in milliseconds)
   * @return timeToInteractive
  **/
  @javax.annotation.Nullable
  public Integer getTimeToInteractive() {
    return timeToInteractive;
  }

  public void setTimeToInteractive(Integer timeToInteractive) {
    this.timeToInteractive = timeToInteractive;
  }


  public OnPageWaterfallItem domComplete(Integer domComplete) {
    this.domComplete = domComplete;
    return this;
  }

   /**
   * time to load resources the time it takes until the page and all of its subresources are downloaded (in milliseconds)
   * @return domComplete
  **/
  @javax.annotation.Nullable
  public Integer getDomComplete() {
    return domComplete;
  }

  public void setDomComplete(Integer domComplete) {
    this.domComplete = domComplete;
  }


  public OnPageWaterfallItem connectionTime(Integer connectionTime) {
    this.connectionTime = connectionTime;
    return this;
  }

   /**
   * time to connect to a server the time it takes until the connection with a server is established (in milliseconds)
   * @return connectionTime
  **/
  @javax.annotation.Nullable
  public Integer getConnectionTime() {
    return connectionTime;
  }

  public void setConnectionTime(Integer connectionTime) {
    this.connectionTime = connectionTime;
  }


  public OnPageWaterfallItem timeToSecureConnection(Integer timeToSecureConnection) {
    this.timeToSecureConnection = timeToSecureConnection;
    return this;
  }

   /**
   * time to establish a secure connection the time it takes until the secure connection with a server is established (in milliseconds)
   * @return timeToSecureConnection
  **/
  @javax.annotation.Nullable
  public Integer getTimeToSecureConnection() {
    return timeToSecureConnection;
  }

  public void setTimeToSecureConnection(Integer timeToSecureConnection) {
    this.timeToSecureConnection = timeToSecureConnection;
  }


  public OnPageWaterfallItem requestSentTime(Integer requestSentTime) {
    this.requestSentTime = requestSentTime;
    return this;
  }

   /**
   * time to send a request to a server the time it takes until the request to a server is sent (in milliseconds)
   * @return requestSentTime
  **/
  @javax.annotation.Nullable
  public Integer getRequestSentTime() {
    return requestSentTime;
  }

  public void setRequestSentTime(Integer requestSentTime) {
    this.requestSentTime = requestSentTime;
  }


  public OnPageWaterfallItem waitingTime(Integer waitingTime) {
    this.waitingTime = waitingTime;
    return this;
  }

   /**
   * time to first byte (TTFB) in milliseconds
   * @return waitingTime
  **/
  @javax.annotation.Nullable
  public Integer getWaitingTime() {
    return waitingTime;
  }

  public void setWaitingTime(Integer waitingTime) {
    this.waitingTime = waitingTime;
  }


  public OnPageWaterfallItem downloadTime(Integer downloadTime) {
    this.downloadTime = downloadTime;
    return this;
  }

   /**
   * time it takes for a browser to receive a response (in milliseconds)
   * @return downloadTime
  **/
  @javax.annotation.Nullable
  public Integer getDownloadTime() {
    return downloadTime;
  }

  public void setDownloadTime(Integer downloadTime) {
    this.downloadTime = downloadTime;
  }


  public OnPageWaterfallItem durationTime(Integer durationTime) {
    this.durationTime = durationTime;
    return this;
  }

   /**
   * total time it takes until a browser receives a complete response from a server (in milliseconds)
   * @return durationTime
  **/
  @javax.annotation.Nullable
  public Integer getDurationTime() {
    return durationTime;
  }

  public void setDurationTime(Integer durationTime) {
    this.durationTime = durationTime;
  }


  public OnPageWaterfallItem fetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
    return this;
  }

   /**
   * time to start downloading the HTML resource the amount of time the browser needs to start downloading a page
   * @return fetchStart
  **/
  @javax.annotation.Nullable
  public Integer getFetchStart() {
    return fetchStart;
  }

  public void setFetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
  }


  public OnPageWaterfallItem fetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
    return this;
  }

   /**
   * time to complete downloading the HTML resource the amount of time the browser needs to complete downloading a page
   * @return fetchEnd
  **/
  @javax.annotation.Nullable
  public Integer getFetchEnd() {
    return fetchEnd;
  }

  public void setFetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
  }


  public OnPageWaterfallItem resources(List<BaseOnPageResourceItemInfo> resources) {
    this.resources = resources;
    return this;
  }

  public OnPageWaterfallItem addResourcesItem(BaseOnPageResourceItemInfo resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

   /**
   * resource-specific timing contains separate arrays with timing for each resource found on the page
   * @return resources
  **/
  @javax.annotation.Nullable
  public List<BaseOnPageResourceItemInfo> getResources() {
    return resources;
  }

  public void setResources(List<BaseOnPageResourceItemInfo> resources) {
    this.resources = resources;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OnPageWaterfallItem onPageWaterfallItem = (OnPageWaterfallItem) o;
    return Objects.equals(this.pageUrl, onPageWaterfallItem.pageUrl) &&
        Objects.equals(this.timeToInteractive, onPageWaterfallItem.timeToInteractive) &&
        Objects.equals(this.domComplete, onPageWaterfallItem.domComplete) &&
        Objects.equals(this.connectionTime, onPageWaterfallItem.connectionTime) &&
        Objects.equals(this.timeToSecureConnection, onPageWaterfallItem.timeToSecureConnection) &&
        Objects.equals(this.requestSentTime, onPageWaterfallItem.requestSentTime) &&
        Objects.equals(this.waitingTime, onPageWaterfallItem.waitingTime) &&
        Objects.equals(this.downloadTime, onPageWaterfallItem.downloadTime) &&
        Objects.equals(this.durationTime, onPageWaterfallItem.durationTime) &&
        Objects.equals(this.fetchStart, onPageWaterfallItem.fetchStart) &&
        Objects.equals(this.fetchEnd, onPageWaterfallItem.fetchEnd) &&
        Objects.equals(this.resources, onPageWaterfallItem.resources);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(pageUrl, timeToInteractive, domComplete, connectionTime, timeToSecureConnection, requestSentTime, waitingTime, downloadTime, durationTime, fetchStart, fetchEnd, resources);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OnPageWaterfallItem {\n");
    sb.append("    pageUrl: ").append(toIndentedString(pageUrl)).append("\n");
    sb.append("    timeToInteractive: ").append(toIndentedString(timeToInteractive)).append("\n");
    sb.append("    domComplete: ").append(toIndentedString(domComplete)).append("\n");
    sb.append("    connectionTime: ").append(toIndentedString(connectionTime)).append("\n");
    sb.append("    timeToSecureConnection: ").append(toIndentedString(timeToSecureConnection)).append("\n");
    sb.append("    requestSentTime: ").append(toIndentedString(requestSentTime)).append("\n");
    sb.append("    waitingTime: ").append(toIndentedString(waitingTime)).append("\n");
    sb.append("    downloadTime: ").append(toIndentedString(downloadTime)).append("\n");
    sb.append("    durationTime: ").append(toIndentedString(durationTime)).append("\n");
    sb.append("    fetchStart: ").append(toIndentedString(fetchStart)).append("\n");
    sb.append("    fetchEnd: ").append(toIndentedString(fetchEnd)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("page_url");
    openapiFields.add("time_to_interactive");
    openapiFields.add("dom_complete");
    openapiFields.add("connection_time");
    openapiFields.add("time_to_secure_connection");
    openapiFields.add("request_sent_time");
    openapiFields.add("waiting_time");
    openapiFields.add("download_time");
    openapiFields.add("duration_time");
    openapiFields.add("fetch_start");
    openapiFields.add("fetch_end");
    openapiFields.add("resources");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to OnPageWaterfallItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OnPageWaterfallItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OnPageWaterfallItem is not found in the empty JSON string", OnPageWaterfallItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OnPageWaterfallItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OnPageWaterfallItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("page_url") != null && !jsonObj.get("page_url").isJsonNull()) && !jsonObj.get("page_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `page_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("page_url").toString()));
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            BaseOnPageResourceItemInfo.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OnPageWaterfallItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OnPageWaterfallItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OnPageWaterfallItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OnPageWaterfallItem.class));

       return (TypeAdapter<T>) new TypeAdapter<OnPageWaterfallItem>() {
           @Override
           public void write(JsonWriter out, OnPageWaterfallItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OnPageWaterfallItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OnPageWaterfallItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OnPageWaterfallItem
  * @throws IOException if the JSON string is invalid with respect to OnPageWaterfallItem
  */
  public static OnPageWaterfallItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OnPageWaterfallItem.class);
  }

 /**
  * Convert an instance of OnPageWaterfallItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

