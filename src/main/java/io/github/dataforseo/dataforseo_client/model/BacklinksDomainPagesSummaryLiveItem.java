/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.dataforseo_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.dataforseo_client.JSON;

/**
 * BacklinksDomainPagesSummaryLiveItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:39:13.468741042Z[Etc/UTC]")
public class BacklinksDomainPagesSummaryLiveItem {
  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_BACKLINKS = "backlinks";
  @SerializedName(SERIALIZED_NAME_BACKLINKS)
  private Long backlinks;

  public static final String SERIALIZED_NAME_FIRST_SEEN = "first_seen";
  @SerializedName(SERIALIZED_NAME_FIRST_SEEN)
  private String firstSeen;

  public static final String SERIALIZED_NAME_LOST_DATE = "lost_date";
  @SerializedName(SERIALIZED_NAME_LOST_DATE)
  private String lostDate;

  public static final String SERIALIZED_NAME_BACKLINKS_SPAM_SCORE = "backlinks_spam_score";
  @SerializedName(SERIALIZED_NAME_BACKLINKS_SPAM_SCORE)
  private Long backlinksSpamScore;

  public static final String SERIALIZED_NAME_BROKEN_BACKLINKS = "broken_backlinks";
  @SerializedName(SERIALIZED_NAME_BROKEN_BACKLINKS)
  private Long brokenBacklinks;

  public static final String SERIALIZED_NAME_BROKEN_PAGES = "broken_pages";
  @SerializedName(SERIALIZED_NAME_BROKEN_PAGES)
  private Integer brokenPages;

  public static final String SERIALIZED_NAME_REFERRING_DOMAINS = "referring_domains";
  @SerializedName(SERIALIZED_NAME_REFERRING_DOMAINS)
  private Long referringDomains;

  public static final String SERIALIZED_NAME_REFERRING_DOMAINS_NOFOLLOW = "referring_domains_nofollow";
  @SerializedName(SERIALIZED_NAME_REFERRING_DOMAINS_NOFOLLOW)
  private Long referringDomainsNofollow;

  public static final String SERIALIZED_NAME_REFERRING_MAIN_DOMAINS = "referring_main_domains";
  @SerializedName(SERIALIZED_NAME_REFERRING_MAIN_DOMAINS)
  private Long referringMainDomains;

  public static final String SERIALIZED_NAME_REFERRING_MAIN_DOMAINS_NOFOLLOW = "referring_main_domains_nofollow";
  @SerializedName(SERIALIZED_NAME_REFERRING_MAIN_DOMAINS_NOFOLLOW)
  private Long referringMainDomainsNofollow;

  public static final String SERIALIZED_NAME_REFERRING_IPS = "referring_ips";
  @SerializedName(SERIALIZED_NAME_REFERRING_IPS)
  private Long referringIps;

  public static final String SERIALIZED_NAME_REFERRING_SUBNETS = "referring_subnets";
  @SerializedName(SERIALIZED_NAME_REFERRING_SUBNETS)
  private Long referringSubnets;

  public static final String SERIALIZED_NAME_REFERRING_PAGES = "referring_pages";
  @SerializedName(SERIALIZED_NAME_REFERRING_PAGES)
  private Long referringPages;

  public static final String SERIALIZED_NAME_REFERRING_LINKS_TLD = "referring_links_tld";
  @SerializedName(SERIALIZED_NAME_REFERRING_LINKS_TLD)
  private Map<String, Long> referringLinksTld;

  public static final String SERIALIZED_NAME_REFERRING_LINKS_TYPES = "referring_links_types";
  @SerializedName(SERIALIZED_NAME_REFERRING_LINKS_TYPES)
  private Map<String, Long> referringLinksTypes;

  public static final String SERIALIZED_NAME_REFERRING_LINKS_ATTRIBUTES = "referring_links_attributes";
  @SerializedName(SERIALIZED_NAME_REFERRING_LINKS_ATTRIBUTES)
  private Map<String, Long> referringLinksAttributes;

  public static final String SERIALIZED_NAME_REFERRING_LINKS_PLATFORM_TYPES = "referring_links_platform_types";
  @SerializedName(SERIALIZED_NAME_REFERRING_LINKS_PLATFORM_TYPES)
  private Map<String, Long> referringLinksPlatformTypes;

  public static final String SERIALIZED_NAME_REFERRING_LINKS_SEMANTIC_LOCATIONS = "referring_links_semantic_locations";
  @SerializedName(SERIALIZED_NAME_REFERRING_LINKS_SEMANTIC_LOCATIONS)
  private Map<String, Long> referringLinksSemanticLocations;

  public static final String SERIALIZED_NAME_REFERRING_LINKS_COUNTRIES = "referring_links_countries";
  @SerializedName(SERIALIZED_NAME_REFERRING_LINKS_COUNTRIES)
  private Map<String, Long> referringLinksCountries;

  public BacklinksDomainPagesSummaryLiveItem() {
  }

  public BacklinksDomainPagesSummaryLiveItem type(String type) {
    this.type = type;
    return this;
  }

   /**
   * type of element
   * @return type
  **/
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public BacklinksDomainPagesSummaryLiveItem url(String url) {
    this.url = url;
    return this;
  }

   /**
   * page URL
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public BacklinksDomainPagesSummaryLiveItem rank(Integer rank) {
    this.rank = rank;
    return this;
  }

   /**
   * page rank rank of the page on the target website rank is calculated based on the method for node ranking in a linked database – a principle used in the original Google PageRank algorithm learn more about the metric and how it is calculated in this help center article
   * @return rank
  **/
  @javax.annotation.Nullable
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public BacklinksDomainPagesSummaryLiveItem backlinks(Long backlinks) {
    this.backlinks = backlinks;
    return this;
  }

   /**
   * number of backlinks
   * @return backlinks
  **/
  @javax.annotation.Nullable
  public Long getBacklinks() {
    return backlinks;
  }

  public void setBacklinks(Long backlinks) {
    this.backlinks = backlinks;
  }


  public BacklinksDomainPagesSummaryLiveItem firstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
    return this;
  }

   /**
   * date and time when our crawler found a backlink to this page for the first time in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2019-11-15 12:57:46 +00:00
   * @return firstSeen
  **/
  @javax.annotation.Nullable
  public String getFirstSeen() {
    return firstSeen;
  }

  public void setFirstSeen(String firstSeen) {
    this.firstSeen = firstSeen;
  }


  public BacklinksDomainPagesSummaryLiveItem lostDate(String lostDate) {
    this.lostDate = lostDate;
    return this;
  }

   /**
   * date and time when the last backlink to this page was lost indicates the date and time when our crawler visited the page and it responded with 4xx or 5xx status code or the last backlink was removed in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2017-01-24 13:20:59 +00:00
   * @return lostDate
  **/
  @javax.annotation.Nullable
  public String getLostDate() {
    return lostDate;
  }

  public void setLostDate(String lostDate) {
    this.lostDate = lostDate;
  }


  public BacklinksDomainPagesSummaryLiveItem backlinksSpamScore(Long backlinksSpamScore) {
    this.backlinksSpamScore = backlinksSpamScore;
    return this;
  }

   /**
   * average spam score of the backlinks pointing to the page learn more about how the metric is calculated on this help center page
   * @return backlinksSpamScore
  **/
  @javax.annotation.Nullable
  public Long getBacklinksSpamScore() {
    return backlinksSpamScore;
  }

  public void setBacklinksSpamScore(Long backlinksSpamScore) {
    this.backlinksSpamScore = backlinksSpamScore;
  }


  public BacklinksDomainPagesSummaryLiveItem brokenBacklinks(Long brokenBacklinks) {
    this.brokenBacklinks = brokenBacklinks;
    return this;
  }

   /**
   * number of broken backlinks number of broken backlinks pointing to the page
   * @return brokenBacklinks
  **/
  @javax.annotation.Nullable
  public Long getBrokenBacklinks() {
    return brokenBacklinks;
  }

  public void setBrokenBacklinks(Long brokenBacklinks) {
    this.brokenBacklinks = brokenBacklinks;
  }


  public BacklinksDomainPagesSummaryLiveItem brokenPages(Integer brokenPages) {
    this.brokenPages = brokenPages;
    return this;
  }

   /**
   * number of broken pages number of pages that respond with 4xx or 5xx status codes where backlinks are pointing to
   * @return brokenPages
  **/
  @javax.annotation.Nullable
  public Integer getBrokenPages() {
    return brokenPages;
  }

  public void setBrokenPages(Integer brokenPages) {
    this.brokenPages = brokenPages;
  }


  public BacklinksDomainPagesSummaryLiveItem referringDomains(Long referringDomains) {
    this.referringDomains = referringDomains;
    return this;
  }

   /**
   * indicates the number domains referring to the page
   * @return referringDomains
  **/
  @javax.annotation.Nullable
  public Long getReferringDomains() {
    return referringDomains;
  }

  public void setReferringDomains(Long referringDomains) {
    this.referringDomains = referringDomains;
  }


  public BacklinksDomainPagesSummaryLiveItem referringDomainsNofollow(Long referringDomainsNofollow) {
    this.referringDomainsNofollow = referringDomainsNofollow;
    return this;
  }

   /**
   * number of domains pointing at least one nofollow link to the target
   * @return referringDomainsNofollow
  **/
  @javax.annotation.Nullable
  public Long getReferringDomainsNofollow() {
    return referringDomainsNofollow;
  }

  public void setReferringDomainsNofollow(Long referringDomainsNofollow) {
    this.referringDomainsNofollow = referringDomainsNofollow;
  }


  public BacklinksDomainPagesSummaryLiveItem referringMainDomains(Long referringMainDomains) {
    this.referringMainDomains = referringMainDomains;
    return this;
  }

   /**
   * indicates the number of referring main domains
   * @return referringMainDomains
  **/
  @javax.annotation.Nullable
  public Long getReferringMainDomains() {
    return referringMainDomains;
  }

  public void setReferringMainDomains(Long referringMainDomains) {
    this.referringMainDomains = referringMainDomains;
  }


  public BacklinksDomainPagesSummaryLiveItem referringMainDomainsNofollow(Long referringMainDomainsNofollow) {
    this.referringMainDomainsNofollow = referringMainDomainsNofollow;
    return this;
  }

   /**
   * number of main domains pointing at least one nofollow link to the target
   * @return referringMainDomainsNofollow
  **/
  @javax.annotation.Nullable
  public Long getReferringMainDomainsNofollow() {
    return referringMainDomainsNofollow;
  }

  public void setReferringMainDomainsNofollow(Long referringMainDomainsNofollow) {
    this.referringMainDomainsNofollow = referringMainDomainsNofollow;
  }


  public BacklinksDomainPagesSummaryLiveItem referringIps(Long referringIps) {
    this.referringIps = referringIps;
    return this;
  }

   /**
   * number of referring IP addresses number of IP addresses pointing to this page
   * @return referringIps
  **/
  @javax.annotation.Nullable
  public Long getReferringIps() {
    return referringIps;
  }

  public void setReferringIps(Long referringIps) {
    this.referringIps = referringIps;
  }


  public BacklinksDomainPagesSummaryLiveItem referringSubnets(Long referringSubnets) {
    this.referringSubnets = referringSubnets;
    return this;
  }

   /**
   * number of referring subnetworks
   * @return referringSubnets
  **/
  @javax.annotation.Nullable
  public Long getReferringSubnets() {
    return referringSubnets;
  }

  public void setReferringSubnets(Long referringSubnets) {
    this.referringSubnets = referringSubnets;
  }


  public BacklinksDomainPagesSummaryLiveItem referringPages(Long referringPages) {
    this.referringPages = referringPages;
    return this;
  }

   /**
   * indicates the number of pages pointing to the relevant url
   * @return referringPages
  **/
  @javax.annotation.Nullable
  public Long getReferringPages() {
    return referringPages;
  }

  public void setReferringPages(Long referringPages) {
    this.referringPages = referringPages;
  }


  public BacklinksDomainPagesSummaryLiveItem referringLinksTld(Map<String, Long> referringLinksTld) {
    this.referringLinksTld = referringLinksTld;
    return this;
  }

  public BacklinksDomainPagesSummaryLiveItem putReferringLinksTldItem(String key, Long referringLinksTldItem) {
    if (this.referringLinksTld == null) {
      this.referringLinksTld = new HashMap<>();
    }
    this.referringLinksTld.put(key, referringLinksTldItem);
    return this;
  }

   /**
   * top-level domains of the referring links contains top level domains and referring link count per each
   * @return referringLinksTld
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getReferringLinksTld() {
    return referringLinksTld;
  }

  public void setReferringLinksTld(Map<String, Long> referringLinksTld) {
    this.referringLinksTld = referringLinksTld;
  }


  public BacklinksDomainPagesSummaryLiveItem referringLinksTypes(Map<String, Long> referringLinksTypes) {
    this.referringLinksTypes = referringLinksTypes;
    return this;
  }

  public BacklinksDomainPagesSummaryLiveItem putReferringLinksTypesItem(String key, Long referringLinksTypesItem) {
    if (this.referringLinksTypes == null) {
      this.referringLinksTypes = new HashMap<>();
    }
    this.referringLinksTypes.put(key, referringLinksTypesItem);
    return this;
  }

   /**
   * types of referring links indicates the types of the referring links and link count per each type possible values: anchor, image, link, meta, canonical, alternate, redirect
   * @return referringLinksTypes
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getReferringLinksTypes() {
    return referringLinksTypes;
  }

  public void setReferringLinksTypes(Map<String, Long> referringLinksTypes) {
    this.referringLinksTypes = referringLinksTypes;
  }


  public BacklinksDomainPagesSummaryLiveItem referringLinksAttributes(Map<String, Long> referringLinksAttributes) {
    this.referringLinksAttributes = referringLinksAttributes;
    return this;
  }

  public BacklinksDomainPagesSummaryLiveItem putReferringLinksAttributesItem(String key, Long referringLinksAttributesItem) {
    if (this.referringLinksAttributes == null) {
      this.referringLinksAttributes = new HashMap<>();
    }
    this.referringLinksAttributes.put(key, referringLinksAttributesItem);
    return this;
  }

   /**
   * link attributes of the referring links indicates link attributes of the referring links and link count per each attribute
   * @return referringLinksAttributes
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getReferringLinksAttributes() {
    return referringLinksAttributes;
  }

  public void setReferringLinksAttributes(Map<String, Long> referringLinksAttributes) {
    this.referringLinksAttributes = referringLinksAttributes;
  }


  public BacklinksDomainPagesSummaryLiveItem referringLinksPlatformTypes(Map<String, Long> referringLinksPlatformTypes) {
    this.referringLinksPlatformTypes = referringLinksPlatformTypes;
    return this;
  }

  public BacklinksDomainPagesSummaryLiveItem putReferringLinksPlatformTypesItem(String key, Long referringLinksPlatformTypesItem) {
    if (this.referringLinksPlatformTypes == null) {
      this.referringLinksPlatformTypes = new HashMap<>();
    }
    this.referringLinksPlatformTypes.put(key, referringLinksPlatformTypesItem);
    return this;
  }

   /**
   * types of referring platforms indicates referring platform types and and link count per each platform
   * @return referringLinksPlatformTypes
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getReferringLinksPlatformTypes() {
    return referringLinksPlatformTypes;
  }

  public void setReferringLinksPlatformTypes(Map<String, Long> referringLinksPlatformTypes) {
    this.referringLinksPlatformTypes = referringLinksPlatformTypes;
  }


  public BacklinksDomainPagesSummaryLiveItem referringLinksSemanticLocations(Map<String, Long> referringLinksSemanticLocations) {
    this.referringLinksSemanticLocations = referringLinksSemanticLocations;
    return this;
  }

  public BacklinksDomainPagesSummaryLiveItem putReferringLinksSemanticLocationsItem(String key, Long referringLinksSemanticLocationsItem) {
    if (this.referringLinksSemanticLocations == null) {
      this.referringLinksSemanticLocations = new HashMap<>();
    }
    this.referringLinksSemanticLocations.put(key, referringLinksSemanticLocationsItem);
    return this;
  }

   /**
   * semantic locations of the referring links indicates semantic elements in HTML where the referring links are located and link count per each semantic location you can get the full list of semantic elements here examples: article, section, footer
   * @return referringLinksSemanticLocations
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getReferringLinksSemanticLocations() {
    return referringLinksSemanticLocations;
  }

  public void setReferringLinksSemanticLocations(Map<String, Long> referringLinksSemanticLocations) {
    this.referringLinksSemanticLocations = referringLinksSemanticLocations;
  }


  public BacklinksDomainPagesSummaryLiveItem referringLinksCountries(Map<String, Long> referringLinksCountries) {
    this.referringLinksCountries = referringLinksCountries;
    return this;
  }

  public BacklinksDomainPagesSummaryLiveItem putReferringLinksCountriesItem(String key, Long referringLinksCountriesItem) {
    if (this.referringLinksCountries == null) {
      this.referringLinksCountries = new HashMap<>();
    }
    this.referringLinksCountries.put(key, referringLinksCountriesItem);
    return this;
  }

   /**
   * ISO country codes of the referring links indicates ISO country codes of the domains where the referring links are located and the link count per each country
   * @return referringLinksCountries
  **/
  @javax.annotation.Nullable
  public Map<String, Long> getReferringLinksCountries() {
    return referringLinksCountries;
  }

  public void setReferringLinksCountries(Map<String, Long> referringLinksCountries) {
    this.referringLinksCountries = referringLinksCountries;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BacklinksDomainPagesSummaryLiveItem backlinksDomainPagesSummaryLiveItem = (BacklinksDomainPagesSummaryLiveItem) o;
    return Objects.equals(this.type, backlinksDomainPagesSummaryLiveItem.type) &&
        Objects.equals(this.url, backlinksDomainPagesSummaryLiveItem.url) &&
        Objects.equals(this.rank, backlinksDomainPagesSummaryLiveItem.rank) &&
        Objects.equals(this.backlinks, backlinksDomainPagesSummaryLiveItem.backlinks) &&
        Objects.equals(this.firstSeen, backlinksDomainPagesSummaryLiveItem.firstSeen) &&
        Objects.equals(this.lostDate, backlinksDomainPagesSummaryLiveItem.lostDate) &&
        Objects.equals(this.backlinksSpamScore, backlinksDomainPagesSummaryLiveItem.backlinksSpamScore) &&
        Objects.equals(this.brokenBacklinks, backlinksDomainPagesSummaryLiveItem.brokenBacklinks) &&
        Objects.equals(this.brokenPages, backlinksDomainPagesSummaryLiveItem.brokenPages) &&
        Objects.equals(this.referringDomains, backlinksDomainPagesSummaryLiveItem.referringDomains) &&
        Objects.equals(this.referringDomainsNofollow, backlinksDomainPagesSummaryLiveItem.referringDomainsNofollow) &&
        Objects.equals(this.referringMainDomains, backlinksDomainPagesSummaryLiveItem.referringMainDomains) &&
        Objects.equals(this.referringMainDomainsNofollow, backlinksDomainPagesSummaryLiveItem.referringMainDomainsNofollow) &&
        Objects.equals(this.referringIps, backlinksDomainPagesSummaryLiveItem.referringIps) &&
        Objects.equals(this.referringSubnets, backlinksDomainPagesSummaryLiveItem.referringSubnets) &&
        Objects.equals(this.referringPages, backlinksDomainPagesSummaryLiveItem.referringPages) &&
        Objects.equals(this.referringLinksTld, backlinksDomainPagesSummaryLiveItem.referringLinksTld) &&
        Objects.equals(this.referringLinksTypes, backlinksDomainPagesSummaryLiveItem.referringLinksTypes) &&
        Objects.equals(this.referringLinksAttributes, backlinksDomainPagesSummaryLiveItem.referringLinksAttributes) &&
        Objects.equals(this.referringLinksPlatformTypes, backlinksDomainPagesSummaryLiveItem.referringLinksPlatformTypes) &&
        Objects.equals(this.referringLinksSemanticLocations, backlinksDomainPagesSummaryLiveItem.referringLinksSemanticLocations) &&
        Objects.equals(this.referringLinksCountries, backlinksDomainPagesSummaryLiveItem.referringLinksCountries);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(type, url, rank, backlinks, firstSeen, lostDate, backlinksSpamScore, brokenBacklinks, brokenPages, referringDomains, referringDomainsNofollow, referringMainDomains, referringMainDomainsNofollow, referringIps, referringSubnets, referringPages, referringLinksTld, referringLinksTypes, referringLinksAttributes, referringLinksPlatformTypes, referringLinksSemanticLocations, referringLinksCountries);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BacklinksDomainPagesSummaryLiveItem {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    backlinks: ").append(toIndentedString(backlinks)).append("\n");
    sb.append("    firstSeen: ").append(toIndentedString(firstSeen)).append("\n");
    sb.append("    lostDate: ").append(toIndentedString(lostDate)).append("\n");
    sb.append("    backlinksSpamScore: ").append(toIndentedString(backlinksSpamScore)).append("\n");
    sb.append("    brokenBacklinks: ").append(toIndentedString(brokenBacklinks)).append("\n");
    sb.append("    brokenPages: ").append(toIndentedString(brokenPages)).append("\n");
    sb.append("    referringDomains: ").append(toIndentedString(referringDomains)).append("\n");
    sb.append("    referringDomainsNofollow: ").append(toIndentedString(referringDomainsNofollow)).append("\n");
    sb.append("    referringMainDomains: ").append(toIndentedString(referringMainDomains)).append("\n");
    sb.append("    referringMainDomainsNofollow: ").append(toIndentedString(referringMainDomainsNofollow)).append("\n");
    sb.append("    referringIps: ").append(toIndentedString(referringIps)).append("\n");
    sb.append("    referringSubnets: ").append(toIndentedString(referringSubnets)).append("\n");
    sb.append("    referringPages: ").append(toIndentedString(referringPages)).append("\n");
    sb.append("    referringLinksTld: ").append(toIndentedString(referringLinksTld)).append("\n");
    sb.append("    referringLinksTypes: ").append(toIndentedString(referringLinksTypes)).append("\n");
    sb.append("    referringLinksAttributes: ").append(toIndentedString(referringLinksAttributes)).append("\n");
    sb.append("    referringLinksPlatformTypes: ").append(toIndentedString(referringLinksPlatformTypes)).append("\n");
    sb.append("    referringLinksSemanticLocations: ").append(toIndentedString(referringLinksSemanticLocations)).append("\n");
    sb.append("    referringLinksCountries: ").append(toIndentedString(referringLinksCountries)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("type");
    openapiFields.add("url");
    openapiFields.add("rank");
    openapiFields.add("backlinks");
    openapiFields.add("first_seen");
    openapiFields.add("lost_date");
    openapiFields.add("backlinks_spam_score");
    openapiFields.add("broken_backlinks");
    openapiFields.add("broken_pages");
    openapiFields.add("referring_domains");
    openapiFields.add("referring_domains_nofollow");
    openapiFields.add("referring_main_domains");
    openapiFields.add("referring_main_domains_nofollow");
    openapiFields.add("referring_ips");
    openapiFields.add("referring_subnets");
    openapiFields.add("referring_pages");
    openapiFields.add("referring_links_tld");
    openapiFields.add("referring_links_types");
    openapiFields.add("referring_links_attributes");
    openapiFields.add("referring_links_platform_types");
    openapiFields.add("referring_links_semantic_locations");
    openapiFields.add("referring_links_countries");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to BacklinksDomainPagesSummaryLiveItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BacklinksDomainPagesSummaryLiveItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BacklinksDomainPagesSummaryLiveItem is not found in the empty JSON string", BacklinksDomainPagesSummaryLiveItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BacklinksDomainPagesSummaryLiveItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BacklinksDomainPagesSummaryLiveItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if ((jsonObj.get("first_seen") != null && !jsonObj.get("first_seen").isJsonNull()) && !jsonObj.get("first_seen").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_seen` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_seen").toString()));
      }
      if ((jsonObj.get("lost_date") != null && !jsonObj.get("lost_date").isJsonNull()) && !jsonObj.get("lost_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lost_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lost_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BacklinksDomainPagesSummaryLiveItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BacklinksDomainPagesSummaryLiveItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BacklinksDomainPagesSummaryLiveItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BacklinksDomainPagesSummaryLiveItem.class));

       return (TypeAdapter<T>) new TypeAdapter<BacklinksDomainPagesSummaryLiveItem>() {
           @Override
           public void write(JsonWriter out, BacklinksDomainPagesSummaryLiveItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BacklinksDomainPagesSummaryLiveItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BacklinksDomainPagesSummaryLiveItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BacklinksDomainPagesSummaryLiveItem
  * @throws IOException if the JSON string is invalid with respect to BacklinksDomainPagesSummaryLiveItem
  */
  public static BacklinksDomainPagesSummaryLiveItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BacklinksDomainPagesSummaryLiveItem.class);
  }

 /**
  * Convert an instance of BacklinksDomainPagesSummaryLiveItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

