/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.dataforseo_client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.dataforseo_client.model.BaseOnPageResourceItemInfo;
import io.github.dataforseo.dataforseo_client.model.CacheControl;
import io.github.dataforseo.dataforseo_client.model.FetchTiming;
import io.github.dataforseo.dataforseo_client.model.LastModified;
import io.github.dataforseo.dataforseo_client.model.OnPageResourceIssueInfo;
import io.github.dataforseo.dataforseo_client.model.ResourceMetaInfo;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.github.dataforseo.dataforseo_client.JSON;

/**
 * StylesheetResourceElementItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-03-01T07:39:13.468741042Z[Etc/UTC]")
public class StylesheetResourceElementItem extends BaseOnPageResourceItemInfo {
  public static final String SERIALIZED_NAME_META = "meta";
  @SerializedName(SERIALIZED_NAME_META)
  private ResourceMetaInfo meta;

  public static final String SERIALIZED_NAME_STATUS_CODE = "status_code";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Integer statusCode;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_ENCODED_SIZE = "encoded_size";
  @SerializedName(SERIALIZED_NAME_ENCODED_SIZE)
  private Integer encodedSize;

  public static final String SERIALIZED_NAME_TOTAL_TRANSFER_SIZE = "total_transfer_size";
  @SerializedName(SERIALIZED_NAME_TOTAL_TRANSFER_SIZE)
  private Long totalTransferSize;

  public static final String SERIALIZED_NAME_FETCH_TIME = "fetch_time";
  @SerializedName(SERIALIZED_NAME_FETCH_TIME)
  private String fetchTime;

  public static final String SERIALIZED_NAME_FETCH_TIMING = "fetch_timing";
  @SerializedName(SERIALIZED_NAME_FETCH_TIMING)
  private FetchTiming fetchTiming;

  public static final String SERIALIZED_NAME_CACHE_CONTROL = "cache_control";
  @SerializedName(SERIALIZED_NAME_CACHE_CONTROL)
  private CacheControl cacheControl;

  public static final String SERIALIZED_NAME_CHECKS = "checks";
  @SerializedName(SERIALIZED_NAME_CHECKS)
  private Map<String, Boolean> checks;

  public static final String SERIALIZED_NAME_RESOURCE_ERRORS = "resource_errors";
  @SerializedName(SERIALIZED_NAME_RESOURCE_ERRORS)
  private OnPageResourceIssueInfo resourceErrors;

  public static final String SERIALIZED_NAME_CONTENT_ENCODING = "content_encoding";
  @SerializedName(SERIALIZED_NAME_CONTENT_ENCODING)
  private String contentEncoding;

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_ACCEPT_TYPE = "accept_type";
  @SerializedName(SERIALIZED_NAME_ACCEPT_TYPE)
  private String acceptType;

  public static final String SERIALIZED_NAME_SERVER = "server";
  @SerializedName(SERIALIZED_NAME_SERVER)
  private String server;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "last_modified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private LastModified lastModified;

  public static final String SERIALIZED_NAME_INITIATOR = "initiator";
  @SerializedName(SERIALIZED_NAME_INITIATOR)
  private String initiator;

  public static final String SERIALIZED_NAME_DURATION_TIME = "duration_time";
  @SerializedName(SERIALIZED_NAME_DURATION_TIME)
  private Integer durationTime;

  public static final String SERIALIZED_NAME_FETCH_START = "fetch_start";
  @SerializedName(SERIALIZED_NAME_FETCH_START)
  private Integer fetchStart;

  public static final String SERIALIZED_NAME_FETCH_END = "fetch_end";
  @SerializedName(SERIALIZED_NAME_FETCH_END)
  private Integer fetchEnd;

  public static final String SERIALIZED_NAME_IS_RENDER_BLOCKING = "is_render_blocking";
  @SerializedName(SERIALIZED_NAME_IS_RENDER_BLOCKING)
  private Boolean isRenderBlocking;

  public StylesheetResourceElementItem() {
    this.resourceType = this.getClass().getSimpleName();
  }

  public StylesheetResourceElementItem meta(ResourceMetaInfo meta) {
    this.meta = meta;
    return this;
  }

   /**
   * Get meta
   * @return meta
  **/
  @javax.annotation.Nullable
  public ResourceMetaInfo getMeta() {
    return meta;
  }

  public void setMeta(ResourceMetaInfo meta) {
    this.meta = meta;
  }


  public StylesheetResourceElementItem statusCode(Integer statusCode) {
    this.statusCode = statusCode;
    return this;
  }

   /**
   * status code of the page where a given resource is located
   * @return statusCode
  **/
  @javax.annotation.Nullable
  public Integer getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Integer statusCode) {
    this.statusCode = statusCode;
  }


  public StylesheetResourceElementItem location(String location) {
    this.location = location;
    return this;
  }

   /**
   * location header indicates the URL to redirect a page to
   * @return location
  **/
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public StylesheetResourceElementItem url(String url) {
    this.url = url;
    return this;
  }

   /**
   * resource URL
   * @return url
  **/
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public StylesheetResourceElementItem size(Integer size) {
    this.size = size;
    return this;
  }

   /**
   * resource size indicates the size of a given resource measured in bytes
   * @return size
  **/
  @javax.annotation.Nullable
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public StylesheetResourceElementItem encodedSize(Integer encodedSize) {
    this.encodedSize = encodedSize;
    return this;
  }

   /**
   * resource size after encoding indicates the size of the encoded resource measured in bytes
   * @return encodedSize
  **/
  @javax.annotation.Nullable
  public Integer getEncodedSize() {
    return encodedSize;
  }

  public void setEncodedSize(Integer encodedSize) {
    this.encodedSize = encodedSize;
  }


  public StylesheetResourceElementItem totalTransferSize(Long totalTransferSize) {
    this.totalTransferSize = totalTransferSize;
    return this;
  }

   /**
   * compressed resource size indicates the compressed size of a given resource in bytes
   * @return totalTransferSize
  **/
  @javax.annotation.Nullable
  public Long getTotalTransferSize() {
    return totalTransferSize;
  }

  public void setTotalTransferSize(Long totalTransferSize) {
    this.totalTransferSize = totalTransferSize;
  }


  public StylesheetResourceElementItem fetchTime(String fetchTime) {
    this.fetchTime = fetchTime;
    return this;
  }

   /**
   * date and time when a resource was fetched in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2021-02-17 13:54:15 +00:00
   * @return fetchTime
  **/
  @javax.annotation.Nullable
  public String getFetchTime() {
    return fetchTime;
  }

  public void setFetchTime(String fetchTime) {
    this.fetchTime = fetchTime;
  }


  public StylesheetResourceElementItem fetchTiming(FetchTiming fetchTiming) {
    this.fetchTiming = fetchTiming;
    return this;
  }

   /**
   * Get fetchTiming
   * @return fetchTiming
  **/
  @javax.annotation.Nullable
  public FetchTiming getFetchTiming() {
    return fetchTiming;
  }

  public void setFetchTiming(FetchTiming fetchTiming) {
    this.fetchTiming = fetchTiming;
  }


  public StylesheetResourceElementItem cacheControl(CacheControl cacheControl) {
    this.cacheControl = cacheControl;
    return this;
  }

   /**
   * Get cacheControl
   * @return cacheControl
  **/
  @javax.annotation.Nullable
  public CacheControl getCacheControl() {
    return cacheControl;
  }

  public void setCacheControl(CacheControl cacheControl) {
    this.cacheControl = cacheControl;
  }


  public StylesheetResourceElementItem checks(Map<String, Boolean> checks) {
    this.checks = checks;
    return this;
  }

  public StylesheetResourceElementItem putChecksItem(String key, Boolean checksItem) {
    if (this.checks == null) {
      this.checks = new HashMap<>();
    }
    this.checks.put(key, checksItem);
    return this;
  }

   /**
   * resource check-ups contents of the array depend on the resource_type
   * @return checks
  **/
  @javax.annotation.Nullable
  public Map<String, Boolean> getChecks() {
    return checks;
  }

  public void setChecks(Map<String, Boolean> checks) {
    this.checks = checks;
  }


  public StylesheetResourceElementItem resourceErrors(OnPageResourceIssueInfo resourceErrors) {
    this.resourceErrors = resourceErrors;
    return this;
  }

   /**
   * Get resourceErrors
   * @return resourceErrors
  **/
  @javax.annotation.Nullable
  public OnPageResourceIssueInfo getResourceErrors() {
    return resourceErrors;
  }

  public void setResourceErrors(OnPageResourceIssueInfo resourceErrors) {
    this.resourceErrors = resourceErrors;
  }


  public StylesheetResourceElementItem contentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
    return this;
  }

   /**
   * type of encoding
   * @return contentEncoding
  **/
  @javax.annotation.Nullable
  public String getContentEncoding() {
    return contentEncoding;
  }

  public void setContentEncoding(String contentEncoding) {
    this.contentEncoding = contentEncoding;
  }


  public StylesheetResourceElementItem mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

   /**
   * types of media used to display a resource
   * @return mediaType
  **/
  @javax.annotation.Nullable
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public StylesheetResourceElementItem acceptType(String acceptType) {
    this.acceptType = acceptType;
    return this;
  }

   /**
   * indicates the expected type of resource for example, if \&quot;resource_type\&quot;: \&quot;broken\&quot;, accept_type will indicate the type of the broken resource possible values: any, none, image, sitemap, robots, script, stylesheet, redirect, html, text, other, font
   * @return acceptType
  **/
  @javax.annotation.Nullable
  public String getAcceptType() {
    return acceptType;
  }

  public void setAcceptType(String acceptType) {
    this.acceptType = acceptType;
  }


  public StylesheetResourceElementItem server(String server) {
    this.server = server;
    return this;
  }

   /**
   * server version
   * @return server
  **/
  @javax.annotation.Nullable
  public String getServer() {
    return server;
  }

  public void setServer(String server) {
    this.server = server;
  }


  public StylesheetResourceElementItem lastModified(LastModified lastModified) {
    this.lastModified = lastModified;
    return this;
  }

   /**
   * Get lastModified
   * @return lastModified
  **/
  @javax.annotation.Nullable
  public LastModified getLastModified() {
    return lastModified;
  }

  public void setLastModified(LastModified lastModified) {
    this.lastModified = lastModified;
  }


  public StylesheetResourceElementItem initiator(String initiator) {
    this.initiator = initiator;
    return this;
  }

   /**
   * resource initiator
   * @return initiator
  **/
  @javax.annotation.Nullable
  public String getInitiator() {
    return initiator;
  }

  public void setInitiator(String initiator) {
    this.initiator = initiator;
  }


  public StylesheetResourceElementItem durationTime(Integer durationTime) {
    this.durationTime = durationTime;
    return this;
  }

   /**
   * total time it takes until a browser receives a complete response from a server (in milliseconds)
   * @return durationTime
  **/
  @javax.annotation.Nullable
  public Integer getDurationTime() {
    return durationTime;
  }

  public void setDurationTime(Integer durationTime) {
    this.durationTime = durationTime;
  }


  public StylesheetResourceElementItem fetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
    return this;
  }

   /**
   * time to start downloading the resource the amount of time the browser needs to start downloading a resource
   * @return fetchStart
  **/
  @javax.annotation.Nullable
  public Integer getFetchStart() {
    return fetchStart;
  }

  public void setFetchStart(Integer fetchStart) {
    this.fetchStart = fetchStart;
  }


  public StylesheetResourceElementItem fetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
    return this;
  }

   /**
   * time to complete downloading the resource the amount of time the browser needs to complete downloading a resource
   * @return fetchEnd
  **/
  @javax.annotation.Nullable
  public Integer getFetchEnd() {
    return fetchEnd;
  }

  public void setFetchEnd(Integer fetchEnd) {
    this.fetchEnd = fetchEnd;
  }


  public StylesheetResourceElementItem isRenderBlocking(Boolean isRenderBlocking) {
    this.isRenderBlocking = isRenderBlocking;
    return this;
  }

   /**
   * indicates whether the resource blocks rendering
   * @return isRenderBlocking
  **/
  @javax.annotation.Nullable
  public Boolean getIsRenderBlocking() {
    return isRenderBlocking;
  }

  public void setIsRenderBlocking(Boolean isRenderBlocking) {
    this.isRenderBlocking = isRenderBlocking;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StylesheetResourceElementItem stylesheetResourceElementItem = (StylesheetResourceElementItem) o;
    return Objects.equals(this.meta, stylesheetResourceElementItem.meta) &&
        Objects.equals(this.statusCode, stylesheetResourceElementItem.statusCode) &&
        Objects.equals(this.location, stylesheetResourceElementItem.location) &&
        Objects.equals(this.url, stylesheetResourceElementItem.url) &&
        Objects.equals(this.size, stylesheetResourceElementItem.size) &&
        Objects.equals(this.encodedSize, stylesheetResourceElementItem.encodedSize) &&
        Objects.equals(this.totalTransferSize, stylesheetResourceElementItem.totalTransferSize) &&
        Objects.equals(this.fetchTime, stylesheetResourceElementItem.fetchTime) &&
        Objects.equals(this.fetchTiming, stylesheetResourceElementItem.fetchTiming) &&
        Objects.equals(this.cacheControl, stylesheetResourceElementItem.cacheControl) &&
        Objects.equals(this.checks, stylesheetResourceElementItem.checks) &&
        Objects.equals(this.resourceErrors, stylesheetResourceElementItem.resourceErrors) &&
        Objects.equals(this.contentEncoding, stylesheetResourceElementItem.contentEncoding) &&
        Objects.equals(this.mediaType, stylesheetResourceElementItem.mediaType) &&
        Objects.equals(this.acceptType, stylesheetResourceElementItem.acceptType) &&
        Objects.equals(this.server, stylesheetResourceElementItem.server) &&
        Objects.equals(this.lastModified, stylesheetResourceElementItem.lastModified) &&
        Objects.equals(this.initiator, stylesheetResourceElementItem.initiator) &&
        Objects.equals(this.durationTime, stylesheetResourceElementItem.durationTime) &&
        Objects.equals(this.fetchStart, stylesheetResourceElementItem.fetchStart) &&
        Objects.equals(this.fetchEnd, stylesheetResourceElementItem.fetchEnd) &&
        Objects.equals(this.isRenderBlocking, stylesheetResourceElementItem.isRenderBlocking) &&
        super.equals(o);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(meta, statusCode, location, url, size, encodedSize, totalTransferSize, fetchTime, fetchTiming, cacheControl, checks, resourceErrors, contentEncoding, mediaType, acceptType, server, lastModified, initiator, durationTime, fetchStart, fetchEnd, isRenderBlocking, super.hashCode());
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StylesheetResourceElementItem {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    meta: ").append(toIndentedString(meta)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    encodedSize: ").append(toIndentedString(encodedSize)).append("\n");
    sb.append("    totalTransferSize: ").append(toIndentedString(totalTransferSize)).append("\n");
    sb.append("    fetchTime: ").append(toIndentedString(fetchTime)).append("\n");
    sb.append("    fetchTiming: ").append(toIndentedString(fetchTiming)).append("\n");
    sb.append("    cacheControl: ").append(toIndentedString(cacheControl)).append("\n");
    sb.append("    checks: ").append(toIndentedString(checks)).append("\n");
    sb.append("    resourceErrors: ").append(toIndentedString(resourceErrors)).append("\n");
    sb.append("    contentEncoding: ").append(toIndentedString(contentEncoding)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    acceptType: ").append(toIndentedString(acceptType)).append("\n");
    sb.append("    server: ").append(toIndentedString(server)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    initiator: ").append(toIndentedString(initiator)).append("\n");
    sb.append("    durationTime: ").append(toIndentedString(durationTime)).append("\n");
    sb.append("    fetchStart: ").append(toIndentedString(fetchStart)).append("\n");
    sb.append("    fetchEnd: ").append(toIndentedString(fetchEnd)).append("\n");
    sb.append("    isRenderBlocking: ").append(toIndentedString(isRenderBlocking)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("resource_type");
    openapiFields.add("meta");
    openapiFields.add("status_code");
    openapiFields.add("location");
    openapiFields.add("url");
    openapiFields.add("size");
    openapiFields.add("encoded_size");
    openapiFields.add("total_transfer_size");
    openapiFields.add("fetch_time");
    openapiFields.add("fetch_timing");
    openapiFields.add("cache_control");
    openapiFields.add("checks");
    openapiFields.add("resource_errors");
    openapiFields.add("content_encoding");
    openapiFields.add("media_type");
    openapiFields.add("accept_type");
    openapiFields.add("server");
    openapiFields.add("last_modified");
    openapiFields.add("initiator");
    openapiFields.add("duration_time");
    openapiFields.add("fetch_start");
    openapiFields.add("fetch_end");
    openapiFields.add("is_render_blocking");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to StylesheetResourceElementItem
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StylesheetResourceElementItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StylesheetResourceElementItem is not found in the empty JSON string", StylesheetResourceElementItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StylesheetResourceElementItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StylesheetResourceElementItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StylesheetResourceElementItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StylesheetResourceElementItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StylesheetResourceElementItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StylesheetResourceElementItem.class));

       return (TypeAdapter<T>) new TypeAdapter<StylesheetResourceElementItem>() {
           @Override
           public void write(JsonWriter out, StylesheetResourceElementItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StylesheetResourceElementItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of StylesheetResourceElementItem given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of StylesheetResourceElementItem
  * @throws IOException if the JSON string is invalid with respect to StylesheetResourceElementItem
  */
  public static StylesheetResourceElementItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StylesheetResourceElementItem.class);
  }

 /**
  * Convert an instance of StylesheetResourceElementItem to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

