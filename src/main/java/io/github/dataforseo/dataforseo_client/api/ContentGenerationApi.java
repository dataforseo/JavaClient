/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.dataforseo_client.api;

import io.github.dataforseo.dataforseo_client.ApiCallback;
import io.github.dataforseo.dataforseo_client.ApiClient;
import io.github.dataforseo.dataforseo_client.ApiException;
import io.github.dataforseo.dataforseo_client.ApiResponse;
import io.github.dataforseo.dataforseo_client.Configuration;
import io.github.dataforseo.dataforseo_client.Pair;
import io.github.dataforseo.dataforseo_client.ProgressRequestBody;
import io.github.dataforseo.dataforseo_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.dataforseo.dataforseo_client.model.ContentGenerationCheckGrammarLanguagesResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationCheckGrammarLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationCheckGrammarLiveResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateLiveResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateMetaTagsLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateMetaTagsLiveResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateSubTopicsLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateSubTopicsLiveResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateTextLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGenerateTextLiveResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationGrammarRulesResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationParaphraseLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationParaphraseLiveResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationTextSummaryLanguagesResponseInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationTextSummaryLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.ContentGenerationTextSummaryLiveResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContentGenerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContentGenerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContentGenerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkGrammarLive
     * @param contentGenerationCheckGrammarLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkGrammarLiveCall(List<ContentGenerationCheckGrammarLiveRequestInfo> contentGenerationCheckGrammarLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentGenerationCheckGrammarLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_generation/check_grammar/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkGrammarLiveValidateBeforeCall(List<ContentGenerationCheckGrammarLiveRequestInfo> contentGenerationCheckGrammarLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return checkGrammarLiveCall(contentGenerationCheckGrammarLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with grammar and spelling corrections for the text you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/check_grammar/live/?bash&#39;
     * @param contentGenerationCheckGrammarLiveRequestInfo  (optional)
     * @return ContentGenerationCheckGrammarLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationCheckGrammarLiveResponseInfo checkGrammarLive(List<ContentGenerationCheckGrammarLiveRequestInfo> contentGenerationCheckGrammarLiveRequestInfo) throws ApiException {
        ApiResponse<ContentGenerationCheckGrammarLiveResponseInfo> localVarResp = checkGrammarLiveWithHttpInfo(contentGenerationCheckGrammarLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with grammar and spelling corrections for the text you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/check_grammar/live/?bash&#39;
     * @param contentGenerationCheckGrammarLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentGenerationCheckGrammarLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationCheckGrammarLiveResponseInfo> checkGrammarLiveWithHttpInfo(List<ContentGenerationCheckGrammarLiveRequestInfo> contentGenerationCheckGrammarLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = checkGrammarLiveValidateBeforeCall(contentGenerationCheckGrammarLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentGenerationCheckGrammarLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with grammar and spelling corrections for the text you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/check_grammar/live/?bash&#39;
     * @param contentGenerationCheckGrammarLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkGrammarLiveAsync(List<ContentGenerationCheckGrammarLiveRequestInfo> contentGenerationCheckGrammarLiveRequestInfo, final ApiCallback<ContentGenerationCheckGrammarLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkGrammarLiveValidateBeforeCall(contentGenerationCheckGrammarLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentGenerationCheckGrammarLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentGenerationCheckGrammarLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGenerationCheckGrammarLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/content_generation/check_grammar/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentGenerationCheckGrammarLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contentGenerationCheckGrammarLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/check_grammar/languages/?bash&#39;
     * @return ContentGenerationCheckGrammarLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationCheckGrammarLanguagesResponseInfo contentGenerationCheckGrammarLanguages() throws ApiException {
        ApiResponse<ContentGenerationCheckGrammarLanguagesResponseInfo> localVarResp = contentGenerationCheckGrammarLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/check_grammar/languages/?bash&#39;
     * @return ApiResponse&lt;ContentGenerationCheckGrammarLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationCheckGrammarLanguagesResponseInfo> contentGenerationCheckGrammarLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contentGenerationCheckGrammarLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContentGenerationCheckGrammarLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/check_grammar/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGenerationCheckGrammarLanguagesAsync(final ApiCallback<ContentGenerationCheckGrammarLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentGenerationCheckGrammarLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContentGenerationCheckGrammarLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentGenerationTextSummaryLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGenerationTextSummaryLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/content_generation/text_summary/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentGenerationTextSummaryLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return contentGenerationTextSummaryLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/text_summary/languages/?bash&#39;
     * @return ContentGenerationTextSummaryLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationTextSummaryLanguagesResponseInfo contentGenerationTextSummaryLanguages() throws ApiException {
        ApiResponse<ContentGenerationTextSummaryLanguagesResponseInfo> localVarResp = contentGenerationTextSummaryLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/text_summary/languages/?bash&#39;
     * @return ApiResponse&lt;ContentGenerationTextSummaryLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationTextSummaryLanguagesResponseInfo> contentGenerationTextSummaryLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = contentGenerationTextSummaryLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContentGenerationTextSummaryLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/text_summary/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentGenerationTextSummaryLanguagesAsync(final ApiCallback<ContentGenerationTextSummaryLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentGenerationTextSummaryLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContentGenerationTextSummaryLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateLive
     * @param contentGenerationGenerateLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateLiveCall(List<ContentGenerationGenerateLiveRequestInfo> contentGenerationGenerateLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentGenerationGenerateLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_generation/generate/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateLiveValidateBeforeCall(List<ContentGenerationGenerateLiveRequestInfo> contentGenerationGenerateLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return generateLiveCall(contentGenerationGenerateLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with a text generated based on the part of the text you define and other available parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate/live/?bash&#39;
     * @param contentGenerationGenerateLiveRequestInfo  (optional)
     * @return ContentGenerationGenerateLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationGenerateLiveResponseInfo generateLive(List<ContentGenerationGenerateLiveRequestInfo> contentGenerationGenerateLiveRequestInfo) throws ApiException {
        ApiResponse<ContentGenerationGenerateLiveResponseInfo> localVarResp = generateLiveWithHttpInfo(contentGenerationGenerateLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with a text generated based on the part of the text you define and other available parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate/live/?bash&#39;
     * @param contentGenerationGenerateLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentGenerationGenerateLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationGenerateLiveResponseInfo> generateLiveWithHttpInfo(List<ContentGenerationGenerateLiveRequestInfo> contentGenerationGenerateLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = generateLiveValidateBeforeCall(contentGenerationGenerateLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with a text generated based on the part of the text you define and other available parameters. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate/live/?bash&#39;
     * @param contentGenerationGenerateLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateLiveAsync(List<ContentGenerationGenerateLiveRequestInfo> contentGenerationGenerateLiveRequestInfo, final ApiCallback<ContentGenerationGenerateLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateLiveValidateBeforeCall(contentGenerationGenerateLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateMetaTagsLive
     * @param contentGenerationGenerateMetaTagsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMetaTagsLiveCall(List<ContentGenerationGenerateMetaTagsLiveRequestInfo> contentGenerationGenerateMetaTagsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentGenerationGenerateMetaTagsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_generation/generate_meta_tags/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMetaTagsLiveValidateBeforeCall(List<ContentGenerationGenerateMetaTagsLiveRequestInfo> contentGenerationGenerateMetaTagsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return generateMetaTagsLiveCall(contentGenerationGenerateMetaTagsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint is designed to generate title and description meta tags for a text specified in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_meta_tags/live/?bash&#39;
     * @param contentGenerationGenerateMetaTagsLiveRequestInfo  (optional)
     * @return ContentGenerationGenerateMetaTagsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationGenerateMetaTagsLiveResponseInfo generateMetaTagsLive(List<ContentGenerationGenerateMetaTagsLiveRequestInfo> contentGenerationGenerateMetaTagsLiveRequestInfo) throws ApiException {
        ApiResponse<ContentGenerationGenerateMetaTagsLiveResponseInfo> localVarResp = generateMetaTagsLiveWithHttpInfo(contentGenerationGenerateMetaTagsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint is designed to generate title and description meta tags for a text specified in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_meta_tags/live/?bash&#39;
     * @param contentGenerationGenerateMetaTagsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentGenerationGenerateMetaTagsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationGenerateMetaTagsLiveResponseInfo> generateMetaTagsLiveWithHttpInfo(List<ContentGenerationGenerateMetaTagsLiveRequestInfo> contentGenerationGenerateMetaTagsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = generateMetaTagsLiveValidateBeforeCall(contentGenerationGenerateMetaTagsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateMetaTagsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint is designed to generate title and description meta tags for a text specified in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_meta_tags/live/?bash&#39;
     * @param contentGenerationGenerateMetaTagsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateMetaTagsLiveAsync(List<ContentGenerationGenerateMetaTagsLiveRequestInfo> contentGenerationGenerateMetaTagsLiveRequestInfo, final ApiCallback<ContentGenerationGenerateMetaTagsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMetaTagsLiveValidateBeforeCall(contentGenerationGenerateMetaTagsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateMetaTagsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateSubTopicsLive
     * @param contentGenerationGenerateSubTopicsLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSubTopicsLiveCall(List<ContentGenerationGenerateSubTopicsLiveRequestInfo> contentGenerationGenerateSubTopicsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentGenerationGenerateSubTopicsLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_generation/generate_sub_topics/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateSubTopicsLiveValidateBeforeCall(List<ContentGenerationGenerateSubTopicsLiveRequestInfo> contentGenerationGenerateSubTopicsLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return generateSubTopicsLiveCall(contentGenerationGenerateSubTopicsLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with 10 subtopics generated based on the topic and other parameters you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_sub_topics/live/?bash&#39;
     * @param contentGenerationGenerateSubTopicsLiveRequestInfo  (optional)
     * @return ContentGenerationGenerateSubTopicsLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationGenerateSubTopicsLiveResponseInfo generateSubTopicsLive(List<ContentGenerationGenerateSubTopicsLiveRequestInfo> contentGenerationGenerateSubTopicsLiveRequestInfo) throws ApiException {
        ApiResponse<ContentGenerationGenerateSubTopicsLiveResponseInfo> localVarResp = generateSubTopicsLiveWithHttpInfo(contentGenerationGenerateSubTopicsLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with 10 subtopics generated based on the topic and other parameters you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_sub_topics/live/?bash&#39;
     * @param contentGenerationGenerateSubTopicsLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentGenerationGenerateSubTopicsLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationGenerateSubTopicsLiveResponseInfo> generateSubTopicsLiveWithHttpInfo(List<ContentGenerationGenerateSubTopicsLiveRequestInfo> contentGenerationGenerateSubTopicsLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = generateSubTopicsLiveValidateBeforeCall(contentGenerationGenerateSubTopicsLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateSubTopicsLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with 10 subtopics generated based on the topic and other parameters you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_sub_topics/live/?bash&#39;
     * @param contentGenerationGenerateSubTopicsLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateSubTopicsLiveAsync(List<ContentGenerationGenerateSubTopicsLiveRequestInfo> contentGenerationGenerateSubTopicsLiveRequestInfo, final ApiCallback<ContentGenerationGenerateSubTopicsLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateSubTopicsLiveValidateBeforeCall(contentGenerationGenerateSubTopicsLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateSubTopicsLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for generateTextLive
     * @param contentGenerationGenerateTextLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTextLiveCall(List<ContentGenerationGenerateTextLiveRequestInfo> contentGenerationGenerateTextLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentGenerationGenerateTextLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_generation/generate_text/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTextLiveValidateBeforeCall(List<ContentGenerationGenerateTextLiveRequestInfo> contentGenerationGenerateTextLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return generateTextLiveCall(contentGenerationGenerateTextLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with a text generated based on the topic and other parameters you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_text/live/?bash&#39;
     * @param contentGenerationGenerateTextLiveRequestInfo  (optional)
     * @return ContentGenerationGenerateTextLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationGenerateTextLiveResponseInfo generateTextLive(List<ContentGenerationGenerateTextLiveRequestInfo> contentGenerationGenerateTextLiveRequestInfo) throws ApiException {
        ApiResponse<ContentGenerationGenerateTextLiveResponseInfo> localVarResp = generateTextLiveWithHttpInfo(contentGenerationGenerateTextLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with a text generated based on the topic and other parameters you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_text/live/?bash&#39;
     * @param contentGenerationGenerateTextLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentGenerationGenerateTextLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationGenerateTextLiveResponseInfo> generateTextLiveWithHttpInfo(List<ContentGenerationGenerateTextLiveRequestInfo> contentGenerationGenerateTextLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = generateTextLiveValidateBeforeCall(contentGenerationGenerateTextLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateTextLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with a text generated based on the topic and other parameters you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/generate_text/live/?bash&#39;
     * @param contentGenerationGenerateTextLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call generateTextLiveAsync(List<ContentGenerationGenerateTextLiveRequestInfo> contentGenerationGenerateTextLiveRequestInfo, final ApiCallback<ContentGenerationGenerateTextLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTextLiveValidateBeforeCall(contentGenerationGenerateTextLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentGenerationGenerateTextLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grammarRules
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grammarRulesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/content_generation/grammar_rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grammarRulesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return grammarRulesCall(_callback);

    }

    /**
     * 
     * You will receive the list of grammar rules by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/grammar_rules/?bash&#39;
     * @return ContentGenerationGrammarRulesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationGrammarRulesResponseInfo grammarRules() throws ApiException {
        ApiResponse<ContentGenerationGrammarRulesResponseInfo> localVarResp = grammarRulesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of grammar rules by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/grammar_rules/?bash&#39;
     * @return ApiResponse&lt;ContentGenerationGrammarRulesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationGrammarRulesResponseInfo> grammarRulesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = grammarRulesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ContentGenerationGrammarRulesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of grammar rules by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/grammar_rules/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grammarRulesAsync(final ApiCallback<ContentGenerationGrammarRulesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = grammarRulesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ContentGenerationGrammarRulesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for paraphraseLive
     * @param contentGenerationParaphraseLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paraphraseLiveCall(List<ContentGenerationParaphraseLiveRequestInfo> contentGenerationParaphraseLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentGenerationParaphraseLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_generation/paraphrase/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call paraphraseLiveValidateBeforeCall(List<ContentGenerationParaphraseLiveRequestInfo> contentGenerationParaphraseLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return paraphraseLiveCall(contentGenerationParaphraseLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with a paraphrased version of the text you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/paraphrase/live/?bash&#39;
     * @param contentGenerationParaphraseLiveRequestInfo  (optional)
     * @return ContentGenerationParaphraseLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationParaphraseLiveResponseInfo paraphraseLive(List<ContentGenerationParaphraseLiveRequestInfo> contentGenerationParaphraseLiveRequestInfo) throws ApiException {
        ApiResponse<ContentGenerationParaphraseLiveResponseInfo> localVarResp = paraphraseLiveWithHttpInfo(contentGenerationParaphraseLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with a paraphrased version of the text you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/paraphrase/live/?bash&#39;
     * @param contentGenerationParaphraseLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentGenerationParaphraseLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationParaphraseLiveResponseInfo> paraphraseLiveWithHttpInfo(List<ContentGenerationParaphraseLiveRequestInfo> contentGenerationParaphraseLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = paraphraseLiveValidateBeforeCall(contentGenerationParaphraseLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentGenerationParaphraseLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with a paraphrased version of the text you specify. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/paraphrase/live/?bash&#39;
     * @param contentGenerationParaphraseLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call paraphraseLiveAsync(List<ContentGenerationParaphraseLiveRequestInfo> contentGenerationParaphraseLiveRequestInfo, final ApiCallback<ContentGenerationParaphraseLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = paraphraseLiveValidateBeforeCall(contentGenerationParaphraseLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentGenerationParaphraseLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for textSummaryLive
     * @param contentGenerationTextSummaryLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textSummaryLiveCall(List<ContentGenerationTextSummaryLiveRequestInfo> contentGenerationTextSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentGenerationTextSummaryLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/content_generation/text_summary/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textSummaryLiveValidateBeforeCall(List<ContentGenerationTextSummaryLiveRequestInfo> contentGenerationTextSummaryLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return textSummaryLiveCall(contentGenerationTextSummaryLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌ This endpoint will provide you with statistical data based on the given text, such as the number of words and sentences, vocabulary density, and text readability. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/text_summary/live/?bash&#39;
     * @param contentGenerationTextSummaryLiveRequestInfo  (optional)
     * @return ContentGenerationTextSummaryLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ContentGenerationTextSummaryLiveResponseInfo textSummaryLive(List<ContentGenerationTextSummaryLiveRequestInfo> contentGenerationTextSummaryLiveRequestInfo) throws ApiException {
        ApiResponse<ContentGenerationTextSummaryLiveResponseInfo> localVarResp = textSummaryLiveWithHttpInfo(contentGenerationTextSummaryLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ This endpoint will provide you with statistical data based on the given text, such as the number of words and sentences, vocabulary density, and text readability. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/text_summary/live/?bash&#39;
     * @param contentGenerationTextSummaryLiveRequestInfo  (optional)
     * @return ApiResponse&lt;ContentGenerationTextSummaryLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ContentGenerationTextSummaryLiveResponseInfo> textSummaryLiveWithHttpInfo(List<ContentGenerationTextSummaryLiveRequestInfo> contentGenerationTextSummaryLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = textSummaryLiveValidateBeforeCall(contentGenerationTextSummaryLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<ContentGenerationTextSummaryLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ This endpoint will provide you with statistical data based on the given text, such as the number of words and sentences, vocabulary density, and text readability. for more info please visit &#39;https://docs.dataforseo.com/v3/content_generation/text_summary/live/?bash&#39;
     * @param contentGenerationTextSummaryLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textSummaryLiveAsync(List<ContentGenerationTextSummaryLiveRequestInfo> contentGenerationTextSummaryLiveRequestInfo, final ApiCallback<ContentGenerationTextSummaryLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = textSummaryLiveValidateBeforeCall(contentGenerationTextSummaryLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<ContentGenerationTextSummaryLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
