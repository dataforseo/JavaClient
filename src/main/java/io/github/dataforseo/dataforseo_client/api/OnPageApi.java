/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.dataforseo_client.api;

import io.github.dataforseo.dataforseo_client.ApiCallback;
import io.github.dataforseo.dataforseo_client.ApiClient;
import io.github.dataforseo.dataforseo_client.ApiException;
import io.github.dataforseo.dataforseo_client.ApiResponse;
import io.github.dataforseo.dataforseo_client.Configuration;
import io.github.dataforseo.dataforseo_client.Pair;
import io.github.dataforseo.dataforseo_client.ProgressRequestBody;
import io.github.dataforseo.dataforseo_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.github.dataforseo.dataforseo_client.model.OnPageAvailableFiltersResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageContentParsingLiveRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageContentParsingLiveResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageContentParsingRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageContentParsingResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageDuplicateContentRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageDuplicateContentResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageDuplicateTagsRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageDuplicateTagsResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageErrorsRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageErrorsResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageForceStopRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageForceStopResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageIdListRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageIdListResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageInstantPagesRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageInstantPagesResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageKeywordDensityRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageKeywordDensityResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseAuditsResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseLanguagesResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseLiveJsonRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseLiveJsonResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseTaskGetJsonResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseTaskPostRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseTaskPostResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseTasksReadyResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLighthouseVersionsResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLinksRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageLinksResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageMicrodataRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageMicrodataResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageNonIndexableRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageNonIndexableResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPagePageScreenshotRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPagePageScreenshotResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPagePagesByResourceRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPagePagesByResourceResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPagePagesRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPagePagesResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageRawHtmlRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageRawHtmlResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageRedirectChainsRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageRedirectChainsResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageResourcesRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageResourcesResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageSummaryResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageTaskPostResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageTaskRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageTasksReadyResponseInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageWaterfallRequestInfo;
import io.github.dataforseo.dataforseo_client.model.OnPageWaterfallResponseInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OnPageApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OnPageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OnPageApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for contentParsing
     * @param onPageContentParsingRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentParsingCall(List<OnPageContentParsingRequestInfo> onPageContentParsingRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageContentParsingRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/content_parsing";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentParsingValidateBeforeCall(List<OnPageContentParsingRequestInfo> onPageContentParsingRequestInfo, final ApiCallback _callback) throws ApiException {
        return contentParsingCall(onPageContentParsingRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint allows parsing the content on any page you specify and will return the structured content of the target page, including link URLs, anchors, headings, and textual content. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/content_parsing/?bash&#39;
     * @param onPageContentParsingRequestInfo  (optional)
     * @return OnPageContentParsingResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageContentParsingResponseInfo contentParsing(List<OnPageContentParsingRequestInfo> onPageContentParsingRequestInfo) throws ApiException {
        ApiResponse<OnPageContentParsingResponseInfo> localVarResp = contentParsingWithHttpInfo(onPageContentParsingRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint allows parsing the content on any page you specify and will return the structured content of the target page, including link URLs, anchors, headings, and textual content. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/content_parsing/?bash&#39;
     * @param onPageContentParsingRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageContentParsingResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageContentParsingResponseInfo> contentParsingWithHttpInfo(List<OnPageContentParsingRequestInfo> onPageContentParsingRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = contentParsingValidateBeforeCall(onPageContentParsingRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageContentParsingResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint allows parsing the content on any page you specify and will return the structured content of the target page, including link URLs, anchors, headings, and textual content. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/content_parsing/?bash&#39;
     * @param onPageContentParsingRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentParsingAsync(List<OnPageContentParsingRequestInfo> onPageContentParsingRequestInfo, final ApiCallback<OnPageContentParsingResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentParsingValidateBeforeCall(onPageContentParsingRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageContentParsingResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contentParsingLive
     * @param onPageContentParsingLiveRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentParsingLiveCall(List<OnPageContentParsingLiveRequestInfo> onPageContentParsingLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageContentParsingLiveRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/content_parsing/live";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contentParsingLiveValidateBeforeCall(List<OnPageContentParsingLiveRequestInfo> onPageContentParsingLiveRequestInfo, final ApiCallback _callback) throws ApiException {
        return contentParsingLiveCall(onPageContentParsingLiveRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint allows parsing the content on any page you specify and will return the structured content of the target page, including link URLs, anchors, headings, and textual content. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/content_parsing/live/?bash&#39;
     * @param onPageContentParsingLiveRequestInfo  (optional)
     * @return OnPageContentParsingLiveResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageContentParsingLiveResponseInfo contentParsingLive(List<OnPageContentParsingLiveRequestInfo> onPageContentParsingLiveRequestInfo) throws ApiException {
        ApiResponse<OnPageContentParsingLiveResponseInfo> localVarResp = contentParsingLiveWithHttpInfo(onPageContentParsingLiveRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint allows parsing the content on any page you specify and will return the structured content of the target page, including link URLs, anchors, headings, and textual content. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/content_parsing/live/?bash&#39;
     * @param onPageContentParsingLiveRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageContentParsingLiveResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageContentParsingLiveResponseInfo> contentParsingLiveWithHttpInfo(List<OnPageContentParsingLiveRequestInfo> onPageContentParsingLiveRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = contentParsingLiveValidateBeforeCall(onPageContentParsingLiveRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageContentParsingLiveResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint allows parsing the content on any page you specify and will return the structured content of the target page, including link URLs, anchors, headings, and textual content. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/content_parsing/live/?bash&#39;
     * @param onPageContentParsingLiveRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contentParsingLiveAsync(List<OnPageContentParsingLiveRequestInfo> onPageContentParsingLiveRequestInfo, final ApiCallback<OnPageContentParsingLiveResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = contentParsingLiveValidateBeforeCall(onPageContentParsingLiveRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageContentParsingLiveResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for duplicateContent
     * @param onPageDuplicateContentRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateContentCall(List<OnPageDuplicateContentRequestInfo> onPageDuplicateContentRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageDuplicateContentRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/duplicate_content";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateContentValidateBeforeCall(List<OnPageDuplicateContentRequestInfo> onPageDuplicateContentRequestInfo, final ApiCallback _callback) throws ApiException {
        return duplicateContentCall(onPageDuplicateContentRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint returns a list of pages that have content similar to the page specified in the request. The response also contains data related to page performance and the similarity index that indicates how similar the compared pages are. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/duplicate_content/?bash&#39;
     * @param onPageDuplicateContentRequestInfo  (optional)
     * @return OnPageDuplicateContentResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageDuplicateContentResponseInfo duplicateContent(List<OnPageDuplicateContentRequestInfo> onPageDuplicateContentRequestInfo) throws ApiException {
        ApiResponse<OnPageDuplicateContentResponseInfo> localVarResp = duplicateContentWithHttpInfo(onPageDuplicateContentRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint returns a list of pages that have content similar to the page specified in the request. The response also contains data related to page performance and the similarity index that indicates how similar the compared pages are. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/duplicate_content/?bash&#39;
     * @param onPageDuplicateContentRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageDuplicateContentResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageDuplicateContentResponseInfo> duplicateContentWithHttpInfo(List<OnPageDuplicateContentRequestInfo> onPageDuplicateContentRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = duplicateContentValidateBeforeCall(onPageDuplicateContentRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageDuplicateContentResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint returns a list of pages that have content similar to the page specified in the request. The response also contains data related to page performance and the similarity index that indicates how similar the compared pages are. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/duplicate_content/?bash&#39;
     * @param onPageDuplicateContentRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateContentAsync(List<OnPageDuplicateContentRequestInfo> onPageDuplicateContentRequestInfo, final ApiCallback<OnPageDuplicateContentResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateContentValidateBeforeCall(onPageDuplicateContentRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageDuplicateContentResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for duplicateTags
     * @param onPageDuplicateTagsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateTagsCall(List<OnPageDuplicateTagsRequestInfo> onPageDuplicateTagsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageDuplicateTagsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/duplicate_tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call duplicateTagsValidateBeforeCall(List<OnPageDuplicateTagsRequestInfo> onPageDuplicateTagsRequestInfo, final ApiCallback _callback) throws ApiException {
        return duplicateTagsCall(onPageDuplicateTagsRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint returns a list of pages that contain duplicate title or description tags. The response also contains data related to page performance. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/duplicate_tags/?bash&#39;
     * @param onPageDuplicateTagsRequestInfo  (optional)
     * @return OnPageDuplicateTagsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageDuplicateTagsResponseInfo duplicateTags(List<OnPageDuplicateTagsRequestInfo> onPageDuplicateTagsRequestInfo) throws ApiException {
        ApiResponse<OnPageDuplicateTagsResponseInfo> localVarResp = duplicateTagsWithHttpInfo(onPageDuplicateTagsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint returns a list of pages that contain duplicate title or description tags. The response also contains data related to page performance. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/duplicate_tags/?bash&#39;
     * @param onPageDuplicateTagsRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageDuplicateTagsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageDuplicateTagsResponseInfo> duplicateTagsWithHttpInfo(List<OnPageDuplicateTagsRequestInfo> onPageDuplicateTagsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = duplicateTagsValidateBeforeCall(onPageDuplicateTagsRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageDuplicateTagsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint returns a list of pages that contain duplicate title or description tags. The response also contains data related to page performance. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/duplicate_tags/?bash&#39;
     * @param onPageDuplicateTagsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call duplicateTagsAsync(List<OnPageDuplicateTagsRequestInfo> onPageDuplicateTagsRequestInfo, final ApiCallback<OnPageDuplicateTagsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = duplicateTagsValidateBeforeCall(onPageDuplicateTagsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageDuplicateTagsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for forceStop
     * @param onPageForceStopRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceStopCall(List<OnPageForceStopRequestInfo> onPageForceStopRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageForceStopRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/force_stop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forceStopValidateBeforeCall(List<OnPageForceStopRequestInfo> onPageForceStopRequestInfo, final ApiCallback _callback) throws ApiException {
        return forceStopCall(onPageForceStopRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint is designed to force stop the crawl process of websites you specified in a task. The execution of all the tasks associated with the IDs indicated in your request to this endpoint will be stopped. You will still be able to obtain the data on pages that have been scanned until the crawling process was stopped. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/force_stop/?bash&#39;
     * @param onPageForceStopRequestInfo  (optional)
     * @return OnPageForceStopResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageForceStopResponseInfo forceStop(List<OnPageForceStopRequestInfo> onPageForceStopRequestInfo) throws ApiException {
        ApiResponse<OnPageForceStopResponseInfo> localVarResp = forceStopWithHttpInfo(onPageForceStopRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint is designed to force stop the crawl process of websites you specified in a task. The execution of all the tasks associated with the IDs indicated in your request to this endpoint will be stopped. You will still be able to obtain the data on pages that have been scanned until the crawling process was stopped. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/force_stop/?bash&#39;
     * @param onPageForceStopRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageForceStopResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageForceStopResponseInfo> forceStopWithHttpInfo(List<OnPageForceStopRequestInfo> onPageForceStopRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = forceStopValidateBeforeCall(onPageForceStopRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageForceStopResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint is designed to force stop the crawl process of websites you specified in a task. The execution of all the tasks associated with the IDs indicated in your request to this endpoint will be stopped. You will still be able to obtain the data on pages that have been scanned until the crawling process was stopped. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/force_stop/?bash&#39;
     * @param onPageForceStopRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call forceStopAsync(List<OnPageForceStopRequestInfo> onPageForceStopRequestInfo, final ApiCallback<OnPageForceStopResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = forceStopValidateBeforeCall(onPageForceStopRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageForceStopResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for instantPages
     * @param onPageInstantPagesRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instantPagesCall(List<OnPageInstantPagesRequestInfo> onPageInstantPagesRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageInstantPagesRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/instant_pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call instantPagesValidateBeforeCall(List<OnPageInstantPagesRequestInfo> onPageInstantPagesRequestInfo, final ApiCallback _callback) throws ApiException {
        return instantPagesCall(onPageInstantPagesRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Using this function you will get page-specific data with detailed information on how well a particular page is optimized for organic search. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/instant_pages/?bash&#39;
     * @param onPageInstantPagesRequestInfo  (optional)
     * @return OnPageInstantPagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageInstantPagesResponseInfo instantPages(List<OnPageInstantPagesRequestInfo> onPageInstantPagesRequestInfo) throws ApiException {
        ApiResponse<OnPageInstantPagesResponseInfo> localVarResp = instantPagesWithHttpInfo(onPageInstantPagesRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Using this function you will get page-specific data with detailed information on how well a particular page is optimized for organic search. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/instant_pages/?bash&#39;
     * @param onPageInstantPagesRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageInstantPagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageInstantPagesResponseInfo> instantPagesWithHttpInfo(List<OnPageInstantPagesRequestInfo> onPageInstantPagesRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = instantPagesValidateBeforeCall(onPageInstantPagesRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageInstantPagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Using this function you will get page-specific data with detailed information on how well a particular page is optimized for organic search. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/instant_pages/?bash&#39;
     * @param onPageInstantPagesRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call instantPagesAsync(List<OnPageInstantPagesRequestInfo> onPageInstantPagesRequestInfo, final ApiCallback<OnPageInstantPagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = instantPagesValidateBeforeCall(onPageInstantPagesRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageInstantPagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for keywordDensity
     * @param onPageKeywordDensityRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordDensityCall(List<OnPageKeywordDensityRequestInfo> onPageKeywordDensityRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageKeywordDensityRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/keyword_density";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call keywordDensityValidateBeforeCall(List<OnPageKeywordDensityRequestInfo> onPageKeywordDensityRequestInfo, final ApiCallback _callback) throws ApiException {
        return keywordDensityCall(onPageKeywordDensityRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with keyword density and keyword frequency data for terms appearing on the specified website or web page. You can filter and sort the data that will be retrieved with this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/keyword_density/?bash&#39;
     * @param onPageKeywordDensityRequestInfo  (optional)
     * @return OnPageKeywordDensityResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageKeywordDensityResponseInfo keywordDensity(List<OnPageKeywordDensityRequestInfo> onPageKeywordDensityRequestInfo) throws ApiException {
        ApiResponse<OnPageKeywordDensityResponseInfo> localVarResp = keywordDensityWithHttpInfo(onPageKeywordDensityRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with keyword density and keyword frequency data for terms appearing on the specified website or web page. You can filter and sort the data that will be retrieved with this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/keyword_density/?bash&#39;
     * @param onPageKeywordDensityRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageKeywordDensityResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageKeywordDensityResponseInfo> keywordDensityWithHttpInfo(List<OnPageKeywordDensityRequestInfo> onPageKeywordDensityRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = keywordDensityValidateBeforeCall(onPageKeywordDensityRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageKeywordDensityResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with keyword density and keyword frequency data for terms appearing on the specified website or web page. You can filter and sort the data that will be retrieved with this API call. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/keyword_density/?bash&#39;
     * @param onPageKeywordDensityRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call keywordDensityAsync(List<OnPageKeywordDensityRequestInfo> onPageKeywordDensityRequestInfo, final ApiCallback<OnPageKeywordDensityResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = keywordDensityValidateBeforeCall(onPageKeywordDensityRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageKeywordDensityResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lighthouseAudits
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseAuditsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/lighthouse/audits";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lighthouseAuditsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return lighthouseAuditsCall(_callback);

    }

    /**
     * 
     * The OnPage Lighthouse API is based on Google’s open-source Lighthouse project and provides data on the quality of web pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/audits/?bash&#39;
     * @return OnPageLighthouseAuditsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLighthouseAuditsResponseInfo lighthouseAudits() throws ApiException {
        ApiResponse<OnPageLighthouseAuditsResponseInfo> localVarResp = lighthouseAuditsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * The OnPage Lighthouse API is based on Google’s open-source Lighthouse project and provides data on the quality of web pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/audits/?bash&#39;
     * @return ApiResponse&lt;OnPageLighthouseAuditsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLighthouseAuditsResponseInfo> lighthouseAuditsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = lighthouseAuditsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnPageLighthouseAuditsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The OnPage Lighthouse API is based on Google’s open-source Lighthouse project and provides data on the quality of web pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/audits/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseAuditsAsync(final ApiCallback<OnPageLighthouseAuditsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lighthouseAuditsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnPageLighthouseAuditsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lighthouseLiveJson
     * @param onPageLighthouseLiveJsonRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseLiveJsonCall(List<OnPageLighthouseLiveJsonRequestInfo> onPageLighthouseLiveJsonRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageLighthouseLiveJsonRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/lighthouse/live/json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lighthouseLiveJsonValidateBeforeCall(List<OnPageLighthouseLiveJsonRequestInfo> onPageLighthouseLiveJsonRequestInfo, final ApiCallback _callback) throws ApiException {
        return lighthouseLiveJsonCall(onPageLighthouseLiveJsonRequestInfo, _callback);

    }

    /**
     * 
     * ‌The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/live/json/?bash&#39;
     * @param onPageLighthouseLiveJsonRequestInfo  (optional)
     * @return OnPageLighthouseLiveJsonResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLighthouseLiveJsonResponseInfo lighthouseLiveJson(List<OnPageLighthouseLiveJsonRequestInfo> onPageLighthouseLiveJsonRequestInfo) throws ApiException {
        ApiResponse<OnPageLighthouseLiveJsonResponseInfo> localVarResp = lighthouseLiveJsonWithHttpInfo(onPageLighthouseLiveJsonRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/live/json/?bash&#39;
     * @param onPageLighthouseLiveJsonRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageLighthouseLiveJsonResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLighthouseLiveJsonResponseInfo> lighthouseLiveJsonWithHttpInfo(List<OnPageLighthouseLiveJsonRequestInfo> onPageLighthouseLiveJsonRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = lighthouseLiveJsonValidateBeforeCall(onPageLighthouseLiveJsonRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageLighthouseLiveJsonResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/live/json/?bash&#39;
     * @param onPageLighthouseLiveJsonRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseLiveJsonAsync(List<OnPageLighthouseLiveJsonRequestInfo> onPageLighthouseLiveJsonRequestInfo, final ApiCallback<OnPageLighthouseLiveJsonResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lighthouseLiveJsonValidateBeforeCall(onPageLighthouseLiveJsonRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageLighthouseLiveJsonResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lighthouseTaskGetJson
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseTaskGetJsonCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/lighthouse/task_get/json/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lighthouseTaskGetJsonValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling lighthouseTaskGetJson(Async)");
        }

        return lighthouseTaskGetJsonCall(id, _callback);

    }

    /**
     * 
     * ‌ The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. This endpoint will provide you with the results of Lighthouse Audit. Use the id received in the response of your Task POST request to get the results. The response will include data about all categories and audits specified in the Task POST. By default, the response will include all available data about the webpage including its performance, accessibility, progressive web apps, SEO, and compliance with best practices. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/task_get/json/?bash&#39;
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @return OnPageLighthouseTaskGetJsonResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLighthouseTaskGetJsonResponseInfo lighthouseTaskGetJson(String id) throws ApiException {
        ApiResponse<OnPageLighthouseTaskGetJsonResponseInfo> localVarResp = lighthouseTaskGetJsonWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. This endpoint will provide you with the results of Lighthouse Audit. Use the id received in the response of your Task POST request to get the results. The response will include data about all categories and audits specified in the Task POST. By default, the response will include all available data about the webpage including its performance, accessibility, progressive web apps, SEO, and compliance with best practices. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/task_get/json/?bash&#39;
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @return ApiResponse&lt;OnPageLighthouseTaskGetJsonResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLighthouseTaskGetJsonResponseInfo> lighthouseTaskGetJsonWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = lighthouseTaskGetJsonValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OnPageLighthouseTaskGetJsonResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. This endpoint will provide you with the results of Lighthouse Audit. Use the id received in the response of your Task POST request to get the results. The response will include data about all categories and audits specified in the Task POST. By default, the response will include all available data about the webpage including its performance, accessibility, progressive web apps, SEO, and compliance with best practices. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/task_get/json/?bash&#39;
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseTaskGetJsonAsync(String id, final ApiCallback<OnPageLighthouseTaskGetJsonResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lighthouseTaskGetJsonValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OnPageLighthouseTaskGetJsonResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lighthouseTaskPost
     * @param onPageLighthouseTaskPostRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseTaskPostCall(List<OnPageLighthouseTaskPostRequestInfo> onPageLighthouseTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageLighthouseTaskPostRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/lighthouse/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lighthouseTaskPostValidateBeforeCall(List<OnPageLighthouseTaskPostRequestInfo> onPageLighthouseTaskPostRequestInfo, final ApiCallback _callback) throws ApiException {
        return lighthouseTaskPostCall(onPageLighthouseTaskPostRequestInfo, _callback);

    }

    /**
     * 
     * ‌The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/task_post/?bash&#39;
     * @param onPageLighthouseTaskPostRequestInfo  (optional)
     * @return OnPageLighthouseTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLighthouseTaskPostResponseInfo lighthouseTaskPost(List<OnPageLighthouseTaskPostRequestInfo> onPageLighthouseTaskPostRequestInfo) throws ApiException {
        ApiResponse<OnPageLighthouseTaskPostResponseInfo> localVarResp = lighthouseTaskPostWithHttpInfo(onPageLighthouseTaskPostRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/task_post/?bash&#39;
     * @param onPageLighthouseTaskPostRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageLighthouseTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLighthouseTaskPostResponseInfo> lighthouseTaskPostWithHttpInfo(List<OnPageLighthouseTaskPostRequestInfo> onPageLighthouseTaskPostRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = lighthouseTaskPostValidateBeforeCall(onPageLighthouseTaskPostRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageLighthouseTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌The OnPage Lighthouse API is based on Google’s open-source Lighthouse project for measuring the quality of web pages and web apps. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/task_post/?bash&#39;
     * @param onPageLighthouseTaskPostRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseTaskPostAsync(List<OnPageLighthouseTaskPostRequestInfo> onPageLighthouseTaskPostRequestInfo, final ApiCallback<OnPageLighthouseTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lighthouseTaskPostValidateBeforeCall(onPageLighthouseTaskPostRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageLighthouseTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lighthouseTasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseTasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/lighthouse/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lighthouseTasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return lighthouseTasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/tasks_ready/?bash&#39;
     * @return OnPageLighthouseTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLighthouseTasksReadyResponseInfo lighthouseTasksReady() throws ApiException {
        ApiResponse<OnPageLighthouseTasksReadyResponseInfo> localVarResp = lighthouseTasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/tasks_ready/?bash&#39;
     * @return ApiResponse&lt;OnPageLighthouseTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLighthouseTasksReadyResponseInfo> lighthouseTasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = lighthouseTasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnPageLighthouseTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with the list of completed tasks, which haven’t been collected yet. If you use the Standard method without specifying the postback_url, you can receive the list of id for all completed tasks using this endpoint. Then, you can collect the results using the ‘Task GET’ endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseTasksReadyAsync(final ApiCallback<OnPageLighthouseTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lighthouseTasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnPageLighthouseTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lighthouseVersions
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseVersionsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/lighthouse/versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lighthouseVersionsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return lighthouseVersionsCall(_callback);

    }

    /**
     * 
     * OnPage Lighthouse API is based on Google’s open-source Lighthouse project and provides data on the quality of web pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/versions/?bash&#39;
     * @return OnPageLighthouseVersionsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLighthouseVersionsResponseInfo lighthouseVersions() throws ApiException {
        ApiResponse<OnPageLighthouseVersionsResponseInfo> localVarResp = lighthouseVersionsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * OnPage Lighthouse API is based on Google’s open-source Lighthouse project and provides data on the quality of web pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/versions/?bash&#39;
     * @return ApiResponse&lt;OnPageLighthouseVersionsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLighthouseVersionsResponseInfo> lighthouseVersionsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = lighthouseVersionsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnPageLighthouseVersionsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OnPage Lighthouse API is based on Google’s open-source Lighthouse project and provides data on the quality of web pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/versions/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lighthouseVersionsAsync(final ApiCallback<OnPageLighthouseVersionsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = lighthouseVersionsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnPageLighthouseVersionsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for links
     * @param onPageLinksRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linksCall(List<OnPageLinksRequestInfo> onPageLinksRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageLinksRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call linksValidateBeforeCall(List<OnPageLinksRequestInfo> onPageLinksRequestInfo, final ApiCallback _callback) throws ApiException {
        return linksCall(onPageLinksRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of internal and external links detected on a target website. The following link types are supported: anchor, image, link, canonical, meta, alternate, redirect. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/links/?bash&#39;
     * @param onPageLinksRequestInfo  (optional)
     * @return OnPageLinksResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLinksResponseInfo links(List<OnPageLinksRequestInfo> onPageLinksRequestInfo) throws ApiException {
        ApiResponse<OnPageLinksResponseInfo> localVarResp = linksWithHttpInfo(onPageLinksRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of internal and external links detected on a target website. The following link types are supported: anchor, image, link, canonical, meta, alternate, redirect. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/links/?bash&#39;
     * @param onPageLinksRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageLinksResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLinksResponseInfo> linksWithHttpInfo(List<OnPageLinksRequestInfo> onPageLinksRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = linksValidateBeforeCall(onPageLinksRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageLinksResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a list of internal and external links detected on a target website. The following link types are supported: anchor, image, link, canonical, meta, alternate, redirect. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/links/?bash&#39;
     * @param onPageLinksRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call linksAsync(List<OnPageLinksRequestInfo> onPageLinksRequestInfo, final ApiCallback<OnPageLinksResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = linksValidateBeforeCall(onPageLinksRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageLinksResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for microdata
     * @param onPageMicrodataRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call microdataCall(List<OnPageMicrodataRequestInfo> onPageMicrodataRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageMicrodataRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/microdata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call microdataValidateBeforeCall(List<OnPageMicrodataRequestInfo> onPageMicrodataRequestInfo, final ApiCallback _callback) throws ApiException {
        return microdataCall(onPageMicrodataRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint is designed to validate structured JSON-LD data and Microdata. Using this function you will obtain microdata available on the specified page of the target website and detailed results of its validation. To use this endpoint, set the validate_micromarkup parameter to true in the POST request to OnPage API. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/microdata/?bash&#39;
     * @param onPageMicrodataRequestInfo  (optional)
     * @return OnPageMicrodataResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageMicrodataResponseInfo microdata(List<OnPageMicrodataRequestInfo> onPageMicrodataRequestInfo) throws ApiException {
        ApiResponse<OnPageMicrodataResponseInfo> localVarResp = microdataWithHttpInfo(onPageMicrodataRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint is designed to validate structured JSON-LD data and Microdata. Using this function you will obtain microdata available on the specified page of the target website and detailed results of its validation. To use this endpoint, set the validate_micromarkup parameter to true in the POST request to OnPage API. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/microdata/?bash&#39;
     * @param onPageMicrodataRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageMicrodataResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageMicrodataResponseInfo> microdataWithHttpInfo(List<OnPageMicrodataRequestInfo> onPageMicrodataRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = microdataValidateBeforeCall(onPageMicrodataRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageMicrodataResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint is designed to validate structured JSON-LD data and Microdata. Using this function you will obtain microdata available on the specified page of the target website and detailed results of its validation. To use this endpoint, set the validate_micromarkup parameter to true in the POST request to OnPage API. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/microdata/?bash&#39;
     * @param onPageMicrodataRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call microdataAsync(List<OnPageMicrodataRequestInfo> onPageMicrodataRequestInfo, final ApiCallback<OnPageMicrodataResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = microdataValidateBeforeCall(onPageMicrodataRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageMicrodataResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for nonIndexable
     * @param onPageNonIndexableRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nonIndexableCall(List<OnPageNonIndexableRequestInfo> onPageNonIndexableRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageNonIndexableRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/non_indexable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call nonIndexableValidateBeforeCall(List<OnPageNonIndexableRequestInfo> onPageNonIndexableRequestInfo, final ApiCallback _callback) throws ApiException {
        return nonIndexableCall(onPageNonIndexableRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint returns a list of pages that are blocked from being indexed by Google and other search engines by robots.txt, HTTP headers, or meta tags settings. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/non_indexable/?bash&#39;
     * @param onPageNonIndexableRequestInfo  (optional)
     * @return OnPageNonIndexableResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageNonIndexableResponseInfo nonIndexable(List<OnPageNonIndexableRequestInfo> onPageNonIndexableRequestInfo) throws ApiException {
        ApiResponse<OnPageNonIndexableResponseInfo> localVarResp = nonIndexableWithHttpInfo(onPageNonIndexableRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint returns a list of pages that are blocked from being indexed by Google and other search engines by robots.txt, HTTP headers, or meta tags settings. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/non_indexable/?bash&#39;
     * @param onPageNonIndexableRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageNonIndexableResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageNonIndexableResponseInfo> nonIndexableWithHttpInfo(List<OnPageNonIndexableRequestInfo> onPageNonIndexableRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = nonIndexableValidateBeforeCall(onPageNonIndexableRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageNonIndexableResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint returns a list of pages that are blocked from being indexed by Google and other search engines by robots.txt, HTTP headers, or meta tags settings. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/non_indexable/?bash&#39;
     * @param onPageNonIndexableRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call nonIndexableAsync(List<OnPageNonIndexableRequestInfo> onPageNonIndexableRequestInfo, final ApiCallback<OnPageNonIndexableResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = nonIndexableValidateBeforeCall(onPageNonIndexableRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageNonIndexableResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onPageAvailableFilters
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageAvailableFiltersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/available_filters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onPageAvailableFiltersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return onPageAvailableFiltersCall(_callback);

    }

    /**
     * 
     * OnPage API supports plenty of customizable crawling parameters that allow you to adapt the extraction of website data to your requirements and modify the thresholds for various performance indicators. ‌‌ Here you will find all the necessary information about filters and thresholds that can be used with DataForSEO OnPage API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/filters_and_thresholds/?bash&#39;
     * @return OnPageAvailableFiltersResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageAvailableFiltersResponseInfo onPageAvailableFilters() throws ApiException {
        ApiResponse<OnPageAvailableFiltersResponseInfo> localVarResp = onPageAvailableFiltersWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * OnPage API supports plenty of customizable crawling parameters that allow you to adapt the extraction of website data to your requirements and modify the thresholds for various performance indicators. ‌‌ Here you will find all the necessary information about filters and thresholds that can be used with DataForSEO OnPage API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/filters_and_thresholds/?bash&#39;
     * @return ApiResponse&lt;OnPageAvailableFiltersResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageAvailableFiltersResponseInfo> onPageAvailableFiltersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = onPageAvailableFiltersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnPageAvailableFiltersResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * OnPage API supports plenty of customizable crawling parameters that allow you to adapt the extraction of website data to your requirements and modify the thresholds for various performance indicators. ‌‌ Here you will find all the necessary information about filters and thresholds that can be used with DataForSEO OnPage API endpoints. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/filters_and_thresholds/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageAvailableFiltersAsync(final ApiCallback<OnPageAvailableFiltersResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = onPageAvailableFiltersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnPageAvailableFiltersResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onPageErrors
     * @param onPageErrorsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageErrorsCall(List<OnPageErrorsRequestInfo> onPageErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageErrorsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/errors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onPageErrorsValidateBeforeCall(List<OnPageErrorsRequestInfo> onPageErrorsRequestInfo, final ApiCallback _callback) throws ApiException {
        return onPageErrorsCall(onPageErrorsRequestInfo, _callback);

    }

    /**
     * 
     * By calling this endpoint you will receive information about the OnPage API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/errors/?bash&#39;
     * @param onPageErrorsRequestInfo  (optional)
     * @return OnPageErrorsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageErrorsResponseInfo onPageErrors(List<OnPageErrorsRequestInfo> onPageErrorsRequestInfo) throws ApiException {
        ApiResponse<OnPageErrorsResponseInfo> localVarResp = onPageErrorsWithHttpInfo(onPageErrorsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * By calling this endpoint you will receive information about the OnPage API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/errors/?bash&#39;
     * @param onPageErrorsRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageErrorsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageErrorsResponseInfo> onPageErrorsWithHttpInfo(List<OnPageErrorsRequestInfo> onPageErrorsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = onPageErrorsValidateBeforeCall(onPageErrorsRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageErrorsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * By calling this endpoint you will receive information about the OnPage API tasks that returned an error within the past 24 hours. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/errors/?bash&#39;
     * @param onPageErrorsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageErrorsAsync(List<OnPageErrorsRequestInfo> onPageErrorsRequestInfo, final ApiCallback<OnPageErrorsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = onPageErrorsValidateBeforeCall(onPageErrorsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageErrorsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onPageIdList
     * @param onPageIdListRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageIdListCall(List<OnPageIdListRequestInfo> onPageIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageIdListRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/id_list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onPageIdListValidateBeforeCall(List<OnPageIdListRequestInfo> onPageIdListRequestInfo, final ApiCallback _callback) throws ApiException {
        return onPageIdListCall(onPageIdListRequestInfo, _callback);

    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed On Page tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/id_list/?bash&#39;
     * @param onPageIdListRequestInfo  (optional)
     * @return OnPageIdListResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageIdListResponseInfo onPageIdList(List<OnPageIdListRequestInfo> onPageIdListRequestInfo) throws ApiException {
        ApiResponse<OnPageIdListResponseInfo> localVarResp = onPageIdListWithHttpInfo(onPageIdListRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed On Page tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/id_list/?bash&#39;
     * @param onPageIdListRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageIdListResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageIdListResponseInfo> onPageIdListWithHttpInfo(List<OnPageIdListRequestInfo> onPageIdListRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = onPageIdListValidateBeforeCall(onPageIdListRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageIdListResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This endpoint is designed to provide you with the list of IDs and metadata of the completed On Page tasks during the specified period. You will get all task IDs that were made including successful, uncompleted, and tasks that responded as errors. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/id_list/?bash&#39;
     * @param onPageIdListRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageIdListAsync(List<OnPageIdListRequestInfo> onPageIdListRequestInfo, final ApiCallback<OnPageIdListResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = onPageIdListValidateBeforeCall(onPageIdListRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageIdListResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for onPageLighthouseLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageLighthouseLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/lighthouse/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onPageLighthouseLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return onPageLighthouseLanguagesCall(_callback);

    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/languages/?bash&#39;
     * @return OnPageLighthouseLanguagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageLighthouseLanguagesResponseInfo onPageLighthouseLanguages() throws ApiException {
        ApiResponse<OnPageLighthouseLanguagesResponseInfo> localVarResp = onPageLighthouseLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/languages/?bash&#39;
     * @return ApiResponse&lt;OnPageLighthouseLanguagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageLighthouseLanguagesResponseInfo> onPageLighthouseLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = onPageLighthouseLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnPageLighthouseLanguagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * You will receive the list of languages by calling this API.   As a response of the API server, you will receive JSON-encoded data containing a tasks array with the information specific to the set tasks. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/lighthouse/languages/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call onPageLighthouseLanguagesAsync(final ApiCallback<OnPageLighthouseLanguagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = onPageLighthouseLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnPageLighthouseLanguagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pageScreenshot
     * @param onPagePageScreenshotRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageScreenshotCall(List<OnPagePageScreenshotRequestInfo> onPagePageScreenshotRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPagePageScreenshotRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/page_screenshot";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pageScreenshotValidateBeforeCall(List<OnPagePageScreenshotRequestInfo> onPagePageScreenshotRequestInfo, final ApiCallback _callback) throws ApiException {
        return pageScreenshotCall(onPagePageScreenshotRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Using this endpoint, you can capture a full high-quality screenshot of any webpage. In this way, you can review the target page as the DataForSEO crawler and Googlebot see it. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/page_screenshot/?bash&#39;
     * @param onPagePageScreenshotRequestInfo  (optional)
     * @return OnPagePageScreenshotResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPagePageScreenshotResponseInfo pageScreenshot(List<OnPagePageScreenshotRequestInfo> onPagePageScreenshotRequestInfo) throws ApiException {
        ApiResponse<OnPagePageScreenshotResponseInfo> localVarResp = pageScreenshotWithHttpInfo(onPagePageScreenshotRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Using this endpoint, you can capture a full high-quality screenshot of any webpage. In this way, you can review the target page as the DataForSEO crawler and Googlebot see it. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/page_screenshot/?bash&#39;
     * @param onPagePageScreenshotRequestInfo  (optional)
     * @return ApiResponse&lt;OnPagePageScreenshotResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPagePageScreenshotResponseInfo> pageScreenshotWithHttpInfo(List<OnPagePageScreenshotRequestInfo> onPagePageScreenshotRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = pageScreenshotValidateBeforeCall(onPagePageScreenshotRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPagePageScreenshotResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Using this endpoint, you can capture a full high-quality screenshot of any webpage. In this way, you can review the target page as the DataForSEO crawler and Googlebot see it. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/page_screenshot/?bash&#39;
     * @param onPagePageScreenshotRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pageScreenshotAsync(List<OnPagePageScreenshotRequestInfo> onPagePageScreenshotRequestInfo, final ApiCallback<OnPagePageScreenshotResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = pageScreenshotValidateBeforeCall(onPagePageScreenshotRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPagePageScreenshotResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pages
     * @param onPagePagesRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesCall(List<OnPagePagesRequestInfo> onPagePagesRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPagePagesRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/pages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesValidateBeforeCall(List<OnPagePagesRequestInfo> onPagePagesRequestInfo, final ApiCallback _callback) throws ApiException {
        return pagesCall(onPagePagesRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint returns a list of crawled pages with on-page check-ups and other metrics related to the page performance. Using this function you will get page-specific data with detailed information on how well your pages are optimized for search. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/pages/?bash&#39;
     * @param onPagePagesRequestInfo  (optional)
     * @return OnPagePagesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPagePagesResponseInfo pages(List<OnPagePagesRequestInfo> onPagePagesRequestInfo) throws ApiException {
        ApiResponse<OnPagePagesResponseInfo> localVarResp = pagesWithHttpInfo(onPagePagesRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint returns a list of crawled pages with on-page check-ups and other metrics related to the page performance. Using this function you will get page-specific data with detailed information on how well your pages are optimized for search. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/pages/?bash&#39;
     * @param onPagePagesRequestInfo  (optional)
     * @return ApiResponse&lt;OnPagePagesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPagePagesResponseInfo> pagesWithHttpInfo(List<OnPagePagesRequestInfo> onPagePagesRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = pagesValidateBeforeCall(onPagePagesRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPagePagesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint returns a list of crawled pages with on-page check-ups and other metrics related to the page performance. Using this function you will get page-specific data with detailed information on how well your pages are optimized for search. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/pages/?bash&#39;
     * @param onPagePagesRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesAsync(List<OnPagePagesRequestInfo> onPagePagesRequestInfo, final ApiCallback<OnPagePagesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesValidateBeforeCall(onPagePagesRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPagePagesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for pagesByResource
     * @param onPagePagesByResourceRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesByResourceCall(List<OnPagePagesByResourceRequestInfo> onPagePagesByResourceRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPagePagesByResourceRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/pages_by_resource";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pagesByResourceValidateBeforeCall(List<OnPagePagesByResourceRequestInfo> onPagePagesByResourceRequestInfo, final ApiCallback _callback) throws ApiException {
        return pagesByResourceCall(onPagePagesByResourceRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will return the list of pages where a specific resource is located. Using this function you will also get the data related to the pages that contain a specified resource. You can get the URL of a resource using the Resources endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/page_by_resource/?bash&#39;
     * @param onPagePagesByResourceRequestInfo  (optional)
     * @return OnPagePagesByResourceResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPagePagesByResourceResponseInfo pagesByResource(List<OnPagePagesByResourceRequestInfo> onPagePagesByResourceRequestInfo) throws ApiException {
        ApiResponse<OnPagePagesByResourceResponseInfo> localVarResp = pagesByResourceWithHttpInfo(onPagePagesByResourceRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will return the list of pages where a specific resource is located. Using this function you will also get the data related to the pages that contain a specified resource. You can get the URL of a resource using the Resources endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/page_by_resource/?bash&#39;
     * @param onPagePagesByResourceRequestInfo  (optional)
     * @return ApiResponse&lt;OnPagePagesByResourceResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPagePagesByResourceResponseInfo> pagesByResourceWithHttpInfo(List<OnPagePagesByResourceRequestInfo> onPagePagesByResourceRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = pagesByResourceValidateBeforeCall(onPagePagesByResourceRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPagePagesByResourceResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will return the list of pages where a specific resource is located. Using this function you will also get the data related to the pages that contain a specified resource. You can get the URL of a resource using the Resources endpoint. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/page_by_resource/?bash&#39;
     * @param onPagePagesByResourceRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pagesByResourceAsync(List<OnPagePagesByResourceRequestInfo> onPagePagesByResourceRequestInfo, final ApiCallback<OnPagePagesByResourceResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = pagesByResourceValidateBeforeCall(onPagePagesByResourceRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPagePagesByResourceResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawHtml
     * @param onPageRawHtmlRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawHtmlCall(List<OnPageRawHtmlRequestInfo> onPageRawHtmlRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageRawHtmlRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/raw_html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawHtmlValidateBeforeCall(List<OnPageRawHtmlRequestInfo> onPageRawHtmlRequestInfo, final ApiCallback _callback) throws ApiException {
        return rawHtmlCall(onPageRawHtmlRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint returns the HTML of a page you indicate in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/raw_html/?bash&#39;
     * @param onPageRawHtmlRequestInfo  (optional)
     * @return OnPageRawHtmlResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageRawHtmlResponseInfo rawHtml(List<OnPageRawHtmlRequestInfo> onPageRawHtmlRequestInfo) throws ApiException {
        ApiResponse<OnPageRawHtmlResponseInfo> localVarResp = rawHtmlWithHttpInfo(onPageRawHtmlRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint returns the HTML of a page you indicate in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/raw_html/?bash&#39;
     * @param onPageRawHtmlRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageRawHtmlResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageRawHtmlResponseInfo> rawHtmlWithHttpInfo(List<OnPageRawHtmlRequestInfo> onPageRawHtmlRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = rawHtmlValidateBeforeCall(onPageRawHtmlRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageRawHtmlResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint returns the HTML of a page you indicate in the request. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/raw_html/?bash&#39;
     * @param onPageRawHtmlRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawHtmlAsync(List<OnPageRawHtmlRequestInfo> onPageRawHtmlRequestInfo, final ApiCallback<OnPageRawHtmlResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawHtmlValidateBeforeCall(onPageRawHtmlRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageRawHtmlResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for redirectChains
     * @param onPageRedirectChainsRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redirectChainsCall(List<OnPageRedirectChainsRequestInfo> onPageRedirectChainsRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageRedirectChainsRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/redirect_chains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redirectChainsValidateBeforeCall(List<OnPageRedirectChainsRequestInfo> onPageRedirectChainsRequestInfo, final ApiCallback _callback) throws ApiException {
        return redirectChainsCall(onPageRedirectChainsRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ Redirect chains occur when there are at least two redirects between the initial URL and the destination URL. For example, if page A redirects to page B which redirects to page C, such a series of redirects is considered a redirect chain. Sometimes, if page B redirects back to page A, the redirect chain becomes closed and is considered a redirect loop. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/redirect_chains/?bash&#39;
     * @param onPageRedirectChainsRequestInfo  (optional)
     * @return OnPageRedirectChainsResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageRedirectChainsResponseInfo redirectChains(List<OnPageRedirectChainsRequestInfo> onPageRedirectChainsRequestInfo) throws ApiException {
        ApiResponse<OnPageRedirectChainsResponseInfo> localVarResp = redirectChainsWithHttpInfo(onPageRedirectChainsRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ Redirect chains occur when there are at least two redirects between the initial URL and the destination URL. For example, if page A redirects to page B which redirects to page C, such a series of redirects is considered a redirect chain. Sometimes, if page B redirects back to page A, the redirect chain becomes closed and is considered a redirect loop. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/redirect_chains/?bash&#39;
     * @param onPageRedirectChainsRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageRedirectChainsResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageRedirectChainsResponseInfo> redirectChainsWithHttpInfo(List<OnPageRedirectChainsRequestInfo> onPageRedirectChainsRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = redirectChainsValidateBeforeCall(onPageRedirectChainsRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageRedirectChainsResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ Redirect chains occur when there are at least two redirects between the initial URL and the destination URL. For example, if page A redirects to page B which redirects to page C, such a series of redirects is considered a redirect chain. Sometimes, if page B redirects back to page A, the redirect chain becomes closed and is considered a redirect loop. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/redirect_chains/?bash&#39;
     * @param onPageRedirectChainsRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call redirectChainsAsync(List<OnPageRedirectChainsRequestInfo> onPageRedirectChainsRequestInfo, final ApiCallback<OnPageRedirectChainsResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = redirectChainsValidateBeforeCall(onPageRedirectChainsRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageRedirectChainsResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resources
     * @param onPageResourcesRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesCall(List<OnPageResourcesRequestInfo> onPageResourcesRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageResourcesRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourcesValidateBeforeCall(List<OnPageResourcesRequestInfo> onPageResourcesRequestInfo, final ApiCallback _callback) throws ApiException {
        return resourcesCall(onPageResourcesRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of resources, including images, scripts, stylesheets, and broken elements. You will get a detailed overview of every resource found on the crawled pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/resources/?bash&#39;
     * @param onPageResourcesRequestInfo  (optional)
     * @return OnPageResourcesResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageResourcesResponseInfo resources(List<OnPageResourcesRequestInfo> onPageResourcesRequestInfo) throws ApiException {
        ApiResponse<OnPageResourcesResponseInfo> localVarResp = resourcesWithHttpInfo(onPageResourcesRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint will provide you with a list of resources, including images, scripts, stylesheets, and broken elements. You will get a detailed overview of every resource found on the crawled pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/resources/?bash&#39;
     * @param onPageResourcesRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageResourcesResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageResourcesResponseInfo> resourcesWithHttpInfo(List<OnPageResourcesRequestInfo> onPageResourcesRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = resourcesValidateBeforeCall(onPageResourcesRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageResourcesResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint will provide you with a list of resources, including images, scripts, stylesheets, and broken elements. You will get a detailed overview of every resource found on the crawled pages. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/resources/?bash&#39;
     * @param onPageResourcesRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourcesAsync(List<OnPageResourcesRequestInfo> onPageResourcesRequestInfo, final ApiCallback<OnPageResourcesResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourcesValidateBeforeCall(onPageResourcesRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageResourcesResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for summary
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/summary/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summaryValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling summary(Async)");
        }

        return summaryCall(id, _callback);

    }

    /**
     * 
     * ‌ Using this function, you can get the overall information on a website as well as drill down into exact on-page issues of a website that has been scanned. As a result, you will know what functions to use for receiving detailed data for each of the found issues. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/summary/?bash&#39;
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @return OnPageSummaryResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageSummaryResponseInfo summary(String id) throws ApiException {
        ApiResponse<OnPageSummaryResponseInfo> localVarResp = summaryWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ Using this function, you can get the overall information on a website as well as drill down into exact on-page issues of a website that has been scanned. As a result, you will know what functions to use for receiving detailed data for each of the found issues. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/summary/?bash&#39;
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @return ApiResponse&lt;OnPageSummaryResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageSummaryResponseInfo> summaryWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = summaryValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OnPageSummaryResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ Using this function, you can get the overall information on a website as well as drill down into exact on-page issues of a website that has been scanned. As a result, you will know what functions to use for receiving detailed data for each of the found issues. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/summary/?bash&#39;
     * @param id task identifier required field you can get this ID in the response of the Task POST endpoint example: “07131248-1535-0216-1000-17384017ad04” (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryAsync(String id, final ApiCallback<OnPageSummaryResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = summaryValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OnPageSummaryResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskPost
     * @param onPageTaskRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskPostCall(List<OnPageTaskRequestInfo> onPageTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageTaskRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/task_post";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskPostValidateBeforeCall(List<OnPageTaskRequestInfo> onPageTaskRequestInfo, final ApiCallback _callback) throws ApiException {
        return taskPostCall(onPageTaskRequestInfo, _callback);

    }

    /**
     * 
     * ‌ OnPage API checks websites for 60+ customizable on-page parameters defines and displays all found flaws and opportunities for optimization so that you can easily fix them. It checks meta tags, duplicate content, image tags, response codes, and other parameters on every page. You can find the full list of OnPage API check-up parameters in the Pages section. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/task_post/?bash&#39;
     * @param onPageTaskRequestInfo  (optional)
     * @return OnPageTaskPostResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageTaskPostResponseInfo taskPost(List<OnPageTaskRequestInfo> onPageTaskRequestInfo) throws ApiException {
        ApiResponse<OnPageTaskPostResponseInfo> localVarResp = taskPostWithHttpInfo(onPageTaskRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ OnPage API checks websites for 60+ customizable on-page parameters defines and displays all found flaws and opportunities for optimization so that you can easily fix them. It checks meta tags, duplicate content, image tags, response codes, and other parameters on every page. You can find the full list of OnPage API check-up parameters in the Pages section. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/task_post/?bash&#39;
     * @param onPageTaskRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageTaskPostResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageTaskPostResponseInfo> taskPostWithHttpInfo(List<OnPageTaskRequestInfo> onPageTaskRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = taskPostValidateBeforeCall(onPageTaskRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageTaskPostResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ OnPage API checks websites for 60+ customizable on-page parameters defines and displays all found flaws and opportunities for optimization so that you can easily fix them. It checks meta tags, duplicate content, image tags, response codes, and other parameters on every page. You can find the full list of OnPage API check-up parameters in the Pages section. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/task_post/?bash&#39;
     * @param onPageTaskRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskPostAsync(List<OnPageTaskRequestInfo> onPageTaskRequestInfo, final ApiCallback<OnPageTaskPostResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskPostValidateBeforeCall(onPageTaskRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageTaskPostResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksReady
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksReadyCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/on_page/tasks_ready";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksReadyValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tasksReadyCall(_callback);

    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with a list of completed tasks, which results haven’t been collected yet. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page-tasks_ready/?bash&#39;
     * @return OnPageTasksReadyResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageTasksReadyResponseInfo tasksReady() throws ApiException {
        ApiResponse<OnPageTasksReadyResponseInfo> localVarResp = tasksReadyWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with a list of completed tasks, which results haven’t been collected yet. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page-tasks_ready/?bash&#39;
     * @return ApiResponse&lt;OnPageTasksReadyResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageTasksReadyResponseInfo> tasksReadyWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tasksReadyValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OnPageTasksReadyResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌ The ‘Tasks Ready’ endpoint is designed to provide you with a list of completed tasks, which results haven’t been collected yet. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page-tasks_ready/?bash&#39;
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksReadyAsync(final ApiCallback<OnPageTasksReadyResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksReadyValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OnPageTasksReadyResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for waterfall
     * @param onPageWaterfallRequestInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waterfallCall(List<OnPageWaterfallRequestInfo> onPageWaterfallRequestInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = onPageWaterfallRequestInfo;

        // create path and map variables
        String localVarPath = "/v3/on_page/waterfall";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waterfallValidateBeforeCall(List<OnPageWaterfallRequestInfo> onPageWaterfallRequestInfo, final ApiCallback _callback) throws ApiException {
        return waterfallCall(onPageWaterfallRequestInfo, _callback);

    }

    /**
     * 
     * ‌‌ This endpoint is designed to provide you with the page speed insights. Using this function you can get detailed information about the page loading time, time to secure connection, the time it takes to load page resources, and so on. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/waterfall/?bash&#39;
     * @param onPageWaterfallRequestInfo  (optional)
     * @return OnPageWaterfallResponseInfo
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public OnPageWaterfallResponseInfo waterfall(List<OnPageWaterfallRequestInfo> onPageWaterfallRequestInfo) throws ApiException {
        ApiResponse<OnPageWaterfallResponseInfo> localVarResp = waterfallWithHttpInfo(onPageWaterfallRequestInfo);
        return localVarResp.getData();
    }

    /**
     * 
     * ‌‌ This endpoint is designed to provide you with the page speed insights. Using this function you can get detailed information about the page loading time, time to secure connection, the time it takes to load page resources, and so on. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/waterfall/?bash&#39;
     * @param onPageWaterfallRequestInfo  (optional)
     * @return ApiResponse&lt;OnPageWaterfallResponseInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OnPageWaterfallResponseInfo> waterfallWithHttpInfo(List<OnPageWaterfallRequestInfo> onPageWaterfallRequestInfo) throws ApiException {
        okhttp3.Call localVarCall = waterfallValidateBeforeCall(onPageWaterfallRequestInfo, null);
        Type localVarReturnType = new TypeToken<OnPageWaterfallResponseInfo>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * ‌‌ This endpoint is designed to provide you with the page speed insights. Using this function you can get detailed information about the page loading time, time to secure connection, the time it takes to load page resources, and so on. for more info please visit &#39;https://docs.dataforseo.com/v3/on_page/waterfall/?bash&#39;
     * @param onPageWaterfallRequestInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful operation </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call waterfallAsync(List<OnPageWaterfallRequestInfo> onPageWaterfallRequestInfo, final ApiCallback<OnPageWaterfallResponseInfo> _callback) throws ApiException {

        okhttp3.Call localVarCall = waterfallValidateBeforeCall(onPageWaterfallRequestInfo, _callback);
        Type localVarReturnType = new TypeToken<OnPageWaterfallResponseInfo>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
