/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.dataforseo.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.github.dataforseo.client.model.AppendixLighthouseOnPageDayStatisticsRatesData;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for AppendixOnPageDayStatisticsRatesData
 */
public class AppendixOnPageDayStatisticsRatesDataTest {
    private final AppendixOnPageDayStatisticsRatesData model = new AppendixOnPageDayStatisticsRatesData();

    /**
     * Model tests for AppendixOnPageDayStatisticsRatesData
     */
    @Test
    public void testAppendixOnPageDayStatisticsRatesData() {
        // TODO: test AppendixOnPageDayStatisticsRatesData
    }

    /**
     * Test the property 'taskPost'
     */
    @Test
    public void taskPostTest() {
        // TODO: test taskPost
    }

    /**
     * Test the property 'tasksReady'
     */
    @Test
    public void tasksReadyTest() {
        // TODO: test tasksReady
    }

    /**
     * Test the property 'summary'
     */
    @Test
    public void summaryTest() {
        // TODO: test summary
    }

    /**
     * Test the property 'resources'
     */
    @Test
    public void resourcesTest() {
        // TODO: test resources
    }

    /**
     * Test the property 'pages'
     */
    @Test
    public void pagesTest() {
        // TODO: test pages
    }

    /**
     * Test the property 'nonIndexable'
     */
    @Test
    public void nonIndexableTest() {
        // TODO: test nonIndexable
    }

    /**
     * Test the property 'duplicateTags'
     */
    @Test
    public void duplicateTagsTest() {
        // TODO: test duplicateTags
    }

    /**
     * Test the property 'links'
     */
    @Test
    public void linksTest() {
        // TODO: test links
    }

    /**
     * Test the property 'waterfall'
     */
    @Test
    public void waterfallTest() {
        // TODO: test waterfall
    }

    /**
     * Test the property 'errors'
     */
    @Test
    public void errorsTest() {
        // TODO: test errors
    }

    /**
     * Test the property 'pagesByResource'
     */
    @Test
    public void pagesByResourceTest() {
        // TODO: test pagesByResource
    }

    /**
     * Test the property 'duplicateContent'
     */
    @Test
    public void duplicateContentTest() {
        // TODO: test duplicateContent
    }

    /**
     * Test the property 'rawHtml'
     */
    @Test
    public void rawHtmlTest() {
        // TODO: test rawHtml
    }

    /**
     * Test the property 'instantPages'
     */
    @Test
    public void instantPagesTest() {
        // TODO: test instantPages
    }

    /**
     * Test the property 'redirectChains'
     */
    @Test
    public void redirectChainsTest() {
        // TODO: test redirectChains
    }

    /**
     * Test the property 'lighthouse'
     */
    @Test
    public void lighthouseTest() {
        // TODO: test lighthouse
    }

    /**
     * Test the property 'keywordDensity'
     */
    @Test
    public void keywordDensityTest() {
        // TODO: test keywordDensity
    }

    /**
     * Test the property 'pageScreenshot'
     */
    @Test
    public void pageScreenshotTest() {
        // TODO: test pageScreenshot
    }

    /**
     * Test the property 'contentParsing'
     */
    @Test
    public void contentParsingTest() {
        // TODO: test contentParsing
    }

    /**
     * Test the property 'contentParsingLive'
     */
    @Test
    public void contentParsingLiveTest() {
        // TODO: test contentParsingLive
    }

    /**
     * Test the property 'microdata'
     */
    @Test
    public void microdataTest() {
        // TODO: test microdata
    }

    /**
     * Test the property 'forceStop'
     */
    @Test
    public void forceStopTest() {
        // TODO: test forceStop
    }

    /**
     * Test the property 'availableFilters'
     */
    @Test
    public void availableFiltersTest() {
        // TODO: test availableFilters
    }

    /**
     * Test the property 'idList'
     */
    @Test
    public void idListTest() {
        // TODO: test idList
    }

}
