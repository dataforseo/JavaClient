/*
 * DataForSEO API documentation
 * DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.dataforseo.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for OnPageTaskRequestInfo
 */
public class OnPageTaskRequestInfoTest {
    private final OnPageTaskRequestInfo model = new OnPageTaskRequestInfo();

    /**
     * Model tests for OnPageTaskRequestInfo
     */
    @Test
    public void testOnPageTaskRequestInfo() {
        // TODO: test OnPageTaskRequestInfo
    }

    /**
     * Test the property 'target'
     */
    @Test
    public void targetTest() {
        // TODO: test target
    }

    /**
     * Test the property 'maxCrawlPages'
     */
    @Test
    public void maxCrawlPagesTest() {
        // TODO: test maxCrawlPages
    }

    /**
     * Test the property 'startUrl'
     */
    @Test
    public void startUrlTest() {
        // TODO: test startUrl
    }

    /**
     * Test the property 'forceSitewideChecks'
     */
    @Test
    public void forceSitewideChecksTest() {
        // TODO: test forceSitewideChecks
    }

    /**
     * Test the property 'priorityUrls'
     */
    @Test
    public void priorityUrlsTest() {
        // TODO: test priorityUrls
    }

    /**
     * Test the property 'maxCrawlDepth'
     */
    @Test
    public void maxCrawlDepthTest() {
        // TODO: test maxCrawlDepth
    }

    /**
     * Test the property 'crawlDelay'
     */
    @Test
    public void crawlDelayTest() {
        // TODO: test crawlDelay
    }

    /**
     * Test the property 'storeRawHtml'
     */
    @Test
    public void storeRawHtmlTest() {
        // TODO: test storeRawHtml
    }

    /**
     * Test the property 'enableContentParsing'
     */
    @Test
    public void enableContentParsingTest() {
        // TODO: test enableContentParsing
    }

    /**
     * Test the property 'supportCookies'
     */
    @Test
    public void supportCookiesTest() {
        // TODO: test supportCookies
    }

    /**
     * Test the property 'acceptLanguage'
     */
    @Test
    public void acceptLanguageTest() {
        // TODO: test acceptLanguage
    }

    /**
     * Test the property 'customRobotsTxt'
     */
    @Test
    public void customRobotsTxtTest() {
        // TODO: test customRobotsTxt
    }

    /**
     * Test the property 'robotsTxtMergeMode'
     */
    @Test
    public void robotsTxtMergeModeTest() {
        // TODO: test robotsTxtMergeMode
    }

    /**
     * Test the property 'customUserAgent'
     */
    @Test
    public void customUserAgentTest() {
        // TODO: test customUserAgent
    }

    /**
     * Test the property 'browserPreset'
     */
    @Test
    public void browserPresetTest() {
        // TODO: test browserPreset
    }

    /**
     * Test the property 'browserScreenWidth'
     */
    @Test
    public void browserScreenWidthTest() {
        // TODO: test browserScreenWidth
    }

    /**
     * Test the property 'browserScreenHeight'
     */
    @Test
    public void browserScreenHeightTest() {
        // TODO: test browserScreenHeight
    }

    /**
     * Test the property 'browserScreenScaleFactor'
     */
    @Test
    public void browserScreenScaleFactorTest() {
        // TODO: test browserScreenScaleFactor
    }

    /**
     * Test the property 'respectSitemap'
     */
    @Test
    public void respectSitemapTest() {
        // TODO: test respectSitemap
    }

    /**
     * Test the property 'customSitemap'
     */
    @Test
    public void customSitemapTest() {
        // TODO: test customSitemap
    }

    /**
     * Test the property 'crawlSitemapOnly'
     */
    @Test
    public void crawlSitemapOnlyTest() {
        // TODO: test crawlSitemapOnly
    }

    /**
     * Test the property 'loadResources'
     */
    @Test
    public void loadResourcesTest() {
        // TODO: test loadResources
    }

    /**
     * Test the property 'enableWwwRedirectCheck'
     */
    @Test
    public void enableWwwRedirectCheckTest() {
        // TODO: test enableWwwRedirectCheck
    }

    /**
     * Test the property 'enableJavascript'
     */
    @Test
    public void enableJavascriptTest() {
        // TODO: test enableJavascript
    }

    /**
     * Test the property 'enableXhr'
     */
    @Test
    public void enableXhrTest() {
        // TODO: test enableXhr
    }

    /**
     * Test the property 'enableBrowserRendering'
     */
    @Test
    public void enableBrowserRenderingTest() {
        // TODO: test enableBrowserRendering
    }

    /**
     * Test the property 'disableCookiePopup'
     */
    @Test
    public void disableCookiePopupTest() {
        // TODO: test disableCookiePopup
    }

    /**
     * Test the property 'customJs'
     */
    @Test
    public void customJsTest() {
        // TODO: test customJs
    }

    /**
     * Test the property 'validateMicromarkup'
     */
    @Test
    public void validateMicromarkupTest() {
        // TODO: test validateMicromarkup
    }

    /**
     * Test the property 'allowSubdomains'
     */
    @Test
    public void allowSubdomainsTest() {
        // TODO: test allowSubdomains
    }

    /**
     * Test the property 'allowedSubdomains'
     */
    @Test
    public void allowedSubdomainsTest() {
        // TODO: test allowedSubdomains
    }

    /**
     * Test the property 'disallowedSubdomains'
     */
    @Test
    public void disallowedSubdomainsTest() {
        // TODO: test disallowedSubdomains
    }

    /**
     * Test the property 'checkSpell'
     */
    @Test
    public void checkSpellTest() {
        // TODO: test checkSpell
    }

    /**
     * Test the property 'checkSpellLanguage'
     */
    @Test
    public void checkSpellLanguageTest() {
        // TODO: test checkSpellLanguage
    }

    /**
     * Test the property 'checkSpellExceptions'
     */
    @Test
    public void checkSpellExceptionsTest() {
        // TODO: test checkSpellExceptions
    }

    /**
     * Test the property 'calculateKeywordDensity'
     */
    @Test
    public void calculateKeywordDensityTest() {
        // TODO: test calculateKeywordDensity
    }

    /**
     * Test the property 'checksThreshold'
     */
    @Test
    public void checksThresholdTest() {
        // TODO: test checksThreshold
    }

    /**
     * Test the property 'disableSitewideChecks'
     */
    @Test
    public void disableSitewideChecksTest() {
        // TODO: test disableSitewideChecks
    }

    /**
     * Test the property 'disablePageChecks'
     */
    @Test
    public void disablePageChecksTest() {
        // TODO: test disablePageChecks
    }

    /**
     * Test the property 'switchPool'
     */
    @Test
    public void switchPoolTest() {
        // TODO: test switchPool
    }

    /**
     * Test the property 'returnDespiteTimeout'
     */
    @Test
    public void returnDespiteTimeoutTest() {
        // TODO: test returnDespiteTimeout
    }

    /**
     * Test the property 'tag'
     */
    @Test
    public void tagTest() {
        // TODO: test tag
    }

    /**
     * Test the property 'pingbackUrl'
     */
    @Test
    public void pingbackUrlTest() {
        // TODO: test pingbackUrl
    }

}
